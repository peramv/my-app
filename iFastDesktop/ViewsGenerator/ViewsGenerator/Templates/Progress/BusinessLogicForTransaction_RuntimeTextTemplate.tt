<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
/*
 * Procedure: <#= ViewFileName #>
 *
 * Purpose:
 * Business logic for transaction #<#= ViewId #> (<#= ViewItemName #>)
 *
 * Inputs:
 *
 * Outputs:
 *
 * Notes:
 * This routine is always invoke with the incoming transaction fields
 * already copied into the shared variable. Encoding and returning
 * a response is the responsibility of the calling progam. This
 * module only has to set the ResponseType output parameter and, of
 * course, the response fields.
 *
 * History:
 * ViewsGenerator: This file was generated by ViewsGenerator - Version <#= System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString() #>
 * ViewsGenerator: Generated on : <#= DateTime.Now.ToString(strDataTimeFormat) #>
 */

{VEWRTS.VAR}

{VEWRTSTX.VAR &TxnId = <#= ViewId #>}
{VEWRTSRX.VAR &RspId = <#= ViewId #>}

define output parameter ResponseType as integer initial ? no-undo.


&if "<#= ViewId #>" <> "1"
    and "<#= ViewId #>" <> "2"
    and "<#= ViewId #>" <> "39"
    and "<#= ViewId #>" <> "360"
&then

  {STARTUP.V new global}
  VewUser-id = user_id.

&endif


/*
 * Start
 */

pause 0 before-hide.


/*
 * Drag the business logic in
 *  - In a "repeat" to get an implicit transaction scope if required. The
 *    business logic include really should handle it's own transaction
 *    scoping so this is just insurance.
 */



BusinessLogic:
repeat:
    {VEWB<#= ViewId #>.I}

    leave BusinessLogic.
end.


/*
 * Write to SystemActivity Table if Track is yes
 */

    {VEWACTIV.I &TxnId = <#= ViewId #>}


/*
 * Done
 */

return.
