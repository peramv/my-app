<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
/*
 * Procedure: <#= ViewFileName #>
 *
 * Purpose:
 * SmartView servicing routine for transaction #<#= ViewId #> (<#= ViewItemName #>)
 *
 * Inputs:
 *
 * Outputs:
 *
 * Notes:
 * This routine is responsible for:
 *     - decode the transaction
 *     - invoking the business logic
 *     - encoding the appropriate response type
 *     - sending the response back to ZTS
 *
 * History:
 * ViewsGenerator: This file was generated by ViewsGenerator - Version <#= System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString() #>
 * ViewsGenerator: Generated on : <#= DateTime.Now.ToString(strDataTimeFormat) #>
<# if (indexOfHistoryCommentLastLine != -1 && indexOfFirstDefineInputLine != -1)
   {
	 for (int i = indexOfHistoryCommentLastLine + 2; i <= indexOfFirstDefineInputLine - 2; i++)
{#>
<#= lines[i] #>            
<#}
}
else
{#>
 */
<# } #>

define input        parameter pRequest  as longchar no-undo.
define output       parameter pResponse as longchar no-undo.


{LOGGER.IP}

{VEWZTS.VAR}

{VEWGUI.VAR}

{VEWZTSFUNC.I}

{VEWUSRSEC2.V NEW}

{VEWRTSTX.VAR &TxnId = <#= ViewId #> &Scope = new}
{VEWRTSRX.VAR &RspId = <#= ViewId #> &Scope = new}

define variable ResponseType as integer          no-undo.
define variable RespondedTo  as logical          no-undo.
define variable FieldCount   as integer init 2   no-undo.
define variable pResponseHdr as longchar         no-undo.
define variable pResponseTtl as longchar         no-undo.
define variable iCount2      as int              no-undo.
define variable iTotalRepeats   as int              no-undo.

/* Get next delimited fields - enter entry position */

<# 	int indexOfTransactionRepeatCountItem = -1;
	if (IsTransactionItemRepeatCountPresent())
	{
		indexOfTransactionRepeatCountItem = GetTransactionRepeatCountItemIndex();	
    }

	if (indexOfTransactionRepeatCountItem == -1)
    {
		for (int i = 0; i < transactionItemList.Count(); i++)
		{ #>
assign <#= transactionItemList[i].TransactionVariableName #> = getNext<#= GetTransactionTypeShortForm(transactionItemList[i].TransactionVariableTypeDeclaration) #>Fld(FieldCount,pRequest).
 FieldCount = FieldCount + 1.
<#      }
    } 
	else
	{ 
		for (int i = 0; i < transactionItemList.Count(); i++)
		{ 
			if (i < indexOfTransactionRepeatCountItem)
			{ #>
assign <#= transactionItemList[i].TransactionVariableName #> = getNext<#= GetTransactionTypeShortForm(transactionItemList[i].TransactionVariableTypeDeclaration) #>Fld(FieldCount,pRequest).
 FieldCount = FieldCount + 1.
<#      
			}
			else if (i == indexOfTransactionRepeatCountItem)
			{ #>
assign <#= transactionItemList[i].TransactionVariableName #> = getNext<#= GetTransactionTypeShortForm(transactionItemList[i].TransactionVariableTypeDeclaration) #>Fld(FieldCount,pRequest).
 FieldCount = FieldCount + 1.
do iCount = 1 to RepeatCount:
<#              i++;     
			}
			else
            { #>
   assign <#= transactionItemList[i].TransactionVariableName #>[iCount] = getNext<#= GetTransactionTypeShortForm(transactionItemList[i].TransactionVariableTypeDeclaration) #>Fld(FieldCount,pRequest).
    FieldCount = FieldCount + 1.
<#          }
        } #>
end.
<#    } #>


/*
 * Security Check
 */
SecurityLogic:
repeat:

   {VEWZTSTXCHK.I &TxnId = <#= ViewId #>}
   leave SecurityLogic.

end.

/*
if vReq_Fields <> FieldCount - 1 then
do:
   ErrorCode = 999.
   ResponseType = 1.
end.
*/


/*
 * Invoke the business logic
 */

etime(yes).
RespondedTo = no.

if ResponseType <> 1 then
do:
 
  iTotalRepeats = 0.

  DO iCount2 = 1 to vNum_Batch:
 
    assign
<# if (IsResponseItemMoreAvailablePresent())
   {#>
      MoreAvailable = NO
<# }            
   if (IsResponseItemRepeatCountPresent())
   {#>
      RepeatCount = 0
<# } #>
      pResponse = "".
  
    if ResponseType <> 1 then
      run VEWB<#= ViewId #>.P(output ResponseType).

    /*
     * Encode the response
     */

    RespondedTo = no.
   
    if ResponseType = 1 then
      run get-errordesc(ErrorCode, output ErrorDesc).

    if ResponseType = 2
    then do:

<# if (IsResponseItemMoreAvailablePresent())
   {#>
      if iCount2 = vNum_Batch or MoreAvailable = no then
      do: 
        pResponseHdr = "B".
        ChkHdrInt(TransactionID,"5",pResponseHdr).
        ChkHdrInt(ResponseID,"5",pResponseHdr).
        ChkHdrInt(ResponseType,"5",pResponseHdr).
        ChkHdrInt(PHandleID,"5",pResponseHdr).
        ChkHdrInt(PThreadID,"10",pResponseHdr).
        ChkHdrInt(InstanceID,"5",pResponseHdr).
   
        pResponseHdr = pResponseHdr +  chr(vDelimiter).
      end.
      if iCount2 = vNum_Batch or MoreAvailable = no then
      do: 
       ChkLog(MoreAvailable,pResponseHdr).
       ChkString(NextKey,pResponseHdr).
      end.

      do iCount = 1 to RepeatCount:
        iTotalRepeats = iTotalRepeats + 1.
<#     SplitResponseItemListIfThereAreRepeats();
	   CreateFilteredResponseItemList();
 for (int i = 0; i < filteredRepeatsResponseItemList.Count(); i++)
{#>
        Chk<#= GetResponseTypeShortForm(filteredRepeatsResponseItemList[i].ResponseVariableTypeDeclaration) #>(<#= filteredRepeatsResponseItemList[i].ResponseVariableName #>[iCount],pResponse).
<#}#>
      end. 
      if iCount2 = vNum_Batch or MoreAvailable = no then
      do: 
        RepeatCount = iTotalRepeats.  
        ChkInt(RepeatCount,pResponseHdr).
      end.
      RespondedTo = yes.
      if ResponseType = 1 then
        MoreAvailable = NO.
        
    end. /* if ResponseType = 2 */
      
    /* pResponse is used for Views with repeating do blocks */    
    if pResponse <> "" then    
      pResponseTtl = pResponseTtl + pResponse.

    if MoreAvailable = NO or iCount2 = vNum_Batch then 
    do:
      if pResponseTtl <> "" then
        pResponse = pResponseHdr + pResponseTtl.
      else
        pResponse = pResponseHdr.
      leave.
    end.
    

  end.  /* Do Num_Batch */

end. /* ResponseType <> 1 */

ViewTime = etime.
etime(yes).
    

<# } 
   else
   { #>           
      pResponseHdr = "B".
      ChkHdrInt(TransactionID,"5",pResponseHdr).
      ChkHdrInt(ResponseID,"5",pResponseHdr).
      ChkHdrInt(ResponseType,"5",pResponseHdr).
      ChkHdrInt(PHandleID,"5",pResponseHdr).
      ChkHdrInt(PThreadID,"10",pResponseHdr).
      ChkHdrInt(InstanceID,"5",pResponseHdr).
   
      pResponseHdr = pResponseHdr +  chr(vDelimiter).

<# if (IsResponseItemUpdateStatusPresent())
   {#>
      ChkLog(UpdateStatus,pResponseHdr).
<# } #>
           
<#     SplitResponseItemListIfThereAreRepeats();   
	   CreateFilteredResponseItemList();
 for (int i = 0; i < filteredResponseItemList.Count(); i++)
{#>
      Chk<#= GetResponseTypeShortForm(filteredResponseItemList[i].ResponseVariableTypeDeclaration) #>(<#= filteredResponseItemList[i].ResponseVariableName #>,pResponseHdr).
<#}#>

<# if (filteredRepeatsResponseItemList.Count() > 0)
   { #>
      ChkInt(RepeatCount,pResponseHdr).
      
      do iCount = 1 to RepeatCount:

<#    for (int i = 0; i < filteredRepeatsResponseItemList.Count(); i++)
      { #>
        Chk<#= GetResponseTypeShortForm(filteredRepeatsResponseItemList[i].ResponseVariableTypeDeclaration) #>(<#= filteredRepeatsResponseItemList[i].ResponseVariableName #>[iCount],pResponse).
<#    } #>
      end.          
<# } #>
                              
       /* pResponse is used for Views with repeating do blocks */    
      if pResponse <> "" then    
         pResponseTtl = pResponseTtl + pResponse.
      
      if  iCount2 = vNum_Batch then 
      do:
           if pResponseTtl <> "" then
             pResponse = pResponseHdr + pResponseTtl.
           else
             pResponse = pResponseHdr.
                
      end.                 
            
      RespondedTo = yes.
    end.
    
     
    

  end.  /* Do Num_Batch */

end. /* ResponseType <> 1 */

ViewTime = etime.
etime(yes).
    

<# } #>
/*
 * Any unknown response types cause a system error
*/
if  not RespondedTo then
do:

    if ErrorCode = 0 then ErrorCode = 153.
    run get-errordesc(ErrorCode, output ErrorDesc).

    pResponse = "B".
    ChkHdrInt(TransactionID,"5",pResponse).
    ChkHdrInt(ResponseID,"5",pResponse).
    ChkHdrInt(ResponseType,"5",pResponse).
    ChkHdrInt(PHandleID,"5",pResponse).
    ChkHdrInt(PThreadID,"10",pResponse).
    ChkHdrInt(InstanceID,"5",pResponse).
   
    pResponse = pResponse +  chr(vDelimiter).
    
    ChkInt(ErrorCode,pResponse).
    ChkString(ErrorDesc,pResponse).


end.

/*
 * Write to SystemActivity Table if Track is yes
 */ 

    {VEWACTIV.I &TxnId = <#= ViewId #>}



/* internal procedure */

procedure get-errordesc:

    {VEWERRDESC.I}

end procedure.

