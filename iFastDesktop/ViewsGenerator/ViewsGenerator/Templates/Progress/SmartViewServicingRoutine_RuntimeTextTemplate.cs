// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ViewsGenerator.Templates.Progress
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class SmartViewServicingRoutine_RuntimeTextTemplate : SmartViewServicingRoutine_RuntimeTextTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("/*\r\n * Procedure: ");
            
            #line 7 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewFileName));
            
            #line default
            #line hidden
            this.Write("\r\n *\r\n * Purpose:\r\n * SmartView servicing routine for transaction #");
            
            #line 10 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewId));
            
            #line default
            #line hidden
            this.Write(" (");
            
            #line 10 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewItemName));
            
            #line default
            #line hidden
            this.Write(@")
 *
 * Inputs:
 *
 * Outputs:
 *
 * Notes:
 * This routine is responsible for:
 *     - decode the transaction
 *     - invoking the business logic
 *     - encoding the appropriate response type
 *     - sending the response back to ZTS
 *
 * History:
 * ViewsGenerator: This file was generated by ViewsGenerator - Version ");
            
            #line 24 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n * ViewsGenerator: Generated on : ");
            
            #line 25 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString(strDataTimeFormat)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 26 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
 if (indexOfHistoryCommentLastLine != -1 && indexOfFirstDefineInputLine != -1)
   {
	 for (int i = indexOfHistoryCommentLastLine + 2; i <= indexOfFirstDefineInputLine - 2; i++)
{
            
            #line default
            #line hidden
            
            #line 30 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(lines[i]));
            
            #line default
            #line hidden
            this.Write("            \r\n");
            
            #line 31 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
}
}
else
{
            
            #line default
            #line hidden
            this.Write(" */\r\n");
            
            #line 36 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\ndefine input        parameter pRequest  as longchar no-undo.\r\ndefine output    " +
                    "   parameter pResponse as longchar no-undo.\r\n\r\n\r\n{LOGGER.IP}\r\n\r\n{VEWZTS.VAR}\r\n\r\n" +
                    "{VEWGUI.VAR}\r\n\r\n{VEWZTSFUNC.I}\r\n\r\n{VEWUSRSEC2.V NEW}\r\n\r\n{VEWRTSTX.VAR &TxnId = ");
            
            #line 52 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewId));
            
            #line default
            #line hidden
            this.Write(" &Scope = new}\r\n{VEWRTSRX.VAR &RspId = ");
            
            #line 53 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewId));
            
            #line default
            #line hidden
            this.Write(@" &Scope = new}

define variable ResponseType as integer          no-undo.
define variable RespondedTo  as logical          no-undo.
define variable FieldCount   as integer init 2   no-undo.
define variable pResponseHdr as longchar         no-undo.
define variable pResponseTtl as longchar         no-undo.
define variable iCount2      as int              no-undo.
define variable iTotalRepeats   as int              no-undo.

/* Get next delimited fields - enter entry position */

");
            
            #line 65 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
 	int indexOfTransactionRepeatCountItem = -1;
	if (IsTransactionItemRepeatCountPresent())
	{
		indexOfTransactionRepeatCountItem = GetTransactionRepeatCountItemIndex();	
    }

	if (indexOfTransactionRepeatCountItem == -1)
    {
		for (int i = 0; i < transactionItemList.Count(); i++)
		{ 
            
            #line default
            #line hidden
            this.Write("assign ");
            
            #line 75 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(transactionItemList[i].TransactionVariableName));
            
            #line default
            #line hidden
            this.Write(" = getNext");
            
            #line 75 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTransactionTypeShortForm(transactionItemList[i].TransactionVariableTypeDeclaration)));
            
            #line default
            #line hidden
            this.Write("Fld(FieldCount,pRequest).\r\n FieldCount = FieldCount + 1.\r\n");
            
            #line 77 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
      }
    } 
	else
	{ 
		for (int i = 0; i < transactionItemList.Count(); i++)
		{ 
			if (i < indexOfTransactionRepeatCountItem)
			{ 
            
            #line default
            #line hidden
            this.Write("assign ");
            
            #line 85 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(transactionItemList[i].TransactionVariableName));
            
            #line default
            #line hidden
            this.Write(" = getNext");
            
            #line 85 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTransactionTypeShortForm(transactionItemList[i].TransactionVariableTypeDeclaration)));
            
            #line default
            #line hidden
            this.Write("Fld(FieldCount,pRequest).\r\n FieldCount = FieldCount + 1.\r\n");
            
            #line 87 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
      
			}
			else if (i == indexOfTransactionRepeatCountItem)
			{ 
            
            #line default
            #line hidden
            this.Write("assign ");
            
            #line 91 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(transactionItemList[i].TransactionVariableName));
            
            #line default
            #line hidden
            this.Write(" = getNext");
            
            #line 91 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTransactionTypeShortForm(transactionItemList[i].TransactionVariableTypeDeclaration)));
            
            #line default
            #line hidden
            this.Write("Fld(FieldCount,pRequest).\r\n FieldCount = FieldCount + 1.\r\ndo iCount = 1 to Repeat" +
                    "Count:\r\n");
            
            #line 94 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
              i++;     
			}
			else
            { 
            
            #line default
            #line hidden
            this.Write("   assign ");
            
            #line 98 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(transactionItemList[i].TransactionVariableName));
            
            #line default
            #line hidden
            this.Write("[iCount] = getNext");
            
            #line 98 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTransactionTypeShortForm(transactionItemList[i].TransactionVariableTypeDeclaration)));
            
            #line default
            #line hidden
            this.Write("Fld(FieldCount,pRequest).\r\n    FieldCount = FieldCount + 1.\r\n");
            
            #line 100 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
          }
        } 
            
            #line default
            #line hidden
            this.Write("end.\r\n");
            
            #line 103 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
    } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n/*\r\n * Security Check\r\n */\r\nSecurityLogic:\r\nrepeat:\r\n\r\n   {VEWZTSTXCHK.I &Txn" +
                    "Id = ");
            
            #line 112 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewId));
            
            #line default
            #line hidden
            this.Write(@"}
   leave SecurityLogic.

end.

/*
if vReq_Fields <> FieldCount - 1 then
do:
   ErrorCode = 999.
   ResponseType = 1.
end.
*/


/*
 * Invoke the business logic
 */

etime(yes).
RespondedTo = no.

if ResponseType <> 1 then
do:
 
  iTotalRepeats = 0.

  DO iCount2 = 1 to vNum_Batch:
 
    assign
");
            
            #line 141 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
 if (IsResponseItemMoreAvailablePresent())
   {
            
            #line default
            #line hidden
            this.Write("      MoreAvailable = NO\r\n");
            
            #line 144 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
 }            
   if (IsResponseItemRepeatCountPresent())
   {
            
            #line default
            #line hidden
            this.Write("      RepeatCount = 0\r\n");
            
            #line 148 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("      pResponse = \"\".\r\n  \r\n    if ResponseType <> 1 then\r\n      run VEWB");
            
            #line 152 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewId));
            
            #line default
            #line hidden
            this.Write(".P(output ResponseType).\r\n\r\n    /*\r\n     * Encode the response\r\n     */\r\n\r\n    Re" +
                    "spondedTo = no.\r\n   \r\n    if ResponseType = 1 then\r\n      run get-errordesc(Erro" +
                    "rCode, output ErrorDesc).\r\n\r\n    if ResponseType = 2\r\n    then do:\r\n\r\n");
            
            #line 166 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
 if (IsResponseItemMoreAvailablePresent())
   {
            
            #line default
            #line hidden
            this.Write(@"      if iCount2 = vNum_Batch or MoreAvailable = no then
      do: 
        pResponseHdr = ""B"".
        ChkHdrInt(TransactionID,""5"",pResponseHdr).
        ChkHdrInt(ResponseID,""5"",pResponseHdr).
        ChkHdrInt(ResponseType,""5"",pResponseHdr).
        ChkHdrInt(PHandleID,""5"",pResponseHdr).
        ChkHdrInt(PThreadID,""10"",pResponseHdr).
        ChkHdrInt(InstanceID,""5"",pResponseHdr).
   
        pResponseHdr = pResponseHdr +  chr(vDelimiter).
      end.
      if iCount2 = vNum_Batch or MoreAvailable = no then
      do: 
       ChkLog(MoreAvailable,pResponseHdr).
       ChkString(NextKey,pResponseHdr).
      end.

      do iCount = 1 to RepeatCount:
        iTotalRepeats = iTotalRepeats + 1.
");
            
            #line 188 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
     SplitResponseItemListIfThereAreRepeats();
	   CreateFilteredResponseItemList();
 for (int i = 0; i < filteredRepeatsResponseItemList.Count(); i++)
{
            
            #line default
            #line hidden
            this.Write("        Chk");
            
            #line 192 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetResponseTypeShortForm(filteredRepeatsResponseItemList[i].ResponseVariableTypeDeclaration)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 192 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(filteredRepeatsResponseItemList[i].ResponseVariableName));
            
            #line default
            #line hidden
            this.Write("[iCount],pResponse).\r\n");
            
            #line 193 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write(@"      end. 
      if iCount2 = vNum_Batch or MoreAvailable = no then
      do: 
        RepeatCount = iTotalRepeats.  
        ChkInt(RepeatCount,pResponseHdr).
      end.
      RespondedTo = yes.
      if ResponseType = 1 then
        MoreAvailable = NO.
        
    end. /* if ResponseType = 2 */
      
    /* pResponse is used for Views with repeating do blocks */    
    if pResponse <> """" then    
      pResponseTtl = pResponseTtl + pResponse.

    if MoreAvailable = NO or iCount2 = vNum_Batch then 
    do:
      if pResponseTtl <> """" then
        pResponse = pResponseHdr + pResponseTtl.
      else
        pResponse = pResponseHdr.
      leave.
    end.
    

  end.  /* Do Num_Batch */

end. /* ResponseType <> 1 */

ViewTime = etime.
etime(yes).
    

");
            
            #line 228 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
 } 
   else
   { 
            
            #line default
            #line hidden
            this.Write(@"           
      pResponseHdr = ""B"".
      ChkHdrInt(TransactionID,""5"",pResponseHdr).
      ChkHdrInt(ResponseID,""5"",pResponseHdr).
      ChkHdrInt(ResponseType,""5"",pResponseHdr).
      ChkHdrInt(PHandleID,""5"",pResponseHdr).
      ChkHdrInt(PThreadID,""10"",pResponseHdr).
      ChkHdrInt(InstanceID,""5"",pResponseHdr).
   
      pResponseHdr = pResponseHdr +  chr(vDelimiter).

");
            
            #line 241 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
 if (IsResponseItemUpdateStatusPresent())
   {
            
            #line default
            #line hidden
            this.Write("      ChkLog(UpdateStatus,pResponseHdr).\r\n");
            
            #line 244 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("           \r\n");
            
            #line 246 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
     SplitResponseItemListIfThereAreRepeats();   
	   CreateFilteredResponseItemList();
 for (int i = 0; i < filteredResponseItemList.Count(); i++)
{
            
            #line default
            #line hidden
            this.Write("      Chk");
            
            #line 250 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetResponseTypeShortForm(filteredResponseItemList[i].ResponseVariableTypeDeclaration)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 250 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(filteredResponseItemList[i].ResponseVariableName));
            
            #line default
            #line hidden
            this.Write(",pResponseHdr).\r\n");
            
            #line 251 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 253 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
 if (filteredRepeatsResponseItemList.Count() > 0)
   { 
            
            #line default
            #line hidden
            this.Write("      ChkInt(RepeatCount,pResponseHdr).\r\n      \r\n      do iCount = 1 to RepeatCou" +
                    "nt:\r\n\r\n");
            
            #line 259 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
    for (int i = 0; i < filteredRepeatsResponseItemList.Count(); i++)
      { 
            
            #line default
            #line hidden
            this.Write("        Chk");
            
            #line 261 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetResponseTypeShortForm(filteredRepeatsResponseItemList[i].ResponseVariableTypeDeclaration)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 261 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(filteredRepeatsResponseItemList[i].ResponseVariableName));
            
            #line default
            #line hidden
            this.Write("[iCount],pResponse).\r\n");
            
            #line 262 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
    } 
            
            #line default
            #line hidden
            this.Write("      end.          \r\n");
            
            #line 264 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"                              
       /* pResponse is used for Views with repeating do blocks */    
      if pResponse <> """" then    
         pResponseTtl = pResponseTtl + pResponse.
      
      if  iCount2 = vNum_Batch then 
      do:
           if pResponseTtl <> """" then
             pResponse = pResponseHdr + pResponseTtl.
           else
             pResponse = pResponseHdr.
                
      end.                 
            
      RespondedTo = yes.
    end.
    
     
    

  end.  /* Do Num_Batch */

end. /* ResponseType <> 1 */

ViewTime = etime.
etime(yes).
    

");
            
            #line 293 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"/*
 * Any unknown response types cause a system error
*/
if  not RespondedTo then
do:

    if ErrorCode = 0 then ErrorCode = 153.
    run get-errordesc(ErrorCode, output ErrorDesc).

    pResponse = ""B"".
    ChkHdrInt(TransactionID,""5"",pResponse).
    ChkHdrInt(ResponseID,""5"",pResponse).
    ChkHdrInt(ResponseType,""5"",pResponse).
    ChkHdrInt(PHandleID,""5"",pResponse).
    ChkHdrInt(PThreadID,""10"",pResponse).
    ChkHdrInt(InstanceID,""5"",pResponse).
   
    pResponse = pResponse +  chr(vDelimiter).
    
    ChkInt(ErrorCode,pResponse).
    ChkString(ErrorDesc,pResponse).


end.

/*
 * Write to SystemActivity Table if Track is yes
 */ 

    {VEWACTIV.I &TxnId = ");
            
            #line 323 "E:\dev\iFastDesktop_v16.1\ViewsGenerator\ViewsGenerator\Templates\Progress\SmartViewServicingRoutine_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewId));
            
            #line default
            #line hidden
            this.Write("}\r\n\r\n\r\n\r\n/* internal procedure */\r\n\r\nprocedure get-errordesc:\r\n\r\n    {VEWERRDESC." +
                    "I}\r\n\r\nend procedure.\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class SmartViewServicingRoutine_RuntimeTextTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
