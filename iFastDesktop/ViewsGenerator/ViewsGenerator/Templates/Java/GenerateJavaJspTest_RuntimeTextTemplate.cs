// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ViewsGenerator.Templates.Java
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class GenerateJavaJspTest_RuntimeTextTemplate : GenerateJavaJspTest_RuntimeTextTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<%@ page import=\"java.util.*, java.text.*, java.lang.*, java.net.*, com.ifds.iFas" +
                    "t.api.*\" %>\r\n<HTML>\r\n<HEAD>\r\n  <TITLE>");
            
            #line 9 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewName));
            
            #line default
            #line hidden
            this.Write(@" - View </TITLE>
</HEAD>
<BODY>

    <%@ include file=""header.jsp"" %>

<%
        
    
    try
    {
        SimpleDateFormat dateFmt = new SimpleDateFormat(""dd/MM/yy"");
        dateFmt.setLenient(false);
        String receiveType = """";
        boolean receiveMore = false;
        int overrideRepeats = 0;
        ");
            
            #line 25 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewName));
            
            #line default
            #line hidden
            this.Write("View ifastView = null;\r\n\r\n%>        \r\n        \r\n        <%@ page session =\"true\" " +
                    "%>\r\n\r\n<%        \r\n        \r\n");
            
            #line 33 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
   CreateFilteredTransactionsItemList();
	 CreateFilteredResponseItemList();
	 CreateCharacterAndLogicalFieldList(); 
            
            #line default
            #line hidden
            this.Write(@"        if ( request.getParameter(""Receive_Type"") != null )
        {
            receiveType = request.getParameter(""Receive_Type"");
            if ( receiveType.equals(""Receive_Override"") && request.getParameter(""OverrideRepeats"") != null )
            {
                try 
                {
                    overrideRepeats = Integer.parseInt( request.getParameter(""OverrideRepeats"") );
                }
                catch( Exception e )
                {
                }
            }
        }
        
        if ( request.getParameter(""Receive_More"") != null && request.getParameter(""Receive_More"").equals(""Yes"") )
        {
            receiveMore = true;
        }

        if (receiveMore)
        {
            ifastView = (");
            
            #line 58 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewName));
            
            #line default
            #line hidden
            this.Write(@"View) session.getAttribute(""ifastView"");   
            if ( ifastView == null )
            {
                out.print(""<BR><STRONG>Unable to get Session back</STRONG></BR>"");
                out.print(""<BR><BR><A href=/ifast>Back to MainMenu</A>"");            
                return;
            }
        }
        else 
        {
            ifastView = new ");
            
            #line 68 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewName));
            
            #line default
            #line hidden
            this.Write("View();\r\n            \r\n            ");
            
            #line 70 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewName));
            
            #line default
            #line hidden
            this.Write("Request ifastReq =  ifastView.getRequest();\r\n  \r\n");
            
            #line 72 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
   for (int i = 0;  i < filteredTransactionItemList.Count(); i++)
	 { 
            
            #line default
            #line hidden
            this.Write("            if (request.getParameter(\"");
            
            #line 74 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(filteredTransactionItemList[i].TransactionVariableName));
            
            #line default
            #line hidden
            this.Write("_UnKnown\") != null && request.getParameter(\"");
            
            #line 74 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(filteredTransactionItemList[i].TransactionVariableName));
            
            #line default
            #line hidden
            this.Write("_UnKnown\").equals(\"Yes\") )\r\n            {\r\n\t        ifastReq.set");
            
            #line 76 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(filteredTransactionItemList[i].TransactionVariableName));
            
            #line default
            #line hidden
            this.Write("(null);\r\n            } \r\n            else \r\n            {\r\n\t        ifastReq.set");
            
            #line 80 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(filteredTransactionItemList[i].TransactionVariableName));
            
            #line default
            #line hidden
            this.Write("(  request.getParameter(\"");
            
            #line 80 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(filteredTransactionItemList[i].TransactionVariableName));
            
            #line default
            #line hidden
            this.Write("\")   );\r\n            }\r\n");
            
            #line 82 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
   } 
            
            #line default
            #line hidden
            this.Write("\r\n        }      \r\n        \r\n\r\n        out.print(\"<h2>");
            
            #line 87 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewName));
            
            #line default
            #line hidden
            this.Write(@" - Request run at : "" + (new Date()) + ""</h2>"");
        
        long startTime = System.currentTimeMillis();
        boolean receiveOK = false;
        if ( receiveType.equals(""Receive_All""))
            receiveOK = ifastView.receiveAll( host, port );
        else if ( receiveType.equals(""Receive_Override""))
            receiveOK = ifastView.receive( host, port, overrideRepeats );
        else
            receiveOK = ifastView.receive( host, port );

        long endTime = System.currentTimeMillis();
%>

    <BR>
    <BR>
    <h2>View Response Received after <%=(endTime - startTime)%> milliseconds </h2>
    <%@ include file=""errorresp.jsp"" %>
    

        
        <h3>Main Section</h3>
        <TABLE BORDER=""1"" >

");
            
            #line 111 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
 if (characterAndLogicalResponseFieldItemList.Count() > 0)
   { 
      for (int i = 0; i < characterAndLogicalResponseFieldItemList.Count(); i++)
	  { 
            
            #line default
            #line hidden
            this.Write("        <TR>\r\n          <TD><B>");
            
            #line 116 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(characterAndLogicalResponseFieldItemList[i].FieldName));
            
            #line default
            #line hidden
            this.Write("&nbsp;:&nbsp;&nbsp;</B></TD>\r\n          <TD>&nbsp;<%= ifastView.get");
            
            #line 117 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(characterAndLogicalResponseFieldItemList[i].FieldName));
            
            #line default
            #line hidden
            this.Write("() %></TD>\r\n        </TR>\r\n");
            
            #line 119 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
    } 
   }
            
            #line default
            #line hidden
            this.Write("        \r\n        </TABLE>\r\n      \r\n      \r\n");
            
            #line 125 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
 if (IsRepeatCountFieldPresent()) 
   { 
            
            #line default
            #line hidden
            this.Write("      <h3>Repeating Section</h3>\r\n      <TABLE BORDER=\"1\">\r\n\r\n      <TR>\r\n       " +
                    " <TD><STRONG>#</STRONG></TD>\r\n");
            
            #line 132 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
     for (int i = 0; i < filteredResponseFieldItemList.Count(); i++) 
       { 
            
            #line default
            #line hidden
            this.Write("        <TD><STRONG>");
            
            #line 134 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(filteredResponseFieldItemList[i].FieldName));
            
            #line default
            #line hidden
            this.Write("</STRONG></TD>\r\n");
            
            #line 135 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
     } 
            
            #line default
            #line hidden
            this.Write("      </TR>\r\n      <TR></TR>\r\n       \r\n    <%\r\n    for ( int i=0; i <ifastView.ge" +
                    "tRepeatCount(); i++ )\r\n    {\r\n    %>\r\n       \r\n      <TR>\r\n        <TD><%= i%></" +
                    "TD>\r\n");
            
            #line 146 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
     for (int i = 0; i < filteredResponseFieldItemList.Count(); i++) 
       { 
            
            #line default
            #line hidden
            this.Write("        <TD>&nbsp;<%= ifastView.get");
            
            #line 148 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(filteredResponseFieldItemList[i].FieldName));
            
            #line default
            #line hidden
            this.Write("(i)%></TD>\r\n");
            
            #line 149 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
     } 
            
            #line default
            #line hidden
            this.Write("      </TR>\r\n       \r\n    <%\r\n       \r\n    }\r\n    %>\r\n       \r\n      </TABLE>  \r\n" +
                    "");
            
            #line 158 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n<%\r\n    if (ifastView.isMoreAvailable())\r\n    {\r\n        session.setAttribute(\"" +
                    "ifastView\", ifastView);\r\n        if ( receiveType.equals(\"Receive_Override\") )\r\n" +
                    "        {\r\n           out.print(\"<BR><A href=");
            
            #line 166 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewName));
            
            #line default
            #line hidden
            this.Write(".jsp?Receive_More=Yes&Receive_Type=Receive_Override&OverrideRepeats=\" + overrideR" +
                    "epeats + \">ReceiveMore</A><BR><BR>\");\r\n        }\r\n        else\r\n        {\r\n     " +
                    "      out.print(\"<BR><A href=");
            
            #line 170 "E:\dev\views\ViewsGenerator\ViewsGenerator\Templates\Java\GenerateJavaJspTest_RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewName));
            
            #line default
            #line hidden
            this.Write(".jsp?Receive_More=Yes&Receive_Type=\" + receiveType + \">ReceiveMore</A><BR><BR>\");" +
                    "\r\n        }\r\n    }\r\n\r\n\r\n%>\r\n\r\n\r\n    <%@ include file=\"footer.jsp\" %>\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class GenerateJavaJspTest_RuntimeTextTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
