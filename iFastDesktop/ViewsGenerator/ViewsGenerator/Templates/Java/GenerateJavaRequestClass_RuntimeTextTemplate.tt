<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// **** GENERATED FILE, PLEASE DO NOT MODIFY ******
package com.ifds.iFast.api;

import java.util.Date;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import com.ifds.rts.*;

/**
 * Shareholder summary information request.
 * For additional view information see <A HREF="../../../../viewspecs/<#= ViewName #>.doc"><#= ViewName #>.doc</A>.
 * 
 * ViewsGenerator: This file was generated by ViewsGenerator - Version <#= System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString() #>
 * ViewsGenerator: Generated on : <#= DateTime.Now.ToString(strDataTimeFormat) #>
 */
public class <#= JavaClassName #> extends IFastRequest implements Serializable
{


<#  CreateFilteredTransactionsItemList();
	CreateFilteredSingleAndMultipleRecordResponseItemLists();
	CreateSingleAndMultipleRecordResponseItemLists();
	for (int i = 0; i < filteredSingleRecordTransactionItemList.Count(); i++)
	{ #>
   /**
    * <#= GetMemberVariableComment(filteredSingleRecordTransactionItemList[i].TransactionVariableName) #>
    */
   private <#= GetFieldType(filteredSingleRecordTransactionItemList[i].TransactionVariableName) #> _<#= filteredSingleRecordTransactionItemList[i].TransactionVariableName #> = <#= GetFieldDefaultValue(filteredSingleRecordTransactionItemList[i].TransactionVariableName) #>;
            
<#  }

	if (IsReqRepeatCountFieldPresent())
	{ 
#>    /**
    * Record count member variable.
    */
   private int _ReqRepeatCount = 0;

<#  } 

	for (int i = 0; i < filteredMultipleRecordTransactionItemList.Count(); i++)
	{ #>
   /**
    * <#= filteredMultipleRecordTransactionItemList[i].TransactionVariableName #>	member array.
    */
   private <#= GetFieldType(filteredMultipleRecordTransactionItemList[i].TransactionVariableName) #>[] _<#= filteredMultipleRecordTransactionItemList[i].TransactionVariableName #> = new <#= GetFieldType(filteredMultipleRecordTransactionItemList[i].TransactionVariableName) #>[<#= GetNumberOfRepeats(filteredMultipleRecordTransactionItemList[i].TransactionVariableName) #>];
            
<#  } #>
   /**
    * Constructs the <#= JavaClassName #> object.
    * 
    */
   <#= JavaClassName #>()
   {
      super ( <#= ViewId #> );
   }

   /**
    * Constructs the <#= JavaClassName #> object with the given host encoding.
    * 
    * @param hostEncoding
    *               character encoding for sending/receiving host data
    */
   <#= JavaClassName #>( String hostEncoding )
   {
      super ( <#= ViewId #>, hostEncoding );
   }

<# 	for (int i = 0; i < filteredTransactionItemList.Count(); i++)
	{ #>
   /**
<# if (IsMultipleRecordTransactionItem(filteredTransactionItemList[i].TransactionVariableName)) 
   { #>
    * Sets the <#= filteredTransactionItemList[i].TransactionVariableName #> field for the request and the given index.
    * 
    * @param index  Zero based index of the repeat for which the value will be set.
<# } else { #>
    * Sets the <#= filteredTransactionItemList[i].TransactionVariableName #> field for the request.
    * 
<# } #>
    * @param value  Value that the <#= filteredTransactionItemList[i].TransactionVariableName #> will be set to.
    */
   public final void set<#= filteredTransactionItemList[i].TransactionVariableName #>( <#= GetArrayIndexInputParameter(filteredTransactionItemList[i].TransactionVariableName) #><#= GetFieldType(filteredTransactionItemList[i].TransactionVariableName) #> value )
   {
<#    if (filteredTransactionItemList[i].TransactionVariableName != "ReqRepeatCount")
      { #>
      assertUnsent();
<#    } #>
      _<#= filteredTransactionItemList[i].TransactionVariableName #><#= GetArrayIndexBlock(filteredTransactionItemList[i].TransactionVariableName) #> = value;
   }
	
<#  } #>
   /**
    * Implements the abstract base method to encode
    * the host formatted request.
    * 
    * @param transaction
    *               Host formatted request object.
    */
   protected final void encodeFields( RTSRequestEncodeBuffer requestBuffer ) throws UnsupportedEncodingException
   {
<# 	for (int i = 0; i < singleRecordTransactionItemList.Count(); i++)
	{ #>
      <#= GetEncodedStringLine(singleRecordTransactionItemList[i].TransactionVariableName, false) #>;
<#  } 
 	if (IsReqRepeatCountFieldPresent())
	{ 
#>      requestBuffer.appendField( new Integer(_ReqRepeatCount) );  // add record count
      for ( int x = 0; x < _ReqRepeatCount; x++ )
      {
<# 	    for (int i = 0; i < filteredMultipleRecordTransactionItemList.Count(); i++)
	    { #>
         <#= GetEncodedStringLine(filteredMultipleRecordTransactionItemList[i].TransactionVariableName, true) #>;
<#      } 
#>      }
<#  } 
#>    }

}

