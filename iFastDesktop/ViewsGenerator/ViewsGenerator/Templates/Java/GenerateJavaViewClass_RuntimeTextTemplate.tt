<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

// **** GENERATED FILE, PLEASE DO NOT MODIFY ******
package com.ifds.iFast.api;

import java.util.Date;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import com.ifds.rts.*;

/**
 * Shareholder summary information view.
 * For additional view information see <A HREF="../../../../viewspecs/<#= ViewName #>.doc"><#= ViewName #>.doc</A>.
 * 
 * ViewsGenerator: This file was generated by ViewsGenerator - Version <#= System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString() #>
 * ViewsGenerator: Generated on : <#= DateTime.Now.ToString(strDataTimeFormat) #>
 */
public class <#= JavaClassName #> extends IFastView implements Serializable
{

<# 	CreateFilteredResponseItemList();
	CreateFilteredSingleAndMultipleRecordResponseItemLists();

	for (int i = 0; i < filteredSingleRecordResponseFieldItemList.Count(); i++)
	{ #>
   /**
    * <#= filteredSingleRecordResponseFieldItemList[i].FieldDescription #> member variable.
    */
   private <#= GetFieldType(filteredSingleRecordResponseFieldItemList[i].FieldName) #> _<#= filteredSingleRecordResponseFieldItemList[i].FieldName #> = null;
            
<#  }

	if (IsRepeatCountFieldPresent())
	{ #>
   private int _RepeatCount = 0;

<#  } 

	for (int i = 0; i < filteredMultipleRecordResponseFieldItemList.Count(); i++)
	{ #>
   /**
    * <#= filteredMultipleRecordResponseFieldItemList[i].FieldDescription #> member array.
    */
   private <#= GetFieldType(filteredMultipleRecordResponseFieldItemList[i].FieldName) #>[] _<#= filteredMultipleRecordResponseFieldItemList[i].FieldName #> = null;
            
<#  } #>
  
   /**
    * Constructs the <#= JavaClassName #> object.
    * 
    */
   public <#= JavaClassName #>()
   {
      super ( new <#= ViewName #>Request() );
   }

   /**
    * Constructs the <#= JavaClassName #> object with the given host encoding.
    * 
    * @param hostEncoding
    *               character encoding for sending/receiving host data
    */
   public <#= JavaClassName #>( String hostEncoding )
   {
      super ( new <#= ViewName #>Request( hostEncoding ) );
   }

   /**
    * Gets the <#= ViewName #>Request object associated with this view. Data is set
    * into this object before calling any of this view's receive
    * methods. An attempt to set request fields after the first receive will
    * result in a runtime exception.
    * 
    * @return The <#= ViewName #>Request object.
    */
   public final <#= ViewName #>Request getRequest()
   {
      return (<#= ViewName #>Request)getIFastRequest();
   }

<#	for (int i = 0; i < filteredSingleRecordResponseFieldItemList.Count(); i++)
	{ #>
   /**
    * Gets the <#= filteredSingleRecordResponseFieldItemList[i].FieldDescription #> field for the response. If the field has
    * no value, null is returned. 
    * 
    * @return The value of the <#= filteredSingleRecordResponseFieldItemList[i].FieldDescription #> or null.
    */
   public final <#= GetFieldType(filteredSingleRecordResponseFieldItemList[i].FieldName) #> get<#= filteredSingleRecordResponseFieldItemList[i].FieldName #>()
   {
      return _<#= filteredSingleRecordResponseFieldItemList[i].FieldName #>;
   }
    
   /**
    * Gets the <#= filteredSingleRecordResponseFieldItemList[i].FieldDescription #> field for the response. If the field has 
    * no value, the specified default value is returned.
    * 
    * @param defaultValue  The value to return if the field has no value.
    * @return The value of the <#= filteredSingleRecordResponseFieldItemList[i].FieldDescription #> or the specified default value.
    */
   public final <#= GetFieldPrimitiveType(filteredSingleRecordResponseFieldItemList[i].FieldName) #> get<#= filteredSingleRecordResponseFieldItemList[i].FieldName #>( <#= GetFieldPrimitiveType(filteredSingleRecordResponseFieldItemList[i].FieldName) #> defaultValue )
   {
      return _<#= filteredSingleRecordResponseFieldItemList[i].FieldName #> == null ? defaultValue : _<#= filteredSingleRecordResponseFieldItemList[i].FieldName #><#= GetFieldValueFunctionForFieldsWithPrimitiveType(filteredSingleRecordResponseFieldItemList[i].FieldName) #>;
   }
    
<#  } #>
<# 	if (IsRepeatCountFieldPresent())
	{ #>
   /**
    * Gets the Record Count for the repeatable response.
    * 
    * @return The number of records in the repeating fields.
    */
   public int getRecordCount()
   {
      return _RepeatCount;
   }

   /**
    * Gets the Record Count for the repeatable response.
    * 
    * @return The number of records in the repeating fields.
    */
   public final int getRepeatCount()
   {
      return _RepeatCount;
   }

   /**
    * Decodes the repeat count value from the host 
    * responses.
    * 
    * @param response Host formatted response object.
    * @exception ParseException
    */
   private final void decodeRepeatCount( RTSResponseDecodeBuffer responseBuffer ) throws ParseException, UnsupportedEncodingException
   {
      int receivedRecordCount = responseBuffer.decodeInteger(responseBuffer.getNextField()).intValue();
      _RepeatCount += receivedRecordCount;
   }

<#  } #>
<#	for (int i = 0; i < filteredMultipleRecordResponseFieldItemList.Count(); i++)
	{ #>
   /**
    * Gets the <#= filteredMultipleRecordResponseFieldItemList[i].FieldDescription #> field for the response and the 
    * given index. If the field has no value, null is returned. 
    * 
    * @param index  Zero based index of the repeat for which the value will be retrieved.
    * @return The value of the <#= filteredMultipleRecordResponseFieldItemList[i].FieldDescription #> or null.
    */
   public final <#= GetFieldType(filteredMultipleRecordResponseFieldItemList[i].FieldName) #> get<#= filteredMultipleRecordResponseFieldItemList[i].FieldName #>( int index )
   {
      return _<#= filteredMultipleRecordResponseFieldItemList[i].FieldName #>[index];
   }
    
   /**
    * Gets the <#= filteredMultipleRecordResponseFieldItemList[i].FieldDescription #> field for the response and the 
    * given index. If the field has no value, the specified default value is returned.
    * 
    * @param index         Zero based index of the repeat for which the value will be retrieved.
    * @param defaultValue  The value to return if the field has no value.
    * @return The value of the <#= filteredMultipleRecordResponseFieldItemList[i].FieldDescription #> or the specified default value.
    */
   public final <#= GetFieldPrimitiveType(filteredMultipleRecordResponseFieldItemList[i].FieldName) #> get<#= filteredMultipleRecordResponseFieldItemList[i].FieldName #>( int index, <#= GetFieldPrimitiveType(filteredMultipleRecordResponseFieldItemList[i].FieldName) #> defaultValue )
   {
      return _<#= filteredMultipleRecordResponseFieldItemList[i].FieldName #>[index] == null ? defaultValue : _<#= filteredMultipleRecordResponseFieldItemList[i].FieldName #>[index]<#= GetFieldValueFunctionForFieldsWithPrimitiveType(filteredMultipleRecordResponseFieldItemList[i].FieldName) #>;
   }
    
   /**
    * Gets the array of <#= filteredMultipleRecordResponseFieldItemList[i].FieldDescription #> fields for the response that
    * have been retrieved so far. Fields from records that have not yet been received,
    * will not present.
    * 
    * @return The array of <#= filteredMultipleRecordResponseFieldItemList[i].FieldDescription #> values.
    */
   public final <#= GetFieldType(filteredMultipleRecordResponseFieldItemList[i].FieldName) #>[] get<#= filteredMultipleRecordResponseFieldItemList[i].FieldName #>Array()
   {
      return _<#= filteredMultipleRecordResponseFieldItemList[i].FieldName #>;
   }
    
<#  } #>
   /**
    * Implements the abstract base method to decode
    * the host formatted response.
    * 
    * @param response Host formatted response object.
    * @exception ParseException
    */
   protected void decodeFields( RTSResponseDecodeBuffer responseBuffer ) throws ParseException, UnsupportedEncodingException
   {
      
      // single-record section
<# 	if (IsMoreAvailableFieldPresent())
	{ #>
      decodeMoreAvailableField( responseBuffer );
      decodeNextKeyField( responseBuffer );
<#  } #>
<#	for (int i = 0; i < filteredSingleRecordResponseFieldItemList.Count(); i++)
	{ #>
      _<#= filteredSingleRecordResponseFieldItemList[i].FieldName #> = responseBuffer.decode<#= GetFieldType(filteredSingleRecordResponseFieldItemList[i].FieldName) #>(responseBuffer.getNextField());
<#  } #>

<# 	if (IsRepeatCountFieldPresent())
	{ #>
      // multi-record section
      int oldRepeatCount = _RepeatCount;
      decodeRepeatCount( responseBuffer );
      
<#	for (int i = 0; i < filteredMultipleRecordResponseFieldItemList.Count(); i++)
	{ #>
      _<#= filteredMultipleRecordResponseFieldItemList[i].FieldName #> = resizeArray( _<#= filteredMultipleRecordResponseFieldItemList[i].FieldName #>, _RepeatCount );
<#  } #>

      for (int x = oldRepeatCount ; x < _RepeatCount; x++)
      {
<#	for (int i = 0; i < filteredMultipleRecordResponseFieldItemList.Count(); i++)
	    { #>
         _<#= filteredMultipleRecordResponseFieldItemList[i].FieldName #>[x] = responseBuffer.decode<#= GetFieldType(filteredMultipleRecordResponseFieldItemList[i].FieldName) #>(responseBuffer.getNextField());
<#      } #>
      }
<#  } #>

   }

}

