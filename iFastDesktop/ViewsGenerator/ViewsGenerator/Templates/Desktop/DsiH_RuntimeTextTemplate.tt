<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// BFDataImpl header file for DataSet <#= DataSetItemName.ReplaceFirst("_", ".") #>
// ViewsGenerator: This file was generated by ViewsGenerator - Version <#= System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString() #>
// ViewsGenerator: Generated on : <#= DateTime.Now.ToString(strDataTimeFormat) #>


#pragma once
#include <commonport.h>
#include <clientlocale.hpp>

#undef IFAST_DATAIMPL_LINKAGE
#ifdef IFAST_DATAIMPL_DLL
   #define IFAST_DATAIMPL_LINKAGE CLASS_EXPORT
#else
   #define IFAST_DATAIMPL_LINKAGE CLASS_IMPORT
#endif

namespace ifds
{
    //Field Externs
<# foreach (FieldItem fieldItem in fieldItemList)
{ #>
    extern const <#= fieldItem.FieldType #>Id <#= fieldItem.FieldName #>;
<# } #>

    //Property Externs
<# foreach (FieldItem fieldItem in fieldItemList)
{ #>
    extern const BFDataFieldProperties <#= fieldItem.FieldPropertiesName #>;
<# } #>
}


class dsi_<#= DataSetItemName #> : public BFDataImpl 
{
public:
    // Constructors
    dsi_<#= DataSetItemName #>();
    virtual ~dsi_<#= DataSetItemName #>();

    virtual BFDataImpl* clone();

    virtual BFDataField* getElement( const BFFieldId& id );
    virtual const BFDataField* getElement( const BFFieldId& id ) const;
    virtual BFDataField* getElementByIndex( unsigned int iField );
    virtual const BFDataField* getElementByIndex( unsigned int iField ) const;


    virtual unsigned long getLargestDefinedField( void ) const;
    virtual unsigned long getDefinedByteLength( void ) const;
    virtual bool exists( const BFFieldId& id ) const;
    static bool fieldExists( const BFFieldId& id );

private:
    BFDataField* aFlds_[<#= fieldItemList.Count #>];
    // Field Declarations
<# foreach (FieldItem fieldItem in fieldItemList)
{ #>
    <#= fieldItem.FieldDerivedType #> <#= fieldItem.FieldName #>_;
<# } #>
};
