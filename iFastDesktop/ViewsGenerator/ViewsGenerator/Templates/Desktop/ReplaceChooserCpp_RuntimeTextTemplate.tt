<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// BFSubstitution objects
// ViewsGenerator: This file was generated by ViewsGenerator - Version <#= System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString() #>
// ViewsGenerator: Generated on : <#= DateTime.Now.ToString(strDataTimeFormat) #>


#include "stdafx.h"
#include <commonport.h>
#include <clientlocale.hpp>

<# for (int i = indexOfIfdsNamespaceLine; i < indexOfReplaceStartLine; i++)
   { #>
<#= lines[i] #>            
<# } #>
<# for (int i = 0; i < substitutionSetItemList.Count(); i++)
{#>
   extern const BFSubstitutionSet SubSet_<#= substitutionSetItemList[i].SubstitutionSetId #>;
<# } #>
   const BFSubstitutionSet& chooser_ss_<#= substitutionSetItem.SubstitutionSetShortId #>( const ClientLocale& locale )
   {
<#  for (int i = 0; i < usedLanguagesInSetsChooser.Count(); i++)
    {
       List<SubstitutionSetItem> uniqueMarkets = GetSubstitutionSetsWithUniqueMarketsForGivenLanguage(usedLanguagesInSetsChooser[i]);
#>
      if ( locale.getLocale() == I_("<#= usedLanguagesInSetsChooser[i] #>") ) {
<#      for (int j = 0; j < uniqueMarkets.Count(); j++)
        {
            if (usedLanguagesInSetsChooser[i] == uniqueMarkets[j].Language && uniqueMarkets[j].MarketId != "")
            {
#>
         if ( locale.getMarketIndex() == <#= Convert.ToInt32(uniqueMarkets[j].MarketId) #> ) {
<#
                List<SubstitutionSetItem> uniqueClients = GetSubstitutionSetsWithUniqueClientsForGivenLanguageAndMarket(usedLanguagesInSetsChooser[i], uniqueMarkets[j].MarketId);
                for (int l = 0; l < uniqueClients.Count(); l++)
                {
#>
            if ( locale.getClientIndex() == <#= Convert.ToInt32(uniqueClients[l].ClientId) #> ) {
               return SubSet_<#= uniqueClients[l].SubstitutionSetId #>; // defined in <#= uniqueClients[l].FileName #>
            }
<#
                }
                if (GetDefaultSubstitutionSetItemForGivenLanguageAndMarket(usedLanguagesInSetsChooser[i], uniqueMarkets[j].MarketId) != null)
                {
#>
            return SubSet_<#= uniqueMarkets[j].SubstitutionSetId #>; // defined in <#= uniqueMarkets[j].FileName #>
<#
                } #>
         }
<#            }               
        }

        if (GetDefaultSubstitutionSetItemForGivenLanguage(usedLanguagesInSetsChooser[i]) != null)
        { #>
         return SubSet_<#= GetDefaultSubstitutionSetItemForGivenLanguage(usedLanguagesInSetsChooser[i]).SubstitutionSetId #>; // defined in <#= GetDefaultSubstitutionSetItemForGivenLanguage(usedLanguagesInSetsChooser[i]).FileName #>
<#      } #>
      }
<#  } 
	if (GetDefaultSubstitutionSetItemForGivenLanguage(usedLanguagesInSetsChooser[0]) != null)
    { #>
      return SubSet_<#= GetDefaultSubstitutionSetItemForGivenLanguage(usedLanguagesInSetsChooser[0]).SubstitutionSetId #>; // defined in <#= GetDefaultSubstitutionSetItemForGivenLanguage(usedLanguagesInSetsChooser[0]).FileName #>
<#  } #>
   }

<# FindRemainingLines();
   for (int i = startIndexLinesRest; i < linesRest.Count(); i++)
   {#>
<#= linesRest[i] #>            
<# }
#>

