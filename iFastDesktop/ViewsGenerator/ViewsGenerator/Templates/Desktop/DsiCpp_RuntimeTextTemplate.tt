<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// BFDataImpl implementation file for DataSet <#= DataSetItemName.ReplaceFirst("_", ".") #>
// ViewsGenerator: This file was generated by ViewsGenerator - Version <#= System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString() #>
// ViewsGenerator: Generated on : <#= DateTime.Now.ToString(strDataTimeFormat) #>


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "<#= HeaderDataSetFileName #>"


// This function creates an instance of dsi_<#= DataSetItemName #>
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_<#= DataSetItemName #>() { return new dsi_<#= DataSetItemName #>; }

dsi_<#= DataSetItemName #>::dsi_<#= DataSetItemName #>()
: BFDataImpl( <#= GetIdOfDataSet(DataSetItemName) #><#= GetRepeatsFileDataSetIdIfAvailable() != "" ? ", " + GetRepeatsFileDataSetIdIfAvailable() : "" #> )
<# foreach (FieldItem fieldItem in fieldItemList)
{ #>
, <#= fieldItem.FieldName #>_( ifds::<#= fieldItem.FieldName #>, &ifds::<#= fieldItem.FieldPropertiesName #> )
<# } #>
{
    cFields_ = <#= fieldItemList.Count #>;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_<#= DataSetItemName #>::~dsi_<#= DataSetItemName #>()
{
}

BFDataImpl* dsi_<#= DataSetItemName #>::clone()
{
    dsi_<#= DataSetItemName #>* p = new dsi_<#= DataSetItemName #>;
<# foreach (FieldItem fieldItem in fieldItemList)
{ #>
    p-><#= fieldItem.FieldName #>_ = <#= fieldItem.FieldName #>_;
<# } #>
    return(p);
}

BFDataField* dsi_<#= DataSetItemName #>::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
<# foreach (FieldItem fieldItem in fieldItemList)
{ #>
        case <#= fieldItem.FieldId #>: return ( &<#= fieldItem.FieldName #>_ ); break; // <#= fieldItem.FieldName #>
<# } #>
    }
    return( NULL );
}

const BFDataField* dsi_<#= DataSetItemName #>::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_<#= DataSetItemName #>* >(this) )->getElement( id ) );
}

BFDataField* dsi_<#= DataSetItemName #>::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < <#= fieldItemList.Count #> )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
<#  for (int i = 0; i < fieldItemList.Count; i++)
    { 
        FieldItem fieldItem = fieldItemList[i];
#>
                case <#= i #>: aFlds_[<#= i #>] = &<#= fieldItem.FieldName #>_; break;
<#    } #>
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_<#= DataSetItemName #>::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_<#= DataSetItemName #>* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_<#= DataSetItemName #>::getLargestDefinedField( void ) const
{
    return( <#= GetLargestDefinedField() #> );
}

unsigned long dsi_<#= DataSetItemName #>::getDefinedByteLength( void ) const
{
    return( <#= GetDefinedByteLength() #> * sizeof( I_CHAR ) );
}

bool dsi_<#= DataSetItemName #>::exists( const BFFieldId& id ) const
{
    return dsi_<#= DataSetItemName #>::fieldExists( id );
}

bool dsi_<#= DataSetItemName #>::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
<# foreach (FieldItem fieldItem in fieldItemList)
{ #>
        case <#= fieldItem.FieldId #>: return ( true );
<# } #>
    }
    return false;
}

