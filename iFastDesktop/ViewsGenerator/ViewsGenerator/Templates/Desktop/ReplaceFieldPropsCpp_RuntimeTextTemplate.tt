<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// Data Field Properties
// ViewsGenerator: This file was generated by ViewsGenerator - Version <#= System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString() #>
// ViewsGenerator: Generated on : <#= DateTime.Now.ToString(strDataTimeFormat) #>

#include "stdafx.h"
#include <bfdata/bfdataid.hpp>
#include "ifast_substitutions.h"
#include "ifast_masks.h"

<# for (int i = indexOfIfdsNamespaceLine; i <= indexOfPropertyDefinitionStartLine + 1; i++)
{#>
<#= lines[i] #>            
<#}
#>
   const DString& s_FldProp_<#= fieldItem.FieldName #>_s_DVF( const ClientLocale& locale )            
   {            
<# if (fieldPropertiesItem.GetNumberOfNonEmptyLabels() == 1) 
{#>      static const DString dstrDefValue_<#= fieldItem.FieldShortId #>_<#= fieldPropertiesItem.languageCountryIds[0] #>( I_("<#= fieldPropertiesItem.GetValueString(fieldPropertiesItem.languageCountryIds[0]) #>") );            
      return( dstrDefValue_<#= fieldItem.FieldShortId #>_<#= fieldPropertiesItem.languageCountryIds[0] #> );            
<#}
    else
    {
        for (int i = 0; i < fieldPropertiesItem.GetNumberOfNonEmptyLabels(); i++)
        {
#>      if( locale.getLocale() == I_("<#= modelDesktopInterface.GetLanguageCountryString(fieldPropertiesItem.languageCountryIds[i]) #>") ) {            
         static const DString dstrDefValue_<#= fieldItem.FieldShortId #>_<#= fieldPropertiesItem.languageCountryIds[i] #>( I_("<#= fieldPropertiesItem.GetValueString(fieldPropertiesItem.languageCountryIds[i]) #>") );            
         return( dstrDefValue_<#= fieldItem.FieldShortId #>_<#= fieldPropertiesItem.languageCountryIds[i] #> );            
      }
<#      }
#>      static const DString dstrDefValue_<#= fieldItem.FieldShortId #>_1( I_("<#= fieldPropertiesItem.GetValueString("1") #>") );            
      return( dstrDefValue_<#= fieldItem.FieldShortId #>_1 );            
<#      }#>
   }
<# if (!string.IsNullOrEmpty(fieldPropertiesItem.DefaultValueIntegerFunctionName) && fieldPropertiesItem.DefaultValueIntegerFunctionName != "NULL") 
{#>   DIINT64 s_FldProp_<#= fieldItem.FieldName #>_i_DVF( const ClientLocale& locale )
   {
<# if (fieldPropertiesItem.GetNumberOfNonEmptyLabels() == 1) 
{#>      return( <#= fieldPropertiesItem.GetValueInteger(fieldPropertiesItem.languageCountryIds[0]) #> );
<#}
    else
    {
        for (int i = 0; i < fieldPropertiesItem.GetNumberOfNonEmptyLabels(); i++)
        {
#>      if( locale.getLocale() == I_("<#= modelDesktopInterface.GetLanguageCountryString(fieldPropertiesItem.languageCountryIds[i]) #>") ) {            
         return( <#= fieldPropertiesItem.GetValueInteger(fieldPropertiesItem.languageCountryIds[i]) #> );            
      }            
<#      }#>
      return( 0 );            
  <#}#>
   }
<#}#>
<# if (!string.IsNullOrEmpty(fieldPropertiesItem.DefaultValueDoubleFunctionName) && fieldPropertiesItem.DefaultValueDoubleFunctionName != "NULL") 
{#>   double s_FldProp_<#= fieldItem.FieldName #>_d_DVF( const ClientLocale& locale )
   {
<# if (fieldPropertiesItem.GetNumberOfNonEmptyLabels() == 1) 
{#>      return( <#= fieldPropertiesItem.GetValueDouble(fieldPropertiesItem.languageCountryIds[0]) #> );
<#}
    else
    {
        for (int i = 0; i < fieldPropertiesItem.GetNumberOfNonEmptyLabels(); i++)
        {
#>      if( locale.getLocale() == I_("<#= modelDesktopInterface.GetLanguageCountryString(fieldPropertiesItem.languageCountryIds[i]) #>") ) {            
         return( <#= fieldPropertiesItem.GetValueDouble(fieldPropertiesItem.languageCountryIds[i]) #> );            
      }            
<#      }#>
      return( 0 );            
  <#}#>
   }
<#}#>
   const DString& s_FldProp_<#= fieldItem.FieldName #>_FLF( const ClientLocale& locale )            
   {            
<# if (fieldPropertiesItem.GetNumberOfNonEmptyLabels() == 1) 
{#>      static const DString dstrFldLabel_<#= fieldItem.FieldShortId #>_<#= fieldPropertiesItem.languageCountryIds[0] #>( I_("<#= fieldPropertiesItem.GetLabel(fieldPropertiesItem.languageCountryIds[0]) #>") );            
      return( dstrFldLabel_<#= fieldItem.FieldShortId #>_<#= fieldPropertiesItem.languageCountryIds[0] #> );            
<#}
    else
    {
        for (int i = 0; i < fieldPropertiesItem.GetNumberOfNonEmptyLabels(); i++)
        {
#>      if( locale.getLocale() == I_("<#= modelDesktopInterface.GetLanguageCountryString(fieldPropertiesItem.languageCountryIds[i]) #>") ) {            
         static const DString dstrFldLabel_<#= fieldItem.FieldShortId #>_<#= fieldPropertiesItem.languageCountryIds[i] #>( I_("<#= fieldPropertiesItem.GetLabel(fieldPropertiesItem.languageCountryIds[i]) #>") );            
         return( dstrFldLabel_<#= fieldItem.FieldShortId #>_<#= fieldPropertiesItem.languageCountryIds[i] #> );
      }            
<#      }
#>      static const DString dstrFldLabel_<#= fieldItem.FieldShortId #>_1( I_("<#= fieldPropertiesItem.GetLabel("1") #>") );            
      return( dstrFldLabel_<#= fieldItem.FieldShortId #>_1 );
<#      }#>
   } 
<# if (fieldPropertiesItem.Chooser_ss_function != "NULL") 
    {#>   PBF_SSC subset_super_chooser_2_<#= fieldItem.FieldShortId #>( const ClientLocale& locale )
   {
      return <#= fieldPropertiesItem.Chooser_ss_function #>; 
   }
<#}#>
   extern CLASS_EXPORT const BFDataFieldProperties s_FldProp_<#= fieldItem.FieldName #>(
       BFDataFieldProperties::Type::<#= fieldPropertiesItem.FieldType #> // field is <#= fieldPropertiesItem.FieldType #>
      ,<#= fieldItem.FieldName #> // fieldId
      ,<#= fieldPropertiesItem.FieldLength #> // length
      ,<#= fieldPropertiesItem.FieldMinimumLength #> // minimum length
      ,<#= fieldPropertiesItem.FieldDecimals #> // decimals
      ,<#= fieldPropertiesItem.MaskChooserFunction #> // mask chooser function
      ,<#= fieldPropertiesItem.DefaultValueStringFunctionName #> // default value (string)
      ,<#= fieldPropertiesItem.DefaultValueIntegerFunctionName #> // default value (integer)
      ,<#= fieldPropertiesItem.DefaultValueDoubleFunctionName #> // default value (double)
      ,<#= fieldPropertiesItem.LabelFunctionName #> // label
      ,<#= fieldPropertiesItem.FieldNameIsDeprecated #> // field name is deprecated
      ,<#= fieldPropertiesItem.AllowNulls #> // allow Nulls
      ,<#= fieldPropertiesItem.Justification #> // justification
      ,<#= fieldPropertiesItem.SubstitutionSetSuperChooser #> <#= fieldPropertiesItem.GetSubstitutionSetComment() #>
      );

<# for (int i = indexOfRemainingCodeNextLine - 1; i < lines.Count(); i++)
{#>
<#= lines[i] #>            
<#}
#>