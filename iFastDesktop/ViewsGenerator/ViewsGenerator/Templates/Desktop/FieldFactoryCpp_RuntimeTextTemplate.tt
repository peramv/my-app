<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// FieldIds
// ViewsGenerator: This file was generated by ViewsGenerator - Version <#= System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString() #>
// ViewsGenerator: Generated on : <#= DateTime.Now.ToString(strDataTimeFormat) #>

#include "stdafx.h"
#include <bfdata/bffieldid.hpp>
#include <bfdata/bfdataid.hpp>

<# for (int i = indexOfIfdsNamespaceLine; i <= indexOfLastFieldDeclarationLine - 1; i++)
{#>
<#= lines[i] #>            
<#}
#>
   extern const <#= fieldItem.FieldType #>Id <#= fieldItem.FieldName #>;
<# for (int i = indexOfLastFieldDeclarationLine; i <= indexOfLastPropertyDeclarationLine - 1; i++)
{#>
<#= lines[i] #>            
<#}
#>
   extern const BFDataFieldProperties <#= fieldItem.FieldPropertiesName #>;
<# for (int i = indexOfLastPropertyDeclarationLine; i < indexOfReturnFieldLine - 1; i++)
{#>
<#= lines[i] #>            
<#}
#>
         case <#= fieldItem.FieldId #>: pField = new <#= fieldItem.FieldDerivedType #>( <#= fieldItem.FieldName #>, &<#= fieldItem.FieldPropertiesName #> ); break; 
<# for (int i = indexOfReturnFieldLine - 1; i < lines.Count(); i++)
{#>
<#= lines[i] #>            
<#}
#>