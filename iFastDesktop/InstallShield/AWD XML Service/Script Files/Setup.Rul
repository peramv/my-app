

//===========================================================================
//
//  File Name:    Setup.rul
//
//  Description:  Blank setup main script file
//
//  Comments:     Blank setup is an empty setup project. If you want to
//		 		 		 		   create a new project via. step-by step instructions use the
//		 		 		 		   Project Assistant.
//
//===========================================================================

// Include header files

    #include "sdlang.h"
    #include "sddialog.h"
    #include "Ifx.h"


////////////////////// string defines ////////////////////////////

    #define UNINST_LOGFILE_NAME		"Uninst.isu"       
    
    // Values in the AWDKeIntergration.ini which will be written to.
    #define SECTION					"User Info"
	#define PORT_KEYNAME			"PortNum"
	#define	PORT_PORTVAL			"5000"
    #define IP_KEYNAME				"IpAddress"	
	#define	IP_PORTVAL				"ifds0829"
		 

//////////////////// installation declarations ///////////////////
	#define IDYES               6


// ----- DLL function prototypes -----


    // your DLL function prototypes


// ---- script function prototypes -----

    // generated by the Project Wizard
    prototype ShowDialogs();
    prototype MoveFileData();
    prototype HandleMoveDataError( NUMBER );
    prototype ProcessAfterDataMove();
    prototype CleanUpInstall();
    prototype SetupInstall();
    prototype SetupScreen();
    prototype CheckRequirements();
    prototype DialogShowSdWelcome();
    prototype DialogShowSdLicense();
    prototype DialogShowSdAskDestPath();
    prototype DialogShowSdFinishReboot();
    prototype DialogShowSdPortNumber();
    prototype DialogShowSdHostIPName();
    


    // your script function prototypes


    // ----- global variables ------

	BOOL	bWinNT, bIsShellExplorer, bInstallAborted, bIs32BitSetup, bServInstall;
    BOOL 	bInstallReflection, bInstallDSTCGUI;
    BOOL	bProduction;
    BOOL	bChooseReflection;
    
    STRING	svDir;
    STRING	svServPath;
    STRING	svPortNum;
    STRING	svHostIP;
    STRING	svInstalledPath;
    STRING	svProductName;
	STRING	svUnInstDispName;
	STRING	svFolderName;
	STRING	svHostName;
	STRING	svProductKey;
	
///////////////////////////////////////////////////////////////////////////////
//
//   MAIN PROGRAM
//
//      The setup begins here by hiding the visible setup
//      window.  This is done to allow all the titles, images, etc. to
//      be established before showing the main window.  The setup is
//      then performed in a series of calls to script defined functions,
//      with error checking at each step.
//
///////////////////////////////////////////////////////////////////////////////
program
    Disable( BACKGROUND );

    bServInstall=0;
    bInstallReflection=0;
    bInstallDSTCGUI=1;
    bProduction=FALSE;
    svPortNum="";
    svHostIP="";
    bChooseReflection = 1;
    
	CheckRequirements();

    SetupInstall();
    
    SetupScreen();

    if (ShowDialogs()<0) goto end_install;

    if (MoveFileData()<0) goto end_install;

    if (ProcessAfterDataMove()<0) goto end_install;

    if(bServInstall = 1)then
		 TARGETDIR=svServPath;
	endif;

    end_install:

   		if(bInstallReflection=TRUE)then
	 		 LaunchAppAndWait ("disk1\\setup.exe", "-s -q", WAIT);
	 		 Disable(STATUSOLD);
		endif;

    CleanUpInstall();

    // If an unrecoverable error occurred, clean up
    // the partial installation. Otherwise, exit normally.

    if (bInstallAborted) then
        abort;
    endif;

endprogram

///////////////////////////////////////////////////////////////////////////////
//
// Function:  ShowDialogs
//
//  Purpose:  This function manages the display and navigation of
//            the standard dialogs that exist in a setup.
//
///////////////////////////////////////////////////////////////////////////////
function ShowDialogs()
	NUMBER  nResult, nSize, nType, nvResult;
	STRING  szPath, szComponent, svResult;
	NUMBER  nDialogId;
	STRING  szMsg1;
begin

	Dlg_Start:
    // beginning of dialogs label

    Dlg_SdWelcome:
    nResult = DialogShowSdWelcome();
    if (nResult = BACK) goto Dlg_Start;

    Dlg_SdLicense:
    nResult = DialogShowSdLicense();
    if (nResult = BACK) goto Dlg_SdWelcome;

    Dlg_SdAskPath:
	nSize=-1;
	nType=REGDB_STRING;

    if( bServInstall = 0) then
		nResult = DialogShowSdAskDestPath();
    else
    	ComponentSelectItem ( MEDIA ,svProductName+"\\Shared DLLs", TRUE);
    	ComponentSelectItem ( MEDIA ,svProductName+"\\OCXs", TRUE);

		if(bChooseReflection = TRUE)then
		szComponent=@REFLECTION;
		ComponentSetData (MEDIA, szComponent, COMPONENT_FIELD_SELECTED, bInstallReflection, "");
    	endif;
    endif;

    if (nResult = BACK) goto Dlg_SdLicense;
		Dlg_SdEnterHostIPName:
		nResult = DialogShowSdHostIPName();

    if (nResult = BACK) then
		goto Dlg_SdAskPath;
    endif;

    Dlg_SdEnterPortNum:
    nResult = DialogShowSdPortNumber();
    if (nResult = BACK) goto Dlg_SdEnterHostIPName;
  
	return 0;

end;

     
///////////////////////////////////////////////////////////////////////////////
//
//  Function:  MoveFileData
//
//  Purpose:  This function handles the file transfer for
//            the setup.
//
///////////////////////////////////////////////////////////////////////////////
function MoveFileData()
    NUMBER nResult, nDisk;  
    

begin

    nDisk = 1;
    SetStatusWindow( 0, "" );
    Disable( DIALOGCACHE );
    Enable( STATUS );
    StatusUpdate( ON, 100 );
    nResult = ComponentMoveData( MEDIA, nDisk, 0 );
    HandleMoveDataError( nResult );
    Disable( STATUS );
    return nResult;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: HandleMoveDataError
//
//  Purpose: This function handles the error (if any) during the file transfer
//           operation.
//
///////////////////////////////////////////////////////////////////////////////
function HandleMoveDataError( nResult )
    STRING szErrMsg, svComponent , svFileGroup , svFile;

begin

    svComponent = "";
    svFileGroup = "";
    svFile = "";

    switch (nResult)
        case 0:
            return 0;
        default:
            ComponentError ( MEDIA , svComponent , svFileGroup , svFile , nResult );
            szErrMsg = @ERROR_MOVEDATA  + "\n\n" +
                @ERROR_COMPONENT + " " + svComponent + "\n" +
                @ERROR_FILEGROUP + " " + svFileGroup + "\n" +
                @ERROR_FILE      + " " + svFile;
            SprintfBox( SEVERE, @TITLE_CAPTIONBAR, szErrMsg, nResult );
            bInstallAborted = TRUE;
            return nResult;
    endswitch;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessAfterDataMove
//
//  Purpose: This function performs any necessary operations needed after
//           all files have been transferred.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessAfterDataMove()
    STRING szReferenceFile;
	STRING szTARGETDIR;

begin
    
    szTARGETDIR = TARGETDIR;
  
    // TO DO : update self-registered files and other processes that
    //        should be performed after the files have been transferred.

    // DeinstallSetReference specifies a file to be checked before
    // uninstallation. If the file is in use, uninstallation will not proceed.

    szReferenceFile = svDir ^ svProductKey; // TO DO : If your file is in a
                                            // subfolder of svDir add that here
    DeinstallSetReference( szReferenceFile );
    Enable(LOGGING);
                            
	//Writes user input to AWDKeIntergration.ini for Port.
    ReplaceProfString ( szTARGETDIR+"\\AWDKeIntergration.ini", SECTION, PORT_KEYNAME, PORT_PORTVAL, svPortNum /*PORT_testPortNum*/ );
  	//Writes user input to AWDKeIntergration.ini for IP Address.
    ReplaceProfString ( szTARGETDIR+"\\AWDKeIntergration.ini", SECTION, IP_KEYNAME, IP_PORTVAL, svHostIP);         
    
    return 0;
end;

   
///////////////////////////////////////////////////////////////////////////////
//
// Function: CleanUpInstall
//
//  Purpose: This cleans up the setup.  Anything that should
//           be released or deleted at the end of the setup should
//           be done here.
//
///////////////////////////////////////////////////////////////////////////////
function CleanUpInstall()

begin

    if (bInstallAborted) then
        return 0;
    endif;

    DialogShowSdFinishReboot();
    //RebootDialog("", "", SYS_BOOTWIN);

    if (BATCH_INSTALL) then // ensure locked files are properly transferred
        CommitSharedFiles(0);
    endif;

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupInstall
//
//  Purpose: This will initialize the setup.  Any general initialization
//           needed for the installation should be performed here.
//
///////////////////////////////////////////////////////////////////////////////
function SetupInstall()

begin

    Enable( CORECOMPONENTHANDLING );
	bInstallAborted = FALSE;

    //  Create list of end user selections to be displayed by DialogShowSdStartCopy()  //
    if (bIs32BitSetup) then
        svDir = PROGRAMFILES ^ @COMPANY_NAME ^ @PRODUCT_NAME;
    else
        svDir = PROGRAMFILES ^ @COMPANY_NAME16 ^ @PRODUCT_NAME16; // use short names
    endif;

    TARGETDIR  = svDir;

    SdProductName( @PRODUCT_NAME );

    Enable( DIALOGCACHE );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  SetupScreen
//
//  Purpose:  This function establishes the screen look.  This includes
//            colors, fonts, and text to be displayed.
//
///////////////////////////////////////////////////////////////////////////////
function SetupScreen()

begin

    Enable( FULLWINDOWMODE );
    Enable( INDVFILESTATUS );
    SetTitle( @TITLE_MAIN, 24, WHITE );

	// Caption bar text.
    SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION ); 

    Enable( BACKGROUND );

    Delay( 1 );
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  CheckRequirements
//
//  Purpose:  This function checks all minimum requirements for the
//            application being installed.  If any fail, then the user
//            is informed and the setup is terminated.
//
///////////////////////////////////////////////////////////////////////////////
function CheckRequirements()
    NUMBER  nvDx, nvDy, nvResult;
    STRING  svResult, szData;

begin

    bWinNT           = FALSE;
    bIsShellExplorer = FALSE;

    // Check screen resolution.
    GetExtents( nvDx, nvDy );

    if (nvDy < 480) then
        MessageBox( @ERROR_VGARESOLUTION, WARNING );
        abort;
    endif;

    // set 'setup' operation mode
    bIs32BitSetup = TRUE;
    GetSystemInfo( ISTYPE, nvResult, svResult );
    if (nvResult = 16) then
        bIs32BitSetup = FALSE; // running 16-bit setup
        return 0; // no additional information required
    endif;

    // --- 32-bit testing after this point ---

    // Determine the target system's operating system.
    GetSystemInfo( OS, nvResult, svResult );

	if (nvResult =  IS_WINDOWSNT) then
        // Running Windows NT.
        bWinNT = TRUE;

		if(Is(USER_ADMINISTRATOR,szData)==FALSE) then
			MessageBox( "You must have the Administrator privileges to install "+@PRODUCT_NAME+".\n\nThe installation will be aborted.", SEVERE );
		 	abort;
		endif;
        // Check to see if the shell being used is EXPLORER shell.
        if (GetSystemInfo( OSMAJOR, nvResult, svResult ) = 0) then
            if (nvResult >= 4) then
            	bIsShellExplorer = TRUE;
            endif;
        endif;

	elseif (nvResult = IS_WINDOWS95 ) then
        bIsShellExplorer = TRUE;
 	endif;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdWelcome
//
//  Purpose: This function handles the standard welcome dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdWelcome()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "AWD XML Mailing Service Component";
    szMsg   = "";
    nResult = SdWelcome( szTitle, szMsg );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdLicense
//
//  Purpose: This function displays the license agreement dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdLicense()
    NUMBER nResult;
    STRING szTitle, szMsg, szQuestion, szLicenseFile;

begin

    szLicenseFile = "license.txt";
    szTitle    = "";
    szMsg      = "";
    szQuestion = "";
    nResult    = SdLicense( szTitle, szMsg, szQuestion, szLicenseFile );

    return nResult;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdAskDestPath
//
//  Purpose: This function asks the user for the destination folder.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdAskDestPath()
    NUMBER nResult, nSize, nType;
    STRING szTitle, szMsg, szPath, sz1,sz2;

begin

    szTitle = "Choose Destination Location for "+svProductName;
    szMsg = "";
	nType=REGDB_STRING;

	if( svInstalledPath!="")then
 		svDir = svInstalledPath;
 		sz1   = "A previous installation has been found in "+svInstalledPath+".\n\nContinue to install may render that version unusable from this computer.\n\n";
 		sz2	  = "If that version was installed locally, we suggest that you uninstall that version from Control Panel before you install this version.";
 		szMsg =sz1+sz2;
	else
		if ( bProduction = FALSE )then
			svDir=@AWD_FILE_SETUP_PATH;
		//else
			//svDir=@DSTCGUI_DEFAULT_PATH;
		endif;
	endif;

    nResult = SdAskDestPath( szTitle, szMsg, svDir, 0 );
    StrRemoveLastSlash(svDir);
    TARGETDIR = svDir;
    
    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdFinishReboot
//
//  Purpose: This function will show the last dialog of the product.
//           It will allow the user to reboot and/or show some readme text.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdFinishReboot()
    NUMBER nResult, nDefOptions;
    STRING szTitle, szMsg, szMsg2, szOption1, szOption2;
    NUMBER bOpt1, bOpt2;



begin

    szTitle = "AWD XML Mailing Service Component";
 	szMsg	= "Installation of "+szTitle+" is complete.";
	MessageBox( szMsg, INFORMATION/*"Please enter the location where "+svProductName+" was installed.", SEVERE  */);
/*
    if (!BATCH_INSTALL) then
        bOpt1 = FALSE;
        bOpt2 = FALSE;
        szMsg1 = "";
        szMsg2 = "";
        szOption1 = "";
        szOption2 = "";
        nResult = SdFinish( szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2 );
        return 0;
    endif;

    nDefOptions = SYS_BOOTMACHINE;
    szTitle     = "";
    szMsg1      = "";
    szMsg2      = "";
    nResult     = SdFinishReboot( szTitle, szMsg1, nDefOptions, szMsg2, 0 );
  */
    return nResult;
end;
             

///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdPortNumber
//
//  Purpose: This function displays the PortNumber dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdPortNumber()
    NUMBER nResult;
    STRING szMsg, szPortNum, tmp, szValue, szRefKey;
    NUMBER nvType, nvSize;   
    
 

begin

	szMsg	  = "Please enter port number:";
	szPortNum =svPortNum;

	label:
   	nResult   = AskText(  szMsg, szPortNum, tmp );
    nvType    = REGDB_STRING;
    nvSize 	  = -1;
       
    if(  nResult = NEXT  )then
		svPortNum = tmp;
	endif;
 
 	if( nResult = NEXT && svPortNum = "")then
  		MessageBox( "Please enter port number.", SEVERE );
		goto label;
	endif;
        
    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdHostIPName
//
//  Purpose: This function displays the HostIP dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdHostIPName()
    NUMBER  nResult;
    STRING  szMsg, szHostIP, tmp;
    NUMBER  nvSize;

begin

	szMsg      = "Please enter an IP address:";
	szHostIP = svHostIP;

	label:
	nResult    = AskText(  szMsg, szHostIP, tmp );
	nvSize = -1;

	if( nResult = NEXT )then
		svHostIP = tmp;
	endif;

 	if( nResult = NEXT && svHostIP = "")then
 		MessageBox( "Please enter an IP address.", SEVERE );
 		goto label;
 	endif;

	return nResult;
end;

// --- include script file section ---
#include "sddialog.rul"                                  