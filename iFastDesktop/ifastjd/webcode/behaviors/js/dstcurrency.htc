<!-- ---------------------------------------------------------------------
//
//  FILE        : dstcurrency.htc
//
//  DESCRIPTION : This behavior allows the web author to format user input
//                into a currency format.
//
//  PROPERTIES  :
//
//
//
//  METHODS     :
//
//   disable - disables or enables the control
//
//  EVENTS      :
//
//
//  COPYRIGHT   :
//
//   The computer systems, procedures, data bases and programs
//   created and maintained by DST Systems, Inc., are proprietary
//   in nature and as such are confidential.  Any unauthorized
//   use or disclosure of such information may result in civil
//   liabilities.
//
//   Copyright© 2004 by DST Systems, Inc.
//   All rights reserved.
//
//-------------------------------------------------------------------- -->
<public:property name="realValue" get="getRealValue" put="setRealValue" value=""/>
<public:property name="maxValue" value=0.00 />
<public:property name="minValue" value=0.00 />

<public:method name="disable" />

<public:event name="onerror" ID=errorID />

<public:attach event="oncontentready"  onevent="init();" />

<script language="jscript">

var _realValue="";
var _keyPressed=false;

String.prototype.trim = function()
{
	return this.replace(/(^\s*)|(\s*$)/g, "");
}

function init()
{
	if(element.tagName.toLowerCase()=='input')
	{
		formatValue();
		element.style.textAlign="right";
		element.attachEvent("onpropertychange", onPropChange);
		element.attachEvent("onreadystatechange", InputBlur);
		element.attachEvent("onkeypress", onKeyPress);
		element.attachEvent("onkeydown", onKeyDown);
		element.attachEvent("onfocus", InputFocus);
		element.attachEvent("onblur", InputBlur);

		disable(element.disabled);
		readOnly(element.readOnly);
	}
	else
	{
		ReturnError("3000","Error: DSTCurrency not attached to a input element");
	}
}

function onPropChange(e)
{
	var propertyName=e.propertyName.toLowerCase();

	if(propertyName=="readonly")
	{
		readOnly(element.readOnly);
	}
	else if(propertyName=="value")
	{
		if(!_keyPressed)
		{
			formatValue();
		}
	}
}

function InputFocus(e)
{
	e.srcElement.select();
}

function InputBlur(e) 
{
	_keyPressed=false;
	formatValue();
}

function onKeyPress(e)
{
	_keyPressed=true;
	if(e.keyCode==13) return true;
	var temp=String.fromCharCode(e.keyCode);
	if (null!=temp&&""<temp)
	{
		// checks for a digit, "$" and "."
		return temp.match(/[/\d\$.]/)!=null;
	}
	else
	{
		return true;
	}
}

function onKeyDown(e)
{
	_keyPressed=true;
}

function getRealValue()
{
	formatValue();
	return _realValue;
}

function setRealValue(realValue)
{
	element.value=realValue;
	formatValue();
}

function formatValue()
{
	var sValue=element.value;
	sValue=sValue.trim();

	if(sValue.length==0) 
	{
		_realValue="";
		return;
	}

	// dollar sign without a dollar amount is considered to be an invalid entry
	if("$"==sValue.trim())
	{
		ReturnError("4000","Not a valid amount");
		return;
	}

	// strip leading dollar sign if found
	if("$"==sValue.charAt(0))
	{
		sValue=sValue.substring(1,sValue.length);
	}

	if(0<=sValue.indexOf("$"))
	{
		ReturnError("4005","Only one dollar sign is permitted");
		return;
	}

	sValue=sValue.replace(/,/g,"");

	// check for valid number (no alpha chars and at most one decimal point)
	if(isNaN(sValue))
	{
		ReturnError("4020","Not a valid amount");
		return;
	}

	//
	// Fill in zeros (if necessary) to show two digits to the right 
	// of the decimal
	//
	if(-1==sValue.indexOf("."))
	{
		sValue=sValue+".00";
	}
	else
	{
		if(sValue.indexOf(".")==sValue.length-1)
		{
			sValue=sValue+"00";
		}
		else if(sValue.indexOf(".")==sValue.length-2)
		{
			sValue=sValue+"0";
		}
		else if(sValue.indexOf(".")<sValue.length-3)
		{
			ReturnError("4025","Only two digits allowed to the right of the decimal");
			return;
		}
	}

	if(parseFloat(sValue)<parseFloat(minValue))
	{
		ReturnError("4030","Amount cannot be below "+minValue);
	}

	if(parseFloat(maxValue)>0&&parseFloat(sValue)>parseFloat(maxValue))
	{
		ReturnError("4035","Amount cannot exceed "+maxValue);
	}

	_realValue=sValue;

	//  Add commas if necessary
	var decimalIndex = sValue.indexOf(".");
	integerCount = 0;
	if(3<decimalIndex)
	{
		decimalIndex--;
		tmpSvalue="";
		for(x=decimalIndex;x>=0;x--)
		{
			var char = sValue.charAt(x);
			if(3==integerCount)
			{
				tmpSvalue=char+","+tmpSvalue;
				// Set it to one because we are prefixing char to the tmpSvalue
				integerCount=1;
			}
			else
			{
				tmpSvalue=char+tmpSvalue;
				integerCount++;
			}
		}
		sValue = tmpSvalue+sValue.substring(decimalIndex+1);
	}
	
	if(element.value!="$"+sValue)
	{
		_keyPressed=false;
		element.value="$"+sValue;
	}
}

function ReturnError(code,message)
{
	var oEvent=createEventObject();
	oEvent.code=code;
	oEvent.message=message;
	errorID.fire(oEvent);
}

function disable(disabled)
{
	element.disabled=isTrue(disabled);

	if(isTrue(disabled))
	{
		element.readOnly=false;
		element.style.backgroundColor="rgb(236,233,216)";
		element.style.border="1px solid rgb(201,199,186)";
	}
	else
	{
		if(isTrue(element.readOnly))
		{
			readOnly(element.readOnly);
		}
		else
		{
			element.style.backgroundColor="";
			element.style.border="1px solid black";
		}
	}
}

function readOnly(readOnly)
{
	element.readOnly=isTrue(readOnly);

	if(isTrue(readOnly))
	{
		element.disabled=false;
		element.style.backgroundColor="rgb(236,233,216)";
		element.style.border="1px solid black";
	}
	else
	{
		if(isTrue(element.disabled))
		{
			disable(element.disabled);
		}
		else
		{
			element.style.backgroundColor="";
			element.style.border="1px solid black";
		}
	}
}

function isTrue(vValue)
{
	
	var temp=vValue.toString().toLowerCase();
	return temp=="true";
}
</script>

