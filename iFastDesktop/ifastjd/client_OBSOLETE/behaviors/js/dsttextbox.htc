<!-- ---------------------------------------------------------------------
//
//  FILE        : dsttextbox.htc
//
//  DESCRIPTION : This behavior allows the web author to format user input
//                into a text format.
//
//  PROPERTIES  :
//
//   characterCasing -	Determines the case of a string value. (lower, normal or upper)
//
//
//  METHODS     :
//
//   disable - disables or enables the control
//
//  EVENTS      :
//
//
//  COPYRIGHT   :
//
//   The computer systems, procedures, data bases and programs
//   created and maintained by DST Systems, Inc., are proprietary
//   in nature and as such are confidential.  Any unauthorized
//   use or disclosure of such information may result in civil
//   liabilities.
//
//   Copyright© 2004 by DST Systems, Inc.
//   All rights reserved.
//
//-------------------------------------------------------------------- -->
<public:property name="bgColor" value="window"/>
<public:property name="characterCasing" value="upper"/>
<public:property name="showBorder" value="true"/>

<public:method name="disable" />

<public:event name="onerror" ID=errorID />

<public:attach event="oncontentready"  onevent="init();" />

<script language="jscript">

String.prototype.trim = function()
{
	return this.replace(/(^\s*)|(\s*$)/g, "");
}

function init()
{
	formatValue();

	element.attachEvent("onpropertychange", onPropChange);
	element.attachEvent("onreadystatechange", InputBlur);
	element.attachEvent("onkeypress", onKeyPress);
	element.attachEvent("onpaste", onPaste);
	element.attachEvent("onfocus", InputFocus);
	element.attachEvent("onblur", InputBlur);

	disable(element.disabled);
	readOnly(element.readOnly);
}

function onPropChange()
{
	var propertyName=window.event.propertyName;

	if(propertyName.toLowerCase()=="charactercasing")
	{
		formatValue();
	}
	if(propertyName.toLowerCase()=="readonly")
	{
		readOnly(element.readOnly);
	}
}

function onKeyPress(e)
{	
	switch(characterCasing.toLowerCase())
	{
		case "lower":
			if(e.keyCode>64&&e.keyCode<91)
			{
				window.event.keyCode=e.keyCode+32;
			}
			break;
		case "normal":
			break;
		case "upper":
			if(e.keyCode>96&&e.keyCode<123)
			{
				window.event.keyCode=e.keyCode-32;
			}
			break;
		default:
			ReturnError("3000","Invalid characterCasing: "+characterCasing);
	}
}

function onPaste(e)
{
	var pasteText=window.clipboardData.getData("Text");
	switch(characterCasing.toLowerCase())
	{
		case "lower":
			window.clipboardData.setData("Text",pasteText.toLowerCase());
			break;
		case "normal":
			break;
		case "upper":
			window.clipboardData.setData("Text",pasteText.toUpperCase());
			break;
		default:
			ReturnError("3010","Invalid characterCasing: "+characterCasing);
	}
}

function InputFocus(e)
{
	e.srcElement.select();
}

function InputBlur() 
{
	// remove leading and trailing spaces
	element.value=element.value.trim();
}

function formatValue()
{
	element.value=element.value.trim();
	switch(characterCasing.toLowerCase())
	{
		case "lower":
			element.value=element.value.toLowerCase();
			break;
		case "normal":
			break;
		case "upper":
			element.value=element.value.toUpperCase();
			break;
		default:
			ReturnError("3020","Invalid characterCasing: "+characterCasing);
	}
}

function ReturnError(code,message)
{
	var oEvent=createEventObject();
	oEvent.code=code;
	oEvent.message=message;
	errorID.fire(oEvent);
}

function disable(disabled)
{
	element.disabled=isTrue(disabled);

	if(isTrue(disabled))
	{
		element.readOnly=false;
		element.style.backgroundColor="rgb(255,255,255)";
		element.style.border="1px solid rgb(201,199,186)";
	}
	else
	{
		if(isTrue(element.readOnly))
		{
			readOnly(element.readOnly);
		}
		else
		{
			element.style.backgroundColor=bgColor;
			if(isTrue(showBorder))
			{
				element.style.border="1px solid black";
			}
			else
			{
				element.style.borderStyle="none";
			}
		}
	}
}

function readOnly(readOnly)
{
	element.readOnly=isTrue(readOnly);

	if(isTrue(readOnly))
	{
		element.disabled=false;
		element.style.backgroundColor="white";
		element.style.border="1px solid black";
	}
	else
	{
		if(isTrue(element.disabled))
		{
			disable(element.disabled);
		}
		else
		{
			element.style.backgroundColor=bgColor;
			if(isTrue(showBorder))
			{
				element.style.border="1px solid black";
			}
			else
			{
				element.style.borderStyle="none";
			}
		}
	}
}

function isTrue(vValue)
{
	var temp=vValue.toString().toLowerCase();
	return temp=="true";
}
</script>

