// BFDataImpl implementation file for DataSet DSTC0205.REQRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0205_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0205_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0205_REQRepeat_Record() { return new dsi_DSTC0205_REQRepeat_Record; }

dsi_DSTC0205_REQRepeat_Record::dsi_DSTC0205_REQRepeat_Record()
: BFDataImpl( 40003055 )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, AcctReviewRId_( ifds::AcctReviewRId, &ifds::s_FldProp_AcctReviewRId )
, SchedReviewDate_( ifds::SchedReviewDate, &ifds::s_FldProp_SchedReviewDate )
, ActualReviewDate_( ifds::ActualReviewDate, &ifds::s_FldProp_ActualReviewDate )
, Comments1_( ifds::Comments1, &ifds::s_FldProp_Comments1 )
, Comments2_( ifds::Comments2, &ifds::s_FldProp_Comments2 )
, Comments3_( ifds::Comments3, &ifds::s_FldProp_Comments3 )
{
   cFields_ = 7;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0205_REQRepeat_Record::~dsi_DSTC0205_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0205_REQRepeat_Record::clone()
{
   dsi_DSTC0205_REQRepeat_Record* p = new dsi_DSTC0205_REQRepeat_Record;
   p->RunMode_ = RunMode_;
   p->AcctReviewRId_ = AcctReviewRId_;
   p->SchedReviewDate_ = SchedReviewDate_;
   p->ActualReviewDate_ = ActualReviewDate_;
   p->Comments1_ = Comments1_;
   p->Comments2_ = Comments2_;
   p->Comments3_ = Comments3_;
   return(p);
}

BFDataField* dsi_DSTC0205_REQRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40003059: return ( &AcctReviewRId_ ); break; // AcctReviewRId
      case 40003057: return ( &SchedReviewDate_ ); break; // SchedReviewDate
      case 40003058: return ( &ActualReviewDate_ ); break; // ActualReviewDate
      case 40003064: return ( &Comments1_ ); break; // Comments1
      case 40003065: return ( &Comments2_ ); break; // Comments2
      case 40003066: return ( &Comments3_ ); break; // Comments3
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0205_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0205_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0205_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 7 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RunMode_; break;
            case 1: aFlds_[1] = &AcctReviewRId_; break;
            case 2: aFlds_[2] = &SchedReviewDate_; break;
            case 3: aFlds_[3] = &ActualReviewDate_; break;
            case 4: aFlds_[4] = &Comments1_; break;
            case 5: aFlds_[5] = &Comments2_; break;
            case 6: aFlds_[6] = &Comments3_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0205_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0205_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0205_REQRepeat_Record::getLargestDefinedField( void ) const
{
   return( 70 );
}

unsigned long dsi_DSTC0205_REQRepeat_Record::getDefinedByteLength( void ) const
{
   return( 345 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0205_REQRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0205_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0205_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000990: return( true );
      case 40003059: return( true );
      case 40003057: return( true );
      case 40003058: return( true );
      case 40003064: return( true );
      case 40003065: return( true );
      case 40003066: return( true );
   }
   return false;
}

