// BFDataImpl implementation file for DataSet DSTC0051.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0051_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0051_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0051_VWRepeat_Record() { return new dsi_DSTC0051_VWRepeat_Record; }

dsi_DSTC0051_VWRepeat_Record::dsi_DSTC0051_VWRepeat_Record()
: BFDataImpl( 40000632 )
, IdType_( ifds::IdType, &ifds::s_FldProp_IdType )
, IdTypeDesc_( ifds::IdTypeDesc, &ifds::s_FldProp_IdTypeDesc )
, IdValue_( ifds::IdValue, &ifds::s_FldProp_IdValue )
, IdDate_( ifds::IdDate, &ifds::s_FldProp_IdDate )
, EntitySearchIdVer_( ifds::EntitySearchIdVer, &ifds::s_FldProp_EntitySearchIdVer )
, EntitySearchRid_( ifds::EntitySearchRid, &ifds::s_FldProp_EntitySearchRid )
, IdStatus_( ifds::IdStatus, &ifds::s_FldProp_IdStatus )
, IdAllowOverride_( ifds::IdAllowOverride, &ifds::s_FldProp_IdAllowOverride )
, CountryOfIssue_( ifds::CountryOfIssue, &ifds::s_FldProp_CountryOfIssue )
, IdExpireDate_( ifds::IdExpireDate, &ifds::s_FldProp_IdExpireDate )
, VerifyStat_( ifds::VerifyStat, &ifds::s_FldProp_VerifyStat )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
{
    cFields_ = 13;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0051_VWRepeat_Record::~dsi_DSTC0051_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0051_VWRepeat_Record::clone()
{
   dsi_DSTC0051_VWRepeat_Record* p = new dsi_DSTC0051_VWRepeat_Record;
   p->IdType_ = IdType_;
   p->IdTypeDesc_ = IdTypeDesc_;
   p->IdValue_ = IdValue_;
   p->IdDate_ = IdDate_;
   p->EntitySearchIdVer_ = EntitySearchIdVer_;
   p->EntitySearchRid_ = EntitySearchRid_;
   p->IdStatus_ = IdStatus_;
   p->IdAllowOverride_ = IdAllowOverride_;
   p->CountryOfIssue_ = CountryOfIssue_;
   p->IdExpireDate_ = IdExpireDate_;
   p->VerifyStat_ = VerifyStat_;
   p->Username_ = Username_;
   p->ModUser_ = ModUser_;
   return(p);
}

BFDataField* dsi_DSTC0051_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000633: return ( &IdType_ ); break; // IdType
      case 40000634: return ( &IdTypeDesc_ ); break; // IdTypeDesc
      case 40000635: return ( &IdValue_ ); break; // IdValue
      case 40000636: return ( &IdDate_ ); break; // IdDate
      case 40000907: return ( &EntitySearchIdVer_ ); break; // EntitySearchIdVer
      case 40000908: return ( &EntitySearchRid_ ); break; // EntitySearchRid
      case 40005630: return ( &IdStatus_ ); break; // IdStatus
      case 40005702: return ( &IdAllowOverride_ ); break; // IdAllowOverride
      case 40006831: return ( &CountryOfIssue_ ); break; // CountryOfIssue
      case 40006945: return ( &IdExpireDate_ ); break; // IdExpireDate
      case 40006046: return ( &VerifyStat_ ); break; // VerifyStat
      case 40000117: return ( &Username_ ); break; // Username
      case 40000218: return ( &ModUser_ ); break; // ModUser
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0051_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0051_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0051_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 13 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &IdType_; break;
            case 1: aFlds_[1] = &IdTypeDesc_; break;
            case 2: aFlds_[2] = &IdValue_; break;
            case 3: aFlds_[3] = &IdDate_; break;
            case 4: aFlds_[4] = &EntitySearchIdVer_; break;
            case 5: aFlds_[5] = &EntitySearchRid_; break;
            case 6: aFlds_[6] = &IdStatus_; break;
            case 7: aFlds_[7] = &IdAllowOverride_; break;
            case 8: aFlds_[8] = &CountryOfIssue_; break;
            case 9: aFlds_[9] = &IdExpireDate_; break;
            case 10: aFlds_[10] = &VerifyStat_; break;
            case 11: aFlds_[11] = &Username_; break;
            case 12: aFlds_[12] = &ModUser_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0051_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0051_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0051_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0051_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 555 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0051_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0051_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0051_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000633: return( true );
      case 40000634: return( true );
      case 40000635: return( true );
      case 40000636: return( true );
      case 40000907: return( true );
      case 40000908: return( true );
      case 40005630: return( true );
      case 40005702: return( true );
      case 40006831: return( true );
      case 40006945: return( true );
      case 40006046: return ( true );
      case 40000117: return ( true );
      case 40000218: return ( true );
   }
   return false;
}

