// BFDataImpl implementation file for DataSet DSTC0091.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0091_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0091_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0091_VWRepeat_Record() { return new dsi_DSTC0091_VWRepeat_Record; }

dsi_DSTC0091_VWRepeat_Record::dsi_DSTC0091_VWRepeat_Record()
: BFDataImpl( 40001167 )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, BranchName_( ifds::BranchName, &ifds::s_FldProp_BranchName )
, AddrLine1_( ifds::AddrLine1, &ifds::s_FldProp_AddrLine1 )
, AddrLine2_( ifds::AddrLine2, &ifds::s_FldProp_AddrLine2 )
, AddrLine3_( ifds::AddrLine3, &ifds::s_FldProp_AddrLine3 )
, AddrLine4_( ifds::AddrLine4, &ifds::s_FldProp_AddrLine4 )
, AddrLine5_( ifds::AddrLine5, &ifds::s_FldProp_AddrLine5 )
, AddrCntryCode_( ifds::AddrCntryCode, &ifds::s_FldProp_AddrCntryCode )
, PhoneNumber_( ifds::PhoneNumber, &ifds::s_FldProp_PhoneNumber )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, PayInstrTrailer_( ifds::PayInstrTrailer, &ifds::s_FldProp_PayInstrTrailer )
, PayInstrComm_( ifds::PayInstrComm, &ifds::s_FldProp_PayInstrComm )
, PostalCode_( ifds::PostalCode, &ifds::s_FldProp_PostalCode )
{
   cFields_ = 14;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0091_VWRepeat_Record::~dsi_DSTC0091_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0091_VWRepeat_Record::clone()
{
   dsi_DSTC0091_VWRepeat_Record* p = new dsi_DSTC0091_VWRepeat_Record;
   p->BranchCode_ = BranchCode_;
   p->BranchName_ = BranchName_;
   p->AddrLine1_ = AddrLine1_;
   p->AddrLine2_ = AddrLine2_;
   p->AddrLine3_ = AddrLine3_;
   p->AddrLine4_ = AddrLine4_;
   p->AddrLine5_ = AddrLine5_;
   p->AddrCntryCode_ = AddrCntryCode_;
   p->PhoneNumber_ = PhoneNumber_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->PayInstrTrailer_ = PayInstrTrailer_;
   p->PayInstrComm_ = PayInstrComm_;
   p->PostalCode_ = PostalCode_;
   return(p);
}

BFDataField* dsi_DSTC0091_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000045: return ( &BranchCode_ ); break; // BranchCode
      case 40000211: return ( &BranchName_ ); break; // BranchName
      case 40000280: return ( &AddrLine1_ ); break; // AddrLine1
      case 40000281: return ( &AddrLine2_ ); break; // AddrLine2
      case 40000282: return ( &AddrLine3_ ); break; // AddrLine3
      case 40000283: return ( &AddrLine4_ ); break; // AddrLine4
      case 40000284: return ( &AddrLine5_ ); break; // AddrLine5
      case 40000299: return ( &AddrCntryCode_ ); break; // AddrCntryCode
      case 40000297: return ( &PhoneNumber_ ); break; // PhoneNumber
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40003991: return ( &PayInstrTrailer_ ); break; // PayInstrTrailer
      case 40003992: return ( &PayInstrComm_ ); break; // PayInstrComm
      case 40000143: return ( &PostalCode_ ); break; // PostalCode
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0091_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0091_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0091_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 14 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &BranchCode_; break;
            case 1: aFlds_[1] = &BranchName_; break;
            case 2: aFlds_[2] = &AddrLine1_; break;
            case 3: aFlds_[3] = &AddrLine2_; break;
            case 4: aFlds_[4] = &AddrLine3_; break;
            case 5: aFlds_[5] = &AddrLine4_; break;
            case 6: aFlds_[6] = &AddrLine5_; break;
            case 7: aFlds_[7] = &AddrCntryCode_; break;
            case 8: aFlds_[8] = &PhoneNumber_; break;
            case 9: aFlds_[9] = &EffectiveDate_; break;
            case 10: aFlds_[10] = &StopDate_; break;
            case 11: aFlds_[11] = &PayInstrTrailer_; break;
            case 12: aFlds_[12] = &PayInstrComm_; break;
            case 13: aFlds_[13] = &PostalCode_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0091_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0091_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0091_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0091_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 571 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0091_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0091_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0091_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000045: return( true );
      case 40000211: return( true );
      case 40000280: return( true );
      case 40000281: return( true );
      case 40000282: return( true );
      case 40000283: return( true );
      case 40000284: return( true );
      case 40000299: return( true );
      case 40000297: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40003991: return( true );
      case 40003992: return( true );
      case 40000143: return( true );
   }
   return false;
}

