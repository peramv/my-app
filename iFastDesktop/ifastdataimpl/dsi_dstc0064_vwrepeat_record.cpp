// BFDataImpl implementation file for DataSet DSTC0064.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0064_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0064_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0064_VWRepeat_Record() { return new dsi_DSTC0064_VWRepeat_Record; }

dsi_DSTC0064_VWRepeat_Record::dsi_DSTC0064_VWRepeat_Record()
: BFDataImpl( 40000758 )
, FunctionId_( ifds::FunctionId, &ifds::s_FldProp_FunctionId )
, F_active_( ifds::F_active, &ifds::s_FldProp_F_active )
, InqPerm_( ifds::InqPerm, &ifds::s_FldProp_InqPerm )
, AddPerm_( ifds::AddPerm, &ifds::s_FldProp_AddPerm )
, ModPerm_( ifds::ModPerm, &ifds::s_FldProp_ModPerm )
, DelPerm_( ifds::DelPerm, &ifds::s_FldProp_DelPerm )
, FuncCategory_( ifds::FuncCategory, &ifds::s_FldProp_FuncCategory )
{
   cFields_ = 7;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0064_VWRepeat_Record::~dsi_DSTC0064_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0064_VWRepeat_Record::clone()
{
   dsi_DSTC0064_VWRepeat_Record* p = new dsi_DSTC0064_VWRepeat_Record;
   p->FunctionId_ = FunctionId_;
   p->F_active_ = F_active_;
   p->InqPerm_ = InqPerm_;
   p->AddPerm_ = AddPerm_;
   p->ModPerm_ = ModPerm_;
   p->DelPerm_ = DelPerm_;
   p->FuncCategory_ = FuncCategory_;
   return(p);
}

BFDataField* dsi_DSTC0064_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000759: return ( &FunctionId_ ); break; // FunctionId
      case 40000760: return ( &F_active_ ); break; // F_active
      case 40000761: return ( &InqPerm_ ); break; // InqPerm
      case 40000762: return ( &AddPerm_ ); break; // AddPerm
      case 40000763: return ( &ModPerm_ ); break; // ModPerm
      case 40000764: return ( &DelPerm_ ); break; // DelPerm
      case 40005933: return ( &FuncCategory_ ); break; // FuncCategory
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0064_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0064_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0064_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 7 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FunctionId_; break;
            case 1: aFlds_[1] = &F_active_; break;
            case 2: aFlds_[2] = &InqPerm_; break;
            case 3: aFlds_[3] = &AddPerm_; break;
            case 4: aFlds_[4] = &ModPerm_; break;
            case 5: aFlds_[5] = &DelPerm_; break;
            case 6: aFlds_[6] = &FuncCategory_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0064_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0064_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0064_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0064_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 75 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0064_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0064_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0064_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000759: return( true );
      case 40000760: return( true );
      case 40000761: return( true );
      case 40000762: return( true );
      case 40000763: return( true );
      case 40000764: return( true );
      case 40005933: return( true );
   }
   return false;
}

