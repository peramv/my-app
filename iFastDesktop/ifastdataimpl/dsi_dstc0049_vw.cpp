// BFDataImpl implementation file for DataSet DSTC0049.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0049_vw.h"


// This function creates an instance of dsi_DSTC0049_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0049_VW() { return new dsi_DSTC0049_VW; }

dsi_DSTC0049_VW::dsi_DSTC0049_VW()
: BFDataImpl( 40000588 )
, PendingTrade_( ifds::PendingTrade, &ifds::s_FldProp_PendingTrade )
, Remarks_( ifds::Remarks, &ifds::s_FldProp_Remarks )
, Certificates_( ifds::Certificates, &ifds::s_FldProp_Certificates )
, StopPurchase_( ifds::StopPurchase, &ifds::s_FldProp_StopPurchase )
, StopRed_( ifds::StopRed, &ifds::s_FldProp_StopRed )
, StopXferOut_( ifds::StopXferOut, &ifds::s_FldProp_StopXferOut )
, StopXferIn_( ifds::StopXferIn, &ifds::s_FldProp_StopXferIn )
, BankingInstr_( ifds::BankingInstr, &ifds::s_FldProp_BankingInstr )
, SystemTrsfr_( ifds::SystemTrsfr, &ifds::s_FldProp_SystemTrsfr )
, PAC_( ifds::PAC, &ifds::s_FldProp_PAC )
, SWP_( ifds::SWP, &ifds::s_FldProp_SWP )
, AcctAlloc_( ifds::AcctAlloc, &ifds::s_FldProp_AcctAlloc )
, ClanPlan_( ifds::ClanPlan, &ifds::s_FldProp_ClanPlan )
, UnsettledTrn_( ifds::UnsettledTrn, &ifds::s_FldProp_UnsettledTrn )
, CurrBusDate_( ifds::CurrBusDate, &ifds::s_FldProp_CurrBusDate )
{
   cFields_ = 15;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0049_VW::~dsi_DSTC0049_VW()
{
}

BFDataImpl* dsi_DSTC0049_VW::clone()
{
   dsi_DSTC0049_VW* p = new dsi_DSTC0049_VW;
   p->PendingTrade_ = PendingTrade_;
   p->Remarks_ = Remarks_;
   p->Certificates_ = Certificates_;
   p->StopPurchase_ = StopPurchase_;
   p->StopRed_ = StopRed_;
   p->StopXferOut_ = StopXferOut_;
   p->StopXferIn_ = StopXferIn_;
   p->BankingInstr_ = BankingInstr_;
   p->SystemTrsfr_ = SystemTrsfr_;
   p->PAC_ = PAC_;
   p->SWP_ = SWP_;
   p->AcctAlloc_ = AcctAlloc_;
   p->ClanPlan_ = ClanPlan_;
   p->UnsettledTrn_ = UnsettledTrn_;
   p->CurrBusDate_ = CurrBusDate_;
   return(p);
}

BFDataField* dsi_DSTC0049_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000589: return ( &PendingTrade_ ); break; // PendingTrade
      case 40000590: return ( &Remarks_ ); break; // Remarks
      case 40000591: return ( &Certificates_ ); break; // Certificates
      case 40000699: return ( &StopPurchase_ ); break; // StopPurchase
      case 40000593: return ( &StopRed_ ); break; // StopRed
      case 40000198: return ( &StopXferOut_ ); break; // StopXferOut
      case 40000197: return ( &StopXferIn_ ); break; // StopXferIn
      case 40000955: return ( &BankingInstr_ ); break; // BankingInstr
      case 40000597: return ( &SystemTrsfr_ ); break; // SystemTrsfr
      case 40000598: return ( &PAC_ ); break; // PAC
      case 40000599: return ( &SWP_ ); break; // SWP
      case 40000600: return ( &AcctAlloc_ ); break; // AcctAlloc
      case 40000601: return ( &ClanPlan_ ); break; // ClanPlan
      case 40000867: return ( &UnsettledTrn_ ); break; // UnsettledTrn
      case 40000896: return ( &CurrBusDate_ ); break; // CurrBusDate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0049_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0049_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0049_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 15 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &PendingTrade_; break;
            case 1: aFlds_[1] = &Remarks_; break;
            case 2: aFlds_[2] = &Certificates_; break;
            case 3: aFlds_[3] = &StopPurchase_; break;
            case 4: aFlds_[4] = &StopRed_; break;
            case 5: aFlds_[5] = &StopXferOut_; break;
            case 6: aFlds_[6] = &StopXferIn_; break;
            case 7: aFlds_[7] = &BankingInstr_; break;
            case 8: aFlds_[8] = &SystemTrsfr_; break;
            case 9: aFlds_[9] = &PAC_; break;
            case 10: aFlds_[10] = &SWP_; break;
            case 11: aFlds_[11] = &AcctAlloc_; break;
            case 12: aFlds_[12] = &ClanPlan_; break;
            case 13: aFlds_[13] = &UnsettledTrn_; break;
            case 14: aFlds_[14] = &CurrBusDate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0049_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0049_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0049_VW::getLargestDefinedField( void ) const
{
   return( 10 );
}

unsigned long dsi_DSTC0049_VW::getDefinedByteLength( void ) const
{
   return( 24 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0049_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0049_VW::fieldExists( id );
}

bool dsi_DSTC0049_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000589: return( true );
      case 40000590: return( true );
      case 40000591: return( true );
      case 40000699: return( true );
      case 40000593: return( true );
      case 40000198: return( true );
      case 40000197: return( true );
      case 40000955: return( true );
      case 40000597: return( true );
      case 40000598: return( true );
      case 40000599: return( true );
      case 40000600: return( true );
      case 40000601: return( true );
      case 40000867: return( true );
      case 40000896: return( true );
   }
   return false;
}

