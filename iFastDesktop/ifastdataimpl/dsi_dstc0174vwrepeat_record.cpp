// BFDataImpl implementation file for DataSet DSTC0174VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0174vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0174VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0174VWRepeat_Record() { return new dsi_DSTC0174VWRepeat_Record; }

dsi_DSTC0174VWRepeat_Record::dsi_DSTC0174VWRepeat_Record()
: BFDataImpl( 40002731 )
, RcptNum_( ifds::RcptNum, &ifds::s_FldProp_RcptNum )
, Issued_( ifds::Issued, &ifds::s_FldProp_Issued )
, RcptStatus_( ifds::RcptStatus, &ifds::s_FldProp_RcptStatus )
, IssueDate_( ifds::IssueDate, &ifds::s_FldProp_IssueDate )
, RcptAmount_( ifds::RcptAmount, &ifds::s_FldProp_RcptAmount )
, Duplicates_( ifds::Duplicates, &ifds::s_FldProp_Duplicates )
, RecipientType_( ifds::RecipientType, &ifds::s_FldProp_RecipientType )
, PrevRcptNo_( ifds::PrevRcptNo, &ifds::s_FldProp_PrevRcptNo )
, Name1_( ifds::Name1, &ifds::s_FldProp_Name1 )
, SIN_( ifds::SIN, &ifds::s_FldProp_SIN )
, Address1_( ifds::Address1, &ifds::s_FldProp_Address1 )
, Address2_( ifds::Address2, &ifds::s_FldProp_Address2 )
, Address3_( ifds::Address3, &ifds::s_FldProp_Address3 )
, Address4_( ifds::Address4, &ifds::s_FldProp_Address4 )
, Address5_( ifds::Address5, &ifds::s_FldProp_Address5 )
, PostalCode_( ifds::PostalCode, &ifds::s_FldProp_PostalCode )
, CName1_( ifds::CName1, &ifds::s_FldProp_CName1 )
, Csin_( ifds::Csin, &ifds::s_FldProp_Csin )
, Caution_( ifds::Caution, &ifds::s_FldProp_Caution )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
{
   cFields_ = 23;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0174VWRepeat_Record::~dsi_DSTC0174VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0174VWRepeat_Record::clone()
{
   dsi_DSTC0174VWRepeat_Record* p = new dsi_DSTC0174VWRepeat_Record;
   p->RcptNum_ = RcptNum_;
   p->Issued_ = Issued_;
   p->RcptStatus_ = RcptStatus_;
   p->IssueDate_ = IssueDate_;
   p->RcptAmount_ = RcptAmount_;
   p->Duplicates_ = Duplicates_;
   p->RecipientType_ = RecipientType_;
   p->PrevRcptNo_ = PrevRcptNo_;
   p->Name1_ = Name1_;
   p->SIN_ = SIN_;
   p->Address1_ = Address1_;
   p->Address2_ = Address2_;
   p->Address3_ = Address3_;
   p->Address4_ = Address4_;
   p->Address5_ = Address5_;
   p->PostalCode_ = PostalCode_;
   p->CName1_ = CName1_;
   p->Csin_ = Csin_;
   p->Caution_ = Caution_;
   p->ModDate_ = ModDate_;
   p->ModUser_ = ModUser_;
   p->Username_ = Username_;
   p->ProcessDate_ = ProcessDate_;
   return(p);
}

BFDataField* dsi_DSTC0174VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40002723: return ( &RcptNum_ ); break; // RcptNum
      case 40000375: return ( &Issued_ ); break; // Issued
      case 40002724: return ( &RcptStatus_ ); break; // RcptStatus
      case 40000376: return ( &IssueDate_ ); break; // IssueDate
      case 40002725: return ( &RcptAmount_ ); break; // RcptAmount
      case 40002726: return ( &Duplicates_ ); break; // Duplicates
      case 40000176: return ( &RecipientType_ ); break; // RecipientType
      case 40002812: return ( &PrevRcptNo_ ); break; // PrevRcptNo
      case 40000542: return ( &Name1_ ); break; // Name1
      case 40000132: return ( &SIN_ ); break; // SIN
      case 40000138: return ( &Address1_ ); break; // Address1
      case 40000139: return ( &Address2_ ); break; // Address2
      case 40000140: return ( &Address3_ ); break; // Address3
      case 40000141: return ( &Address4_ ); break; // Address4
      case 40000142: return ( &Address5_ ); break; // Address5
      case 40000143: return ( &PostalCode_ ); break; // PostalCode
      case 40002813: return ( &CName1_ ); break; // CName1
      case 40002814: return ( &Csin_ ); break; // Csin
      case 40005818: return ( &Caution_ ); break; // Caution
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40000117: return ( &Username_ ); break; // Username
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0174VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0174VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0174VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 23 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RcptNum_; break;
            case 1: aFlds_[1] = &Issued_; break;
            case 2: aFlds_[2] = &RcptStatus_; break;
            case 3: aFlds_[3] = &IssueDate_; break;
            case 4: aFlds_[4] = &RcptAmount_; break;
            case 5: aFlds_[5] = &Duplicates_; break;
            case 6: aFlds_[6] = &RecipientType_; break;
            case 7: aFlds_[7] = &PrevRcptNo_; break;
            case 8: aFlds_[8] = &Name1_; break;
            case 9: aFlds_[9] = &SIN_; break;
            case 10: aFlds_[10] = &Address1_; break;
            case 11: aFlds_[11] = &Address2_; break;
            case 12: aFlds_[12] = &Address3_; break;
            case 13: aFlds_[13] = &Address4_; break;
            case 14: aFlds_[14] = &Address5_; break;
            case 15: aFlds_[15] = &PostalCode_; break;
            case 16: aFlds_[16] = &CName1_; break;
            case 17: aFlds_[17] = &Csin_; break;
            case 18: aFlds_[18] = &Caution_; break;
            case 19: aFlds_[19] = &ModDate_; break;
            case 20: aFlds_[20] = &ModUser_; break;
            case 21: aFlds_[21] = &Username_; break;
            case 22: aFlds_[22] = &ProcessDate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0174VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0174VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0174VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0174VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 912 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0174VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0174VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0174VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40002723: return( true );
      case 40000375: return( true );
      case 40002724: return( true );
      case 40000376: return( true );
      case 40002725: return( true );
      case 40002726: return( true );
      case 40000176: return( true );
      case 40002812: return( true );
      case 40000542: return( true );
      case 40000132: return( true );
      case 40000138: return( true );
      case 40000139: return( true );
      case 40000140: return( true );
      case 40000141: return( true );
      case 40000142: return( true );
      case 40000143: return( true );
      case 40002813: return( true );
      case 40002814: return( true );
      case 40005818: return( true );
      case 40000217: return( true );
      case 40000218: return( true );
      case 40000117: return( true );
      case 40000216: return( true );
   }
   return false;
}

