// BFDataImpl implementation file for DataSet DSTC0063.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0063_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0063_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0063_VWRepeat_Record() { return new dsi_DSTC0063_VWRepeat_Record; }

dsi_DSTC0063_VWRepeat_Record::dsi_DSTC0063_VWRepeat_Record()
: BFDataImpl( 40000746 )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ElongName1_( ifds::ElongName1, &ifds::s_FldProp_ElongName1 )
, ElongName2_( ifds::ElongName2, &ifds::s_FldProp_ElongName2 )
, EShortName_( ifds::EShortName, &ifds::s_FldProp_EShortName )
, FLongName_( ifds::FLongName, &ifds::s_FldProp_FLongName )
, FLongName2_( ifds::FLongName2, &ifds::s_FldProp_FLongName2 )
, FShortName_( ifds::FShortName, &ifds::s_FldProp_FShortName )
, FundType_( ifds::FundType, &ifds::s_FldProp_FundType )
, FundTypeDesc_( ifds::FundTypeDesc, &ifds::s_FldProp_FundTypeDesc )
, CusipNum_( ifds::CusipNum, &ifds::s_FldProp_CusipNum )
, PriceAtClass_( ifds::PriceAtClass, &ifds::s_FldProp_PriceAtClass )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, PACavail_( ifds::PACavail, &ifds::s_FldProp_PACavail )
, SWPavail_( ifds::SWPavail, &ifds::s_FldProp_SWPavail )
, FundStatus_( ifds::FundStatus, &ifds::s_FldProp_FundStatus )
, StatusDate_( ifds::StatusDate, &ifds::s_FldProp_StatusDate )
, DividentType_( ifds::DividentType, &ifds::s_FldProp_DividentType )
, IntFromDateType_( ifds::IntFromDateType, &ifds::s_FldProp_IntFromDateType )
, IntToDateType_( ifds::IntToDateType, &ifds::s_FldProp_IntToDateType )
, IssueCerts_( ifds::IssueCerts, &ifds::s_FldProp_IssueCerts )
, SettlePurDays_( ifds::SettlePurDays, &ifds::s_FldProp_SettlePurDays )
, SettleRedDays_( ifds::SettleRedDays, &ifds::s_FldProp_SettleRedDays )
, FundGroup_( ifds::FundGroup, &ifds::s_FldProp_FundGroup )
, PayIntOn_( ifds::PayIntOn, &ifds::s_FldProp_PayIntOn )
, PayIntOnDesc_( ifds::PayIntOnDesc, &ifds::s_FldProp_PayIntOnDesc )
, NetAllowed_( ifds::NetAllowed, &ifds::s_FldProp_NetAllowed )
, CurrList_( ifds::CurrList, &ifds::s_FldProp_CurrList )
, FundCategory_( ifds::FundCategory, &ifds::s_FldProp_FundCategory )
, Domestic_( ifds::Domestic, &ifds::s_FldProp_Domestic )
, MoneyMktFund_( ifds::MoneyMktFund, &ifds::s_FldProp_MoneyMktFund )
, InvestProd_( ifds::InvestProd, &ifds::s_FldProp_InvestProd )
, IntAccrualMthd_( ifds::IntAccrualMthd, &ifds::s_FldProp_IntAccrualMthd )
, PUEVCapable_( ifds::PUEVCapable, &ifds::s_FldProp_PUEVCapable )
, InvestroCapable_( ifds::InvestroCapable, &ifds::s_FldProp_InvestroCapable )
, OtherFundType_( ifds::OtherFundType, &ifds::s_FldProp_OtherFundType )
, FundConfirm_( ifds::FundConfirm, &ifds::s_FldProp_FundConfirm )
, TaxType_( ifds::TaxType, &ifds::s_FldProp_TaxType )
, UnitRoundMethod_( ifds::UnitRoundMethod, &ifds::s_FldProp_UnitRoundMethod )
, PendTrdContrTransList_( ifds::PendTrdContrTransList, &ifds::s_FldProp_PendTrdContrTransList )
{
   cFields_ = 40;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0063_VWRepeat_Record::~dsi_DSTC0063_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0063_VWRepeat_Record::clone()
{
   dsi_DSTC0063_VWRepeat_Record* p = new dsi_DSTC0063_VWRepeat_Record;
   p->FundCode_ = FundCode_;
   p->ElongName1_ = ElongName1_;
   p->ElongName2_ = ElongName2_;
   p->EShortName_ = EShortName_;
   p->FLongName_ = FLongName_;
   p->FLongName2_ = FLongName2_;
   p->FShortName_ = FShortName_;
   p->FundType_ = FundType_;
   p->FundTypeDesc_ = FundTypeDesc_;
   p->CusipNum_ = CusipNum_;
   p->PriceAtClass_ = PriceAtClass_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->PACavail_ = PACavail_;
   p->SWPavail_ = SWPavail_;
   p->FundStatus_ = FundStatus_;
   p->StatusDate_ = StatusDate_;
   p->DividentType_ = DividentType_;
   p->IntFromDateType_ = IntFromDateType_;
   p->IntToDateType_ = IntToDateType_;
   p->IssueCerts_ = IssueCerts_;
   p->SettlePurDays_ = SettlePurDays_;
   p->SettleRedDays_ = SettleRedDays_;
   p->FundGroup_ = FundGroup_;
   p->PayIntOn_ = PayIntOn_;
   p->PayIntOnDesc_ = PayIntOnDesc_;
   p->NetAllowed_ = NetAllowed_;
   p->CurrList_ = CurrList_;
   p->FundCategory_ = FundCategory_;
   p->Domestic_ = Domestic_;
   p->MoneyMktFund_ = MoneyMktFund_;
   p->InvestProd_ = InvestProd_;
   p->IntAccrualMthd_ = IntAccrualMthd_;
   p->PUEVCapable_ = PUEVCapable_;
   p->InvestroCapable_ = InvestroCapable_;
   p->OtherFundType_ = OtherFundType_;
   p->FundConfirm_ = FundConfirm_;
   p->TaxType_ = TaxType_;
   p->UnitRoundMethod_ = UnitRoundMethod_;
   p->PendTrdContrTransList_ = PendTrdContrTransList_;
   return(p);
}

BFDataField* dsi_DSTC0063_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000747: return ( &ElongName1_ ); break; // ElongName1
      case 40000748: return ( &ElongName2_ ); break; // ElongName2
      case 40000749: return ( &EShortName_ ); break; // EShortName
      case 40000750: return ( &FLongName_ ); break; // FLongName
      case 40000751: return ( &FLongName2_ ); break; // FLongName2
      case 40000752: return ( &FShortName_ ); break; // FShortName
      case 40000753: return ( &FundType_ ); break; // FundType
      case 40000754: return ( &FundTypeDesc_ ); break; // FundTypeDesc
      case 40000755: return ( &CusipNum_ ); break; // CusipNum
      case 40000756: return ( &PriceAtClass_ ); break; // PriceAtClass
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40000963: return ( &PACavail_ ); break; // PACavail
      case 40000964: return ( &SWPavail_ ); break; // SWPavail
      case 40000965: return ( &FundStatus_ ); break; // FundStatus
      case 40000966: return ( &StatusDate_ ); break; // StatusDate
      case 40001408: return ( &DividentType_ ); break; // DividentType
      case 40001409: return ( &IntFromDateType_ ); break; // IntFromDateType
      case 40001410: return ( &IntToDateType_ ); break; // IntToDateType
      case 40004766: return ( &IssueCerts_ ); break; // IssueCerts
      case 40001411: return ( &SettlePurDays_ ); break; // SettlePurDays
      case 40001412: return ( &SettleRedDays_ ); break; // SettleRedDays
      case 40002031: return ( &FundGroup_ ); break; // FundGroup
      case 40002792: return ( &PayIntOn_ ); break; // PayIntOn
      case 40002793: return ( &PayIntOnDesc_ ); break; // PayIntOnDesc
      case 40001449: return ( &NetAllowed_ ); break; // NetAllowed
      case 40003148: return ( &CurrList_ ); break; // CurrList
      case 40003541: return ( &FundCategory_ ); break; // FundCategory
      case 40000980: return ( &Domestic_ ); break; // Domestic
      case 40003907: return ( &MoneyMktFund_ ); break; // MoneyMktFund
      case 40004122: return ( &InvestProd_ ); break; // InvestProd
      case 40004411: return ( &IntAccrualMthd_ ); break; // IntAccrualMthd
      case 40004595: return ( &PUEVCapable_ ); break; // PUEVCapable
      case 40004775: return ( &InvestroCapable_ ); break; // InvestroCapable
      case 40004774: return ( &OtherFundType_ ); break; // OtherFundType
      case 40005162: return ( &FundConfirm_ ); break; // FundConfirm
      case 40000134: return ( &TaxType_ ); break; // TaxType
      case 40005816: return ( &UnitRoundMethod_ ); break; // UnitRoundMethod
      case 40006653: return ( &PendTrdContrTransList_ ); break; // PendTrdContrTransList
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0063_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0063_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0063_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 40 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FundCode_; break;
            case 1: aFlds_[1] = &ElongName1_; break;
            case 2: aFlds_[2] = &ElongName2_; break;
            case 3: aFlds_[3] = &EShortName_; break;
            case 4: aFlds_[4] = &FLongName_; break;
            case 5: aFlds_[5] = &FLongName2_; break;
            case 6: aFlds_[6] = &FShortName_; break;
            case 7: aFlds_[7] = &FundType_; break;
            case 8: aFlds_[8] = &FundTypeDesc_; break;
            case 9: aFlds_[9] = &CusipNum_; break;
            case 10: aFlds_[10] = &PriceAtClass_; break;
            case 11: aFlds_[11] = &EffectiveDate_; break;
            case 12: aFlds_[12] = &StopDate_; break;
            case 13: aFlds_[13] = &PACavail_; break;
            case 14: aFlds_[14] = &SWPavail_; break;
            case 15: aFlds_[15] = &FundStatus_; break;
            case 16: aFlds_[16] = &StatusDate_; break;
            case 17: aFlds_[17] = &DividentType_; break;
            case 18: aFlds_[18] = &IntFromDateType_; break;
            case 19: aFlds_[19] = &IntToDateType_; break;
            case 20: aFlds_[20] = &IssueCerts_; break;
            case 21: aFlds_[21] = &SettlePurDays_; break;
            case 22: aFlds_[22] = &SettleRedDays_; break;
            case 23: aFlds_[23] = &FundGroup_; break;
            case 24: aFlds_[24] = &PayIntOn_; break;
            case 25: aFlds_[25] = &PayIntOnDesc_; break;
            case 26: aFlds_[26] = &NetAllowed_; break;
            case 27: aFlds_[27] = &CurrList_; break;
            case 28: aFlds_[28] = &FundCategory_; break;
            case 29: aFlds_[29] = &Domestic_; break;
            case 30: aFlds_[30] = &MoneyMktFund_; break;
            case 31: aFlds_[31] = &InvestProd_; break;
            case 32: aFlds_[32] = &IntAccrualMthd_; break;
            case 33: aFlds_[33] = &PUEVCapable_; break;
            case 34: aFlds_[34] = &InvestroCapable_; break;
            case 35: aFlds_[35] = &OtherFundType_; break;
            case 36: aFlds_[36] = &FundConfirm_; break;
            case 37: aFlds_[37] = &TaxType_; break;
            case 38: aFlds_[38] = &UnitRoundMethod_; break;
            case 39: aFlds_[39] = &PendTrdContrTransList_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0063_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0063_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0063_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0063_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 1574 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0063_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0063_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0063_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000049: return( true );
      case 40000747: return( true );
      case 40000748: return( true );
      case 40000749: return( true );
      case 40000750: return( true );
      case 40000751: return( true );
      case 40000752: return( true );
      case 40000753: return( true );
      case 40000754: return( true );
      case 40000755: return( true );
      case 40000756: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40000963: return( true );
      case 40000964: return( true );
      case 40000965: return( true );
      case 40000966: return( true );
      case 40001408: return( true );
      case 40001409: return( true );
      case 40001410: return( true );
      case 40004766: return( true );
      case 40001411: return( true );
      case 40001412: return( true );
      case 40002031: return( true );
      case 40002792: return( true );
      case 40002793: return( true );
      case 40001449: return( true );
      case 40003148: return( true );
      case 40003541: return( true );
      case 40000980: return( true );
      case 40003907: return( true );
      case 40004122: return( true );
      case 40004411: return( true );
      case 40004595: return( true );
      case 40004775: return( true );
      case 40004774: return( true );
      case 40005162: return( true );
      case 40000134: return( true );
      case 40005816: return( true );
      case 40006653: return( true );
   }
   return false;
}

