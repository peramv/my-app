// BFDataImpl implementation file for DataSet DSTC0211.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0211_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0211_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0211_VWRepeat_Record() { return new dsi_DSTC0211_VWRepeat_Record; }

dsi_DSTC0211_VWRepeat_Record::dsi_DSTC0211_VWRepeat_Record()
: BFDataImpl( 40003173 )
, rxTaxType_( ifds::rxTaxType, &ifds::s_FldProp_rxTaxType )
, PensionJuris_( ifds::PensionJuris, &ifds::s_FldProp_PensionJuris )
, MinAge_( ifds::MinAge, &ifds::s_FldProp_MinAge )
, MaxAge_( ifds::MaxAge, &ifds::s_FldProp_MaxAge )
, MinWithAge_( ifds::MinWithAge, &ifds::s_FldProp_MinWithAge )
, Unisex_( ifds::Unisex, &ifds::s_FldProp_Unisex )
, SexDistinct_( ifds::SexDistinct, &ifds::s_FldProp_SexDistinct )
, CarryForUnusedMax_( ifds::CarryForUnusedMax, &ifds::s_FldProp_CarryForUnusedMax )
, UseSpAge_( ifds::UseSpAge, &ifds::s_FldProp_UseSpAge )
, TaxTypeSchedule_( ifds::TaxTypeSchedule, &ifds::s_FldProp_TaxTypeSchedule )
, GrandFatheredDate_( ifds::GrandFatheredDate, &ifds::s_FldProp_GrandFatheredDate )
, EligExtTrfGainLoss_( ifds::EligExtTrfGainLoss, &ifds::s_FldProp_EligExtTrfGainLoss )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, AgeCalcBasedOn_( ifds::AgeCalcBasedOn, &ifds::s_FldProp_AgeCalcBasedOn )
{
   cFields_ = 15;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0211_VWRepeat_Record::~dsi_DSTC0211_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0211_VWRepeat_Record::clone()
{
   dsi_DSTC0211_VWRepeat_Record* p = new dsi_DSTC0211_VWRepeat_Record;
   p->rxTaxType_ = rxTaxType_;
   p->PensionJuris_ = PensionJuris_;
   p->MinAge_ = MinAge_;
   p->MaxAge_ = MaxAge_;
   p->MinWithAge_ = MinWithAge_;
   p->Unisex_ = Unisex_;
   p->SexDistinct_ = SexDistinct_;
   p->CarryForUnusedMax_ = CarryForUnusedMax_;
   p->UseSpAge_ = UseSpAge_;
   p->TaxTypeSchedule_ = TaxTypeSchedule_;
   p->GrandFatheredDate_ = GrandFatheredDate_;
   p->EligExtTrfGainLoss_ = EligExtTrfGainLoss_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->AgeCalcBasedOn_ = AgeCalcBasedOn_;
   return(p);
}

BFDataField* dsi_DSTC0211_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40003174: return ( &rxTaxType_ ); break; // rxTaxType
      case 40000194: return ( &PensionJuris_ ); break; // PensionJuris
      case 40001758: return ( &MinAge_ ); break; // MinAge
      case 40001759: return ( &MaxAge_ ); break; // MaxAge
      case 40001358: return ( &MinWithAge_ ); break; // MinWithAge
      case 40003083: return ( &Unisex_ ); break; // Unisex
      case 40003084: return ( &SexDistinct_ ); break; // SexDistinct
      case 40005533: return ( &CarryForUnusedMax_ ); break; // CarryForUnusedMax
      case 40005675: return ( &UseSpAge_ ); break; // UseSpAge
      case 40005778: return ( &TaxTypeSchedule_ ); break; // TaxTypeSchedule
      case 40004038: return ( &GrandFatheredDate_ ); break; // GrandFatheredDate
      case 40005782: return ( &EligExtTrfGainLoss_ ); break; // EligExtTrfGainLoss
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40005946: return ( &AgeCalcBasedOn_ ); break; // AgeCalcBasedOn
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0211_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0211_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0211_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 15 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &rxTaxType_; break;
            case 1: aFlds_[1] = &PensionJuris_; break;
            case 2: aFlds_[2] = &MinAge_; break;
            case 3: aFlds_[3] = &MaxAge_; break;
            case 4: aFlds_[4] = &MinWithAge_; break;
            case 5: aFlds_[5] = &Unisex_; break;
            case 6: aFlds_[6] = &SexDistinct_; break;
            case 7: aFlds_[7] = &CarryForUnusedMax_; break;
            case 8: aFlds_[8] = &UseSpAge_; break;
            case 9: aFlds_[9] = &TaxTypeSchedule_; break;
            case 10: aFlds_[10] = &GrandFatheredDate_; break;
            case 11: aFlds_[11] = &EligExtTrfGainLoss_; break;
            case 12: aFlds_[12] = &EffectiveDate_; break;
            case 13: aFlds_[13] = &StopDate_; break;
            case 14: aFlds_[14] = &AgeCalcBasedOn_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0211_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0211_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0211_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0211_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 169 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0211_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0211_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0211_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40003174: return( true );
      case 40000194: return( true );
      case 40001758: return( true );
      case 40001759: return( true );
      case 40001358: return( true );
      case 40003083: return( true );
      case 40003084: return( true );
      case 40005533: return( true );
      case 40005675: return( true );
      case 40005778: return( true );
      case 40004038: return( true );
      case 40005782: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40005946: return( true );
   }
   return false;
}

