// BFDataImpl implementation file for DataSet DSTC0083.VW
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Wednesday, February 07, 2018 16:50:16


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0083_vw.h"


// This function creates an instance of dsi_DSTC0083_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0083_VW() { return new dsi_DSTC0083_VW; }

dsi_DSTC0083_VW::dsi_DSTC0083_VW()
: BFDataImpl( 40001121 )
, SysCurrency_( ifds::SysCurrency, &ifds::s_FldProp_SysCurrency )
, ShrNumCtrl_( ifds::ShrNumCtrl, &ifds::s_FldProp_ShrNumCtrl )
, ShrNumVal_( ifds::ShrNumVal, &ifds::s_FldProp_ShrNumVal )
, AcctNumCtrl_( ifds::AcctNumCtrl, &ifds::s_FldProp_AcctNumCtrl )
, AcctNumVal_( ifds::AcctNumVal, &ifds::s_FldProp_AcctNumVal )
, DefaultGrp_( ifds::DefaultGrp, &ifds::s_FldProp_DefaultGrp )
, GrpCodeLevel_( ifds::GrpCodeLevel, &ifds::s_FldProp_GrpCodeLevel )
, TaxTypeUpd_( ifds::TaxTypeUpd, &ifds::s_FldProp_TaxTypeUpd )
, MktMailDef_( ifds::MktMailDef, &ifds::s_FldProp_MktMailDef )
, RepByBranch_( ifds::RepByBranch, &ifds::s_FldProp_RepByBranch )
, BrokerBranch_( ifds::BrokerBranch, &ifds::s_FldProp_BrokerBranch )
, CapAddress_( ifds::CapAddress, &ifds::s_FldProp_CapAddress )
, CountryVal_( ifds::CountryVal, &ifds::s_FldProp_CountryVal )
, MandatoryId_( ifds::MandatoryId, &ifds::s_FldProp_MandatoryId )
, BirthNameMand_( ifds::BirthNameMand, &ifds::s_FldProp_BirthNameMand )
, SinException_( ifds::SinException, &ifds::s_FldProp_SinException )
, ShadowNominee_( ifds::ShadowNominee, &ifds::s_FldProp_ShadowNominee )
, BankValid1_( ifds::BankValid1, &ifds::s_FldProp_BankValid1 )
, BankValid2_( ifds::BankValid2, &ifds::s_FldProp_BankValid2 )
, BankLayout_( ifds::BankLayout, &ifds::s_FldProp_BankLayout )
, SYMBrkUpd_( ifds::SYMBrkUpd, &ifds::s_FldProp_SYMBrkUpd )
, BrokerFund_( ifds::BrokerFund, &ifds::s_FldProp_BrokerFund )
, PACMinAmt_( ifds::PACMinAmt, &ifds::s_FldProp_PACMinAmt )
, PACAmtEdit_( ifds::PACAmtEdit, &ifds::s_FldProp_PACAmtEdit )
, GICAllocOnly_( ifds::GICAllocOnly, &ifds::s_FldProp_GICAllocOnly )
, DisableFee4Alloc_( ifds::DisableFee4Alloc, &ifds::s_FldProp_DisableFee4Alloc )
, BusRounding_( ifds::BusRounding, &ifds::s_FldProp_BusRounding )
, MultiCurrency_( ifds::MultiCurrency, &ifds::s_FldProp_MultiCurrency )
, SplitComm_( ifds::SplitComm, &ifds::s_FldProp_SplitComm )
, AcctFeeParm_( ifds::AcctFeeParm, &ifds::s_FldProp_AcctFeeParm )
, CappedFund_( ifds::CappedFund, &ifds::s_FldProp_CappedFund )
, BankingFormat_( ifds::BankingFormat, &ifds::s_FldProp_BankingFormat )
, InstCodeMax_( ifds::InstCodeMax, &ifds::s_FldProp_InstCodeMax )
, TransitNoMax_( ifds::TransitNoMax, &ifds::s_FldProp_TransitNoMax )
, BankAcctNumMax_( ifds::BankAcctNumMax, &ifds::s_FldProp_BankAcctNumMax )
, CurrBusDate_( ifds::CurrBusDate, &ifds::s_FldProp_CurrBusDate )
, MandAddLines_( ifds::MandAddLines, &ifds::s_FldProp_MandAddLines )
, CurrSysDate_( ifds::CurrSysDate, &ifds::s_FldProp_CurrSysDate )
, CurrSysTime_( ifds::CurrSysTime, &ifds::s_FldProp_CurrSysTime )
, ChkDuplicationTrade_( ifds::ChkDuplicationTrade, &ifds::s_FldProp_ChkDuplicationTrade )
, InvAdvice_( ifds::InvAdvice, &ifds::s_FldProp_InvAdvice )
, AcqFeeDefault_( ifds::AcqFeeDefault, &ifds::s_FldProp_AcqFeeDefault )
, LastCycleDate_( ifds::LastCycleDate, &ifds::s_FldProp_LastCycleDate )
, AccountableMandatory_( ifds::AccountableMandatory, &ifds::s_FldProp_AccountableMandatory )
, SplitAcCode_( ifds::SplitAcCode, &ifds::s_FldProp_SplitAcCode )
, TRExclRedCodes_( ifds::TRExclRedCodes, &ifds::s_FldProp_TRExclRedCodes )
, TIKRedCodes_( ifds::TIKRedCodes, &ifds::s_FldProp_TIKRedCodes )
, DealDateTime_( ifds::DealDateTime, &ifds::s_FldProp_DealDateTime )
, EFTPurchase_( ifds::EFTPurchase, &ifds::s_FldProp_EFTPurchase )
, EFTPurchFuture_( ifds::EFTPurchFuture, &ifds::s_FldProp_EFTPurchFuture )
, GrpContribution_( ifds::GrpContribution, &ifds::s_FldProp_GrpContribution )
, AllowFractions_( ifds::AllowFractions, &ifds::s_FldProp_AllowFractions )
, SplitCommTransTypes_( ifds::SplitCommTransTypes, &ifds::s_FldProp_SplitCommTransTypes )
, CashReceiptTrack_( ifds::CashReceiptTrack, &ifds::s_FldProp_CashReceiptTrack )
, DepositId2_( ifds::DepositId2, &ifds::s_FldProp_DepositId2 )
, DepositIdMandatory_( ifds::DepositIdMandatory, &ifds::s_FldProp_DepositIdMandatory )
, DefaultPurchPayType_( ifds::DefaultPurchPayType, &ifds::s_FldProp_DefaultPurchPayType )
, EFTPurchaseLeadDays_( ifds::EFTPurchaseLeadDays, &ifds::s_FldProp_EFTPurchaseLeadDays )
, CharWireNum_( ifds::CharWireNum, &ifds::s_FldProp_CharWireNum )
, WireNumMandatory_( ifds::WireNumMandatory, &ifds::s_FldProp_WireNumMandatory )
, WireNumDefault_( ifds::WireNumDefault, &ifds::s_FldProp_WireNumDefault )
, SrcOfFundMandatory_( ifds::SrcOfFundMandatory, &ifds::s_FldProp_SrcOfFundMandatory )
, RRIFPrevYear_( ifds::RRIFPrevYear, &ifds::s_FldProp_RRIFPrevYear )
, RRIFOrPayment_( ifds::RRIFOrPayment, &ifds::s_FldProp_RRIFOrPayment )
, RRIFValidation_( ifds::RRIFValidation, &ifds::s_FldProp_RRIFValidation )
, FundAllocLimit_( ifds::FundAllocLimit, &ifds::s_FldProp_FundAllocLimit )
, AMSOrder_( ifds::AMSOrder, &ifds::s_FldProp_AMSOrder )
, DefSetlCurrency_( ifds::DefSetlCurrency, &ifds::s_FldProp_DefSetlCurrency )
, PrevBusDate_( ifds::PrevBusDate, &ifds::s_FldProp_PrevBusDate )
, CurrChkByTaxType_( ifds::CurrChkByTaxType, &ifds::s_FldProp_CurrChkByTaxType )
, EuroAddrFormat_( ifds::EuroAddrFormat, &ifds::s_FldProp_EuroAddrFormat )
, InvalidCurr_( ifds::InvalidCurr, &ifds::s_FldProp_InvalidCurr )
, TaxTypeByCurrChk_( ifds::TaxTypeByCurrChk, &ifds::s_FldProp_TaxTypeByCurrChk )
, SegClient_( ifds::SegClient, &ifds::s_FldProp_SegClient )
, CotClient_( ifds::CotClient, &ifds::s_FldProp_CotClient )
, ResClient_( ifds::ResClient, &ifds::s_FldProp_ResClient )
, LipClient_( ifds::LipClient, &ifds::s_FldProp_LipClient )
, T550ReportMethod_( ifds::T550ReportMethod, &ifds::s_FldProp_T550ReportMethod )
, ShrEFTConsol_( ifds::ShrEFTConsol, &ifds::s_FldProp_ShrEFTConsol )
, PACSWPEFTConsol_( ifds::PACSWPEFTConsol, &ifds::s_FldProp_PACSWPEFTConsol )
, Unseizable_( ifds::Unseizable, &ifds::s_FldProp_Unseizable )
, RdLckdE_( ifds::RdLckdE, &ifds::s_FldProp_RdLckdE )
, RdLckdW_( ifds::RdLckdW, &ifds::s_FldProp_RdLckdW )
, TitleRestrict_( ifds::TitleRestrict, &ifds::s_FldProp_TitleRestrict )
, EditDeffs_( ifds::EditDeffs, &ifds::s_FldProp_EditDeffs )
, RoundFlag_( ifds::RoundFlag, &ifds::s_FldProp_RoundFlag )
, RedAccruedInt_( ifds::RedAccruedInt, &ifds::s_FldProp_RedAccruedInt )
, PQLIFLIRARedCodes_( ifds::PQLIFLIRARedCodes, &ifds::s_FldProp_PQLIFLIRARedCodes )
, PQLIFLIRAJuris_( ifds::PQLIFLIRAJuris, &ifds::s_FldProp_PQLIFLIRAJuris )
, PQLIFLIRAAage_( ifds::PQLIFLIRAAage, &ifds::s_FldProp_PQLIFLIRAAage )
, PQLIFLIRAMaxPrct_( ifds::PQLIFLIRAMaxPrct, &ifds::s_FldProp_PQLIFLIRAMaxPrct )
, PQLIFLIRATaxType_( ifds::PQLIFLIRATaxType, &ifds::s_FldProp_PQLIFLIRATaxType )
, AutoBanking_( ifds::AutoBanking, &ifds::s_FldProp_AutoBanking )
, RdAcctCurrency_( ifds::RdAcctCurrency, &ifds::s_FldProp_RdAcctCurrency )
, BankSrcAcct_( ifds::BankSrcAcct, &ifds::s_FldProp_BankSrcAcct )
, SourceOffFund_( ifds::SourceOffFund, &ifds::s_FldProp_SourceOffFund )
, ModRecipType_( ifds::ModRecipType, &ifds::s_FldProp_ModRecipType )
, SpecAcctNum_( ifds::SpecAcctNum, &ifds::s_FldProp_SpecAcctNum )
, TradeCutOff_( ifds::TradeCutOff, &ifds::s_FldProp_TradeCutOff )
, PartTransAsFull_( ifds::PartTransAsFull, &ifds::s_FldProp_PartTransAsFull )
, CheqDeliveryDefault_( ifds::CheqDeliveryDefault, &ifds::s_FldProp_CheqDeliveryDefault )
, SplitComm100_( ifds::SplitComm100, &ifds::s_FldProp_SplitComm100 )
, CashDistribRule_( ifds::CashDistribRule, &ifds::s_FldProp_CashDistribRule )
, ValidDistributionPayType_( ifds::ValidDistributionPayType, &ifds::s_FldProp_ValidDistributionPayType )
, AllFundsTransfers_( ifds::AllFundsTransfers, &ifds::s_FldProp_AllFundsTransfers )
, TfrToDiffSH_( ifds::TfrToDiffSH, &ifds::s_FldProp_TfrToDiffSH )
, DeathRedCode_( ifds::DeathRedCode, &ifds::s_FldProp_DeathRedCode )
, SpouseBenefReLn_( ifds::SpouseBenefReLn, &ifds::s_FldProp_SpouseBenefReLn )
, ChildBenefReLn_( ifds::ChildBenefReLn, &ifds::s_FldProp_ChildBenefReLn )
, MultiAcctEachShrNum_( ifds::MultiAcctEachShrNum, &ifds::s_FldProp_MultiAcctEachShrNum )
, UpdOrdType_( ifds::UpdOrdType, &ifds::s_FldProp_UpdOrdType )
, CommissionType_( ifds::CommissionType, &ifds::s_FldProp_CommissionType )
, Residency1_( ifds::Residency1, &ifds::s_FldProp_Residency1 )
, Residency2_( ifds::Residency2, &ifds::s_FldProp_Residency2 )
, Residency3_( ifds::Residency3, &ifds::s_FldProp_Residency3 )
, DefltRedCodeFlag_( ifds::DefltRedCodeFlag, &ifds::s_FldProp_DefltRedCodeFlag )
, DefltRedCode_( ifds::DefltRedCode, &ifds::s_FldProp_DefltRedCode )
, FundEligSlsRepLvl_( ifds::FundEligSlsRepLvl, &ifds::s_FldProp_FundEligSlsRepLvl )
, WrapAccount_( ifds::WrapAccount, &ifds::s_FldProp_WrapAccount )
, DistribFundsValidate_( ifds::DistribFundsValidate, &ifds::s_FldProp_DistribFundsValidate )
, XSFundsValidate_( ifds::XSFundsValidate, &ifds::s_FldProp_XSFundsValidate )
, ClientAMSType_( ifds::ClientAMSType, &ifds::s_FldProp_ClientAMSType )
, ClassRule_( ifds::ClassRule, &ifds::s_FldProp_ClassRule )
, ProfileCodeDflt_( ifds::ProfileCodeDflt, &ifds::s_FldProp_ProfileCodeDflt )
, MgmtFeePayOptDflt_( ifds::MgmtFeePayOptDflt, &ifds::s_FldProp_MgmtFeePayOptDflt )
, MgmtCoPayReq_( ifds::MgmtCoPayReq, &ifds::s_FldProp_MgmtCoPayReq )
, SplitPreferenceOption_( ifds::SplitPreferenceOption, &ifds::s_FldProp_SplitPreferenceOption )
, RES2Client_( ifds::RES2Client, &ifds::s_FldProp_RES2Client )
, QESIClient_( ifds::QESIClient, &ifds::s_FldProp_QESIClient )
, PSE_EAPEditDate_( ifds::PSE_EAPEditDate, &ifds::s_FldProp_PSE_EAPEditDate )
, EligDateforCLB_( ifds::EligDateforCLB, &ifds::s_FldProp_EligDateforCLB )
, NonTrustStartDate_( ifds::NonTrustStartDate, &ifds::s_FldProp_NonTrustStartDate )
, NonTrustStopDate_( ifds::NonTrustStopDate, &ifds::s_FldProp_NonTrustStopDate )
, IsNonTrustee_( ifds::IsNonTrustee, &ifds::s_FldProp_IsNonTrustee )
, AutoDocTracking_( ifds::AutoDocTracking, &ifds::s_FldProp_AutoDocTracking )
, DfltConfDetlKeyValue_( ifds::DfltConfDetlKeyValue, &ifds::s_FldProp_DfltConfDetlKeyValue )
, DfltConfDetlDefValue_( ifds::DfltConfDetlDefValue, &ifds::s_FldProp_DfltConfDetlDefValue )
, FundSERVClient_( ifds::FundSERVClient, &ifds::s_FldProp_FundSERVClient )
{
    cFields_ = 138;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0083_VW::~dsi_DSTC0083_VW()
{
}

BFDataImpl* dsi_DSTC0083_VW::clone()
{
    dsi_DSTC0083_VW* p = new dsi_DSTC0083_VW;
    p->SysCurrency_ = SysCurrency_;
    p->ShrNumCtrl_ = ShrNumCtrl_;
    p->ShrNumVal_ = ShrNumVal_;
    p->AcctNumCtrl_ = AcctNumCtrl_;
    p->AcctNumVal_ = AcctNumVal_;
    p->DefaultGrp_ = DefaultGrp_;
    p->GrpCodeLevel_ = GrpCodeLevel_;
    p->TaxTypeUpd_ = TaxTypeUpd_;
    p->MktMailDef_ = MktMailDef_;
    p->RepByBranch_ = RepByBranch_;
    p->BrokerBranch_ = BrokerBranch_;
    p->CapAddress_ = CapAddress_;
    p->CountryVal_ = CountryVal_;
    p->MandatoryId_ = MandatoryId_;
    p->BirthNameMand_ = BirthNameMand_;
    p->SinException_ = SinException_;
    p->ShadowNominee_ = ShadowNominee_;
    p->BankValid1_ = BankValid1_;
    p->BankValid2_ = BankValid2_;
    p->BankLayout_ = BankLayout_;
    p->SYMBrkUpd_ = SYMBrkUpd_;
    p->BrokerFund_ = BrokerFund_;
    p->PACMinAmt_ = PACMinAmt_;
    p->PACAmtEdit_ = PACAmtEdit_;
    p->GICAllocOnly_ = GICAllocOnly_;
    p->DisableFee4Alloc_ = DisableFee4Alloc_;
    p->BusRounding_ = BusRounding_;
    p->MultiCurrency_ = MultiCurrency_;
    p->SplitComm_ = SplitComm_;
    p->AcctFeeParm_ = AcctFeeParm_;
    p->CappedFund_ = CappedFund_;
    p->BankingFormat_ = BankingFormat_;
    p->InstCodeMax_ = InstCodeMax_;
    p->TransitNoMax_ = TransitNoMax_;
    p->BankAcctNumMax_ = BankAcctNumMax_;
    p->CurrBusDate_ = CurrBusDate_;
    p->MandAddLines_ = MandAddLines_;
    p->CurrSysDate_ = CurrSysDate_;
    p->CurrSysTime_ = CurrSysTime_;
    p->ChkDuplicationTrade_ = ChkDuplicationTrade_;
    p->InvAdvice_ = InvAdvice_;
    p->AcqFeeDefault_ = AcqFeeDefault_;
    p->LastCycleDate_ = LastCycleDate_;
    p->AccountableMandatory_ = AccountableMandatory_;
    p->SplitAcCode_ = SplitAcCode_;
    p->TRExclRedCodes_ = TRExclRedCodes_;
    p->TIKRedCodes_ = TIKRedCodes_;
    p->DealDateTime_ = DealDateTime_;
    p->EFTPurchase_ = EFTPurchase_;
    p->EFTPurchFuture_ = EFTPurchFuture_;
    p->GrpContribution_ = GrpContribution_;
    p->AllowFractions_ = AllowFractions_;
    p->SplitCommTransTypes_ = SplitCommTransTypes_;
    p->CashReceiptTrack_ = CashReceiptTrack_;
    p->DepositId2_ = DepositId2_;
    p->DepositIdMandatory_ = DepositIdMandatory_;
    p->DefaultPurchPayType_ = DefaultPurchPayType_;
    p->EFTPurchaseLeadDays_ = EFTPurchaseLeadDays_;
    p->CharWireNum_ = CharWireNum_;
    p->WireNumMandatory_ = WireNumMandatory_;
    p->WireNumDefault_ = WireNumDefault_;
    p->SrcOfFundMandatory_ = SrcOfFundMandatory_;
    p->RRIFPrevYear_ = RRIFPrevYear_;
    p->RRIFOrPayment_ = RRIFOrPayment_;
    p->RRIFValidation_ = RRIFValidation_;
    p->FundAllocLimit_ = FundAllocLimit_;
    p->AMSOrder_ = AMSOrder_;
    p->DefSetlCurrency_ = DefSetlCurrency_;
    p->PrevBusDate_ = PrevBusDate_;
    p->CurrChkByTaxType_ = CurrChkByTaxType_;
    p->EuroAddrFormat_ = EuroAddrFormat_;
    p->InvalidCurr_ = InvalidCurr_;
    p->TaxTypeByCurrChk_ = TaxTypeByCurrChk_;
    p->SegClient_ = SegClient_;
    p->CotClient_ = CotClient_;
    p->ResClient_ = ResClient_;
    p->LipClient_ = LipClient_;
    p->T550ReportMethod_ = T550ReportMethod_;
    p->ShrEFTConsol_ = ShrEFTConsol_;
    p->PACSWPEFTConsol_ = PACSWPEFTConsol_;
    p->Unseizable_ = Unseizable_;
    p->RdLckdE_ = RdLckdE_;
    p->RdLckdW_ = RdLckdW_;
    p->TitleRestrict_ = TitleRestrict_;
    p->EditDeffs_ = EditDeffs_;
    p->RoundFlag_ = RoundFlag_;
    p->RedAccruedInt_ = RedAccruedInt_;
    p->PQLIFLIRARedCodes_ = PQLIFLIRARedCodes_;
    p->PQLIFLIRAJuris_ = PQLIFLIRAJuris_;
    p->PQLIFLIRAAage_ = PQLIFLIRAAage_;
    p->PQLIFLIRAMaxPrct_ = PQLIFLIRAMaxPrct_;
    p->PQLIFLIRATaxType_ = PQLIFLIRATaxType_;
    p->AutoBanking_ = AutoBanking_;
    p->RdAcctCurrency_ = RdAcctCurrency_;
    p->BankSrcAcct_ = BankSrcAcct_;
    p->SourceOffFund_ = SourceOffFund_;
    p->ModRecipType_ = ModRecipType_;
    p->SpecAcctNum_ = SpecAcctNum_;
    p->TradeCutOff_ = TradeCutOff_;
    p->PartTransAsFull_ = PartTransAsFull_;
    p->CheqDeliveryDefault_ = CheqDeliveryDefault_;
    p->SplitComm100_ = SplitComm100_;
    p->CashDistribRule_ = CashDistribRule_;
    p->ValidDistributionPayType_ = ValidDistributionPayType_;
    p->AllFundsTransfers_ = AllFundsTransfers_;
    p->TfrToDiffSH_ = TfrToDiffSH_;
    p->DeathRedCode_ = DeathRedCode_;
    p->SpouseBenefReLn_ = SpouseBenefReLn_;
    p->ChildBenefReLn_ = ChildBenefReLn_;
    p->MultiAcctEachShrNum_ = MultiAcctEachShrNum_;
    p->UpdOrdType_ = UpdOrdType_;
    p->CommissionType_ = CommissionType_;
    p->Residency1_ = Residency1_;
    p->Residency2_ = Residency2_;
    p->Residency3_ = Residency3_;
    p->DefltRedCodeFlag_ = DefltRedCodeFlag_;
    p->DefltRedCode_ = DefltRedCode_;
    p->FundEligSlsRepLvl_ = FundEligSlsRepLvl_;
    p->WrapAccount_ = WrapAccount_;
    p->DistribFundsValidate_ = DistribFundsValidate_;
    p->XSFundsValidate_ = XSFundsValidate_;
    p->ClientAMSType_ = ClientAMSType_;
    p->ClassRule_ = ClassRule_;
    p->ProfileCodeDflt_ = ProfileCodeDflt_;
    p->MgmtFeePayOptDflt_ = MgmtFeePayOptDflt_;
    p->MgmtCoPayReq_ = MgmtCoPayReq_;
    p->SplitPreferenceOption_ = SplitPreferenceOption_;
    p->RES2Client_ = RES2Client_;
    p->QESIClient_ = QESIClient_;
    p->PSE_EAPEditDate_ = PSE_EAPEditDate_;
    p->EligDateforCLB_ = EligDateforCLB_;
    p->NonTrustStartDate_ = NonTrustStartDate_;
    p->NonTrustStopDate_ = NonTrustStopDate_;
    p->IsNonTrustee_ = IsNonTrustee_;
    p->AutoDocTracking_ = AutoDocTracking_;
    p->DfltConfDetlKeyValue_ = DfltConfDetlKeyValue_;
    p->DfltConfDetlDefValue_ = DfltConfDetlDefValue_;
    p->FundSERVClient_ = FundSERVClient_;
    return(p);
}

BFDataField* dsi_DSTC0083_VW::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40001122: return ( &SysCurrency_ ); break; // SysCurrency
        case 40001123: return ( &ShrNumCtrl_ ); break; // ShrNumCtrl
        case 40001124: return ( &ShrNumVal_ ); break; // ShrNumVal
        case 40001125: return ( &AcctNumCtrl_ ); break; // AcctNumCtrl
        case 40001126: return ( &AcctNumVal_ ); break; // AcctNumVal
        case 40001127: return ( &DefaultGrp_ ); break; // DefaultGrp
        case 40001128: return ( &GrpCodeLevel_ ); break; // GrpCodeLevel
        case 40001129: return ( &TaxTypeUpd_ ); break; // TaxTypeUpd
        case 40001130: return ( &MktMailDef_ ); break; // MktMailDef
        case 40001131: return ( &RepByBranch_ ); break; // RepByBranch
        case 40001132: return ( &BrokerBranch_ ); break; // BrokerBranch
        case 40001133: return ( &CapAddress_ ); break; // CapAddress
        case 40001134: return ( &CountryVal_ ); break; // CountryVal
        case 40001135: return ( &MandatoryId_ ); break; // MandatoryId
        case 40001136: return ( &BirthNameMand_ ); break; // BirthNameMand
        case 40003212: return ( &SinException_ ); break; // SinException
        case 40001138: return ( &ShadowNominee_ ); break; // ShadowNominee
        case 40001139: return ( &BankValid1_ ); break; // BankValid1
        case 40001140: return ( &BankValid2_ ); break; // BankValid2
        case 40001141: return ( &BankLayout_ ); break; // BankLayout
        case 40001142: return ( &SYMBrkUpd_ ); break; // SYMBrkUpd
        case 40001143: return ( &BrokerFund_ ); break; // BrokerFund
        case 40001144: return ( &PACMinAmt_ ); break; // PACMinAmt
        case 40001145: return ( &PACAmtEdit_ ); break; // PACAmtEdit
        case 40001146: return ( &GICAllocOnly_ ); break; // GICAllocOnly
        case 40001147: return ( &DisableFee4Alloc_ ); break; // DisableFee4Alloc
        case 40001148: return ( &BusRounding_ ); break; // BusRounding
        case 40001149: return ( &MultiCurrency_ ); break; // MultiCurrency
        case 40001150: return ( &SplitComm_ ); break; // SplitComm
        case 40001151: return ( &AcctFeeParm_ ); break; // AcctFeeParm
        case 40001152: return ( &CappedFund_ ); break; // CappedFund
        case 40001153: return ( &BankingFormat_ ); break; // BankingFormat
        case 40001156: return ( &InstCodeMax_ ); break; // InstCodeMax
        case 40001154: return ( &TransitNoMax_ ); break; // TransitNoMax
        case 40001155: return ( &BankAcctNumMax_ ); break; // BankAcctNumMax
        case 40000896: return ( &CurrBusDate_ ); break; // CurrBusDate
        case 40001310: return ( &MandAddLines_ ); break; // MandAddLines
        case 40001323: return ( &CurrSysDate_ ); break; // CurrSysDate
        case 40001324: return ( &CurrSysTime_ ); break; // CurrSysTime
        case 40001635: return ( &ChkDuplicationTrade_ ); break; // ChkDuplicationTrade
        case 40001636: return ( &InvAdvice_ ); break; // InvAdvice
        case 40001638: return ( &AcqFeeDefault_ ); break; // AcqFeeDefault
        case 40001637: return ( &LastCycleDate_ ); break; // LastCycleDate
        case 40001643: return ( &AccountableMandatory_ ); break; // AccountableMandatory
        case 40001644: return ( &SplitAcCode_ ); break; // SplitAcCode
        case 40001639: return ( &TRExclRedCodes_ ); break; // TRExclRedCodes
        case 40001640: return ( &TIKRedCodes_ ); break; // TIKRedCodes
        case 40001641: return ( &DealDateTime_ ); break; // DealDateTime
        case 40001652: return ( &EFTPurchase_ ); break; // EFTPurchase
        case 40001642: return ( &EFTPurchFuture_ ); break; // EFTPurchFuture
        case 40001645: return ( &GrpContribution_ ); break; // GrpContribution
        case 40001646: return ( &AllowFractions_ ); break; // AllowFractions
        case 40001647: return ( &SplitCommTransTypes_ ); break; // SplitCommTransTypes
        case 40001648: return ( &CashReceiptTrack_ ); break; // CashReceiptTrack
        case 40001649: return ( &DepositId2_ ); break; // DepositId2
        case 40001650: return ( &DepositIdMandatory_ ); break; // DepositIdMandatory
        case 40001651: return ( &DefaultPurchPayType_ ); break; // DefaultPurchPayType
        case 40001630: return ( &EFTPurchaseLeadDays_ ); break; // EFTPurchaseLeadDays
        case 40001631: return ( &CharWireNum_ ); break; // CharWireNum
        case 40001632: return ( &WireNumMandatory_ ); break; // WireNumMandatory
        case 40001633: return ( &WireNumDefault_ ); break; // WireNumDefault
        case 40001634: return ( &SrcOfFundMandatory_ ); break; // SrcOfFundMandatory
        case 40001783: return ( &RRIFPrevYear_ ); break; // RRIFPrevYear
        case 40001784: return ( &RRIFOrPayment_ ); break; // RRIFOrPayment
        case 40001785: return ( &RRIFValidation_ ); break; // RRIFValidation
        case 40001786: return ( &FundAllocLimit_ ); break; // FundAllocLimit
        case 40001787: return ( &AMSOrder_ ); break; // AMSOrder
        case 40001788: return ( &DefSetlCurrency_ ); break; // DefSetlCurrency
        case 40001789: return ( &PrevBusDate_ ); break; // PrevBusDate
        case 40001779: return ( &CurrChkByTaxType_ ); break; // CurrChkByTaxType
        case 40001780: return ( &EuroAddrFormat_ ); break; // EuroAddrFormat
        case 40001781: return ( &InvalidCurr_ ); break; // InvalidCurr
        case 40001782: return ( &TaxTypeByCurrChk_ ); break; // TaxTypeByCurrChk
        case 40001791: return ( &SegClient_ ); break; // SegClient
        case 40001792: return ( &CotClient_ ); break; // CotClient
        case 40001793: return ( &ResClient_ ); break; // ResClient
        case 40001794: return ( &LipClient_ ); break; // LipClient
        case 40001819: return ( &T550ReportMethod_ ); break; // T550ReportMethod
        case 40001884: return ( &ShrEFTConsol_ ); break; // ShrEFTConsol
        case 40001885: return ( &PACSWPEFTConsol_ ); break; // PACSWPEFTConsol
        case 40000202: return ( &Unseizable_ ); break; // Unseizable
        case 40001911: return ( &RdLckdE_ ); break; // RdLckdE
        case 40001912: return ( &RdLckdW_ ); break; // RdLckdW
        case 40001913: return ( &TitleRestrict_ ); break; // TitleRestrict
        case 40001914: return ( &EditDeffs_ ); break; // EditDeffs
        case 40000474: return ( &RoundFlag_ ); break; // RoundFlag
        case 40001915: return ( &RedAccruedInt_ ); break; // RedAccruedInt
        case 40001916: return ( &PQLIFLIRARedCodes_ ); break; // PQLIFLIRARedCodes
        case 40001917: return ( &PQLIFLIRAJuris_ ); break; // PQLIFLIRAJuris
        case 40001918: return ( &PQLIFLIRAAage_ ); break; // PQLIFLIRAAage
        case 40001919: return ( &PQLIFLIRAMaxPrct_ ); break; // PQLIFLIRAMaxPrct
        case 40001920: return ( &PQLIFLIRATaxType_ ); break; // PQLIFLIRATaxType
        case 40001978: return ( &AutoBanking_ ); break; // AutoBanking
        case 40001979: return ( &RdAcctCurrency_ ); break; // RdAcctCurrency
        case 40001980: return ( &BankSrcAcct_ ); break; // BankSrcAcct
        case 40001981: return ( &SourceOffFund_ ); break; // SourceOffFund
        case 40001982: return ( &ModRecipType_ ); break; // ModRecipType
        case 40001951: return ( &SpecAcctNum_ ); break; // SpecAcctNum
        case 40001953: return ( &TradeCutOff_ ); break; // TradeCutOff
        case 40001997: return ( &PartTransAsFull_ ); break; // PartTransAsFull
        case 40001998: return ( &CheqDeliveryDefault_ ); break; // CheqDeliveryDefault
        case 40002002: return ( &SplitComm100_ ); break; // SplitComm100
        case 40002000: return ( &CashDistribRule_ ); break; // CashDistribRule
        case 40002001: return ( &ValidDistributionPayType_ ); break; // ValidDistributionPayType
        case 40002007: return ( &AllFundsTransfers_ ); break; // AllFundsTransfers
        case 40002008: return ( &TfrToDiffSH_ ); break; // TfrToDiffSH
        case 40002010: return ( &DeathRedCode_ ); break; // DeathRedCode
        case 40002011: return ( &SpouseBenefReLn_ ); break; // SpouseBenefReLn
        case 40002012: return ( &ChildBenefReLn_ ); break; // ChildBenefReLn
        case 40002026: return ( &MultiAcctEachShrNum_ ); break; // MultiAcctEachShrNum
        case 40002052: return ( &UpdOrdType_ ); break; // UpdOrdType
        case 40002199: return ( &CommissionType_ ); break; // CommissionType
        case 40003003: return ( &Residency1_ ); break; // Residency1
        case 40003004: return ( &Residency2_ ); break; // Residency2
        case 40003005: return ( &Residency3_ ); break; // Residency3
        case 40003231: return ( &DefltRedCodeFlag_ ); break; // DefltRedCodeFlag
        case 40003232: return ( &DefltRedCode_ ); break; // DefltRedCode
        case 40003543: return ( &FundEligSlsRepLvl_ ); break; // FundEligSlsRepLvl
        case 40003544: return ( &WrapAccount_ ); break; // WrapAccount
        case 40003550: return ( &DistribFundsValidate_ ); break; // DistribFundsValidate
        case 40003551: return ( &XSFundsValidate_ ); break; // XSFundsValidate
        case 40003552: return ( &ClientAMSType_ ); break; // ClientAMSType
        case 40003595: return ( &ClassRule_ ); break; // ClassRule
        case 40003883: return ( &ProfileCodeDflt_ ); break; // ProfileCodeDflt
        case 40003884: return ( &MgmtFeePayOptDflt_ ); break; // MgmtFeePayOptDflt
        case 40005476: return ( &MgmtCoPayReq_ ); break; // MgmtCoPayReq
        case 40006014: return ( &SplitPreferenceOption_ ); break; // SplitPreferenceOption
        case 40006078: return ( &RES2Client_ ); break; // RES2Client
        case 40006079: return ( &QESIClient_ ); break; // QESIClient
        case 40006173: return ( &PSE_EAPEditDate_ ); break; // PSE_EAPEditDate
        case 40006174: return ( &EligDateforCLB_ ); break; // EligDateforCLB
        case 40006370: return ( &NonTrustStartDate_ ); break; // NonTrustStartDate
        case 40006372: return ( &NonTrustStopDate_ ); break; // NonTrustStopDate
        case 40006373: return ( &IsNonTrustee_ ); break; // IsNonTrustee
        case 40007188: return ( &AutoDocTracking_ ); break; // AutoDocTracking
        case 40007800: return ( &DfltConfDetlKeyValue_ ); break; // DfltConfDetlKeyValue
        case 40007801: return ( &DfltConfDetlDefValue_ ); break; // DfltConfDetlDefValue
        case 40007865: return ( &FundSERVClient_ ); break; // FundSERVClient
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0083_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0083_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0083_VW::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 138 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &SysCurrency_; break;
                case 1: aFlds_[1] = &ShrNumCtrl_; break;
                case 2: aFlds_[2] = &ShrNumVal_; break;
                case 3: aFlds_[3] = &AcctNumCtrl_; break;
                case 4: aFlds_[4] = &AcctNumVal_; break;
                case 5: aFlds_[5] = &DefaultGrp_; break;
                case 6: aFlds_[6] = &GrpCodeLevel_; break;
                case 7: aFlds_[7] = &TaxTypeUpd_; break;
                case 8: aFlds_[8] = &MktMailDef_; break;
                case 9: aFlds_[9] = &RepByBranch_; break;
                case 10: aFlds_[10] = &BrokerBranch_; break;
                case 11: aFlds_[11] = &CapAddress_; break;
                case 12: aFlds_[12] = &CountryVal_; break;
                case 13: aFlds_[13] = &MandatoryId_; break;
                case 14: aFlds_[14] = &BirthNameMand_; break;
                case 15: aFlds_[15] = &SinException_; break;
                case 16: aFlds_[16] = &ShadowNominee_; break;
                case 17: aFlds_[17] = &BankValid1_; break;
                case 18: aFlds_[18] = &BankValid2_; break;
                case 19: aFlds_[19] = &BankLayout_; break;
                case 20: aFlds_[20] = &SYMBrkUpd_; break;
                case 21: aFlds_[21] = &BrokerFund_; break;
                case 22: aFlds_[22] = &PACMinAmt_; break;
                case 23: aFlds_[23] = &PACAmtEdit_; break;
                case 24: aFlds_[24] = &GICAllocOnly_; break;
                case 25: aFlds_[25] = &DisableFee4Alloc_; break;
                case 26: aFlds_[26] = &BusRounding_; break;
                case 27: aFlds_[27] = &MultiCurrency_; break;
                case 28: aFlds_[28] = &SplitComm_; break;
                case 29: aFlds_[29] = &AcctFeeParm_; break;
                case 30: aFlds_[30] = &CappedFund_; break;
                case 31: aFlds_[31] = &BankingFormat_; break;
                case 32: aFlds_[32] = &InstCodeMax_; break;
                case 33: aFlds_[33] = &TransitNoMax_; break;
                case 34: aFlds_[34] = &BankAcctNumMax_; break;
                case 35: aFlds_[35] = &CurrBusDate_; break;
                case 36: aFlds_[36] = &MandAddLines_; break;
                case 37: aFlds_[37] = &CurrSysDate_; break;
                case 38: aFlds_[38] = &CurrSysTime_; break;
                case 39: aFlds_[39] = &ChkDuplicationTrade_; break;
                case 40: aFlds_[40] = &InvAdvice_; break;
                case 41: aFlds_[41] = &AcqFeeDefault_; break;
                case 42: aFlds_[42] = &LastCycleDate_; break;
                case 43: aFlds_[43] = &AccountableMandatory_; break;
                case 44: aFlds_[44] = &SplitAcCode_; break;
                case 45: aFlds_[45] = &TRExclRedCodes_; break;
                case 46: aFlds_[46] = &TIKRedCodes_; break;
                case 47: aFlds_[47] = &DealDateTime_; break;
                case 48: aFlds_[48] = &EFTPurchase_; break;
                case 49: aFlds_[49] = &EFTPurchFuture_; break;
                case 50: aFlds_[50] = &GrpContribution_; break;
                case 51: aFlds_[51] = &AllowFractions_; break;
                case 52: aFlds_[52] = &SplitCommTransTypes_; break;
                case 53: aFlds_[53] = &CashReceiptTrack_; break;
                case 54: aFlds_[54] = &DepositId2_; break;
                case 55: aFlds_[55] = &DepositIdMandatory_; break;
                case 56: aFlds_[56] = &DefaultPurchPayType_; break;
                case 57: aFlds_[57] = &EFTPurchaseLeadDays_; break;
                case 58: aFlds_[58] = &CharWireNum_; break;
                case 59: aFlds_[59] = &WireNumMandatory_; break;
                case 60: aFlds_[60] = &WireNumDefault_; break;
                case 61: aFlds_[61] = &SrcOfFundMandatory_; break;
                case 62: aFlds_[62] = &RRIFPrevYear_; break;
                case 63: aFlds_[63] = &RRIFOrPayment_; break;
                case 64: aFlds_[64] = &RRIFValidation_; break;
                case 65: aFlds_[65] = &FundAllocLimit_; break;
                case 66: aFlds_[66] = &AMSOrder_; break;
                case 67: aFlds_[67] = &DefSetlCurrency_; break;
                case 68: aFlds_[68] = &PrevBusDate_; break;
                case 69: aFlds_[69] = &CurrChkByTaxType_; break;
                case 70: aFlds_[70] = &EuroAddrFormat_; break;
                case 71: aFlds_[71] = &InvalidCurr_; break;
                case 72: aFlds_[72] = &TaxTypeByCurrChk_; break;
                case 73: aFlds_[73] = &SegClient_; break;
                case 74: aFlds_[74] = &CotClient_; break;
                case 75: aFlds_[75] = &ResClient_; break;
                case 76: aFlds_[76] = &LipClient_; break;
                case 77: aFlds_[77] = &T550ReportMethod_; break;
                case 78: aFlds_[78] = &ShrEFTConsol_; break;
                case 79: aFlds_[79] = &PACSWPEFTConsol_; break;
                case 80: aFlds_[80] = &Unseizable_; break;
                case 81: aFlds_[81] = &RdLckdE_; break;
                case 82: aFlds_[82] = &RdLckdW_; break;
                case 83: aFlds_[83] = &TitleRestrict_; break;
                case 84: aFlds_[84] = &EditDeffs_; break;
                case 85: aFlds_[85] = &RoundFlag_; break;
                case 86: aFlds_[86] = &RedAccruedInt_; break;
                case 87: aFlds_[87] = &PQLIFLIRARedCodes_; break;
                case 88: aFlds_[88] = &PQLIFLIRAJuris_; break;
                case 89: aFlds_[89] = &PQLIFLIRAAage_; break;
                case 90: aFlds_[90] = &PQLIFLIRAMaxPrct_; break;
                case 91: aFlds_[91] = &PQLIFLIRATaxType_; break;
                case 92: aFlds_[92] = &AutoBanking_; break;
                case 93: aFlds_[93] = &RdAcctCurrency_; break;
                case 94: aFlds_[94] = &BankSrcAcct_; break;
                case 95: aFlds_[95] = &SourceOffFund_; break;
                case 96: aFlds_[96] = &ModRecipType_; break;
                case 97: aFlds_[97] = &SpecAcctNum_; break;
                case 98: aFlds_[98] = &TradeCutOff_; break;
                case 99: aFlds_[99] = &PartTransAsFull_; break;
                case 100: aFlds_[100] = &CheqDeliveryDefault_; break;
                case 101: aFlds_[101] = &SplitComm100_; break;
                case 102: aFlds_[102] = &CashDistribRule_; break;
                case 103: aFlds_[103] = &ValidDistributionPayType_; break;
                case 104: aFlds_[104] = &AllFundsTransfers_; break;
                case 105: aFlds_[105] = &TfrToDiffSH_; break;
                case 106: aFlds_[106] = &DeathRedCode_; break;
                case 107: aFlds_[107] = &SpouseBenefReLn_; break;
                case 108: aFlds_[108] = &ChildBenefReLn_; break;
                case 109: aFlds_[109] = &MultiAcctEachShrNum_; break;
                case 110: aFlds_[110] = &UpdOrdType_; break;
                case 111: aFlds_[111] = &CommissionType_; break;
                case 112: aFlds_[112] = &Residency1_; break;
                case 113: aFlds_[113] = &Residency2_; break;
                case 114: aFlds_[114] = &Residency3_; break;
                case 115: aFlds_[115] = &DefltRedCodeFlag_; break;
                case 116: aFlds_[116] = &DefltRedCode_; break;
                case 117: aFlds_[117] = &FundEligSlsRepLvl_; break;
                case 118: aFlds_[118] = &WrapAccount_; break;
                case 119: aFlds_[119] = &DistribFundsValidate_; break;
                case 120: aFlds_[120] = &XSFundsValidate_; break;
                case 121: aFlds_[121] = &ClientAMSType_; break;
                case 122: aFlds_[122] = &ClassRule_; break;
                case 123: aFlds_[123] = &ProfileCodeDflt_; break;
                case 124: aFlds_[124] = &MgmtFeePayOptDflt_; break;
                case 125: aFlds_[125] = &MgmtCoPayReq_; break;
                case 126: aFlds_[126] = &SplitPreferenceOption_; break;
                case 127: aFlds_[127] = &RES2Client_; break;
                case 128: aFlds_[128] = &QESIClient_; break;
                case 129: aFlds_[129] = &PSE_EAPEditDate_; break;
                case 130: aFlds_[130] = &EligDateforCLB_; break;
                case 131: aFlds_[131] = &NonTrustStartDate_; break;
                case 132: aFlds_[132] = &NonTrustStopDate_; break;
                case 133: aFlds_[133] = &IsNonTrustee_; break;
                case 134: aFlds_[134] = &AutoDocTracking_; break;
                case 135: aFlds_[135] = &DfltConfDetlKeyValue_; break;
                case 136: aFlds_[136] = &DfltConfDetlDefValue_; break;
                case 137: aFlds_[137] = &FundSERVClient_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0083_VW::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0083_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0083_VW::getLargestDefinedField( void ) const
{
    return( 200 );
}

unsigned long dsi_DSTC0083_VW::getDefinedByteLength( void ) const
{
    return( 2828 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0083_VW::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0083_VW::fieldExists( id );
}

bool dsi_DSTC0083_VW::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40001122: return ( true );
        case 40001123: return ( true );
        case 40001124: return ( true );
        case 40001125: return ( true );
        case 40001126: return ( true );
        case 40001127: return ( true );
        case 40001128: return ( true );
        case 40001129: return ( true );
        case 40001130: return ( true );
        case 40001131: return ( true );
        case 40001132: return ( true );
        case 40001133: return ( true );
        case 40001134: return ( true );
        case 40001135: return ( true );
        case 40001136: return ( true );
        case 40003212: return ( true );
        case 40001138: return ( true );
        case 40001139: return ( true );
        case 40001140: return ( true );
        case 40001141: return ( true );
        case 40001142: return ( true );
        case 40001143: return ( true );
        case 40001144: return ( true );
        case 40001145: return ( true );
        case 40001146: return ( true );
        case 40001147: return ( true );
        case 40001148: return ( true );
        case 40001149: return ( true );
        case 40001150: return ( true );
        case 40001151: return ( true );
        case 40001152: return ( true );
        case 40001153: return ( true );
        case 40001156: return ( true );
        case 40001154: return ( true );
        case 40001155: return ( true );
        case 40000896: return ( true );
        case 40001310: return ( true );
        case 40001323: return ( true );
        case 40001324: return ( true );
        case 40001635: return ( true );
        case 40001636: return ( true );
        case 40001638: return ( true );
        case 40001637: return ( true );
        case 40001643: return ( true );
        case 40001644: return ( true );
        case 40001639: return ( true );
        case 40001640: return ( true );
        case 40001641: return ( true );
        case 40001652: return ( true );
        case 40001642: return ( true );
        case 40001645: return ( true );
        case 40001646: return ( true );
        case 40001647: return ( true );
        case 40001648: return ( true );
        case 40001649: return ( true );
        case 40001650: return ( true );
        case 40001651: return ( true );
        case 40001630: return ( true );
        case 40001631: return ( true );
        case 40001632: return ( true );
        case 40001633: return ( true );
        case 40001634: return ( true );
        case 40001783: return ( true );
        case 40001784: return ( true );
        case 40001785: return ( true );
        case 40001786: return ( true );
        case 40001787: return ( true );
        case 40001788: return ( true );
        case 40001789: return ( true );
        case 40001779: return ( true );
        case 40001780: return ( true );
        case 40001781: return ( true );
        case 40001782: return ( true );
        case 40001791: return ( true );
        case 40001792: return ( true );
        case 40001793: return ( true );
        case 40001794: return ( true );
        case 40001819: return ( true );
        case 40001884: return ( true );
        case 40001885: return ( true );
        case 40000202: return ( true );
        case 40001911: return ( true );
        case 40001912: return ( true );
        case 40001913: return ( true );
        case 40001914: return ( true );
        case 40000474: return ( true );
        case 40001915: return ( true );
        case 40001916: return ( true );
        case 40001917: return ( true );
        case 40001918: return ( true );
        case 40001919: return ( true );
        case 40001920: return ( true );
        case 40001978: return ( true );
        case 40001979: return ( true );
        case 40001980: return ( true );
        case 40001981: return ( true );
        case 40001982: return ( true );
        case 40001951: return ( true );
        case 40001953: return ( true );
        case 40001997: return ( true );
        case 40001998: return ( true );
        case 40002002: return ( true );
        case 40002000: return ( true );
        case 40002001: return ( true );
        case 40002007: return ( true );
        case 40002008: return ( true );
        case 40002010: return ( true );
        case 40002011: return ( true );
        case 40002012: return ( true );
        case 40002026: return ( true );
        case 40002052: return ( true );
        case 40002199: return ( true );
        case 40003003: return ( true );
        case 40003004: return ( true );
        case 40003005: return ( true );
        case 40003231: return ( true );
        case 40003232: return ( true );
        case 40003543: return ( true );
        case 40003544: return ( true );
        case 40003550: return ( true );
        case 40003551: return ( true );
        case 40003552: return ( true );
        case 40003595: return ( true );
        case 40003883: return ( true );
        case 40003884: return ( true );
        case 40005476: return ( true );
        case 40006014: return ( true );
        case 40006078: return ( true );
        case 40006079: return ( true );
        case 40006173: return ( true );
        case 40006174: return ( true );
        case 40006370: return ( true );
        case 40006372: return ( true );
        case 40006373: return ( true );
        case 40007188: return ( true );
        case 40007800: return ( true );
        case 40007801: return ( true );
        case 40007865: return ( true );
    }
    return false;
}

