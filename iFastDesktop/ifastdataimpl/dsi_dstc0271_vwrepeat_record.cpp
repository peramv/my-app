// BFDataImpl implementation file for DataSet DSTC0271.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0271_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0271_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0271_VWRepeat_Record() { return new dsi_DSTC0271_VWRepeat_Record; }

dsi_DSTC0271_VWRepeat_Record::dsi_DSTC0271_VWRepeat_Record()
: BFDataImpl( 40004249 )
, TransferNumber_( ifds::TransferNumber, &ifds::s_FldProp_TransferNumber )
, TransferSuffix_( ifds::TransferSuffix, &ifds::s_FldProp_TransferSuffix )
, ExtStatusCode_( ifds::ExtStatusCode, &ifds::s_FldProp_ExtStatusCode )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, CompleteDate_( ifds::CompleteDate, &ifds::s_FldProp_CompleteDate )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, SendLetters_( ifds::SendLetters, &ifds::s_FldProp_SendLetters )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, Version_( ifds::Version, &ifds::s_FldProp_Version )
, Comments1_( ifds::Comments1, &ifds::s_FldProp_Comments1 )
, Comments2_( ifds::Comments2, &ifds::s_FldProp_Comments2 )
, Comments3_( ifds::Comments3, &ifds::s_FldProp_Comments3 )
, AcctExtXferDetlRId_( ifds::AcctExtXferDetlRId, &ifds::s_FldProp_AcctExtXferDetlRId )
, FirstLetterDate_( ifds::FirstLetterDate, &ifds::s_FldProp_FirstLetterDate )
, SecondLetterDate_( ifds::SecondLetterDate, &ifds::s_FldProp_SecondLetterDate )
, ThirdLetterDate_( ifds::ThirdLetterDate, &ifds::s_FldProp_ThirdLetterDate )
, SubsequentLetterDate_( ifds::SubsequentLetterDate, &ifds::s_FldProp_SubsequentLetterDate )
, OverdueDays_( ifds::OverdueDays, &ifds::s_FldProp_OverdueDays )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
{
   cFields_ = 22;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0271_VWRepeat_Record::~dsi_DSTC0271_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0271_VWRepeat_Record::clone()
{
   dsi_DSTC0271_VWRepeat_Record* p = new dsi_DSTC0271_VWRepeat_Record;
   p->TransferNumber_ = TransferNumber_;
   p->TransferSuffix_ = TransferSuffix_;
   p->ExtStatusCode_ = ExtStatusCode_;
   p->EffectiveDate_ = EffectiveDate_;
   p->CompleteDate_ = CompleteDate_;
   p->Amount_ = Amount_;
   p->SendLetters_ = SendLetters_;
   p->ProcessDate_ = ProcessDate_;
   p->Username_ = Username_;
   p->ModDate_ = ModDate_;
   p->ModUser_ = ModUser_;
   p->Version_ = Version_;
   p->Comments1_ = Comments1_;
   p->Comments2_ = Comments2_;
   p->Comments3_ = Comments3_;
   p->AcctExtXferDetlRId_ = AcctExtXferDetlRId_;
   p->FirstLetterDate_ = FirstLetterDate_;
   p->SecondLetterDate_ = SecondLetterDate_;
   p->ThirdLetterDate_ = ThirdLetterDate_;
   p->SubsequentLetterDate_ = SubsequentLetterDate_;
   p->OverdueDays_ = OverdueDays_;
   p->Currency_ = Currency_;
   return(p);
}

BFDataField* dsi_DSTC0271_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40004218: return ( &TransferNumber_ ); break; // TransferNumber
      case 40004219: return ( &TransferSuffix_ ); break; // TransferSuffix
      case 40004231: return ( &ExtStatusCode_ ); break; // ExtStatusCode
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40003728: return ( &CompleteDate_ ); break; // CompleteDate
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40004240: return ( &SendLetters_ ); break; // SendLetters
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40003739: return ( &Version_ ); break; // Version
      case 40003064: return ( &Comments1_ ); break; // Comments1
      case 40003065: return ( &Comments2_ ); break; // Comments2
      case 40003066: return ( &Comments3_ ); break; // Comments3
      case 40004241: return ( &AcctExtXferDetlRId_ ); break; // AcctExtXferDetlRId
      case 40004242: return ( &FirstLetterDate_ ); break; // FirstLetterDate
      case 40004243: return ( &SecondLetterDate_ ); break; // SecondLetterDate
      case 40004244: return ( &ThirdLetterDate_ ); break; // ThirdLetterDate
      case 40004245: return ( &SubsequentLetterDate_ ); break; // SubsequentLetterDate
      case 40004246: return ( &OverdueDays_ ); break; // OverdueDays
      case 40000180: return ( &Currency_ ); break; // Currency
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0271_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0271_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0271_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 22 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TransferNumber_; break;
            case 1: aFlds_[1] = &TransferSuffix_; break;
            case 2: aFlds_[2] = &ExtStatusCode_; break;
            case 3: aFlds_[3] = &EffectiveDate_; break;
            case 4: aFlds_[4] = &CompleteDate_; break;
            case 5: aFlds_[5] = &Amount_; break;
            case 6: aFlds_[6] = &SendLetters_; break;
            case 7: aFlds_[7] = &ProcessDate_; break;
            case 8: aFlds_[8] = &Username_; break;
            case 9: aFlds_[9] = &ModDate_; break;
            case 10: aFlds_[10] = &ModUser_; break;
            case 11: aFlds_[11] = &Version_; break;
            case 12: aFlds_[12] = &Comments1_; break;
            case 13: aFlds_[13] = &Comments2_; break;
            case 14: aFlds_[14] = &Comments3_; break;
            case 15: aFlds_[15] = &AcctExtXferDetlRId_; break;
            case 16: aFlds_[16] = &FirstLetterDate_; break;
            case 17: aFlds_[17] = &SecondLetterDate_; break;
            case 18: aFlds_[18] = &ThirdLetterDate_; break;
            case 19: aFlds_[19] = &SubsequentLetterDate_; break;
            case 20: aFlds_[20] = &OverdueDays_; break;
            case 21: aFlds_[21] = &Currency_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0271_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0271_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0271_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0271_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 771 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0271_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0271_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0271_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40004218: return( true );
      case 40004219: return( true );
      case 40004231: return( true );
      case 40000327: return( true );
      case 40003728: return( true );
      case 40000231: return( true );
      case 40004240: return( true );
      case 40000216: return( true );
      case 40000117: return( true );
      case 40000217: return( true );
      case 40000218: return( true );
      case 40003739: return( true );
      case 40003064: return( true );
      case 40003065: return( true );
      case 40003066: return( true );
      case 40004241: return( true );
      case 40004242: return( true );
      case 40004243: return( true );
      case 40004244: return( true );
      case 40004245: return( true );
      case 40004246: return( true );
      case 40000180: return( true );
   }
   return false;
}

