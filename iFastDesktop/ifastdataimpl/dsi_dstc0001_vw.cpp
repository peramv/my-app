// BFDataImpl implementation file for DataSet DSTC0001.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:58 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0001_vw.h"


// This function creates an instance of dsi_DSTC0001_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0001_VW() { return new dsi_DSTC0001_VW; }

dsi_DSTC0001_VW::dsi_DSTC0001_VW()
: BFDataImpl( 40000116, 40000121 )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, DaysPasswdChange_( ifds::DaysPasswdChange, &ifds::s_FldProp_DaysPasswdChange )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, EntityId_( ifds::EntityId, &ifds::s_FldProp_EntityId )
, SecurityQuestion_( ifds::SecurityQuestion, &ifds::s_FldProp_SecurityQuestion )
, SecurityAnswer_( ifds::SecurityAnswer, &ifds::s_FldProp_SecurityAnswer )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, SlsrepCode_( ifds::SlsrepCode, &ifds::s_FldProp_SlsrepCode )
, InterCode_( ifds::InterCode, &ifds::s_FldProp_InterCode )
, UserType_( ifds::UserType, &ifds::s_FldProp_UserType )
, VersionLabel_( ifds::VersionLabel, &ifds::s_FldProp_VersionLabel )
, IDAccess_( ifds::IDAccess, &ifds::s_FldProp_IDAccess )
, IdValue_( ifds::IdValue, &ifds::s_FldProp_IdValue )
, IdType_( ifds::IdType, &ifds::s_FldProp_IdType )
, ResetPassword_( ifds::ResetPassword, &ifds::s_FldProp_ResetPassword )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
   cFields_ = 19;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0001_VW::~dsi_DSTC0001_VW()
{
}

BFDataImpl* dsi_DSTC0001_VW::clone()
{
   dsi_DSTC0001_VW* p = new dsi_DSTC0001_VW;
   p->Username_ = Username_;
   p->SessionId_ = SessionId_;
   p->DaysPasswdChange_ = DaysPasswdChange_;
   p->LanguageCode_ = LanguageCode_;
   p->EntityId_ = EntityId_;
   p->SecurityQuestion_ = SecurityQuestion_;
   p->SecurityAnswer_ = SecurityAnswer_;
   p->BrokerCode_ = BrokerCode_;
   p->BranchCode_ = BranchCode_;
   p->SlsrepCode_ = SlsrepCode_;
   p->InterCode_ = InterCode_;
   p->UserType_ = UserType_;
   p->VersionLabel_ = VersionLabel_;
   p->IDAccess_ = IDAccess_;
   p->IdValue_ = IdValue_;
   p->IdType_ = IdType_;
   p->ResetPassword_ = ResetPassword_;
   p->Currency_ = Currency_;
   p->RepeatCount_ = RepeatCount_;
   return(p);
}

BFDataField* dsi_DSTC0001_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000117: return ( &Username_ ); break; // Username
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000118: return ( &DaysPasswdChange_ ); break; // DaysPasswdChange
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000033: return ( &EntityId_ ); break; // EntityId
      case 40002839: return ( &SecurityQuestion_ ); break; // SecurityQuestion
      case 40002840: return ( &SecurityAnswer_ ); break; // SecurityAnswer
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000045: return ( &BranchCode_ ); break; // BranchCode
      case 40000656: return ( &SlsrepCode_ ); break; // SlsrepCode
      case 40000186: return ( &InterCode_ ); break; // InterCode
      case 40004308: return ( &UserType_ ); break; // UserType
      case 40004309: return ( &VersionLabel_ ); break; // VersionLabel
      case 40004535: return ( &IDAccess_ ); break; // IDAccess
      case 40000635: return ( &IdValue_ ); break; // IdValue
      case 40000633: return ( &IdType_ ); break; // IdType
      case 40005404: return ( &ResetPassword_ ); break; // ResetPassword
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0001_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0001_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0001_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 19 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &Username_; break;
            case 1: aFlds_[1] = &SessionId_; break;
            case 2: aFlds_[2] = &DaysPasswdChange_; break;
            case 3: aFlds_[3] = &LanguageCode_; break;
            case 4: aFlds_[4] = &EntityId_; break;
            case 5: aFlds_[5] = &SecurityQuestion_; break;
            case 6: aFlds_[6] = &SecurityAnswer_; break;
            case 7: aFlds_[7] = &BrokerCode_; break;
            case 8: aFlds_[8] = &BranchCode_; break;
            case 9: aFlds_[9] = &SlsrepCode_; break;
            case 10: aFlds_[10] = &InterCode_; break;
            case 11: aFlds_[11] = &UserType_; break;
            case 12: aFlds_[12] = &VersionLabel_; break;
            case 13: aFlds_[13] = &IDAccess_; break;
            case 14: aFlds_[14] = &IdValue_; break;
            case 15: aFlds_[15] = &IdType_; break;
            case 16: aFlds_[16] = &ResetPassword_; break;
            case 17: aFlds_[17] = &Currency_; break;
            case 18: aFlds_[18] = &RepeatCount_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0001_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0001_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0001_VW::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0001_VW::getDefinedByteLength( void ) const
{
   return( 1076 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0001_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0001_VW::fieldExists( id );
}

bool dsi_DSTC0001_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000117: return( true );
      case 40000005: return( true );
      case 40000118: return( true );
      case 40000030: return( true );
      case 40000033: return( true );
      case 40002839: return( true );
      case 40002840: return( true );
      case 40000044: return( true );
      case 40000045: return( true );
      case 40000656: return( true );
      case 40000186: return( true );
      case 40004308: return( true );
      case 40004309: return( true );
      case 40004535: return( true );
      case 40000635: return( true );
      case 40000633: return( true );
      case 40005404: return( true );
      case 40000180: return( true );
      case 40000120: return( true );
   }
   return false;
}

