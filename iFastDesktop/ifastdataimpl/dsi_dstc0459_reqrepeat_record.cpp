// BFDataImpl implementation file for DataSet DSTC0459.REQRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Friday, February 17, 2017 04:38:48


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0459_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0459_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0459_REQRepeat_Record() { return new dsi_DSTC0459_REQRepeat_Record; }

dsi_DSTC0459_REQRepeat_Record::dsi_DSTC0459_REQRepeat_Record()
: BFDataImpl( 40007269 )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, EntRegJurisDetlUUID_( ifds::EntRegJurisDetlUUID, &ifds::s_FldProp_EntRegJurisDetlUUID )
, EntityId_( ifds::EntityId, &ifds::s_FldProp_EntityId )
, FATCACode_( ifds::FATCACode, &ifds::s_FldProp_FATCACode )
, TaxJuris_( ifds::TaxJuris, &ifds::s_FldProp_TaxJuris )
, TaxPayerStat_( ifds::TaxPayerStat, &ifds::s_FldProp_TaxPayerStat )
, AutoResetTaxPayerStat_( ifds::AutoResetTaxPayerStat, &ifds::s_FldProp_AutoResetTaxPayerStat )
, FATCAConsent_( ifds::FATCAConsent, &ifds::s_FldProp_FATCAConsent )
, TaxPayerStartDate_( ifds::TaxPayerStartDate, &ifds::s_FldProp_TaxPayerStartDate )
, TaxPayerStopDate_( ifds::TaxPayerStopDate, &ifds::s_FldProp_TaxPayerStopDate )
, Version_( ifds::Version, &ifds::s_FldProp_Version )
, TPSReason_( ifds::TPSReason, &ifds::s_FldProp_TPSReason )
, NoTINReason_( ifds::NoTINReason, &ifds::s_FldProp_NoTINReason )
{
    cFields_ = 13;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0459_REQRepeat_Record::~dsi_DSTC0459_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0459_REQRepeat_Record::clone()
{
    dsi_DSTC0459_REQRepeat_Record* p = new dsi_DSTC0459_REQRepeat_Record;
    p->RunMode_ = RunMode_;
    p->EntRegJurisDetlUUID_ = EntRegJurisDetlUUID_;
    p->EntityId_ = EntityId_;
    p->FATCACode_ = FATCACode_;
    p->TaxJuris_ = TaxJuris_;
    p->TaxPayerStat_ = TaxPayerStat_;
    p->AutoResetTaxPayerStat_ = AutoResetTaxPayerStat_;
    p->FATCAConsent_ = FATCAConsent_;
    p->TaxPayerStartDate_ = TaxPayerStartDate_;
    p->TaxPayerStopDate_ = TaxPayerStopDate_;
    p->Version_ = Version_;
    p->TPSReason_ = TPSReason_;
    p->NoTINReason_ = NoTINReason_;
    return(p);
}

BFDataField* dsi_DSTC0459_REQRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000990: return ( &RunMode_ ); break; // RunMode
        case 40007279: return ( &EntRegJurisDetlUUID_ ); break; // EntRegJurisDetlUUID
        case 40000033: return ( &EntityId_ ); break; // EntityId
        case 40007275: return ( &FATCACode_ ); break; // FATCACode
        case 40004447: return ( &TaxJuris_ ); break; // TaxJuris
        case 40007280: return ( &TaxPayerStat_ ); break; // TaxPayerStat
        case 40007281: return ( &AutoResetTaxPayerStat_ ); break; // AutoResetTaxPayerStat
        case 40007295: return ( &FATCAConsent_ ); break; // FATCAConsent
        case 40007282: return ( &TaxPayerStartDate_ ); break; // TaxPayerStartDate
        case 40007283: return ( &TaxPayerStopDate_ ); break; // TaxPayerStopDate
        case 40003739: return ( &Version_ ); break; // Version
        case 40007433: return ( &TPSReason_ ); break; // TPSReason
        case 40007718: return ( &NoTINReason_ ); break; // NoTINReason
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0459_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0459_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0459_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 13 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &RunMode_; break;
                case 1: aFlds_[1] = &EntRegJurisDetlUUID_; break;
                case 2: aFlds_[2] = &EntityId_; break;
                case 3: aFlds_[3] = &FATCACode_; break;
                case 4: aFlds_[4] = &TaxJuris_; break;
                case 5: aFlds_[5] = &TaxPayerStat_; break;
                case 6: aFlds_[6] = &AutoResetTaxPayerStat_; break;
                case 7: aFlds_[7] = &FATCAConsent_; break;
                case 8: aFlds_[8] = &TaxPayerStartDate_; break;
                case 9: aFlds_[9] = &TaxPayerStopDate_; break;
                case 10: aFlds_[10] = &Version_; break;
                case 11: aFlds_[11] = &TPSReason_; break;
                case 12: aFlds_[12] = &NoTINReason_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0459_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0459_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0459_REQRepeat_Record::getLargestDefinedField( void ) const
{
    return( 60 );
}

unsigned long dsi_DSTC0459_REQRepeat_Record::getDefinedByteLength( void ) const
{
    return( 507 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0459_REQRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0459_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0459_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000990: return ( true );
        case 40007279: return ( true );
        case 40000033: return ( true );
        case 40007275: return ( true );
        case 40004447: return ( true );
        case 40007280: return ( true );
        case 40007281: return ( true );
        case 40007295: return ( true );
        case 40007282: return ( true );
        case 40007283: return ( true );
        case 40003739: return ( true );
        case 40007433: return ( true );
        case 40007718: return ( true );
    }
    return false;
}

