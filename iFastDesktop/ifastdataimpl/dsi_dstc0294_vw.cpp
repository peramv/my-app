// BFDataImpl implementation file for DataSet DSTC0294.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0294_vw.h"


// This function creates an instance of dsi_DSTC0294_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0294_VW() { return new dsi_DSTC0294_VW; }

dsi_DSTC0294_VW::dsi_DSTC0294_VW()
: BFDataImpl( 40004508 )
, DomesticACBAmtBefore_( ifds::DomesticACBAmtBefore, &ifds::s_FldProp_DomesticACBAmtBefore )
, DomesticPrcntBefore_( ifds::DomesticPrcntBefore, &ifds::s_FldProp_DomesticPrcntBefore )
, DomesticACBCAmtAfter_( ifds::DomesticACBCAmtAfter, &ifds::s_FldProp_DomesticACBCAmtAfter )
, DomesticPrcntAfter_( ifds::DomesticPrcntAfter, &ifds::s_FldProp_DomesticPrcntAfter )
, FrgnACBAmtBefore_( ifds::FrgnACBAmtBefore, &ifds::s_FldProp_FrgnACBAmtBefore )
, FrgnPrcntBefore_( ifds::FrgnPrcntBefore, &ifds::s_FldProp_FrgnPrcntBefore )
, FrgnACBAmtAfter_( ifds::FrgnACBAmtAfter, &ifds::s_FldProp_FrgnACBAmtAfter )
, FrgnPrcntAfter_( ifds::FrgnPrcntAfter, &ifds::s_FldProp_FrgnPrcntAfter )
, FrgnAllowedPrcntBefore_( ifds::FrgnAllowedPrcntBefore, &ifds::s_FldProp_FrgnAllowedPrcntBefore )
, FrgnAllowedAmtBefore_( ifds::FrgnAllowedAmtBefore, &ifds::s_FldProp_FrgnAllowedAmtBefore )
, Rate_( ifds::Rate, &ifds::s_FldProp_Rate )
, ACBTotalAmtBefore_( ifds::ACBTotalAmtBefore, &ifds::s_FldProp_ACBTotalAmtBefore )
, ACBTotalAmtAfter_( ifds::ACBTotalAmtAfter, &ifds::s_FldProp_ACBTotalAmtAfter )
, FrgnAllowedAmtAfter_( ifds::FrgnAllowedAmtAfter, &ifds::s_FldProp_FrgnAllowedAmtAfter )
, FrgnAllowedPrcntAfter_( ifds::FrgnAllowedPrcntAfter, &ifds::s_FldProp_FrgnAllowedPrcntAfter )
{
   cFields_ = 15;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0294_VW::~dsi_DSTC0294_VW()
{
}

BFDataImpl* dsi_DSTC0294_VW::clone()
{
   dsi_DSTC0294_VW* p = new dsi_DSTC0294_VW;
   p->DomesticACBAmtBefore_ = DomesticACBAmtBefore_;
   p->DomesticPrcntBefore_ = DomesticPrcntBefore_;
   p->DomesticACBCAmtAfter_ = DomesticACBCAmtAfter_;
   p->DomesticPrcntAfter_ = DomesticPrcntAfter_;
   p->FrgnACBAmtBefore_ = FrgnACBAmtBefore_;
   p->FrgnPrcntBefore_ = FrgnPrcntBefore_;
   p->FrgnACBAmtAfter_ = FrgnACBAmtAfter_;
   p->FrgnPrcntAfter_ = FrgnPrcntAfter_;
   p->FrgnAllowedPrcntBefore_ = FrgnAllowedPrcntBefore_;
   p->FrgnAllowedAmtBefore_ = FrgnAllowedAmtBefore_;
   p->Rate_ = Rate_;
   p->ACBTotalAmtBefore_ = ACBTotalAmtBefore_;
   p->ACBTotalAmtAfter_ = ACBTotalAmtAfter_;
   p->FrgnAllowedAmtAfter_ = FrgnAllowedAmtAfter_;
   p->FrgnAllowedPrcntAfter_ = FrgnAllowedPrcntAfter_;
   return(p);
}

BFDataField* dsi_DSTC0294_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40004509: return ( &DomesticACBAmtBefore_ ); break; // DomesticACBAmtBefore
      case 40004510: return ( &DomesticPrcntBefore_ ); break; // DomesticPrcntBefore
      case 40004511: return ( &DomesticACBCAmtAfter_ ); break; // DomesticACBCAmtAfter
      case 40004512: return ( &DomesticPrcntAfter_ ); break; // DomesticPrcntAfter
      case 40004513: return ( &FrgnACBAmtBefore_ ); break; // FrgnACBAmtBefore
      case 40004514: return ( &FrgnPrcntBefore_ ); break; // FrgnPrcntBefore
      case 40004515: return ( &FrgnACBAmtAfter_ ); break; // FrgnACBAmtAfter
      case 40004517: return ( &FrgnPrcntAfter_ ); break; // FrgnPrcntAfter
      case 40004518: return ( &FrgnAllowedPrcntBefore_ ); break; // FrgnAllowedPrcntBefore
      case 40004519: return ( &FrgnAllowedAmtBefore_ ); break; // FrgnAllowedAmtBefore
      case 40002919: return ( &Rate_ ); break; // Rate
      case 40004525: return ( &ACBTotalAmtBefore_ ); break; // ACBTotalAmtBefore
      case 40004526: return ( &ACBTotalAmtAfter_ ); break; // ACBTotalAmtAfter
      case 40004521: return ( &FrgnAllowedAmtAfter_ ); break; // FrgnAllowedAmtAfter
      case 40004522: return ( &FrgnAllowedPrcntAfter_ ); break; // FrgnAllowedPrcntAfter
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0294_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0294_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0294_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 15 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &DomesticACBAmtBefore_; break;
            case 1: aFlds_[1] = &DomesticPrcntBefore_; break;
            case 2: aFlds_[2] = &DomesticACBCAmtAfter_; break;
            case 3: aFlds_[3] = &DomesticPrcntAfter_; break;
            case 4: aFlds_[4] = &FrgnACBAmtBefore_; break;
            case 5: aFlds_[5] = &FrgnPrcntBefore_; break;
            case 6: aFlds_[6] = &FrgnACBAmtAfter_; break;
            case 7: aFlds_[7] = &FrgnPrcntAfter_; break;
            case 8: aFlds_[8] = &FrgnAllowedPrcntBefore_; break;
            case 9: aFlds_[9] = &FrgnAllowedAmtBefore_; break;
            case 10: aFlds_[10] = &Rate_; break;
            case 11: aFlds_[11] = &ACBTotalAmtBefore_; break;
            case 12: aFlds_[12] = &ACBTotalAmtAfter_; break;
            case 13: aFlds_[13] = &FrgnAllowedAmtAfter_; break;
            case 14: aFlds_[14] = &FrgnAllowedPrcntAfter_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0294_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0294_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0294_VW::getLargestDefinedField( void ) const
{
   return( 20 );
}

unsigned long dsi_DSTC0294_VW::getDefinedByteLength( void ) const
{
   return( 300 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0294_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0294_VW::fieldExists( id );
}

bool dsi_DSTC0294_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40004509: return( true );
      case 40004510: return( true );
      case 40004511: return( true );
      case 40004512: return( true );
      case 40004513: return( true );
      case 40004514: return( true );
      case 40004515: return( true );
      case 40004517: return( true );
      case 40004518: return( true );
      case 40004519: return( true );
      case 40002919: return( true );
      case 40004525: return( true );
      case 40004526: return( true );
      case 40004521: return( true );
      case 40004522: return( true );
   }
   return false;
}

