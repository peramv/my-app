// BFDataImpl implementation file for DataSet DSTC0309.VW_Repeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0309_vw_repeat_record.h"


// This function creates an instance of dsi_DSTC0309_VW_Repeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0309_VW_Repeat_Record() { return new dsi_DSTC0309_VW_Repeat_Record; }

dsi_DSTC0309_VW_Repeat_Record::dsi_DSTC0309_VW_Repeat_Record()
: BFDataImpl( 40004788 )
, TransFeeCode_( ifds::TransFeeCode, &ifds::s_FldProp_TransFeeCode )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, RedCodeDecl_( ifds::RedCodeDecl, &ifds::s_FldProp_RedCodeDecl )
, DepTypeDecl_( ifds::DepTypeDecl, &ifds::s_FldProp_DepTypeDecl )
, INDCDecl_( ifds::INDCDecl, &ifds::s_FldProp_INDCDecl )
, TaxJurisDecl_( ifds::TaxJurisDecl, &ifds::s_FldProp_TaxJurisDecl )
, TransFeeOverrideAllowed_( ifds::TransFeeOverrideAllowed, &ifds::s_FldProp_TransFeeOverrideAllowed )
{
   cFields_ = 7;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0309_VW_Repeat_Record::~dsi_DSTC0309_VW_Repeat_Record()
{
}

BFDataImpl* dsi_DSTC0309_VW_Repeat_Record::clone()
{
   dsi_DSTC0309_VW_Repeat_Record* p = new dsi_DSTC0309_VW_Repeat_Record;
   p->TransFeeCode_ = TransFeeCode_;
   p->TransType_ = TransType_;
   p->RedCodeDecl_ = RedCodeDecl_;
   p->DepTypeDecl_ = DepTypeDecl_;
   p->INDCDecl_ = INDCDecl_;
   p->TaxJurisDecl_ = TaxJurisDecl_;
   p->TransFeeOverrideAllowed_ = TransFeeOverrideAllowed_;
   return(p);
}

BFDataField* dsi_DSTC0309_VW_Repeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40004710: return ( &TransFeeCode_ ); break; // TransFeeCode
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40004790: return ( &RedCodeDecl_ ); break; // RedCodeDecl
      case 40004791: return ( &DepTypeDecl_ ); break; // DepTypeDecl
      case 40004792: return ( &INDCDecl_ ); break; // INDCDecl
      case 40004793: return ( &TaxJurisDecl_ ); break; // TaxJurisDecl
      case 40004794: return ( &TransFeeOverrideAllowed_ ); break; // TransFeeOverrideAllowed
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0309_VW_Repeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0309_VW_Repeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0309_VW_Repeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 7 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TransFeeCode_; break;
            case 1: aFlds_[1] = &TransType_; break;
            case 2: aFlds_[2] = &RedCodeDecl_; break;
            case 3: aFlds_[3] = &DepTypeDecl_; break;
            case 4: aFlds_[4] = &INDCDecl_; break;
            case 5: aFlds_[5] = &TaxJurisDecl_; break;
            case 6: aFlds_[6] = &TransFeeOverrideAllowed_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0309_VW_Repeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0309_VW_Repeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0309_VW_Repeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0309_VW_Repeat_Record::getDefinedByteLength( void ) const
{
   return( 321 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0309_VW_Repeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0309_VW_Repeat_Record::fieldExists( id );
}

bool dsi_DSTC0309_VW_Repeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40004710: return( true );
      case 40000095: return( true );
      case 40004790: return( true );
      case 40004791: return( true );
      case 40004792: return( true );
      case 40004793: return( true );
      case 40004794: return( true );
   }
   return false;
}

