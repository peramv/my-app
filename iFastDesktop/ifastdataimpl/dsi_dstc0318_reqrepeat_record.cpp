// BFDataImpl implementation file for DataSet DSTC0318.REQRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0318_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0318_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0318_REQRepeat_Record() { return new dsi_DSTC0318_REQRepeat_Record; }

dsi_DSTC0318_REQRepeat_Record::dsi_DSTC0318_REQRepeat_Record()
: BFDataImpl( 40004882 )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, SettlementInstrVersion_( ifds::SettlementInstrVersion, &ifds::s_FldProp_SettlementInstrVersion )
, SettlementInstrRid_( ifds::SettlementInstrRid, &ifds::s_FldProp_SettlementInstrRid )
, SettlementInstrCode_( ifds::SettlementInstrCode, &ifds::s_FldProp_SettlementInstrCode )
, DefaultSettlementInstr_( ifds::DefaultSettlementInstr, &ifds::s_FldProp_DefaultSettlementInstr )
, DeliveryTo_( ifds::DeliveryTo, &ifds::s_FldProp_DeliveryTo )
, ForAccount_( ifds::ForAccount, &ifds::s_FldProp_ForAccount )
, InFavourOf_( ifds::InFavourOf, &ifds::s_FldProp_InFavourOf )
, SettlementInstrID_( ifds::SettlementInstrID, &ifds::s_FldProp_SettlementInstrID )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, AcctClearingMethod_( ifds::AcctClearingMethod, &ifds::s_FldProp_AcctClearingMethod )
, CashMsgType_( ifds::CashMsgType, &ifds::s_FldProp_CashMsgType )
, IntermediaryBank_( ifds::IntermediaryBank, &ifds::s_FldProp_IntermediaryBank )
, ReceivingBank_( ifds::ReceivingBank, &ifds::s_FldProp_ReceivingBank )
, Beneficiary_( ifds::Beneficiary, &ifds::s_FldProp_Beneficiary )
, SpecialInstructions_( ifds::SpecialInstructions, &ifds::s_FldProp_SpecialInstructions )
, CSDLocation_( ifds::CSDLocation, &ifds::s_FldProp_CSDLocation )
, CSDAcctNum_( ifds::CSDAcctNum, &ifds::s_FldProp_CSDAcctNum )
{
    cFields_ = 19;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0318_REQRepeat_Record::~dsi_DSTC0318_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0318_REQRepeat_Record::clone()
{
   dsi_DSTC0318_REQRepeat_Record* p = new dsi_DSTC0318_REQRepeat_Record;
   p->RunMode_ = RunMode_;
   p->SettlementInstrVersion_ = SettlementInstrVersion_;
   p->SettlementInstrRid_ = SettlementInstrRid_;
   p->SettlementInstrCode_ = SettlementInstrCode_;
   p->DefaultSettlementInstr_ = DefaultSettlementInstr_;
   p->DeliveryTo_ = DeliveryTo_;
   p->ForAccount_ = ForAccount_;
   p->InFavourOf_ = InFavourOf_;
   p->SettlementInstrID_ = SettlementInstrID_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->AcctClearingMethod_ = AcctClearingMethod_;
   p->CashMsgType_ = CashMsgType_;
   p->IntermediaryBank_ = IntermediaryBank_;
   p->ReceivingBank_ = ReceivingBank_;
   p->Beneficiary_ = Beneficiary_;
   p->SpecialInstructions_ = SpecialInstructions_;
   p->CSDLocation_ = CSDLocation_;
   p->CSDAcctNum_ = CSDAcctNum_;
   return(p);
}

BFDataField* dsi_DSTC0318_REQRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40004873: return ( &SettlementInstrVersion_ ); break; // SettlementInstrVersion
      case 40004874: return ( &SettlementInstrRid_ ); break; // SettlementInstrRid
      case 40004867: return ( &SettlementInstrCode_ ); break; // SettlementInstrCode
      case 40004869: return ( &DefaultSettlementInstr_ ); break; // DefaultSettlementInstr
      case 40004822: return ( &DeliveryTo_ ); break; // DeliveryTo
      case 40004823: return ( &ForAccount_ ); break; // ForAccount
      case 40002178: return ( &InFavourOf_ ); break; // InFavourOf
      case 40004887: return ( &SettlementInstrID_ ); break; // SettlementInstrID
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40005713: return ( &AcctClearingMethod_ ); break; // AcctClearingMethod
      case 40007434: return ( &CashMsgType_ ); break; // CashMsgType
      case 40007435: return ( &IntermediaryBank_ ); break; // IntermediaryBank
      case 40007436: return ( &ReceivingBank_ ); break; // ReceivingBank
      case 40007437: return ( &Beneficiary_ ); break; // Beneficiary
      case 40007438: return ( &SpecialInstructions_ ); break; // SpecialInstructions
      case 40007793: return ( &CSDLocation_ ); break; // CSDLocation
      case 40007794: return ( &CSDAcctNum_ ); break; // CSDAcctNum
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0318_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0318_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0318_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 19 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RunMode_; break;
            case 1: aFlds_[1] = &SettlementInstrVersion_; break;
            case 2: aFlds_[2] = &SettlementInstrRid_; break;
            case 3: aFlds_[3] = &SettlementInstrCode_; break;
            case 4: aFlds_[4] = &DefaultSettlementInstr_; break;
            case 5: aFlds_[5] = &DeliveryTo_; break;
            case 6: aFlds_[6] = &ForAccount_; break;
            case 7: aFlds_[7] = &InFavourOf_; break;
            case 8: aFlds_[8] = &SettlementInstrID_; break;
            case 9: aFlds_[9] = &EffectiveDate_; break;
            case 10: aFlds_[10] = &StopDate_; break;
            case 11: aFlds_[11] = &AcctClearingMethod_; break;
            case 12: aFlds_[12] = &CashMsgType_; break;
            case 13: aFlds_[13] = &IntermediaryBank_; break;
            case 14: aFlds_[14] = &ReceivingBank_; break;
            case 15: aFlds_[15] = &Beneficiary_; break;
            case 16: aFlds_[16] = &SpecialInstructions_; break;
            case 17: aFlds_[17] = &CSDLocation_; break;
            case 18: aFlds_[18] = &CSDAcctNum_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0318_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0318_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0318_REQRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0318_REQRepeat_Record::getDefinedByteLength( void ) const
{
    return( 710 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0318_REQRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0318_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0318_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000990: return( true );
      case 40004873: return( true );
      case 40004874: return( true );
      case 40004867: return( true );
      case 40004869: return( true );
      case 40004822: return( true );
      case 40004823: return( true );
      case 40002178: return( true );
      case 40004887: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40005713: return( true );
      case 40007434: return( true );
      case 40007435: return( true );
      case 40007436: return( true );
      case 40007437: return( true );
      case 40007438: return( true );
      case 40007793: return ( true );
      case 40007794: return ( true );
   }
   return false;
}

