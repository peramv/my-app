// BFDataImpl implementation file for DataSet DSTC0167.REQ
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Wednesday, October 31, 2018 10:04:39


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0167_req.h"


// This function creates an instance of dsi_DSTC0167_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0167_REQ() { return new dsi_DSTC0167_REQ; }

dsi_DSTC0167_REQ::dsi_DSTC0167_REQ()
: BFDataImpl( 40002674 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, AmountType_( ifds::AmountType, &ifds::s_FldProp_AmountType )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, SettleCurrency_( ifds::SettleCurrency, &ifds::s_FldProp_SettleCurrency )
, ExchRate_( ifds::ExchRate, &ifds::s_FldProp_ExchRate )
, AMSCode_( ifds::AMSCode, &ifds::s_FldProp_AMSCode )
, AMSType_( ifds::AMSType, &ifds::s_FldProp_AMSType )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, SalesRepCode_( ifds::SalesRepCode, &ifds::s_FldProp_SalesRepCode )
, DepositType_( ifds::DepositType, &ifds::s_FldProp_DepositType )
, OrderType_( ifds::OrderType, &ifds::s_FldProp_OrderType )
, FullExchPrntToPrnt_( ifds::FullExchPrntToPrnt, &ifds::s_FldProp_FullExchPrntToPrnt )
, Indc_( ifds::Indc, &ifds::s_FldProp_Indc )
, AdjTransNum_( ifds::AdjTransNum, &ifds::s_FldProp_AdjTransNum )
, DilutionLinkNum_( ifds::DilutionLinkNum, &ifds::s_FldProp_DilutionLinkNum )
, RedCode_( ifds::RedCode, &ifds::s_FldProp_RedCode )
, RDSPValidation_( ifds::RDSPValidation, &ifds::s_FldProp_RDSPValidation )
, GRRepayReason_( ifds::GRRepayReason, &ifds::s_FldProp_GRRepayReason )
, RDSPPaymtDate_( ifds::RDSPPaymtDate, &ifds::s_FldProp_RDSPPaymtDate )
, MatchingKey_( ifds::MatchingKey, &ifds::s_FldProp_MatchingKey )
{
    cFields_ = 31;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0167_REQ::~dsi_DSTC0167_REQ()
{
}

BFDataImpl* dsi_DSTC0167_REQ::clone()
{
    dsi_DSTC0167_REQ* p = new dsi_DSTC0167_REQ;
    p->SessionId_ = SessionId_;
    p->User_Id_ = User_Id_;
    p->LanguageCode_ = LanguageCode_;
    p->CompanyId_ = CompanyId_;
    p->Track_ = Track_;
    p->Activity_ = Activity_;
    p->AccountNum_ = AccountNum_;
    p->FundCode_ = FundCode_;
    p->ClassCode_ = ClassCode_;
    p->TransType_ = TransType_;
    p->Amount_ = Amount_;
    p->AmountType_ = AmountType_;
    p->EffectiveDate_ = EffectiveDate_;
    p->SettleCurrency_ = SettleCurrency_;
    p->ExchRate_ = ExchRate_;
    p->AMSCode_ = AMSCode_;
    p->AMSType_ = AMSType_;
    p->BrokerCode_ = BrokerCode_;
    p->BranchCode_ = BranchCode_;
    p->SalesRepCode_ = SalesRepCode_;
    p->DepositType_ = DepositType_;
    p->OrderType_ = OrderType_;
    p->FullExchPrntToPrnt_ = FullExchPrntToPrnt_;
    p->Indc_ = Indc_;
    p->AdjTransNum_ = AdjTransNum_;
    p->DilutionLinkNum_ = DilutionLinkNum_;
    p->RedCode_ = RedCode_;
    p->RDSPValidation_ = RDSPValidation_;
    p->GRRepayReason_ = GRRepayReason_;
    p->RDSPPaymtDate_ = RDSPPaymtDate_;
    p->MatchingKey_ = MatchingKey_;
    return(p);
}

BFDataField* dsi_DSTC0167_REQ::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000005: return ( &SessionId_ ); break; // SessionId
        case 40000002: return ( &User_Id_ ); break; // User_Id
        case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
        case 40000031: return ( &CompanyId_ ); break; // CompanyId
        case 40002065: return ( &Track_ ); break; // Track
        case 40002066: return ( &Activity_ ); break; // Activity
        case 40000040: return ( &AccountNum_ ); break; // AccountNum
        case 40000049: return ( &FundCode_ ); break; // FundCode
        case 40000050: return ( &ClassCode_ ); break; // ClassCode
        case 40000095: return ( &TransType_ ); break; // TransType
        case 40000231: return ( &Amount_ ); break; // Amount
        case 40000232: return ( &AmountType_ ); break; // AmountType
        case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
        case 40000455: return ( &SettleCurrency_ ); break; // SettleCurrency
        case 40000456: return ( &ExchRate_ ); break; // ExchRate
        case 40000193: return ( &AMSCode_ ); break; // AMSCode
        case 40003518: return ( &AMSType_ ); break; // AMSType
        case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
        case 40000045: return ( &BranchCode_ ); break; // BranchCode
        case 40000046: return ( &SalesRepCode_ ); break; // SalesRepCode
        case 40000433: return ( &DepositType_ ); break; // DepositType
        case 40000431: return ( &OrderType_ ); break; // OrderType
        case 40007597: return ( &FullExchPrntToPrnt_ ); break; // FullExchPrntToPrnt
        case 40000875: return ( &Indc_ ); break; // Indc
        case 40005232: return ( &AdjTransNum_ ); break; // AdjTransNum
        case 40007850: return ( &DilutionLinkNum_ ); break; // DilutionLinkNum
        case 40000435: return ( &RedCode_ ); break; // RedCode
        case 40007887: return ( &RDSPValidation_ ); break; // RDSPValidation
        case 40006143: return ( &GRRepayReason_ ); break; // GRRepayReason
        case 40007917: return ( &RDSPPaymtDate_ ); break; // RDSPPaymtDate
        case 40007932: return ( &MatchingKey_ ); break; // MatchingKey
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0167_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0167_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0167_REQ::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 31 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &SessionId_; break;
                case 1: aFlds_[1] = &User_Id_; break;
                case 2: aFlds_[2] = &LanguageCode_; break;
                case 3: aFlds_[3] = &CompanyId_; break;
                case 4: aFlds_[4] = &Track_; break;
                case 5: aFlds_[5] = &Activity_; break;
                case 6: aFlds_[6] = &AccountNum_; break;
                case 7: aFlds_[7] = &FundCode_; break;
                case 8: aFlds_[8] = &ClassCode_; break;
                case 9: aFlds_[9] = &TransType_; break;
                case 10: aFlds_[10] = &Amount_; break;
                case 11: aFlds_[11] = &AmountType_; break;
                case 12: aFlds_[12] = &EffectiveDate_; break;
                case 13: aFlds_[13] = &SettleCurrency_; break;
                case 14: aFlds_[14] = &ExchRate_; break;
                case 15: aFlds_[15] = &AMSCode_; break;
                case 16: aFlds_[16] = &AMSType_; break;
                case 17: aFlds_[17] = &BrokerCode_; break;
                case 18: aFlds_[18] = &BranchCode_; break;
                case 19: aFlds_[19] = &SalesRepCode_; break;
                case 20: aFlds_[20] = &DepositType_; break;
                case 21: aFlds_[21] = &OrderType_; break;
                case 22: aFlds_[22] = &FullExchPrntToPrnt_; break;
                case 23: aFlds_[23] = &Indc_; break;
                case 24: aFlds_[24] = &AdjTransNum_; break;
                case 25: aFlds_[25] = &DilutionLinkNum_; break;
                case 26: aFlds_[26] = &RedCode_; break;
                case 27: aFlds_[27] = &RDSPValidation_; break;
                case 28: aFlds_[28] = &GRRepayReason_; break;
                case 29: aFlds_[29] = &RDSPPaymtDate_; break;
                case 30: aFlds_[30] = &MatchingKey_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0167_REQ::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0167_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0167_REQ::getLargestDefinedField( void ) const
{
    return( 200 );
}

unsigned long dsi_DSTC0167_REQ::getDefinedByteLength( void ) const
{
    return( 1494 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0167_REQ::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0167_REQ::fieldExists( id );
}

bool dsi_DSTC0167_REQ::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000005: return ( true );
        case 40000002: return ( true );
        case 40000030: return ( true );
        case 40000031: return ( true );
        case 40002065: return ( true );
        case 40002066: return ( true );
        case 40000040: return ( true );
        case 40000049: return ( true );
        case 40000050: return ( true );
        case 40000095: return ( true );
        case 40000231: return ( true );
        case 40000232: return ( true );
        case 40000327: return ( true );
        case 40000455: return ( true );
        case 40000456: return ( true );
        case 40000193: return ( true );
        case 40003518: return ( true );
        case 40000044: return ( true );
        case 40000045: return ( true );
        case 40000046: return ( true );
        case 40000433: return ( true );
        case 40000431: return ( true );
        case 40007597: return ( true );
        case 40000875: return ( true );
        case 40005232: return ( true );
        case 40007850: return ( true );
        case 40000435: return ( true );
        case 40007887: return ( true );
        case 40006143: return ( true );
        case 40007917: return ( true );
        case 40007932: return ( true );
    }
    return false;
}

