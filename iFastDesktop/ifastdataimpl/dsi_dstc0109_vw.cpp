// BFDataImpl implementation file for DataSet DSTC0109.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0109_vw.h"


// This function creates an instance of dsi_DSTC0109_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0109_VW() { return new dsi_DSTC0109_VW; }

dsi_DSTC0109_VW::dsi_DSTC0109_VW()
: BFDataImpl( 40001586 )
, MinAmtWith_( ifds::MinAmtWith, &ifds::s_FldProp_MinAmtWith )
, MinAmtOut_( ifds::MinAmtOut, &ifds::s_FldProp_MinAmtOut )
, OptAmtWith_( ifds::OptAmtWith, &ifds::s_FldProp_OptAmtWith )
, OptAmtOut_( ifds::OptAmtOut, &ifds::s_FldProp_OptAmtOut )
, TotAmtWith_( ifds::TotAmtWith, &ifds::s_FldProp_TotAmtWith )
, TaxAmtWith_( ifds::TaxAmtWith, &ifds::s_FldProp_TaxAmtWith )
, TotAmtOut_( ifds::TotAmtOut, &ifds::s_FldProp_TotAmtOut )
, TaxAmtOut_( ifds::TaxAmtOut, &ifds::s_FldProp_TaxAmtOut )
, OthAmtWith_( ifds::OthAmtWith, &ifds::s_FldProp_OthAmtWith )
, MinAmt_( ifds::MinAmt, &ifds::s_FldProp_MinAmt )
, MinAmtShort_( ifds::MinAmtShort, &ifds::s_FldProp_MinAmtShort )
, MaxAmt_( ifds::MaxAmt, &ifds::s_FldProp_MaxAmt )
, MaxAmtRemain_( ifds::MaxAmtRemain, &ifds::s_FldProp_MaxAmtRemain )
, sMandMinAmtYr_( ifds::sMandMinAmtYr, &ifds::s_FldProp_sMandMinAmtYr )
, sMinAmtWith_( ifds::sMinAmtWith, &ifds::s_FldProp_sMinAmtWith )
, sMinAmtOut_( ifds::sMinAmtOut, &ifds::s_FldProp_sMinAmtOut )
, sMinSched_( ifds::sMinSched, &ifds::s_FldProp_sMinSched )
, sMinAmtShort_( ifds::sMinAmtShort, &ifds::s_FldProp_sMinAmtShort )
, sMandMaxAmtYr_( ifds::sMandMaxAmtYr, &ifds::s_FldProp_sMandMaxAmtYr )
, sMaxAmtWith_( ifds::sMaxAmtWith, &ifds::s_FldProp_sMaxAmtWith )
, sMaxAmtOut_( ifds::sMaxAmtOut, &ifds::s_FldProp_sMaxAmtOut )
, sMaxSched_( ifds::sMaxSched, &ifds::s_FldProp_sMaxSched )
, sMaxAmtShort_( ifds::sMaxAmtShort, &ifds::s_FldProp_sMaxAmtShort )
, mCurrYrDep_( ifds::mCurrYrDep, &ifds::s_FldProp_mCurrYrDep )
, mCurrMktValue_( ifds::mCurrMktValue, &ifds::s_FldProp_mCurrMktValue )
, mPYEMktValue_( ifds::mPYEMktValue, &ifds::s_FldProp_mPYEMktValue )
, mMinAmt_( ifds::mMinAmt, &ifds::s_FldProp_mMinAmt )
, mMinAmtRemain_( ifds::mMinAmtRemain, &ifds::s_FldProp_mMinAmtRemain )
, mMaxAmt_( ifds::mMaxAmt, &ifds::s_FldProp_mMaxAmt )
, mMaxAmtRemain_( ifds::mMaxAmtRemain, &ifds::s_FldProp_mMaxAmtRemain )
, mFreeAmtRemain_( ifds::mFreeAmtRemain, &ifds::s_FldProp_mFreeAmtRemain )
, mFreeAmtUsed_( ifds::mFreeAmtUsed, &ifds::s_FldProp_mFreeAmtUsed )
, mSchedPayGrossAmt_( ifds::mSchedPayGrossAmt, &ifds::s_FldProp_mSchedPayGrossAmt )
, mUnSchedWithGrossAmt_( ifds::mUnSchedWithGrossAmt, &ifds::s_FldProp_mUnSchedWithGrossAmt )
, mTransfGrossAmt_( ifds::mTransfGrossAmt, &ifds::s_FldProp_mTransfGrossAmt )
, mTotGrossAmt_( ifds::mTotGrossAmt, &ifds::s_FldProp_mTotGrossAmt )
, mSchedPayChrg_( ifds::mSchedPayChrg, &ifds::s_FldProp_mSchedPayChrg )
, mUnSchedWithChrg_( ifds::mUnSchedWithChrg, &ifds::s_FldProp_mUnSchedWithChrg )
, mTransfChrg_( ifds::mTransfChrg, &ifds::s_FldProp_mTransfChrg )
, mTotChrg_( ifds::mTotChrg, &ifds::s_FldProp_mTotChrg )
, mSchedPymtTaxAmt_( ifds::mSchedPymtTaxAmt, &ifds::s_FldProp_mSchedPymtTaxAmt )
, mUnSchedWithTaxAmt_( ifds::mUnSchedWithTaxAmt, &ifds::s_FldProp_mUnSchedWithTaxAmt )
, mTransfTaxAmt_( ifds::mTransfTaxAmt, &ifds::s_FldProp_mTransfTaxAmt )
, mTotTax_( ifds::mTotTax, &ifds::s_FldProp_mTotTax )
, mSchedPayNetAmt_( ifds::mSchedPayNetAmt, &ifds::s_FldProp_mSchedPayNetAmt )
, mUnSchedWithNetAmt_( ifds::mUnSchedWithNetAmt, &ifds::s_FldProp_mUnSchedWithNetAmt )
, mTransfNetAmt_( ifds::mTransfNetAmt, &ifds::s_FldProp_mTransfNetAmt )
, mTotNetAmt_( ifds::mTotNetAmt, &ifds::s_FldProp_mTotNetAmt )
, UnLockGrossAmt_( ifds::UnLockGrossAmt, &ifds::s_FldProp_UnLockGrossAmt )
, UnLockDeff_( ifds::UnLockDeff, &ifds::s_FldProp_UnLockDeff )
{
   cFields_ = 50;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0109_VW::~dsi_DSTC0109_VW()
{
}

BFDataImpl* dsi_DSTC0109_VW::clone()
{
   dsi_DSTC0109_VW* p = new dsi_DSTC0109_VW;
   p->MinAmtWith_ = MinAmtWith_;
   p->MinAmtOut_ = MinAmtOut_;
   p->OptAmtWith_ = OptAmtWith_;
   p->OptAmtOut_ = OptAmtOut_;
   p->TotAmtWith_ = TotAmtWith_;
   p->TaxAmtWith_ = TaxAmtWith_;
   p->TotAmtOut_ = TotAmtOut_;
   p->TaxAmtOut_ = TaxAmtOut_;
   p->OthAmtWith_ = OthAmtWith_;
   p->MinAmt_ = MinAmt_;
   p->MinAmtShort_ = MinAmtShort_;
   p->MaxAmt_ = MaxAmt_;
   p->MaxAmtRemain_ = MaxAmtRemain_;
   p->sMandMinAmtYr_ = sMandMinAmtYr_;
   p->sMinAmtWith_ = sMinAmtWith_;
   p->sMinAmtOut_ = sMinAmtOut_;
   p->sMinSched_ = sMinSched_;
   p->sMinAmtShort_ = sMinAmtShort_;
   p->sMandMaxAmtYr_ = sMandMaxAmtYr_;
   p->sMaxAmtWith_ = sMaxAmtWith_;
   p->sMaxAmtOut_ = sMaxAmtOut_;
   p->sMaxSched_ = sMaxSched_;
   p->sMaxAmtShort_ = sMaxAmtShort_;
   p->mCurrYrDep_ = mCurrYrDep_;
   p->mCurrMktValue_ = mCurrMktValue_;
   p->mPYEMktValue_ = mPYEMktValue_;
   p->mMinAmt_ = mMinAmt_;
   p->mMinAmtRemain_ = mMinAmtRemain_;
   p->mMaxAmt_ = mMaxAmt_;
   p->mMaxAmtRemain_ = mMaxAmtRemain_;
   p->mFreeAmtRemain_ = mFreeAmtRemain_;
   p->mFreeAmtUsed_ = mFreeAmtUsed_;
   p->mSchedPayGrossAmt_ = mSchedPayGrossAmt_;
   p->mUnSchedWithGrossAmt_ = mUnSchedWithGrossAmt_;
   p->mTransfGrossAmt_ = mTransfGrossAmt_;
   p->mTotGrossAmt_ = mTotGrossAmt_;
   p->mSchedPayChrg_ = mSchedPayChrg_;
   p->mUnSchedWithChrg_ = mUnSchedWithChrg_;
   p->mTransfChrg_ = mTransfChrg_;
   p->mTotChrg_ = mTotChrg_;
   p->mSchedPymtTaxAmt_ = mSchedPymtTaxAmt_;
   p->mUnSchedWithTaxAmt_ = mUnSchedWithTaxAmt_;
   p->mTransfTaxAmt_ = mTransfTaxAmt_;
   p->mTotTax_ = mTotTax_;
   p->mSchedPayNetAmt_ = mSchedPayNetAmt_;
   p->mUnSchedWithNetAmt_ = mUnSchedWithNetAmt_;
   p->mTransfNetAmt_ = mTransfNetAmt_;
   p->mTotNetAmt_ = mTotNetAmt_;
   p->UnLockGrossAmt_ = UnLockGrossAmt_;
   p->UnLockDeff_ = UnLockDeff_;
   return(p);
}

BFDataField* dsi_DSTC0109_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40001536: return ( &MinAmtWith_ ); break; // MinAmtWith
      case 40001537: return ( &MinAmtOut_ ); break; // MinAmtOut
      case 40001538: return ( &OptAmtWith_ ); break; // OptAmtWith
      case 40001539: return ( &OptAmtOut_ ); break; // OptAmtOut
      case 40001540: return ( &TotAmtWith_ ); break; // TotAmtWith
      case 40001587: return ( &TaxAmtWith_ ); break; // TaxAmtWith
      case 40001541: return ( &TotAmtOut_ ); break; // TotAmtOut
      case 40001542: return ( &TaxAmtOut_ ); break; // TaxAmtOut
      case 40001543: return ( &OthAmtWith_ ); break; // OthAmtWith
      case 40001544: return ( &MinAmt_ ); break; // MinAmt
      case 40001545: return ( &MinAmtShort_ ); break; // MinAmtShort
      case 40001546: return ( &MaxAmt_ ); break; // MaxAmt
      case 40001547: return ( &MaxAmtRemain_ ); break; // MaxAmtRemain
      case 40001548: return ( &sMandMinAmtYr_ ); break; // sMandMinAmtYr
      case 40001549: return ( &sMinAmtWith_ ); break; // sMinAmtWith
      case 40001550: return ( &sMinAmtOut_ ); break; // sMinAmtOut
      case 40001551: return ( &sMinSched_ ); break; // sMinSched
      case 40001552: return ( &sMinAmtShort_ ); break; // sMinAmtShort
      case 40001553: return ( &sMandMaxAmtYr_ ); break; // sMandMaxAmtYr
      case 40001554: return ( &sMaxAmtWith_ ); break; // sMaxAmtWith
      case 40001555: return ( &sMaxAmtOut_ ); break; // sMaxAmtOut
      case 40001556: return ( &sMaxSched_ ); break; // sMaxSched
      case 40001557: return ( &sMaxAmtShort_ ); break; // sMaxAmtShort
      case 40001558: return ( &mCurrYrDep_ ); break; // mCurrYrDep
      case 40001559: return ( &mCurrMktValue_ ); break; // mCurrMktValue
      case 40001560: return ( &mPYEMktValue_ ); break; // mPYEMktValue
      case 40001561: return ( &mMinAmt_ ); break; // mMinAmt
      case 40001562: return ( &mMinAmtRemain_ ); break; // mMinAmtRemain
      case 40001563: return ( &mMaxAmt_ ); break; // mMaxAmt
      case 40001564: return ( &mMaxAmtRemain_ ); break; // mMaxAmtRemain
      case 40001565: return ( &mFreeAmtRemain_ ); break; // mFreeAmtRemain
      case 40001566: return ( &mFreeAmtUsed_ ); break; // mFreeAmtUsed
      case 40001567: return ( &mSchedPayGrossAmt_ ); break; // mSchedPayGrossAmt
      case 40001588: return ( &mUnSchedWithGrossAmt_ ); break; // mUnSchedWithGrossAmt
      case 40001569: return ( &mTransfGrossAmt_ ); break; // mTransfGrossAmt
      case 40001570: return ( &mTotGrossAmt_ ); break; // mTotGrossAmt
      case 40001571: return ( &mSchedPayChrg_ ); break; // mSchedPayChrg
      case 40001572: return ( &mUnSchedWithChrg_ ); break; // mUnSchedWithChrg
      case 40001573: return ( &mTransfChrg_ ); break; // mTransfChrg
      case 40001574: return ( &mTotChrg_ ); break; // mTotChrg
      case 40001575: return ( &mSchedPymtTaxAmt_ ); break; // mSchedPymtTaxAmt
      case 40001576: return ( &mUnSchedWithTaxAmt_ ); break; // mUnSchedWithTaxAmt
      case 40001577: return ( &mTransfTaxAmt_ ); break; // mTransfTaxAmt
      case 40001578: return ( &mTotTax_ ); break; // mTotTax
      case 40001579: return ( &mSchedPayNetAmt_ ); break; // mSchedPayNetAmt
      case 40001580: return ( &mUnSchedWithNetAmt_ ); break; // mUnSchedWithNetAmt
      case 40001581: return ( &mTransfNetAmt_ ); break; // mTransfNetAmt
      case 40001582: return ( &mTotNetAmt_ ); break; // mTotNetAmt
      case 40005776: return ( &UnLockGrossAmt_ ); break; // UnLockGrossAmt
      case 40005775: return ( &UnLockDeff_ ); break; // UnLockDeff
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0109_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0109_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0109_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 50 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &MinAmtWith_; break;
            case 1: aFlds_[1] = &MinAmtOut_; break;
            case 2: aFlds_[2] = &OptAmtWith_; break;
            case 3: aFlds_[3] = &OptAmtOut_; break;
            case 4: aFlds_[4] = &TotAmtWith_; break;
            case 5: aFlds_[5] = &TaxAmtWith_; break;
            case 6: aFlds_[6] = &TotAmtOut_; break;
            case 7: aFlds_[7] = &TaxAmtOut_; break;
            case 8: aFlds_[8] = &OthAmtWith_; break;
            case 9: aFlds_[9] = &MinAmt_; break;
            case 10: aFlds_[10] = &MinAmtShort_; break;
            case 11: aFlds_[11] = &MaxAmt_; break;
            case 12: aFlds_[12] = &MaxAmtRemain_; break;
            case 13: aFlds_[13] = &sMandMinAmtYr_; break;
            case 14: aFlds_[14] = &sMinAmtWith_; break;
            case 15: aFlds_[15] = &sMinAmtOut_; break;
            case 16: aFlds_[16] = &sMinSched_; break;
            case 17: aFlds_[17] = &sMinAmtShort_; break;
            case 18: aFlds_[18] = &sMandMaxAmtYr_; break;
            case 19: aFlds_[19] = &sMaxAmtWith_; break;
            case 20: aFlds_[20] = &sMaxAmtOut_; break;
            case 21: aFlds_[21] = &sMaxSched_; break;
            case 22: aFlds_[22] = &sMaxAmtShort_; break;
            case 23: aFlds_[23] = &mCurrYrDep_; break;
            case 24: aFlds_[24] = &mCurrMktValue_; break;
            case 25: aFlds_[25] = &mPYEMktValue_; break;
            case 26: aFlds_[26] = &mMinAmt_; break;
            case 27: aFlds_[27] = &mMinAmtRemain_; break;
            case 28: aFlds_[28] = &mMaxAmt_; break;
            case 29: aFlds_[29] = &mMaxAmtRemain_; break;
            case 30: aFlds_[30] = &mFreeAmtRemain_; break;
            case 31: aFlds_[31] = &mFreeAmtUsed_; break;
            case 32: aFlds_[32] = &mSchedPayGrossAmt_; break;
            case 33: aFlds_[33] = &mUnSchedWithGrossAmt_; break;
            case 34: aFlds_[34] = &mTransfGrossAmt_; break;
            case 35: aFlds_[35] = &mTotGrossAmt_; break;
            case 36: aFlds_[36] = &mSchedPayChrg_; break;
            case 37: aFlds_[37] = &mUnSchedWithChrg_; break;
            case 38: aFlds_[38] = &mTransfChrg_; break;
            case 39: aFlds_[39] = &mTotChrg_; break;
            case 40: aFlds_[40] = &mSchedPymtTaxAmt_; break;
            case 41: aFlds_[41] = &mUnSchedWithTaxAmt_; break;
            case 42: aFlds_[42] = &mTransfTaxAmt_; break;
            case 43: aFlds_[43] = &mTotTax_; break;
            case 44: aFlds_[44] = &mSchedPayNetAmt_; break;
            case 45: aFlds_[45] = &mUnSchedWithNetAmt_; break;
            case 46: aFlds_[46] = &mTransfNetAmt_; break;
            case 47: aFlds_[47] = &mTotNetAmt_; break;
            case 48: aFlds_[48] = &UnLockGrossAmt_; break;
            case 49: aFlds_[49] = &UnLockDeff_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0109_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0109_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0109_VW::getLargestDefinedField( void ) const
{
   return( 20 );
}

unsigned long dsi_DSTC0109_VW::getDefinedByteLength( void ) const
{
   return( 990 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0109_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0109_VW::fieldExists( id );
}

bool dsi_DSTC0109_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40001536: return( true );
      case 40001537: return( true );
      case 40001538: return( true );
      case 40001539: return( true );
      case 40001540: return( true );
      case 40001587: return( true );
      case 40001541: return( true );
      case 40001542: return( true );
      case 40001543: return( true );
      case 40001544: return( true );
      case 40001545: return( true );
      case 40001546: return( true );
      case 40001547: return( true );
      case 40001548: return( true );
      case 40001549: return( true );
      case 40001550: return( true );
      case 40001551: return( true );
      case 40001552: return( true );
      case 40001553: return( true );
      case 40001554: return( true );
      case 40001555: return( true );
      case 40001556: return( true );
      case 40001557: return( true );
      case 40001558: return( true );
      case 40001559: return( true );
      case 40001560: return( true );
      case 40001561: return( true );
      case 40001562: return( true );
      case 40001563: return( true );
      case 40001564: return( true );
      case 40001565: return( true );
      case 40001566: return( true );
      case 40001567: return( true );
      case 40001588: return( true );
      case 40001569: return( true );
      case 40001570: return( true );
      case 40001571: return( true );
      case 40001572: return( true );
      case 40001573: return( true );
      case 40001574: return( true );
      case 40001575: return( true );
      case 40001576: return( true );
      case 40001577: return( true );
      case 40001578: return( true );
      case 40001579: return( true );
      case 40001580: return( true );
      case 40001581: return( true );
      case 40001582: return( true );
      case 40005776: return( true );
      case 40005775: return( true );
   }
   return false;
}

