// BFDataImpl header file for DataSet DSTC0331.REQRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#pragma once
#include <commonport.h>
#include <clientlocale.hpp>

#undef IFAST_DATAIMPL_LINKAGE
#ifdef IFAST_DATAIMPL_DLL
   #define IFAST_DATAIMPL_LINKAGE CLASS_EXPORT
#else
   #define IFAST_DATAIMPL_LINKAGE CLASS_IMPORT
#endif

namespace ifds
{
   //Field Externs
   extern const BFTextFieldId RunMode;
   extern const BFNumericFieldId EntityId;
   extern const BFTextFieldId WhereUse;
   extern const BFTextFieldId WhereUseCode;
   extern const BFTextFieldId EntityType;
   extern const BFNumericFieldId RecId;
   extern const BFDecimalFieldId Version;
   extern const BFDateFieldId EffectiveDate;
   extern const BFDateFieldId StopDate;
   extern const BFTextFieldId HoldingCompName;
   extern const BFTextFieldId CompUsage;
   extern const BFTextFieldId AggregationMethod;
   extern const BFTextFieldId LangCode;

   //Property Externs
   extern const BFDataFieldProperties s_FldProp_RunMode;
   extern const BFDataFieldProperties s_FldProp_EntityId;
   extern const BFDataFieldProperties s_FldProp_WhereUse;
   extern const BFDataFieldProperties s_FldProp_WhereUseCode;
   extern const BFDataFieldProperties s_FldProp_EntityType;
   extern const BFDataFieldProperties s_FldProp_RecId;
   extern const BFDataFieldProperties s_FldProp_Version;
   extern const BFDataFieldProperties s_FldProp_EffectiveDate;
   extern const BFDataFieldProperties s_FldProp_StopDate;
   extern const BFDataFieldProperties s_FldProp_HoldingCompName;
   extern const BFDataFieldProperties s_FldProp_CompUsage;
   extern const BFDataFieldProperties s_FldProp_AggregationMethod;
   extern const BFDataFieldProperties s_FldProp_LangCode;
}


class dsi_DSTC0331_REQRepeat_Record : public BFDataImpl 
{
public:
   // Constructors
   dsi_DSTC0331_REQRepeat_Record();
   virtual ~dsi_DSTC0331_REQRepeat_Record();

   virtual BFDataImpl* clone();

   virtual BFDataField* getElement( const BFFieldId& id );
   virtual const BFDataField* getElement( const BFFieldId& id ) const;
   virtual BFDataField* getElementByIndex( unsigned int iField );
   virtual const BFDataField* getElementByIndex( unsigned int iField ) const;


   virtual unsigned long getLargestDefinedField( void ) const;
   virtual unsigned long getDefinedByteLength( void ) const;
   virtual bool exists( const BFFieldId& id ) const;
   static bool fieldExists( const BFFieldId& id );

private:
   BFDataField* aFlds_[13];
   // Field Declarations
   BFTextField_60 RunMode_;
   BFNumericField EntityId_;
   BFTextField_2 WhereUse_;
   BFTextField<20> WhereUseCode_;
   BFTextField_60 EntityType_;
   BFNumericField RecId_;
   BFDecimalField Version_;
   BFDateField EffectiveDate_;
   BFDateField StopDate_;
   BFTextField<80> HoldingCompName_;
   BFTextField_10 CompUsage_;
   BFTextField<20> AggregationMethod_;
   BFTextField_60 LangCode_;

};
