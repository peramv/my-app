// BFDataImpl implementation file for DataSet DSTC0367.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0367_vw.h"


// This function creates an instance of dsi_DSTC0367_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0367_VW() { return new dsi_DSTC0367_VW; }

dsi_DSTC0367_VW::dsi_DSTC0367_VW()
: BFDataImpl( 40005449 )
, CriticalAge1_( ifds::CriticalAge1, &ifds::s_FldProp_CriticalAge1 )
, CriticalAge2_( ifds::CriticalAge2, &ifds::s_FldProp_CriticalAge2 )
, CriticalAge3_( ifds::CriticalAge3, &ifds::s_FldProp_CriticalAge3 )
, BailOutAge1_( ifds::BailOutAge1, &ifds::s_FldProp_BailOutAge1 )
, BailOutAge2_( ifds::BailOutAge2, &ifds::s_FldProp_BailOutAge2 )
, BailOutAge3_( ifds::BailOutAge3, &ifds::s_FldProp_BailOutAge3 )
, LegalAgeCalcType_( ifds::LegalAgeCalcType, &ifds::s_FldProp_LegalAgeCalcType )
, LegalMaxAge_( ifds::LegalMaxAge, &ifds::s_FldProp_LegalMaxAge )
, NumOfYears_( ifds::NumOfYears, &ifds::s_FldProp_NumOfYears )
, AltNumOfYears_( ifds::AltNumOfYears, &ifds::s_FldProp_AltNumOfYears )
{
   cFields_ = 10;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0367_VW::~dsi_DSTC0367_VW()
{
}

BFDataImpl* dsi_DSTC0367_VW::clone()
{
   dsi_DSTC0367_VW* p = new dsi_DSTC0367_VW;
   p->CriticalAge1_ = CriticalAge1_;
   p->CriticalAge2_ = CriticalAge2_;
   p->CriticalAge3_ = CriticalAge3_;
   p->BailOutAge1_ = BailOutAge1_;
   p->BailOutAge2_ = BailOutAge2_;
   p->BailOutAge3_ = BailOutAge3_;
   p->LegalAgeCalcType_ = LegalAgeCalcType_;
   p->LegalMaxAge_ = LegalMaxAge_;
   p->NumOfYears_ = NumOfYears_;
   p->AltNumOfYears_ = AltNumOfYears_;
   return(p);
}

BFDataField* dsi_DSTC0367_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40001656: return ( &CriticalAge1_ ); break; // CriticalAge1
      case 40001657: return ( &CriticalAge2_ ); break; // CriticalAge2
      case 40001658: return ( &CriticalAge3_ ); break; // CriticalAge3
      case 40001659: return ( &BailOutAge1_ ); break; // BailOutAge1
      case 40001660: return ( &BailOutAge2_ ); break; // BailOutAge2
      case 40001661: return ( &BailOutAge3_ ); break; // BailOutAge3
      case 40001662: return ( &LegalAgeCalcType_ ); break; // LegalAgeCalcType
      case 40001663: return ( &LegalMaxAge_ ); break; // LegalMaxAge
      case 40007254: return ( &NumOfYears_ ); break; // NumOfYears
      case 40007255: return ( &AltNumOfYears_ ); break; // AltNumOfYears
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0367_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0367_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0367_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 10 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &CriticalAge1_; break;
            case 1: aFlds_[1] = &CriticalAge2_; break;
            case 2: aFlds_[2] = &CriticalAge3_; break;
            case 3: aFlds_[3] = &BailOutAge1_; break;
            case 4: aFlds_[4] = &BailOutAge2_; break;
            case 5: aFlds_[5] = &BailOutAge3_; break;
            case 6: aFlds_[6] = &LegalAgeCalcType_; break;
            case 7: aFlds_[7] = &LegalMaxAge_; break;
            case 8: aFlds_[8] = &NumOfYears_; break;
            case 9: aFlds_[9] = &AltNumOfYears_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0367_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0367_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0367_VW::getLargestDefinedField( void ) const
{
   return( 15 );
}

unsigned long dsi_DSTC0367_VW::getDefinedByteLength( void ) const
{
   return( 110 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0367_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0367_VW::fieldExists( id );
}

bool dsi_DSTC0367_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40001656: return( true );
      case 40001657: return( true );
      case 40001658: return( true );
      case 40001659: return( true );
      case 40001660: return( true );
      case 40001661: return( true );
      case 40001662: return( true );
      case 40001663: return( true );
      case 40007254: return( true );
      case 40007255: return( true );
   }
   return false;
}

