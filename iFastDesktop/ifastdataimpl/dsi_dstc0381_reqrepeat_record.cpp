// BFDataImpl implementation file for DataSet DSTC0381.REQRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Monday, July 03, 2017 03:58:03


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0381_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0381_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0381_REQRepeat_Record() { return new dsi_DSTC0381_REQRepeat_Record; }

dsi_DSTC0381_REQRepeat_Record::dsi_DSTC0381_REQRepeat_Record()
: BFDataImpl( 40005610 )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, AMSType_( ifds::AMSType, &ifds::s_FldProp_AMSType )
, AMSCode_( ifds::AMSCode, &ifds::s_FldProp_AMSCode )
, Deff_( ifds::Deff, &ifds::s_FldProp_Deff )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, NextProcessDate_( ifds::NextProcessDate, &ifds::s_FldProp_NextProcessDate )
, FreqOverride_( ifds::FreqOverride, &ifds::s_FldProp_FreqOverride )
, SchedSetupFreqID_( ifds::SchedSetupFreqID, &ifds::s_FldProp_SchedSetupFreqID )
, AMSStat_( ifds::AMSStat, &ifds::s_FldProp_AMSStat )
, ThresholdPrcnt_( ifds::ThresholdPrcnt, &ifds::s_FldProp_ThresholdPrcnt )
, Rebalance_( ifds::Rebalance, &ifds::s_FldProp_Rebalance )
, UpdatePACSWP_( ifds::UpdatePACSWP, &ifds::s_FldProp_UpdatePACSWP )
, AcctAMSRID_( ifds::AcctAMSRID, &ifds::s_FldProp_AcctAMSRID )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, AMSRebReqMode_( ifds::AMSRebReqMode, &ifds::s_FldProp_AMSRebReqMode )
, TargetMixOption_( ifds::TargetMixOption, &ifds::s_FldProp_TargetMixOption )
{
    cFields_ = 16;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0381_REQRepeat_Record::~dsi_DSTC0381_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0381_REQRepeat_Record::clone()
{
    dsi_DSTC0381_REQRepeat_Record* p = new dsi_DSTC0381_REQRepeat_Record;
    p->RunMode_ = RunMode_;
    p->AMSType_ = AMSType_;
    p->AMSCode_ = AMSCode_;
    p->Deff_ = Deff_;
    p->StopDate_ = StopDate_;
    p->NextProcessDate_ = NextProcessDate_;
    p->FreqOverride_ = FreqOverride_;
    p->SchedSetupFreqID_ = SchedSetupFreqID_;
    p->AMSStat_ = AMSStat_;
    p->ThresholdPrcnt_ = ThresholdPrcnt_;
    p->Rebalance_ = Rebalance_;
    p->UpdatePACSWP_ = UpdatePACSWP_;
    p->AcctAMSRID_ = AcctAMSRID_;
    p->Currency_ = Currency_;
    p->AMSRebReqMode_ = AMSRebReqMode_;
    p->TargetMixOption_ = TargetMixOption_;
    return(p);
}

BFDataField* dsi_DSTC0381_REQRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000990: return ( &RunMode_ ); break; // RunMode
        case 40003518: return ( &AMSType_ ); break; // AMSType
        case 40000193: return ( &AMSCode_ ); break; // AMSCode
        case 40000215: return ( &Deff_ ); break; // Deff
        case 40000279: return ( &StopDate_ ); break; // StopDate
        case 40002445: return ( &NextProcessDate_ ); break; // NextProcessDate
        case 40005604: return ( &FreqOverride_ ); break; // FreqOverride
        case 40005605: return ( &SchedSetupFreqID_ ); break; // SchedSetupFreqID
        case 40005606: return ( &AMSStat_ ); break; // AMSStat
        case 40005611: return ( &ThresholdPrcnt_ ); break; // ThresholdPrcnt
        case 40003547: return ( &Rebalance_ ); break; // Rebalance
        case 40003548: return ( &UpdatePACSWP_ ); break; // UpdatePACSWP
        case 40005608: return ( &AcctAMSRID_ ); break; // AcctAMSRID
        case 40000180: return ( &Currency_ ); break; // Currency
        case 40007532: return ( &AMSRebReqMode_ ); break; // AMSRebReqMode
        case 40007774: return ( &TargetMixOption_ ); break; // TargetMixOption
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0381_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0381_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0381_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 16 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &RunMode_; break;
                case 1: aFlds_[1] = &AMSType_; break;
                case 2: aFlds_[2] = &AMSCode_; break;
                case 3: aFlds_[3] = &Deff_; break;
                case 4: aFlds_[4] = &StopDate_; break;
                case 5: aFlds_[5] = &NextProcessDate_; break;
                case 6: aFlds_[6] = &FreqOverride_; break;
                case 7: aFlds_[7] = &SchedSetupFreqID_; break;
                case 8: aFlds_[8] = &AMSStat_; break;
                case 9: aFlds_[9] = &ThresholdPrcnt_; break;
                case 10: aFlds_[10] = &Rebalance_; break;
                case 11: aFlds_[11] = &UpdatePACSWP_; break;
                case 12: aFlds_[12] = &AcctAMSRID_; break;
                case 13: aFlds_[13] = &Currency_; break;
                case 14: aFlds_[14] = &AMSRebReqMode_; break;
                case 15: aFlds_[15] = &TargetMixOption_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0381_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0381_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0381_REQRepeat_Record::getLargestDefinedField( void ) const
{
    return( 200 );
}

unsigned long dsi_DSTC0381_REQRepeat_Record::getDefinedByteLength( void ) const
{
    return( 435 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0381_REQRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0381_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0381_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000990: return ( true );
        case 40003518: return ( true );
        case 40000193: return ( true );
        case 40000215: return ( true );
        case 40000279: return ( true );
        case 40002445: return ( true );
        case 40005604: return ( true );
        case 40005605: return ( true );
        case 40005606: return ( true );
        case 40005611: return ( true );
        case 40003547: return ( true );
        case 40003548: return ( true );
        case 40005608: return ( true );
        case 40000180: return ( true );
        case 40007532: return ( true );
        case 40007774: return ( true );
    }
    return false;
}

