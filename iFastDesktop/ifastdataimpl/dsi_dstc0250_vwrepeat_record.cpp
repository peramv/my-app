// BFDataImpl implementation file for DataSet DSTC0250.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0250_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0250_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0250_VWRepeat_Record() { return new dsi_DSTC0250_VWRepeat_Record; }

dsi_DSTC0250_VWRepeat_Record::dsi_DSTC0250_VWRepeat_Record()
: BFDataImpl( 40003809 )
, AMSCode_( ifds::AMSCode, &ifds::s_FldProp_AMSCode )
, AMSName_( ifds::AMSName, &ifds::s_FldProp_AMSName )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, BrokerAMSVer_( ifds::BrokerAMSVer, &ifds::s_FldProp_BrokerAMSVer )
, BrokerAMSRId_( ifds::BrokerAMSRId, &ifds::s_FldProp_BrokerAMSRId )
, GoodBad_( ifds::GoodBad, &ifds::s_FldProp_GoodBad )
{
   cFields_ = 10;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0250_VWRepeat_Record::~dsi_DSTC0250_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0250_VWRepeat_Record::clone()
{
   dsi_DSTC0250_VWRepeat_Record* p = new dsi_DSTC0250_VWRepeat_Record;
   p->AMSCode_ = AMSCode_;
   p->AMSName_ = AMSName_;
   p->EffectiveDate_ = EffectiveDate_;
   p->ProcessDate_ = ProcessDate_;
   p->Username_ = Username_;
   p->ModDate_ = ModDate_;
   p->ModUser_ = ModUser_;
   p->BrokerAMSVer_ = BrokerAMSVer_;
   p->BrokerAMSRId_ = BrokerAMSRId_;
   p->GoodBad_ = GoodBad_;
   return(p);
}

BFDataField* dsi_DSTC0250_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000193: return ( &AMSCode_ ); break; // AMSCode
      case 40003811: return ( &AMSName_ ); break; // AMSName
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40003805: return ( &BrokerAMSVer_ ); break; // BrokerAMSVer
      case 40003806: return ( &BrokerAMSRId_ ); break; // BrokerAMSRId
      case 40000496: return ( &GoodBad_ ); break; // GoodBad
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0250_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0250_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0250_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 10 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AMSCode_; break;
            case 1: aFlds_[1] = &AMSName_; break;
            case 2: aFlds_[2] = &EffectiveDate_; break;
            case 3: aFlds_[3] = &ProcessDate_; break;
            case 4: aFlds_[4] = &Username_; break;
            case 5: aFlds_[5] = &ModDate_; break;
            case 6: aFlds_[6] = &ModUser_; break;
            case 7: aFlds_[7] = &BrokerAMSVer_; break;
            case 8: aFlds_[8] = &BrokerAMSRId_; break;
            case 9: aFlds_[9] = &GoodBad_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0250_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0250_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0250_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0250_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 314 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0250_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0250_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0250_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000193: return( true );
      case 40003811: return( true );
      case 40000327: return( true );
      case 40000216: return( true );
      case 40000117: return( true );
      case 40000217: return( true );
      case 40000218: return( true );
      case 40003805: return( true );
      case 40003806: return( true );
      case 40000496: return( true );
   }
   return false;
}

