// BFDataImpl implementation file for DataSet DSTC0483.VW
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Friday, January 19, 2018 09:37:30


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0483_vw.h"


// This function creates an instance of dsi_DSTC0483_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0483_VW() { return new dsi_DSTC0483_VW; }

dsi_DSTC0483_VW::dsi_DSTC0483_VW()
: BFDataImpl( 40007852, 40007855 )
, MoreAvailable_( ifds::MoreAvailable, &ifds::s_FldProp_MoreAvailable )
, AMSCode_( ifds::AMSCode, &ifds::s_FldProp_AMSCode )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, Status_( ifds::Status, &ifds::s_FldProp_Status )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, AMSDeltaRequestUUID_( ifds::AMSDeltaRequestUUID, &ifds::s_FldProp_AMSDeltaRequestUUID )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
    cFields_ = 9;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0483_VW::~dsi_DSTC0483_VW()
{
}

BFDataImpl* dsi_DSTC0483_VW::clone()
{
    dsi_DSTC0483_VW* p = new dsi_DSTC0483_VW;
    p->MoreAvailable_ = MoreAvailable_;
    p->AMSCode_ = AMSCode_;
    p->AccountNum_ = AccountNum_;
    p->EffectiveDate_ = EffectiveDate_;
    p->Status_ = Status_;
    p->ProcessDate_ = ProcessDate_;
    p->Username_ = Username_;
    p->AMSDeltaRequestUUID_ = AMSDeltaRequestUUID_;
    p->RepeatCount_ = RepeatCount_;
    return(p);
}

BFDataField* dsi_DSTC0483_VW::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000126: return ( &MoreAvailable_ ); break; // MoreAvailable
        case 40000193: return ( &AMSCode_ ); break; // AMSCode
        case 40000040: return ( &AccountNum_ ); break; // AccountNum
        case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
        case 40001399: return ( &Status_ ); break; // Status
        case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
        case 40000117: return ( &Username_ ); break; // Username
        case 40007849: return ( &AMSDeltaRequestUUID_ ); break; // AMSDeltaRequestUUID
        case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0483_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0483_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0483_VW::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 9 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &MoreAvailable_; break;
                case 1: aFlds_[1] = &AMSCode_; break;
                case 2: aFlds_[2] = &AccountNum_; break;
                case 3: aFlds_[3] = &EffectiveDate_; break;
                case 4: aFlds_[4] = &Status_; break;
                case 5: aFlds_[5] = &ProcessDate_; break;
                case 6: aFlds_[6] = &Username_; break;
                case 7: aFlds_[7] = &AMSDeltaRequestUUID_; break;
                case 8: aFlds_[8] = &RepeatCount_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0483_VW::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0483_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0483_VW::getLargestDefinedField( void ) const
{
    return( 60 );
}

unsigned long dsi_DSTC0483_VW::getDefinedByteLength( void ) const
{
    return( 293 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0483_VW::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0483_VW::fieldExists( id );
}

bool dsi_DSTC0483_VW::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000126: return ( true );
        case 40000193: return ( true );
        case 40000040: return ( true );
        case 40000327: return ( true );
        case 40001399: return ( true );
        case 40000216: return ( true );
        case 40000117: return ( true );
        case 40007849: return ( true );
        case 40000120: return ( true );
    }
    return false;
}

