// BFDataImpl implementation file for DataSet DSTC0355.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0355_req.h"


// This function creates an instance of dsi_DSTC0355_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0355_REQ() { return new dsi_DSTC0355_REQ; }

dsi_DSTC0355_REQ::dsi_DSTC0355_REQ()
: BFDataImpl( 40005338, 40005339 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, RvCode_( ifds::RvCode, &ifds::s_FldProp_RvCode )
, OnStmt_( ifds::OnStmt, &ifds::s_FldProp_OnStmt )
, Accountable_( ifds::Accountable, &ifds::s_FldProp_Accountable )
, ConfirmRequired_( ifds::ConfirmRequired, &ifds::s_FldProp_ConfirmRequired )
, CancelCheque_( ifds::CancelCheque, &ifds::s_FldProp_CancelCheque )
, Remarks1_( ifds::Remarks1, &ifds::s_FldProp_Remarks1 )
, Remarks2_( ifds::Remarks2, &ifds::s_FldProp_Remarks2 )
, Remarks3_( ifds::Remarks3, &ifds::s_FldProp_Remarks3 )
, Batch_( ifds::Batch, &ifds::s_FldProp_Batch )
, Trace_( ifds::Trace, &ifds::s_FldProp_Trace )
, TranStatus_( ifds::TranStatus, &ifds::s_FldProp_TranStatus )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, Version_( ifds::Version, &ifds::s_FldProp_Version )
, TradeAdjustID_( ifds::TradeAdjustID, &ifds::s_FldProp_TradeAdjustID )
, CancellationType_( ifds::CancellationType, &ifds::s_FldProp_CancellationType )
, TradeDate_( ifds::TradeDate, &ifds::s_FldProp_TradeDate )
, Fund_( ifds::Fund, &ifds::s_FldProp_Fund )
, Class_( ifds::Class, &ifds::s_FldProp_Class )
, Rebook_( ifds::Rebook, &ifds::s_FldProp_Rebook )
, MCHFileIndicator_( ifds::MCHFileIndicator, &ifds::s_FldProp_MCHFileIndicator )
, SecRecFileIndicator_( ifds::SecRecFileIndicator, &ifds::s_FldProp_SecRecFileIndicator )
, RbkMCHFileIndicator_( ifds::RbkMCHFileIndicator, &ifds::s_FldProp_RbkMCHFileIndicator )
, RbkSecRecFileIndicator_( ifds::RbkSecRecFileIndicator, &ifds::s_FldProp_RbkSecRecFileIndicator )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
   cFields_ = 31;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0355_REQ::~dsi_DSTC0355_REQ()
{
}

BFDataImpl* dsi_DSTC0355_REQ::clone()
{
   dsi_DSTC0355_REQ* p = new dsi_DSTC0355_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->RunMode_ = RunMode_;
   p->RvCode_ = RvCode_;
   p->OnStmt_ = OnStmt_;
   p->Accountable_ = Accountable_;
   p->ConfirmRequired_ = ConfirmRequired_;
   p->CancelCheque_ = CancelCheque_;
   p->Remarks1_ = Remarks1_;
   p->Remarks2_ = Remarks2_;
   p->Remarks3_ = Remarks3_;
   p->Batch_ = Batch_;
   p->Trace_ = Trace_;
   p->TranStatus_ = TranStatus_;
   p->TransType_ = TransType_;
   p->Version_ = Version_;
   p->TradeAdjustID_ = TradeAdjustID_;
   p->CancellationType_ = CancellationType_;
   p->TradeDate_ = TradeDate_;
   p->Fund_ = Fund_;
   p->Class_ = Class_;
   p->Rebook_ = Rebook_;
   p->MCHFileIndicator_ = MCHFileIndicator_;
   p->SecRecFileIndicator_ = SecRecFileIndicator_;
   p->RbkMCHFileIndicator_ = RbkMCHFileIndicator_;
   p->RbkSecRecFileIndicator_ = RbkSecRecFileIndicator_;
   p->RepeatCount_ = RepeatCount_;
   return(p);
}

BFDataField* dsi_DSTC0355_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40000437: return ( &RvCode_ ); break; // RvCode
      case 40000473: return ( &OnStmt_ ); break; // OnStmt
      case 40000476: return ( &Accountable_ ); break; // Accountable
      case 40004778: return ( &ConfirmRequired_ ); break; // ConfirmRequired
      case 40005076: return ( &CancelCheque_ ); break; // CancelCheque
      case 40000478: return ( &Remarks1_ ); break; // Remarks1
      case 40000479: return ( &Remarks2_ ); break; // Remarks2
      case 40000480: return ( &Remarks3_ ); break; // Remarks3
      case 40000830: return ( &Batch_ ); break; // Batch
      case 40001355: return ( &Trace_ ); break; // Trace
      case 40002273: return ( &TranStatus_ ); break; // TranStatus
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40003739: return ( &Version_ ); break; // Version
      case 40005337: return ( &TradeAdjustID_ ); break; // TradeAdjustID
      case 40005336: return ( &CancellationType_ ); break; // CancellationType
      case 40000097: return ( &TradeDate_ ); break; // TradeDate
      case 40002227: return ( &Fund_ ); break; // Fund
      case 40002228: return ( &Class_ ); break; // Class
      case 40005236: return ( &Rebook_ ); break; // Rebook
      case 40005380: return ( &MCHFileIndicator_ ); break; // MCHFileIndicator
      case 40005381: return ( &SecRecFileIndicator_ ); break; // SecRecFileIndicator
      case 40005402: return ( &RbkMCHFileIndicator_ ); break; // RbkMCHFileIndicator
      case 40005403: return ( &RbkSecRecFileIndicator_ ); break; // RbkSecRecFileIndicator
      case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0355_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0355_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0355_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 31 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &RunMode_; break;
            case 7: aFlds_[7] = &RvCode_; break;
            case 8: aFlds_[8] = &OnStmt_; break;
            case 9: aFlds_[9] = &Accountable_; break;
            case 10: aFlds_[10] = &ConfirmRequired_; break;
            case 11: aFlds_[11] = &CancelCheque_; break;
            case 12: aFlds_[12] = &Remarks1_; break;
            case 13: aFlds_[13] = &Remarks2_; break;
            case 14: aFlds_[14] = &Remarks3_; break;
            case 15: aFlds_[15] = &Batch_; break;
            case 16: aFlds_[16] = &Trace_; break;
            case 17: aFlds_[17] = &TranStatus_; break;
            case 18: aFlds_[18] = &TransType_; break;
            case 19: aFlds_[19] = &Version_; break;
            case 20: aFlds_[20] = &TradeAdjustID_; break;
            case 21: aFlds_[21] = &CancellationType_; break;
            case 22: aFlds_[22] = &TradeDate_; break;
            case 23: aFlds_[23] = &Fund_; break;
            case 24: aFlds_[24] = &Class_; break;
            case 25: aFlds_[25] = &Rebook_; break;
            case 26: aFlds_[26] = &MCHFileIndicator_; break;
            case 27: aFlds_[27] = &SecRecFileIndicator_; break;
            case 28: aFlds_[28] = &RbkMCHFileIndicator_; break;
            case 29: aFlds_[29] = &RbkSecRecFileIndicator_; break;
            case 30: aFlds_[30] = &RepeatCount_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0355_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0355_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0355_REQ::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0355_REQ::getDefinedByteLength( void ) const
{
   return( 1258 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0355_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0355_REQ::fieldExists( id );
}

bool dsi_DSTC0355_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40000990: return( true );
      case 40000437: return( true );
      case 40000473: return( true );
      case 40000476: return( true );
      case 40004778: return( true );
      case 40005076: return( true );
      case 40000478: return( true );
      case 40000479: return( true );
      case 40000480: return( true );
      case 40000830: return( true );
      case 40001355: return( true );
      case 40002273: return( true );
      case 40000095: return( true );
      case 40003739: return( true );
      case 40005337: return( true );
      case 40005336: return( true );
      case 40000097: return( true );
      case 40002227: return( true );
      case 40002228: return( true );
      case 40005236: return( true );
      case 40005380: return( true );
      case 40005381: return( true );
      case 40005402: return( true );
      case 40005403: return( true );
      case 40000120: return( true );
   }
   return false;
}

