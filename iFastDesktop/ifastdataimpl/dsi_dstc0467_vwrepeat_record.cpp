// BFDataImpl implementation file for DataSet DSTC0467.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0467_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0467_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0467_VWRepeat_Record() { return new dsi_DSTC0467_VWRepeat_Record; }

dsi_DSTC0467_VWRepeat_Record::dsi_DSTC0467_VWRepeat_Record()
: BFDataImpl( 40007541 )
, AssetType_( ifds::AssetType, &ifds::s_FldProp_AssetType )
, RESPNotlType_( ifds::RESPNotlType, &ifds::s_FldProp_RESPNotlType )
, GrantDescription_( ifds::GrantDescription, &ifds::s_FldProp_GrantDescription )
, RESPNotlGroup_( ifds::RESPNotlGroup, &ifds::s_FldProp_RESPNotlGroup )
, TaxJurisAtGrantRequest_( ifds::TaxJurisAtGrantRequest, &ifds::s_FldProp_TaxJurisAtGrantRequest )
, TaxJurisAtGrantRedeem_( ifds::TaxJurisAtGrantRedeem, &ifds::s_FldProp_TaxJurisAtGrantRedeem )
, ResidencyAtGrantRequest_( ifds::ResidencyAtGrantRequest, &ifds::s_FldProp_ResidencyAtGrantRequest )
, ResidencyAtGrantRedeem_( ifds::ResidencyAtGrantRedeem, &ifds::s_FldProp_ResidencyAtGrantRedeem )
, BenefStartAgeForAsset_( ifds::BenefStartAgeForAsset, &ifds::s_FldProp_BenefStartAgeForAsset )
, BenefEndAgeForAsset_( ifds::BenefEndAgeForAsset, &ifds::s_FldProp_BenefEndAgeForAsset )
, AgeCalcMethod_( ifds::AgeCalcMethod, &ifds::s_FldProp_AgeCalcMethod )
, GrantFrequency_( ifds::GrantFrequency, &ifds::s_FldProp_GrantFrequency )
, GrantRequestType_( ifds::GrantRequestType, &ifds::s_FldProp_GrantRequestType )
, SiblingRequired_( ifds::SiblingRequired, &ifds::s_FldProp_SiblingRequired )
, ShareAsset_( ifds::ShareAsset, &ifds::s_FldProp_ShareAsset )
, DepletionMethod_( ifds::DepletionMethod, &ifds::s_FldProp_DepletionMethod )
, AutoGrantReturn_( ifds::AutoGrantReturn, &ifds::s_FldProp_AutoGrantReturn )
, GrantStartDate_( ifds::GrantStartDate, &ifds::s_FldProp_GrantStartDate )
, GrantEndDate_( ifds::GrantEndDate, &ifds::s_FldProp_GrantEndDate )
, GrantGBCD_( ifds::GrantGBCD, &ifds::s_FldProp_GrantGBCD )
{
   cFields_ = 20;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0467_VWRepeat_Record::~dsi_DSTC0467_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0467_VWRepeat_Record::clone()
{
   dsi_DSTC0467_VWRepeat_Record* p = new dsi_DSTC0467_VWRepeat_Record;
   p->AssetType_ = AssetType_;
   p->RESPNotlType_ = RESPNotlType_;
   p->GrantDescription_ = GrantDescription_;
   p->RESPNotlGroup_ = RESPNotlGroup_;
   p->TaxJurisAtGrantRequest_ = TaxJurisAtGrantRequest_;
   p->TaxJurisAtGrantRedeem_ = TaxJurisAtGrantRedeem_;
   p->ResidencyAtGrantRequest_ = ResidencyAtGrantRequest_;
   p->ResidencyAtGrantRedeem_ = ResidencyAtGrantRedeem_;
   p->BenefStartAgeForAsset_ = BenefStartAgeForAsset_;
   p->BenefEndAgeForAsset_ = BenefEndAgeForAsset_;
   p->AgeCalcMethod_ = AgeCalcMethod_;
   p->GrantFrequency_ = GrantFrequency_;
   p->GrantRequestType_ = GrantRequestType_;
   p->SiblingRequired_ = SiblingRequired_;
   p->ShareAsset_ = ShareAsset_;
   p->DepletionMethod_ = DepletionMethod_;
   p->AutoGrantReturn_ = AutoGrantReturn_;
   p->GrantStartDate_ = GrantStartDate_;
   p->GrantEndDate_ = GrantEndDate_;
   p->GrantGBCD_ = GrantGBCD_;
   return(p);
}

BFDataField* dsi_DSTC0467_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40007542: return ( &AssetType_ ); break; // AssetType
      case 40007543: return ( &RESPNotlType_ ); break; // RESPNotlType
      case 40007544: return ( &GrantDescription_ ); break; // GrantDescription
      case 40007545: return ( &RESPNotlGroup_ ); break; // RESPNotlGroup
      case 40007546: return ( &TaxJurisAtGrantRequest_ ); break; // TaxJurisAtGrantRequest
      case 40007547: return ( &TaxJurisAtGrantRedeem_ ); break; // TaxJurisAtGrantRedeem
      case 40007548: return ( &ResidencyAtGrantRequest_ ); break; // ResidencyAtGrantRequest
      case 40007549: return ( &ResidencyAtGrantRedeem_ ); break; // ResidencyAtGrantRedeem
      case 40007550: return ( &BenefStartAgeForAsset_ ); break; // BenefStartAgeForAsset
      case 40007551: return ( &BenefEndAgeForAsset_ ); break; // BenefEndAgeForAsset
      case 40007552: return ( &AgeCalcMethod_ ); break; // AgeCalcMethod
      case 40007553: return ( &GrantFrequency_ ); break; // GrantFrequency
      case 40007554: return ( &GrantRequestType_ ); break; // GrantRequestType
      case 40007555: return ( &SiblingRequired_ ); break; // SiblingRequired
      case 40007556: return ( &ShareAsset_ ); break; // ShareAsset
      case 40007557: return ( &DepletionMethod_ ); break; // DepletionMethod
      case 40007558: return ( &AutoGrantReturn_ ); break; // AutoGrantReturn
      case 40007559: return ( &GrantStartDate_ ); break; // GrantStartDate
      case 40007560: return ( &GrantEndDate_ ); break; // GrantEndDate
      case 40007561: return ( &GrantGBCD_ ); break; // GrantGBCD
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0467_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0467_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0467_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 20 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AssetType_; break;
            case 1: aFlds_[1] = &RESPNotlType_; break;
            case 2: aFlds_[2] = &GrantDescription_; break;
            case 3: aFlds_[3] = &RESPNotlGroup_; break;
            case 4: aFlds_[4] = &TaxJurisAtGrantRequest_; break;
            case 5: aFlds_[5] = &TaxJurisAtGrantRedeem_; break;
            case 6: aFlds_[6] = &ResidencyAtGrantRequest_; break;
            case 7: aFlds_[7] = &ResidencyAtGrantRedeem_; break;
            case 8: aFlds_[8] = &BenefStartAgeForAsset_; break;
            case 9: aFlds_[9] = &BenefEndAgeForAsset_; break;
            case 10: aFlds_[10] = &AgeCalcMethod_; break;
            case 11: aFlds_[11] = &GrantFrequency_; break;
            case 12: aFlds_[12] = &GrantRequestType_; break;
            case 13: aFlds_[13] = &SiblingRequired_; break;
            case 14: aFlds_[14] = &ShareAsset_; break;
            case 15: aFlds_[15] = &DepletionMethod_; break;
            case 16: aFlds_[16] = &AutoGrantReturn_; break;
            case 17: aFlds_[17] = &GrantStartDate_; break;
            case 18: aFlds_[18] = &GrantEndDate_; break;
            case 19: aFlds_[19] = &GrantGBCD_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0467_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0467_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0467_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0467_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 925 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0467_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0467_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0467_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40007542: return( true );
      case 40007543: return( true );
      case 40007544: return( true );
      case 40007545: return( true );
      case 40007546: return( true );
      case 40007547: return( true );
      case 40007548: return( true );
      case 40007549: return( true );
      case 40007550: return( true );
      case 40007551: return( true );
      case 40007552: return( true );
      case 40007553: return( true );
      case 40007554: return( true );
      case 40007555: return( true );
      case 40007556: return( true );
      case 40007557: return( true );
      case 40007558: return( true );
      case 40007559: return( true );
      case 40007560: return( true );
      case 40007561: return( true );
   }
   return false;
}

