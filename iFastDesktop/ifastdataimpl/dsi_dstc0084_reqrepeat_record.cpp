// BFDataImpl implementation file for DataSet DSTC0084.REQRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0084_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0084_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0084_REQRepeat_Record() { return new dsi_DSTC0084_REQRepeat_Record; }

dsi_DSTC0084_REQRepeat_Record::dsi_DSTC0084_REQRepeat_Record()
: BFDataImpl( 40001031 )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, Percentage_( ifds::Percentage, &ifds::s_FldProp_Percentage )
, AllocAmount_( ifds::AllocAmount, &ifds::s_FldProp_AllocAmount )
, DistribDetlRid_( ifds::DistribDetlRid, &ifds::s_FldProp_DistribDetlRid )
, DistribLevel_( ifds::DistribLevel, &ifds::s_FldProp_DistribLevel )
, AllocAccountNum_( ifds::AllocAccountNum, &ifds::s_FldProp_AllocAccountNum )
, TransSeq_( ifds::TransSeq, &ifds::s_FldProp_TransSeq )
, CommRunMode_( ifds::CommRunMode, &ifds::s_FldProp_CommRunMode )
, TradesPayType_( ifds::TradesPayType, &ifds::s_FldProp_TradesPayType )
, Fixed_( ifds::Fixed, &ifds::s_FldProp_Fixed )
, GrossOrNet_( ifds::GrossOrNet, &ifds::s_FldProp_GrossOrNet )
, CommPrcnt_( ifds::CommPrcnt, &ifds::s_FldProp_CommPrcnt )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, SlsrepCode_( ifds::SlsrepCode, &ifds::s_FldProp_SlsrepCode )
, CommLevel_( ifds::CommLevel, &ifds::s_FldProp_CommLevel )
, CommRate_( ifds::CommRate, &ifds::s_FldProp_CommRate )
, RenunAmount_( ifds::RenunAmount, &ifds::s_FldProp_RenunAmount )
, RecordType_( ifds::RecordType, &ifds::s_FldProp_RecordType )
, IndexRunMode_( ifds::IndexRunMode, &ifds::s_FldProp_IndexRunMode )
, IndexAmt_( ifds::IndexAmt, &ifds::s_FldProp_IndexAmt )
, IndexType_( ifds::IndexType, &ifds::s_FldProp_IndexType )
, IndexFrequency_( ifds::IndexFrequency, &ifds::s_FldProp_IndexFrequency )
, StartDate_( ifds::StartDate, &ifds::s_FldProp_StartDate )
, EndDate_( ifds::EndDate, &ifds::s_FldProp_EndDate )
, PACIndexRid_( ifds::PACIndexRid, &ifds::s_FldProp_PACIndexRid )
, PACIndexVer_( ifds::PACIndexVer, &ifds::s_FldProp_PACIndexVer )
, AcctPrcnt_( ifds::AcctPrcnt, &ifds::s_FldProp_AcctPrcnt )
, DistribAcctLvlVer_( ifds::DistribAcctLvlVer, &ifds::s_FldProp_DistribAcctLvlVer )
, DistribAcctLvlRid_( ifds::DistribAcctLvlRid, &ifds::s_FldProp_DistribAcctLvlRid )
, AcctLvlRunMode_( ifds::AcctLvlRunMode, &ifds::s_FldProp_AcctLvlRunMode )
, AcctLvlAmount_( ifds::AcctLvlAmount, &ifds::s_FldProp_AcctLvlAmount )
, DistribFundLvlVer_( ifds::DistribFundLvlVer, &ifds::s_FldProp_DistribFundLvlVer )
, NextIndexDate_( ifds::NextIndexDate, &ifds::s_FldProp_NextIndexDate )
, SplitCommRid_( ifds::SplitCommRid, &ifds::s_FldProp_SplitCommRid )
{
   cFields_ = 37;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0084_REQRepeat_Record::~dsi_DSTC0084_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0084_REQRepeat_Record::clone()
{
   dsi_DSTC0084_REQRepeat_Record* p = new dsi_DSTC0084_REQRepeat_Record;
   p->RunMode_ = RunMode_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->Percentage_ = Percentage_;
   p->AllocAmount_ = AllocAmount_;
   p->DistribDetlRid_ = DistribDetlRid_;
   p->DistribLevel_ = DistribLevel_;
   p->AllocAccountNum_ = AllocAccountNum_;
   p->TransSeq_ = TransSeq_;
   p->CommRunMode_ = CommRunMode_;
   p->TradesPayType_ = TradesPayType_;
   p->Fixed_ = Fixed_;
   p->GrossOrNet_ = GrossOrNet_;
   p->CommPrcnt_ = CommPrcnt_;
   p->BrokerCode_ = BrokerCode_;
   p->BranchCode_ = BranchCode_;
   p->SlsrepCode_ = SlsrepCode_;
   p->CommLevel_ = CommLevel_;
   p->CommRate_ = CommRate_;
   p->RenunAmount_ = RenunAmount_;
   p->RecordType_ = RecordType_;
   p->IndexRunMode_ = IndexRunMode_;
   p->IndexAmt_ = IndexAmt_;
   p->IndexType_ = IndexType_;
   p->IndexFrequency_ = IndexFrequency_;
   p->StartDate_ = StartDate_;
   p->EndDate_ = EndDate_;
   p->PACIndexRid_ = PACIndexRid_;
   p->PACIndexVer_ = PACIndexVer_;
   p->AcctPrcnt_ = AcctPrcnt_;
   p->DistribAcctLvlVer_ = DistribAcctLvlVer_;
   p->DistribAcctLvlRid_ = DistribAcctLvlRid_;
   p->AcctLvlRunMode_ = AcctLvlRunMode_;
   p->AcctLvlAmount_ = AcctLvlAmount_;
   p->DistribFundLvlVer_ = DistribFundLvlVer_;
   p->NextIndexDate_ = NextIndexDate_;
   p->SplitCommRid_ = SplitCommRid_;
   return(p);
}

BFDataField* dsi_DSTC0084_REQRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000291: return ( &Percentage_ ); break; // Percentage
      case 40000292: return ( &AllocAmount_ ); break; // AllocAmount
      case 40000950: return ( &DistribDetlRid_ ); break; // DistribDetlRid
      case 40002457: return ( &DistribLevel_ ); break; // DistribLevel
      case 40001049: return ( &AllocAccountNum_ ); break; // AllocAccountNum
      case 40002217: return ( &TransSeq_ ); break; // TransSeq
      case 40002455: return ( &CommRunMode_ ); break; // CommRunMode
      case 40001377: return ( &TradesPayType_ ); break; // TradesPayType
      case 40002213: return ( &Fixed_ ); break; // Fixed
      case 40000234: return ( &GrossOrNet_ ); break; // GrossOrNet
      case 40002211: return ( &CommPrcnt_ ); break; // CommPrcnt
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000045: return ( &BranchCode_ ); break; // BranchCode
      case 40000656: return ( &SlsrepCode_ ); break; // SlsrepCode
      case 40002240: return ( &CommLevel_ ); break; // CommLevel
      case 40002444: return ( &CommRate_ ); break; // CommRate
      case 40005048: return ( &RenunAmount_ ); break; // RenunAmount
      case 40000951: return ( &RecordType_ ); break; // RecordType
      case 40002547: return ( &IndexRunMode_ ); break; // IndexRunMode
      case 40002517: return ( &IndexAmt_ ); break; // IndexAmt
      case 40002518: return ( &IndexType_ ); break; // IndexType
      case 40002519: return ( &IndexFrequency_ ); break; // IndexFrequency
      case 40000107: return ( &StartDate_ ); break; // StartDate
      case 40000108: return ( &EndDate_ ); break; // EndDate
      case 40002551: return ( &PACIndexRid_ ); break; // PACIndexRid
      case 40002552: return ( &PACIndexVer_ ); break; // PACIndexVer
      case 40002286: return ( &AcctPrcnt_ ); break; // AcctPrcnt
      case 40002598: return ( &DistribAcctLvlVer_ ); break; // DistribAcctLvlVer
      case 40002599: return ( &DistribAcctLvlRid_ ); break; // DistribAcctLvlRid
      case 40002461: return ( &AcctLvlRunMode_ ); break; // AcctLvlRunMode
      case 40002496: return ( &AcctLvlAmount_ ); break; // AcctLvlAmount
      case 40002600: return ( &DistribFundLvlVer_ ); break; // DistribFundLvlVer
      case 40002520: return ( &NextIndexDate_ ); break; // NextIndexDate
      case 40002963: return ( &SplitCommRid_ ); break; // SplitCommRid
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0084_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0084_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0084_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 37 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RunMode_; break;
            case 1: aFlds_[1] = &FundCode_; break;
            case 2: aFlds_[2] = &ClassCode_; break;
            case 3: aFlds_[3] = &Percentage_; break;
            case 4: aFlds_[4] = &AllocAmount_; break;
            case 5: aFlds_[5] = &DistribDetlRid_; break;
            case 6: aFlds_[6] = &DistribLevel_; break;
            case 7: aFlds_[7] = &AllocAccountNum_; break;
            case 8: aFlds_[8] = &TransSeq_; break;
            case 9: aFlds_[9] = &CommRunMode_; break;
            case 10: aFlds_[10] = &TradesPayType_; break;
            case 11: aFlds_[11] = &Fixed_; break;
            case 12: aFlds_[12] = &GrossOrNet_; break;
            case 13: aFlds_[13] = &CommPrcnt_; break;
            case 14: aFlds_[14] = &BrokerCode_; break;
            case 15: aFlds_[15] = &BranchCode_; break;
            case 16: aFlds_[16] = &SlsrepCode_; break;
            case 17: aFlds_[17] = &CommLevel_; break;
            case 18: aFlds_[18] = &CommRate_; break;
            case 19: aFlds_[19] = &RenunAmount_; break;
            case 20: aFlds_[20] = &RecordType_; break;
            case 21: aFlds_[21] = &IndexRunMode_; break;
            case 22: aFlds_[22] = &IndexAmt_; break;
            case 23: aFlds_[23] = &IndexType_; break;
            case 24: aFlds_[24] = &IndexFrequency_; break;
            case 25: aFlds_[25] = &StartDate_; break;
            case 26: aFlds_[26] = &EndDate_; break;
            case 27: aFlds_[27] = &PACIndexRid_; break;
            case 28: aFlds_[28] = &PACIndexVer_; break;
            case 29: aFlds_[29] = &AcctPrcnt_; break;
            case 30: aFlds_[30] = &DistribAcctLvlVer_; break;
            case 31: aFlds_[31] = &DistribAcctLvlRid_; break;
            case 32: aFlds_[32] = &AcctLvlRunMode_; break;
            case 33: aFlds_[33] = &AcctLvlAmount_; break;
            case 34: aFlds_[34] = &DistribFundLvlVer_; break;
            case 35: aFlds_[35] = &NextIndexDate_; break;
            case 36: aFlds_[36] = &SplitCommRid_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0084_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0084_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0084_REQRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0084_REQRepeat_Record::getDefinedByteLength( void ) const
{
   return( 1196 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0084_REQRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0084_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0084_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000990: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000291: return( true );
      case 40000292: return( true );
      case 40000950: return( true );
      case 40002457: return( true );
      case 40001049: return( true );
      case 40002217: return( true );
      case 40002455: return( true );
      case 40001377: return( true );
      case 40002213: return( true );
      case 40000234: return( true );
      case 40002211: return( true );
      case 40000044: return( true );
      case 40000045: return( true );
      case 40000656: return( true );
      case 40002240: return( true );
      case 40002444: return( true );
      case 40005048: return( true );
      case 40000951: return( true );
      case 40002547: return( true );
      case 40002517: return( true );
      case 40002518: return( true );
      case 40002519: return( true );
      case 40000107: return( true );
      case 40000108: return( true );
      case 40002551: return( true );
      case 40002552: return( true );
      case 40002286: return( true );
      case 40002598: return( true );
      case 40002599: return( true );
      case 40002461: return( true );
      case 40002496: return( true );
      case 40002600: return( true );
      case 40002520: return( true );
      case 40002963: return( true );
   }
   return false;
}

