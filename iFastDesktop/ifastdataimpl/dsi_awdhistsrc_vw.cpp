// BFDataImpl implementation file for DataSet AWDHISTSRC.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_awdhistsrc_vw.h"


// This function creates an instance of dsi_AWDHISTSRC_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_AWDHISTSRC_VW() { return new dsi_AWDHISTSRC_VW; }

dsi_AWDHISTSRC_VW::dsi_AWDHISTSRC_VW()
: BFDataImpl( 40007227 )
, AWDObjectId_( ifds::AWDObjectId, &ifds::s_FldProp_AWDObjectId )
, AWDType_( ifds::AWDType, &ifds::s_FldProp_AWDType )
, AWDContentId_( ifds::AWDContentId, &ifds::s_FldProp_AWDContentId )
, AWDImageURL_( ifds::AWDImageURL, &ifds::s_FldProp_AWDImageURL )
{
   cFields_ = 4;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_AWDHISTSRC_VW::~dsi_AWDHISTSRC_VW()
{
}

BFDataImpl* dsi_AWDHISTSRC_VW::clone()
{
   dsi_AWDHISTSRC_VW* p = new dsi_AWDHISTSRC_VW;
   p->AWDObjectId_ = AWDObjectId_;
   p->AWDType_ = AWDType_;
   p->AWDContentId_ = AWDContentId_;
   p->AWDImageURL_ = AWDImageURL_;
   return(p);
}

BFDataField* dsi_AWDHISTSRC_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40005715: return ( &AWDObjectId_ ); break; // AWDObjectId
      case 40007221: return ( &AWDType_ ); break; // AWDType
      case 40007217: return ( &AWDContentId_ ); break; // AWDContentId
      case 40007218: return ( &AWDImageURL_ ); break; // AWDImageURL
   }
   return( NULL );
}

const BFDataField* dsi_AWDHISTSRC_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_AWDHISTSRC_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_AWDHISTSRC_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 4 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AWDObjectId_; break;
            case 1: aFlds_[1] = &AWDType_; break;
            case 2: aFlds_[2] = &AWDContentId_; break;
            case 3: aFlds_[3] = &AWDImageURL_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_AWDHISTSRC_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_AWDHISTSRC_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_AWDHISTSRC_VW::getLargestDefinedField( void ) const
{
   return( 256 );
}

unsigned long dsi_AWDHISTSRC_VW::getDefinedByteLength( void ) const
{
   return( 338 * sizeof( I_CHAR ) );
}

bool dsi_AWDHISTSRC_VW::exists( const BFFieldId& id ) const
{
   return dsi_AWDHISTSRC_VW::fieldExists( id );
}

bool dsi_AWDHISTSRC_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40005715: return( true );
      case 40007221: return( true );
      case 40007217: return( true );
      case 40007218: return( true );
   }
   return false;
}

