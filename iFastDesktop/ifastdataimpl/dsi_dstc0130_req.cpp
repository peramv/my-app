// BFDataImpl implementation file for DataSet DSTC0130.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0130_req.h"


// This function creates an instance of dsi_DSTC0130_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0130_REQ() { return new dsi_DSTC0130_REQ; }

dsi_DSTC0130_REQ::dsi_DSTC0130_REQ()
: BFDataImpl( 40001707 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, CallNum_( ifds::CallNum, &ifds::s_FldProp_CallNum )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, MandAmtPay_( ifds::MandAmtPay, &ifds::s_FldProp_MandAmtPay )
, MandAmtYr_( ifds::MandAmtYr, &ifds::s_FldProp_MandAmtYr )
, MaxAmtYr_( ifds::MaxAmtYr, &ifds::s_FldProp_MaxAmtYr )
, PayOption_( ifds::PayOption, &ifds::s_FldProp_PayOption )
, SpouseBirth_( ifds::SpouseBirth, &ifds::s_FldProp_SpouseBirth )
, Qualified_( ifds::Qualified, &ifds::s_FldProp_Qualified )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, RecordType_( ifds::RecordType, &ifds::s_FldProp_RecordType )
, GoodBad_( ifds::GoodBad, &ifds::s_FldProp_GoodBad )
, EffectiveFrom_( ifds::EffectiveFrom, &ifds::s_FldProp_EffectiveFrom )
, GrossNetMethod_( ifds::GrossNetMethod, &ifds::s_FldProp_GrossNetMethod )
, NetAmt_( ifds::NetAmt, &ifds::s_FldProp_NetAmt )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, January_( ifds::January, &ifds::s_FldProp_January )
, February_( ifds::February, &ifds::s_FldProp_February )
, March_( ifds::March, &ifds::s_FldProp_March )
, April_( ifds::April, &ifds::s_FldProp_April )
, May_( ifds::May, &ifds::s_FldProp_May )
, June_( ifds::June, &ifds::s_FldProp_June )
, July_( ifds::July, &ifds::s_FldProp_July )
, August_( ifds::August, &ifds::s_FldProp_August )
, September_( ifds::September, &ifds::s_FldProp_September )
, October_( ifds::October, &ifds::s_FldProp_October )
, November_( ifds::November, &ifds::s_FldProp_November )
, December_( ifds::December, &ifds::s_FldProp_December )
, SuppFedTax_( ifds::SuppFedTax, &ifds::s_FldProp_SuppFedTax )
, FedRate_( ifds::FedRate, &ifds::s_FldProp_FedRate )
, FedRatePUD_( ifds::FedRatePUD, &ifds::s_FldProp_FedRatePUD )
, SuppProvTax_( ifds::SuppProvTax, &ifds::s_FldProp_SuppProvTax )
, ProvRate_( ifds::ProvRate, &ifds::s_FldProp_ProvRate )
, ProvRatePUD_( ifds::ProvRatePUD, &ifds::s_FldProp_ProvRatePUD )
, TaxOnMin_( ifds::TaxOnMin, &ifds::s_FldProp_TaxOnMin )
, OverrideAmtYr_( ifds::OverrideAmtYr, &ifds::s_FldProp_OverrideAmtYr )
, LastProcessDate_( ifds::LastProcessDate, &ifds::s_FldProp_LastProcessDate )
, CalcFedProvTax_( ifds::CalcFedProvTax, &ifds::s_FldProp_CalcFedProvTax )
, RIFId_( ifds::RIFId, &ifds::s_FldProp_RIFId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, PreYrPercent_( ifds::PreYrPercent, &ifds::s_FldProp_PreYrPercent )
, Frequency_( ifds::Frequency, &ifds::s_FldProp_Frequency )
, DayOfWeek_( ifds::DayOfWeek, &ifds::s_FldProp_DayOfWeek )
, DaysOfMonth_( ifds::DaysOfMonth, &ifds::s_FldProp_DaysOfMonth )
, BusinessArea_( ifds::BusinessArea, &ifds::s_FldProp_BusinessArea )
, WorkType_( ifds::WorkType, &ifds::s_FldProp_WorkType )
, AWDObjectId_( ifds::AWDObjectId, &ifds::s_FldProp_AWDObjectId )
, AWDCrda_( ifds::AWDCrda, &ifds::s_FldProp_AWDCrda )
, OverrideUnusedMax_( ifds::OverrideUnusedMax, &ifds::s_FldProp_OverrideUnusedMax )
, PYUnusedMax_( ifds::PYUnusedMax, &ifds::s_FldProp_PYUnusedMax )
, ExternalAssets_( ifds::ExternalAssets, &ifds::s_FldProp_ExternalAssets )
{
   cFields_ = 57;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0130_REQ::~dsi_DSTC0130_REQ()
{
}

BFDataImpl* dsi_DSTC0130_REQ::clone()
{
   dsi_DSTC0130_REQ* p = new dsi_DSTC0130_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->RunMode_ = RunMode_;
   p->AccountNum_ = AccountNum_;
   p->CallNum_ = CallNum_;
   p->Amount_ = Amount_;
   p->MandAmtPay_ = MandAmtPay_;
   p->MandAmtYr_ = MandAmtYr_;
   p->MaxAmtYr_ = MaxAmtYr_;
   p->PayOption_ = PayOption_;
   p->SpouseBirth_ = SpouseBirth_;
   p->Qualified_ = Qualified_;
   p->EffectiveDate_ = EffectiveDate_;
   p->RecordType_ = RecordType_;
   p->GoodBad_ = GoodBad_;
   p->EffectiveFrom_ = EffectiveFrom_;
   p->GrossNetMethod_ = GrossNetMethod_;
   p->NetAmt_ = NetAmt_;
   p->StopDate_ = StopDate_;
   p->January_ = January_;
   p->February_ = February_;
   p->March_ = March_;
   p->April_ = April_;
   p->May_ = May_;
   p->June_ = June_;
   p->July_ = July_;
   p->August_ = August_;
   p->September_ = September_;
   p->October_ = October_;
   p->November_ = November_;
   p->December_ = December_;
   p->SuppFedTax_ = SuppFedTax_;
   p->FedRate_ = FedRate_;
   p->FedRatePUD_ = FedRatePUD_;
   p->SuppProvTax_ = SuppProvTax_;
   p->ProvRate_ = ProvRate_;
   p->ProvRatePUD_ = ProvRatePUD_;
   p->TaxOnMin_ = TaxOnMin_;
   p->OverrideAmtYr_ = OverrideAmtYr_;
   p->LastProcessDate_ = LastProcessDate_;
   p->CalcFedProvTax_ = CalcFedProvTax_;
   p->RIFId_ = RIFId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->PreYrPercent_ = PreYrPercent_;
   p->Frequency_ = Frequency_;
   p->DayOfWeek_ = DayOfWeek_;
   p->DaysOfMonth_ = DaysOfMonth_;
   p->BusinessArea_ = BusinessArea_;
   p->WorkType_ = WorkType_;
   p->AWDObjectId_ = AWDObjectId_;
   p->AWDCrda_ = AWDCrda_;
   p->OverrideUnusedMax_ = OverrideUnusedMax_;
   p->PYUnusedMax_ = PYUnusedMax_;
   p->ExternalAssets_ = ExternalAssets_;
   return(p);
}

BFDataField* dsi_DSTC0130_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40001708: return ( &CallNum_ ); break; // CallNum
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40000852: return ( &MandAmtPay_ ); break; // MandAmtPay
      case 40000853: return ( &MandAmtYr_ ); break; // MandAmtYr
      case 40000856: return ( &MaxAmtYr_ ); break; // MaxAmtYr
      case 40000854: return ( &PayOption_ ); break; // PayOption
      case 40000862: return ( &SpouseBirth_ ); break; // SpouseBirth
      case 40000860: return ( &Qualified_ ); break; // Qualified
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000951: return ( &RecordType_ ); break; // RecordType
      case 40000496: return ( &GoodBad_ ); break; // GoodBad
      case 40000223: return ( &EffectiveFrom_ ); break; // EffectiveFrom
      case 40005728: return ( &GrossNetMethod_ ); break; // GrossNetMethod
      case 40000351: return ( &NetAmt_ ); break; // NetAmt
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40000257: return ( &January_ ); break; // January
      case 40000258: return ( &February_ ); break; // February
      case 40000259: return ( &March_ ); break; // March
      case 40000260: return ( &April_ ); break; // April
      case 40000261: return ( &May_ ); break; // May
      case 40000262: return ( &June_ ); break; // June
      case 40000263: return ( &July_ ); break; // July
      case 40000264: return ( &August_ ); break; // August
      case 40000265: return ( &September_ ); break; // September
      case 40000266: return ( &October_ ); break; // October
      case 40000267: return ( &November_ ); break; // November
      case 40000268: return ( &December_ ); break; // December
      case 40000842: return ( &SuppFedTax_ ); break; // SuppFedTax
      case 40000844: return ( &FedRate_ ); break; // FedRate
      case 40000845: return ( &FedRatePUD_ ); break; // FedRatePUD
      case 40000843: return ( &SuppProvTax_ ); break; // SuppProvTax
      case 40000846: return ( &ProvRate_ ); break; // ProvRate
      case 40000847: return ( &ProvRatePUD_ ); break; // ProvRatePUD
      case 40000857: return ( &TaxOnMin_ ); break; // TaxOnMin
      case 40000858: return ( &OverrideAmtYr_ ); break; // OverrideAmtYr
      case 40000276: return ( &LastProcessDate_ ); break; // LastProcessDate
      case 40001799: return ( &CalcFedProvTax_ ); break; // CalcFedProvTax
      case 40000840: return ( &RIFId_ ); break; // RIFId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40003593: return ( &PreYrPercent_ ); break; // PreYrPercent
      case 40000730: return ( &Frequency_ ); break; // Frequency
      case 40000275: return ( &DayOfWeek_ ); break; // DayOfWeek
      case 40005673: return ( &DaysOfMonth_ ); break; // DaysOfMonth
      case 40001211: return ( &BusinessArea_ ); break; // BusinessArea
      case 40001212: return ( &WorkType_ ); break; // WorkType
      case 40005715: return ( &AWDObjectId_ ); break; // AWDObjectId
      case 40005718: return ( &AWDCrda_ ); break; // AWDCrda
      case 40005534: return ( &OverrideUnusedMax_ ); break; // OverrideUnusedMax
      case 40005536: return ( &PYUnusedMax_ ); break; // PYUnusedMax
      case 40006729: return ( &ExternalAssets_ ); break; // ExternalAssets
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0130_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0130_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0130_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 57 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &RunMode_; break;
            case 5: aFlds_[5] = &AccountNum_; break;
            case 6: aFlds_[6] = &CallNum_; break;
            case 7: aFlds_[7] = &Amount_; break;
            case 8: aFlds_[8] = &MandAmtPay_; break;
            case 9: aFlds_[9] = &MandAmtYr_; break;
            case 10: aFlds_[10] = &MaxAmtYr_; break;
            case 11: aFlds_[11] = &PayOption_; break;
            case 12: aFlds_[12] = &SpouseBirth_; break;
            case 13: aFlds_[13] = &Qualified_; break;
            case 14: aFlds_[14] = &EffectiveDate_; break;
            case 15: aFlds_[15] = &RecordType_; break;
            case 16: aFlds_[16] = &GoodBad_; break;
            case 17: aFlds_[17] = &EffectiveFrom_; break;
            case 18: aFlds_[18] = &GrossNetMethod_; break;
            case 19: aFlds_[19] = &NetAmt_; break;
            case 20: aFlds_[20] = &StopDate_; break;
            case 21: aFlds_[21] = &January_; break;
            case 22: aFlds_[22] = &February_; break;
            case 23: aFlds_[23] = &March_; break;
            case 24: aFlds_[24] = &April_; break;
            case 25: aFlds_[25] = &May_; break;
            case 26: aFlds_[26] = &June_; break;
            case 27: aFlds_[27] = &July_; break;
            case 28: aFlds_[28] = &August_; break;
            case 29: aFlds_[29] = &September_; break;
            case 30: aFlds_[30] = &October_; break;
            case 31: aFlds_[31] = &November_; break;
            case 32: aFlds_[32] = &December_; break;
            case 33: aFlds_[33] = &SuppFedTax_; break;
            case 34: aFlds_[34] = &FedRate_; break;
            case 35: aFlds_[35] = &FedRatePUD_; break;
            case 36: aFlds_[36] = &SuppProvTax_; break;
            case 37: aFlds_[37] = &ProvRate_; break;
            case 38: aFlds_[38] = &ProvRatePUD_; break;
            case 39: aFlds_[39] = &TaxOnMin_; break;
            case 40: aFlds_[40] = &OverrideAmtYr_; break;
            case 41: aFlds_[41] = &LastProcessDate_; break;
            case 42: aFlds_[42] = &CalcFedProvTax_; break;
            case 43: aFlds_[43] = &RIFId_; break;
            case 44: aFlds_[44] = &Track_; break;
            case 45: aFlds_[45] = &Activity_; break;
            case 46: aFlds_[46] = &PreYrPercent_; break;
            case 47: aFlds_[47] = &Frequency_; break;
            case 48: aFlds_[48] = &DayOfWeek_; break;
            case 49: aFlds_[49] = &DaysOfMonth_; break;
            case 50: aFlds_[50] = &BusinessArea_; break;
            case 51: aFlds_[51] = &WorkType_; break;
            case 52: aFlds_[52] = &AWDObjectId_; break;
            case 53: aFlds_[53] = &AWDCrda_; break;
            case 54: aFlds_[54] = &OverrideUnusedMax_; break;
            case 55: aFlds_[55] = &PYUnusedMax_; break;
            case 56: aFlds_[56] = &ExternalAssets_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0130_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0130_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0130_REQ::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0130_REQ::getDefinedByteLength( void ) const
{
   return( 1390 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0130_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0130_REQ::fieldExists( id );
}

bool dsi_DSTC0130_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40000990: return( true );
      case 40000040: return( true );
      case 40001708: return( true );
      case 40000231: return( true );
      case 40000852: return( true );
      case 40000853: return( true );
      case 40000856: return( true );
      case 40000854: return( true );
      case 40000862: return( true );
      case 40000860: return( true );
      case 40000327: return( true );
      case 40000951: return( true );
      case 40000496: return( true );
      case 40000223: return( true );
      case 40005728: return( true );
      case 40000351: return( true );
      case 40000279: return( true );
      case 40000257: return( true );
      case 40000258: return( true );
      case 40000259: return( true );
      case 40000260: return( true );
      case 40000261: return( true );
      case 40000262: return( true );
      case 40000263: return( true );
      case 40000264: return( true );
      case 40000265: return( true );
      case 40000266: return( true );
      case 40000267: return( true );
      case 40000268: return( true );
      case 40000842: return( true );
      case 40000844: return( true );
      case 40000845: return( true );
      case 40000843: return( true );
      case 40000846: return( true );
      case 40000847: return( true );
      case 40000857: return( true );
      case 40000858: return( true );
      case 40000276: return( true );
      case 40001799: return( true );
      case 40000840: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40003593: return( true );
      case 40000730: return( true );
      case 40000275: return( true );
      case 40005673: return( true );
      case 40001211: return( true );
      case 40001212: return( true );
      case 40005715: return( true );
      case 40005718: return( true );
      case 40005534: return( true );
      case 40005536: return( true );
      case 40006729: return( true );
   }
   return false;
}

