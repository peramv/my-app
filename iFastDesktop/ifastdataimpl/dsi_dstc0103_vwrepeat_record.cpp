// BFDataImpl implementation file for DataSet DSTC0103.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0103_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0103_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0103_VWRepeat_Record() { return new dsi_DSTC0103_VWRepeat_Record; }

dsi_DSTC0103_VWRepeat_Record::dsi_DSTC0103_VWRepeat_Record()
: BFDataImpl( 40001618 )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, ValueAsAt_( ifds::ValueAsAt, &ifds::s_FldProp_ValueAsAt )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, UnitValue_( ifds::UnitValue, &ifds::s_FldProp_UnitValue )
, FundUnits_( ifds::FundUnits, &ifds::s_FldProp_FundUnits )
, FundPercent_( ifds::FundPercent, &ifds::s_FldProp_FundPercent )
, FundAmt_( ifds::FundAmt, &ifds::s_FldProp_FundAmt )
, TaxType_( ifds::TaxType, &ifds::s_FldProp_TaxType )
, TaxTypeDesc_( ifds::TaxTypeDesc, &ifds::s_FldProp_TaxTypeDesc )
, ProductPercent_( ifds::ProductPercent, &ifds::s_FldProp_ProductPercent )
, ProductAmount_( ifds::ProductAmount, &ifds::s_FldProp_ProductAmount )
, ShrBalance_( ifds::ShrBalance, &ifds::s_FldProp_ShrBalance )
{
   cFields_ = 13;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0103_VWRepeat_Record::~dsi_DSTC0103_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0103_VWRepeat_Record::clone()
{
   dsi_DSTC0103_VWRepeat_Record* p = new dsi_DSTC0103_VWRepeat_Record;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->ValueAsAt_ = ValueAsAt_;
   p->Currency_ = Currency_;
   p->UnitValue_ = UnitValue_;
   p->FundUnits_ = FundUnits_;
   p->FundPercent_ = FundPercent_;
   p->FundAmt_ = FundAmt_;
   p->TaxType_ = TaxType_;
   p->TaxTypeDesc_ = TaxTypeDesc_;
   p->ProductPercent_ = ProductPercent_;
   p->ProductAmount_ = ProductAmount_;
   p->ShrBalance_ = ShrBalance_;
   return(p);
}

BFDataField* dsi_DSTC0103_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000489: return ( &ValueAsAt_ ); break; // ValueAsAt
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40000492: return ( &UnitValue_ ); break; // UnitValue
      case 40001611: return ( &FundUnits_ ); break; // FundUnits
      case 40001610: return ( &FundPercent_ ); break; // FundPercent
      case 40001612: return ( &FundAmt_ ); break; // FundAmt
      case 40000134: return ( &TaxType_ ); break; // TaxType
      case 40000135: return ( &TaxTypeDesc_ ); break; // TaxTypeDesc
      case 40001619: return ( &ProductPercent_ ); break; // ProductPercent
      case 40001620: return ( &ProductAmount_ ); break; // ProductAmount
      case 40001621: return ( &ShrBalance_ ); break; // ShrBalance
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0103_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0103_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0103_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 13 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FundCode_; break;
            case 1: aFlds_[1] = &ClassCode_; break;
            case 2: aFlds_[2] = &ValueAsAt_; break;
            case 3: aFlds_[3] = &Currency_; break;
            case 4: aFlds_[4] = &UnitValue_; break;
            case 5: aFlds_[5] = &FundUnits_; break;
            case 6: aFlds_[6] = &FundPercent_; break;
            case 7: aFlds_[7] = &FundAmt_; break;
            case 8: aFlds_[8] = &TaxType_; break;
            case 9: aFlds_[9] = &TaxTypeDesc_; break;
            case 10: aFlds_[10] = &ProductPercent_; break;
            case 11: aFlds_[11] = &ProductAmount_; break;
            case 12: aFlds_[12] = &ShrBalance_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0103_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0103_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0103_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0103_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 818 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0103_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0103_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0103_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000489: return( true );
      case 40000180: return( true );
      case 40000492: return( true );
      case 40001611: return( true );
      case 40001610: return( true );
      case 40001612: return( true );
      case 40000134: return( true );
      case 40000135: return( true );
      case 40001619: return( true );
      case 40001620: return( true );
      case 40001621: return( true );
   }
   return false;
}

