// BFDataImpl implementation file for DataSet DSTC0050.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Tuesday, October 23, 2018 12:54:37


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0050_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0050_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0050_VWRepeat_Record() { return new dsi_DSTC0050_VWRepeat_Record; }

dsi_DSTC0050_VWRepeat_Record::dsi_DSTC0050_VWRepeat_Record()
: BFDataImpl( 40000603 )
, Salutation_( ifds::Salutation, &ifds::s_FldProp_Salutation )
, LastName_( ifds::LastName, &ifds::s_FldProp_LastName )
, FirstName_( ifds::FirstName, &ifds::s_FldProp_FirstName )
, EntityId_( ifds::EntityId, &ifds::s_FldProp_EntityId )
, EntityType_( ifds::EntityType, &ifds::s_FldProp_EntityType )
, EntityTypeDesc_( ifds::EntityTypeDesc, &ifds::s_FldProp_EntityTypeDesc )
, SeqNumber_( ifds::SeqNumber, &ifds::s_FldProp_SeqNumber )
, RelateCode_( ifds::RelateCode, &ifds::s_FldProp_RelateCode )
, RelateCodeShip_( ifds::RelateCodeShip, &ifds::s_FldProp_RelateCodeShip )
, AddrCode_( ifds::AddrCode, &ifds::s_FldProp_AddrCode )
, AuthorizedToTrade_( ifds::AuthorizedToTrade, &ifds::s_FldProp_AuthorizedToTrade )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, BenPercentage_( ifds::BenPercentage, &ifds::s_FldProp_BenPercentage )
, Irrevocable_( ifds::Irrevocable, &ifds::s_FldProp_Irrevocable )
, DepositionCode_( ifds::DepositionCode, &ifds::s_FldProp_DepositionCode )
, DepostitionDesc_( ifds::DepostitionDesc, &ifds::s_FldProp_DepostitionDesc )
, JointType_( ifds::JointType, &ifds::s_FldProp_JointType )
, JointTypeDesc_( ifds::JointTypeDesc, &ifds::s_FldProp_JointTypeDesc )
, EscrowFund_( ifds::EscrowFund, &ifds::s_FldProp_EscrowFund )
, EscrowClass_( ifds::EscrowClass, &ifds::s_FldProp_EscrowClass )
, AmtAssigned_( ifds::AmtAssigned, &ifds::s_FldProp_AmtAssigned )
, AmountType_( ifds::AmountType, &ifds::s_FldProp_AmountType )
, AmountTypeDesc_( ifds::AmountTypeDesc, &ifds::s_FldProp_AmountTypeDesc )
, ReasonCode_( ifds::ReasonCode, &ifds::s_FldProp_ReasonCode )
, ReasonDesc_( ifds::ReasonDesc, &ifds::s_FldProp_ReasonDesc )
, EscrowDeff_( ifds::EscrowDeff, &ifds::s_FldProp_EscrowDeff )
, EscrowStopDate_( ifds::EscrowStopDate, &ifds::s_FldProp_EscrowStopDate )
, AcctEntityVer_( ifds::AcctEntityVer, &ifds::s_FldProp_AcctEntityVer )
, AcctEntityRid_( ifds::AcctEntityRid, &ifds::s_FldProp_AcctEntityRid )
, AcctEntityBenefVer_( ifds::AcctEntityBenefVer, &ifds::s_FldProp_AcctEntityBenefVer )
, AcctEntityBenefRid_( ifds::AcctEntityBenefRid, &ifds::s_FldProp_AcctEntityBenefRid )
, AcctEntityJointVer_( ifds::AcctEntityJointVer, &ifds::s_FldProp_AcctEntityJointVer )
, AcctEntityJointRid_( ifds::AcctEntityJointRid, &ifds::s_FldProp_AcctEntityJointRid )
, AssignDetlVer_( ifds::AssignDetlVer, &ifds::s_FldProp_AssignDetlVer )
, AssignDetlRid_( ifds::AssignDetlRid, &ifds::s_FldProp_AssignDetlRid )
, HRDCRelateCode_( ifds::HRDCRelateCode, &ifds::s_FldProp_HRDCRelateCode )
, HRDCRelateDesc_( ifds::HRDCRelateDesc, &ifds::s_FldProp_HRDCRelateDesc )
, RESPReasonCode_( ifds::RESPReasonCode, &ifds::s_FldProp_RESPReasonCode )
, RESPReasonDesc_( ifds::RESPReasonDesc, &ifds::s_FldProp_RESPReasonDesc )
, TaxJurisCode_( ifds::TaxJurisCode, &ifds::s_FldProp_TaxJurisCode )
, TaxJurisDesc_( ifds::TaxJurisDesc, &ifds::s_FldProp_TaxJurisDesc )
, LetterDate_( ifds::LetterDate, &ifds::s_FldProp_LetterDate )
, LetterReq_( ifds::LetterReq, &ifds::s_FldProp_LetterReq )
, RESPParentSeq_( ifds::RESPParentSeq, &ifds::s_FldProp_RESPParentSeq )
, RESPDesInstSeq_( ifds::RESPDesInstSeq, &ifds::s_FldProp_RESPDesInstSeq )
, GrantRequest_( ifds::GrantRequest, &ifds::s_FldProp_GrantRequest )
, Tainted_( ifds::Tainted, &ifds::s_FldProp_Tainted )
, TaintEndDate_( ifds::TaintEndDate, &ifds::s_FldProp_TaintEndDate )
, RESPPCGId_( ifds::RESPPCGId, &ifds::s_FldProp_RESPPCGId )
, RESPBenefInfoRid_( ifds::RESPBenefInfoRid, &ifds::s_FldProp_RESPBenefInfoRid )
, RESPBenefInfoVer_( ifds::RESPBenefInfoVer, &ifds::s_FldProp_RESPBenefInfoVer )
, CLBExists_( ifds::CLBExists, &ifds::s_FldProp_CLBExists )
, TradeExists_( ifds::TradeExists, &ifds::s_FldProp_TradeExists )
, GrantExists_( ifds::GrantExists, &ifds::s_FldProp_GrantExists )
, Rec400Sent_( ifds::Rec400Sent, &ifds::s_FldProp_Rec400Sent )
, DofBirth_( ifds::DofBirth, &ifds::s_FldProp_DofBirth )
, TFSALastAmendTaxYear_( ifds::TFSALastAmendTaxYear, &ifds::s_FldProp_TFSALastAmendTaxYear )
, DeathSettlementDate_( ifds::DeathSettlementDate, &ifds::s_FldProp_DeathSettlementDate )
, LoanType_( ifds::LoanType, &ifds::s_FldProp_LoanType )
, LoanNumber_( ifds::LoanNumber, &ifds::s_FldProp_LoanNumber )
, RefCode_( ifds::RefCode, &ifds::s_FldProp_RefCode )
, RefType_( ifds::RefType, &ifds::s_FldProp_RefType )
, PercentOwner_( ifds::PercentOwner, &ifds::s_FldProp_PercentOwner )
, AssocEntityId_( ifds::AssocEntityId, &ifds::s_FldProp_AssocEntityId )
, EntityAssociation_( ifds::EntityAssociation, &ifds::s_FldProp_EntityAssociation )
, RDSPRelntoBene_( ifds::RDSPRelntoBene, &ifds::s_FldProp_RDSPRelntoBene )
, RDSPConsent_( ifds::RDSPConsent, &ifds::s_FldProp_RDSPConsent )
, RDSPConsentDeff_( ifds::RDSPConsentDeff, &ifds::s_FldProp_RDSPConsentDeff )
, VerifyStat_( ifds::VerifyStat, &ifds::s_FldProp_VerifyStat )
, Active_( ifds::Active, &ifds::s_FldProp_Active )
{
    cFields_ = 74;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0050_VWRepeat_Record::~dsi_DSTC0050_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0050_VWRepeat_Record::clone()
{
    dsi_DSTC0050_VWRepeat_Record* p = new dsi_DSTC0050_VWRepeat_Record;
    p->Salutation_ = Salutation_;
    p->LastName_ = LastName_;
    p->FirstName_ = FirstName_;
    p->EntityId_ = EntityId_;
    p->EntityType_ = EntityType_;
    p->EntityTypeDesc_ = EntityTypeDesc_;
    p->SeqNumber_ = SeqNumber_;
    p->RelateCode_ = RelateCode_;
    p->RelateCodeShip_ = RelateCodeShip_;
    p->AddrCode_ = AddrCode_;
    p->AuthorizedToTrade_ = AuthorizedToTrade_;
    p->EffectiveDate_ = EffectiveDate_;
    p->ProcessDate_ = ProcessDate_;
    p->ModDate_ = ModDate_;
    p->Username_ = Username_;
    p->ModUser_ = ModUser_;
    p->BenPercentage_ = BenPercentage_;
    p->Irrevocable_ = Irrevocable_;
    p->DepositionCode_ = DepositionCode_;
    p->DepostitionDesc_ = DepostitionDesc_;
    p->JointType_ = JointType_;
    p->JointTypeDesc_ = JointTypeDesc_;
    p->EscrowFund_ = EscrowFund_;
    p->EscrowClass_ = EscrowClass_;
    p->AmtAssigned_ = AmtAssigned_;
    p->AmountType_ = AmountType_;
    p->AmountTypeDesc_ = AmountTypeDesc_;
    p->ReasonCode_ = ReasonCode_;
    p->ReasonDesc_ = ReasonDesc_;
    p->EscrowDeff_ = EscrowDeff_;
    p->EscrowStopDate_ = EscrowStopDate_;
    p->AcctEntityVer_ = AcctEntityVer_;
    p->AcctEntityRid_ = AcctEntityRid_;
    p->AcctEntityBenefVer_ = AcctEntityBenefVer_;
    p->AcctEntityBenefRid_ = AcctEntityBenefRid_;
    p->AcctEntityJointVer_ = AcctEntityJointVer_;
    p->AcctEntityJointRid_ = AcctEntityJointRid_;
    p->AssignDetlVer_ = AssignDetlVer_;
    p->AssignDetlRid_ = AssignDetlRid_;
    p->HRDCRelateCode_ = HRDCRelateCode_;
    p->HRDCRelateDesc_ = HRDCRelateDesc_;
    p->RESPReasonCode_ = RESPReasonCode_;
    p->RESPReasonDesc_ = RESPReasonDesc_;
    p->TaxJurisCode_ = TaxJurisCode_;
    p->TaxJurisDesc_ = TaxJurisDesc_;
    p->LetterDate_ = LetterDate_;
    p->LetterReq_ = LetterReq_;
    p->RESPParentSeq_ = RESPParentSeq_;
    p->RESPDesInstSeq_ = RESPDesInstSeq_;
    p->GrantRequest_ = GrantRequest_;
    p->Tainted_ = Tainted_;
    p->TaintEndDate_ = TaintEndDate_;
    p->RESPPCGId_ = RESPPCGId_;
    p->RESPBenefInfoRid_ = RESPBenefInfoRid_;
    p->RESPBenefInfoVer_ = RESPBenefInfoVer_;
    p->CLBExists_ = CLBExists_;
    p->TradeExists_ = TradeExists_;
    p->GrantExists_ = GrantExists_;
    p->Rec400Sent_ = Rec400Sent_;
    p->DofBirth_ = DofBirth_;
    p->TFSALastAmendTaxYear_ = TFSALastAmendTaxYear_;
    p->DeathSettlementDate_ = DeathSettlementDate_;
    p->LoanType_ = LoanType_;
    p->LoanNumber_ = LoanNumber_;
    p->RefCode_ = RefCode_;
    p->RefType_ = RefType_;
    p->PercentOwner_ = PercentOwner_;
    p->AssocEntityId_ = AssocEntityId_;
    p->EntityAssociation_ = EntityAssociation_;
    p->RDSPRelntoBene_ = RDSPRelntoBene_;
    p->RDSPConsent_ = RDSPConsent_;
    p->RDSPConsentDeff_ = RDSPConsentDeff_;
    p->VerifyStat_ = VerifyStat_;
    p->Active_ = Active_;
    return(p);
}

BFDataField* dsi_DSTC0050_VWRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000416: return ( &Salutation_ ); break; // Salutation
        case 40000128: return ( &LastName_ ); break; // LastName
        case 40000129: return ( &FirstName_ ); break; // FirstName
        case 40000033: return ( &EntityId_ ); break; // EntityId
        case 40000604: return ( &EntityType_ ); break; // EntityType
        case 40000605: return ( &EntityTypeDesc_ ); break; // EntityTypeDesc
        case 40000606: return ( &SeqNumber_ ); break; // SeqNumber
        case 40000607: return ( &RelateCode_ ); break; // RelateCode
        case 40000608: return ( &RelateCodeShip_ ); break; // RelateCodeShip
        case 40000277: return ( &AddrCode_ ); break; // AddrCode
        case 40000713: return ( &AuthorizedToTrade_ ); break; // AuthorizedToTrade
        case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
        case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
        case 40000217: return ( &ModDate_ ); break; // ModDate
        case 40000117: return ( &Username_ ); break; // Username
        case 40000218: return ( &ModUser_ ); break; // ModUser
        case 40001010: return ( &BenPercentage_ ); break; // BenPercentage
        case 40000610: return ( &Irrevocable_ ); break; // Irrevocable
        case 40000612: return ( &DepositionCode_ ); break; // DepositionCode
        case 40000613: return ( &DepostitionDesc_ ); break; // DepostitionDesc
        case 40000614: return ( &JointType_ ); break; // JointType
        case 40000615: return ( &JointTypeDesc_ ); break; // JointTypeDesc
        case 40000616: return ( &EscrowFund_ ); break; // EscrowFund
        case 40000617: return ( &EscrowClass_ ); break; // EscrowClass
        case 40001013: return ( &AmtAssigned_ ); break; // AmtAssigned
        case 40000232: return ( &AmountType_ ); break; // AmountType
        case 40000233: return ( &AmountTypeDesc_ ); break; // AmountTypeDesc
        case 40000618: return ( &ReasonCode_ ); break; // ReasonCode
        case 40000619: return ( &ReasonDesc_ ); break; // ReasonDesc
        case 40000620: return ( &EscrowDeff_ ); break; // EscrowDeff
        case 40000621: return ( &EscrowStopDate_ ); break; // EscrowStopDate
        case 40000899: return ( &AcctEntityVer_ ); break; // AcctEntityVer
        case 40000900: return ( &AcctEntityRid_ ); break; // AcctEntityRid
        case 40000901: return ( &AcctEntityBenefVer_ ); break; // AcctEntityBenefVer
        case 40000902: return ( &AcctEntityBenefRid_ ); break; // AcctEntityBenefRid
        case 40000903: return ( &AcctEntityJointVer_ ); break; // AcctEntityJointVer
        case 40000904: return ( &AcctEntityJointRid_ ); break; // AcctEntityJointRid
        case 40000905: return ( &AssignDetlVer_ ); break; // AssignDetlVer
        case 40000906: return ( &AssignDetlRid_ ); break; // AssignDetlRid
        case 40001057: return ( &HRDCRelateCode_ ); break; // HRDCRelateCode
        case 40001058: return ( &HRDCRelateDesc_ ); break; // HRDCRelateDesc
        case 40001059: return ( &RESPReasonCode_ ); break; // RESPReasonCode
        case 40001060: return ( &RESPReasonDesc_ ); break; // RESPReasonDesc
        case 40000796: return ( &TaxJurisCode_ ); break; // TaxJurisCode
        case 40001442: return ( &TaxJurisDesc_ ); break; // TaxJurisDesc
        case 40001406: return ( &LetterDate_ ); break; // LetterDate
        case 40001407: return ( &LetterReq_ ); break; // LetterReq
        case 40001628: return ( &RESPParentSeq_ ); break; // RESPParentSeq
        case 40001629: return ( &RESPDesInstSeq_ ); break; // RESPDesInstSeq
        case 40006084: return ( &GrantRequest_ ); break; // GrantRequest
        case 40006085: return ( &Tainted_ ); break; // Tainted
        case 40006086: return ( &TaintEndDate_ ); break; // TaintEndDate
        case 40006087: return ( &RESPPCGId_ ); break; // RESPPCGId
        case 40006088: return ( &RESPBenefInfoRid_ ); break; // RESPBenefInfoRid
        case 40006089: return ( &RESPBenefInfoVer_ ); break; // RESPBenefInfoVer
        case 40006090: return ( &CLBExists_ ); break; // CLBExists
        case 40006057: return ( &TradeExists_ ); break; // TradeExists
        case 40006091: return ( &GrantExists_ ); break; // GrantExists
        case 40006092: return ( &Rec400Sent_ ); break; // Rec400Sent
        case 40000623: return ( &DofBirth_ ); break; // DofBirth
        case 40006374: return ( &TFSALastAmendTaxYear_ ); break; // TFSALastAmendTaxYear
        case 40006378: return ( &DeathSettlementDate_ ); break; // DeathSettlementDate
        case 40006403: return ( &LoanType_ ); break; // LoanType
        case 40006710: return ( &LoanNumber_ ); break; // LoanNumber
        case 40006845: return ( &RefCode_ ); break; // RefCode
        case 40006846: return ( &RefType_ ); break; // RefType
        case 40007285: return ( &PercentOwner_ ); break; // PercentOwner
        case 40007286: return ( &AssocEntityId_ ); break; // AssocEntityId
        case 40007589: return ( &EntityAssociation_ ); break; // EntityAssociation
        case 40007888: return ( &RDSPRelntoBene_ ); break; // RDSPRelntoBene
        case 40007889: return ( &RDSPConsent_ ); break; // RDSPConsent
        case 40007890: return ( &RDSPConsentDeff_ ); break; // RDSPConsentDeff
        case 40006046: return ( &VerifyStat_ ); break; // VerifyStat
        case 40000222: return ( &Active_ ); break; // Active
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0050_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0050_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0050_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 74 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &Salutation_; break;
                case 1: aFlds_[1] = &LastName_; break;
                case 2: aFlds_[2] = &FirstName_; break;
                case 3: aFlds_[3] = &EntityId_; break;
                case 4: aFlds_[4] = &EntityType_; break;
                case 5: aFlds_[5] = &EntityTypeDesc_; break;
                case 6: aFlds_[6] = &SeqNumber_; break;
                case 7: aFlds_[7] = &RelateCode_; break;
                case 8: aFlds_[8] = &RelateCodeShip_; break;
                case 9: aFlds_[9] = &AddrCode_; break;
                case 10: aFlds_[10] = &AuthorizedToTrade_; break;
                case 11: aFlds_[11] = &EffectiveDate_; break;
                case 12: aFlds_[12] = &ProcessDate_; break;
                case 13: aFlds_[13] = &ModDate_; break;
                case 14: aFlds_[14] = &Username_; break;
                case 15: aFlds_[15] = &ModUser_; break;
                case 16: aFlds_[16] = &BenPercentage_; break;
                case 17: aFlds_[17] = &Irrevocable_; break;
                case 18: aFlds_[18] = &DepositionCode_; break;
                case 19: aFlds_[19] = &DepostitionDesc_; break;
                case 20: aFlds_[20] = &JointType_; break;
                case 21: aFlds_[21] = &JointTypeDesc_; break;
                case 22: aFlds_[22] = &EscrowFund_; break;
                case 23: aFlds_[23] = &EscrowClass_; break;
                case 24: aFlds_[24] = &AmtAssigned_; break;
                case 25: aFlds_[25] = &AmountType_; break;
                case 26: aFlds_[26] = &AmountTypeDesc_; break;
                case 27: aFlds_[27] = &ReasonCode_; break;
                case 28: aFlds_[28] = &ReasonDesc_; break;
                case 29: aFlds_[29] = &EscrowDeff_; break;
                case 30: aFlds_[30] = &EscrowStopDate_; break;
                case 31: aFlds_[31] = &AcctEntityVer_; break;
                case 32: aFlds_[32] = &AcctEntityRid_; break;
                case 33: aFlds_[33] = &AcctEntityBenefVer_; break;
                case 34: aFlds_[34] = &AcctEntityBenefRid_; break;
                case 35: aFlds_[35] = &AcctEntityJointVer_; break;
                case 36: aFlds_[36] = &AcctEntityJointRid_; break;
                case 37: aFlds_[37] = &AssignDetlVer_; break;
                case 38: aFlds_[38] = &AssignDetlRid_; break;
                case 39: aFlds_[39] = &HRDCRelateCode_; break;
                case 40: aFlds_[40] = &HRDCRelateDesc_; break;
                case 41: aFlds_[41] = &RESPReasonCode_; break;
                case 42: aFlds_[42] = &RESPReasonDesc_; break;
                case 43: aFlds_[43] = &TaxJurisCode_; break;
                case 44: aFlds_[44] = &TaxJurisDesc_; break;
                case 45: aFlds_[45] = &LetterDate_; break;
                case 46: aFlds_[46] = &LetterReq_; break;
                case 47: aFlds_[47] = &RESPParentSeq_; break;
                case 48: aFlds_[48] = &RESPDesInstSeq_; break;
                case 49: aFlds_[49] = &GrantRequest_; break;
                case 50: aFlds_[50] = &Tainted_; break;
                case 51: aFlds_[51] = &TaintEndDate_; break;
                case 52: aFlds_[52] = &RESPPCGId_; break;
                case 53: aFlds_[53] = &RESPBenefInfoRid_; break;
                case 54: aFlds_[54] = &RESPBenefInfoVer_; break;
                case 55: aFlds_[55] = &CLBExists_; break;
                case 56: aFlds_[56] = &TradeExists_; break;
                case 57: aFlds_[57] = &GrantExists_; break;
                case 58: aFlds_[58] = &Rec400Sent_; break;
                case 59: aFlds_[59] = &DofBirth_; break;
                case 60: aFlds_[60] = &TFSALastAmendTaxYear_; break;
                case 61: aFlds_[61] = &DeathSettlementDate_; break;
                case 62: aFlds_[62] = &LoanType_; break;
                case 63: aFlds_[63] = &LoanNumber_; break;
                case 64: aFlds_[64] = &RefCode_; break;
                case 65: aFlds_[65] = &RefType_; break;
                case 66: aFlds_[66] = &PercentOwner_; break;
                case 67: aFlds_[67] = &AssocEntityId_; break;
                case 68: aFlds_[68] = &EntityAssociation_; break;
                case 69: aFlds_[69] = &RDSPRelntoBene_; break;
                case 70: aFlds_[70] = &RDSPConsent_; break;
                case 71: aFlds_[71] = &RDSPConsentDeff_; break;
                case 72: aFlds_[72] = &VerifyStat_; break;
                case 73: aFlds_[73] = &Active_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0050_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0050_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0050_VWRepeat_Record::getLargestDefinedField( void ) const
{
    return( 250 );
}

unsigned long dsi_DSTC0050_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 2583 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0050_VWRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0050_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0050_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000416: return ( true );
        case 40000128: return ( true );
        case 40000129: return ( true );
        case 40000033: return ( true );
        case 40000604: return ( true );
        case 40000605: return ( true );
        case 40000606: return ( true );
        case 40000607: return ( true );
        case 40000608: return ( true );
        case 40000277: return ( true );
        case 40000713: return ( true );
        case 40000327: return ( true );
        case 40000216: return ( true );
        case 40000217: return ( true );
        case 40000117: return ( true );
        case 40000218: return ( true );
        case 40001010: return ( true );
        case 40000610: return ( true );
        case 40000612: return ( true );
        case 40000613: return ( true );
        case 40000614: return ( true );
        case 40000615: return ( true );
        case 40000616: return ( true );
        case 40000617: return ( true );
        case 40001013: return ( true );
        case 40000232: return ( true );
        case 40000233: return ( true );
        case 40000618: return ( true );
        case 40000619: return ( true );
        case 40000620: return ( true );
        case 40000621: return ( true );
        case 40000899: return ( true );
        case 40000900: return ( true );
        case 40000901: return ( true );
        case 40000902: return ( true );
        case 40000903: return ( true );
        case 40000904: return ( true );
        case 40000905: return ( true );
        case 40000906: return ( true );
        case 40001057: return ( true );
        case 40001058: return ( true );
        case 40001059: return ( true );
        case 40001060: return ( true );
        case 40000796: return ( true );
        case 40001442: return ( true );
        case 40001406: return ( true );
        case 40001407: return ( true );
        case 40001628: return ( true );
        case 40001629: return ( true );
        case 40006084: return ( true );
        case 40006085: return ( true );
        case 40006086: return ( true );
        case 40006087: return ( true );
        case 40006088: return ( true );
        case 40006089: return ( true );
        case 40006090: return ( true );
        case 40006057: return ( true );
        case 40006091: return ( true );
        case 40006092: return ( true );
        case 40000623: return ( true );
        case 40006374: return ( true );
        case 40006378: return ( true );
        case 40006403: return ( true );
        case 40006710: return ( true );
        case 40006845: return ( true );
        case 40006846: return ( true );
        case 40007285: return ( true );
        case 40007286: return ( true );
        case 40007589: return ( true );
        case 40007888: return ( true );
        case 40007889: return ( true );
        case 40007890: return ( true );
        case 40006046: return ( true );
        case 40000222: return ( true );
    }
    return false;
}

