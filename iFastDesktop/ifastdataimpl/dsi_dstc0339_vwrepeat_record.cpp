// BFDataImpl implementation file for DataSet DSTC0339.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0339_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0339_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0339_VWRepeat_Record() { return new dsi_DSTC0339_VWRepeat_Record; }

dsi_DSTC0339_VWRepeat_Record::dsi_DSTC0339_VWRepeat_Record()
: BFDataImpl( 40005085 )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, Accountable_( ifds::Accountable, &ifds::s_FldProp_Accountable )
, BackDatedReason_( ifds::BackDatedReason, &ifds::s_FldProp_BackDatedReason )
, RespDate_( ifds::RespDate, &ifds::s_FldProp_RespDate )
, AllocPercent_( ifds::AllocPercent, &ifds::s_FldProp_AllocPercent )
, DilVersion_( ifds::DilVersion, &ifds::s_FldProp_DilVersion )
, SplitAccCodeRID_( ifds::SplitAccCodeRID, &ifds::s_FldProp_SplitAccCodeRID )
, BillingToEntityType_( ifds::BillingToEntityType, &ifds::s_FldProp_BillingToEntityType )
, BillingToEntity_( ifds::BillingToEntity, &ifds::s_FldProp_BillingToEntity )
, AssociatedAcctNum_( ifds::AssociatedAcctNum, &ifds::s_FldProp_AssociatedAcctNum )
, DilutionNSM_( ifds::DilutionNSM, &ifds::s_FldProp_DilutionNSM )
, ExSysDilPymtNSM_( ifds::ExSysDilPymtNSM, &ifds::s_FldProp_ExSysDilPymtNSM )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
{
   cFields_ = 16;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0339_VWRepeat_Record::~dsi_DSTC0339_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0339_VWRepeat_Record::clone()
{
   dsi_DSTC0339_VWRepeat_Record* p = new dsi_DSTC0339_VWRepeat_Record;
   p->TransId_ = TransId_;
   p->Accountable_ = Accountable_;
   p->BackDatedReason_ = BackDatedReason_;
   p->RespDate_ = RespDate_;
   p->AllocPercent_ = AllocPercent_;
   p->DilVersion_ = DilVersion_;
   p->SplitAccCodeRID_ = SplitAccCodeRID_;
   p->BillingToEntityType_ = BillingToEntityType_;
   p->BillingToEntity_ = BillingToEntity_;
   p->AssociatedAcctNum_ = AssociatedAcctNum_;
   p->DilutionNSM_ = DilutionNSM_;
   p->ExSysDilPymtNSM_ = ExSysDilPymtNSM_;
   p->ProcessDate_ = ProcessDate_;
   p->Username_ = Username_;
   p->ModDate_ = ModDate_;
   p->ModUser_ = ModUser_;
   return(p);
}

BFDataField* dsi_DSTC0339_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40000476: return ( &Accountable_ ); break; // Accountable
      case 40001353: return ( &BackDatedReason_ ); break; // BackDatedReason
      case 40005082: return ( &RespDate_ ); break; // RespDate
      case 40000342: return ( &AllocPercent_ ); break; // AllocPercent
      case 40005088: return ( &DilVersion_ ); break; // DilVersion
      case 40005083: return ( &SplitAccCodeRID_ ); break; // SplitAccCodeRID
      case 40005692: return ( &BillingToEntityType_ ); break; // BillingToEntityType
      case 40005704: return ( &BillingToEntity_ ); break; // BillingToEntity
      case 40005703: return ( &AssociatedAcctNum_ ); break; // AssociatedAcctNum
      case 40007323: return ( &DilutionNSM_ ); break; // DilutionNSM
      case 40007324: return ( &ExSysDilPymtNSM_ ); break; // ExSysDilPymtNSM
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0339_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0339_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0339_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 16 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TransId_; break;
            case 1: aFlds_[1] = &Accountable_; break;
            case 2: aFlds_[2] = &BackDatedReason_; break;
            case 3: aFlds_[3] = &RespDate_; break;
            case 4: aFlds_[4] = &AllocPercent_; break;
            case 5: aFlds_[5] = &DilVersion_; break;
            case 6: aFlds_[6] = &SplitAccCodeRID_; break;
            case 7: aFlds_[7] = &BillingToEntityType_; break;
            case 8: aFlds_[8] = &BillingToEntity_; break;
            case 9: aFlds_[9] = &AssociatedAcctNum_; break;
            case 10: aFlds_[10] = &DilutionNSM_; break;
            case 11: aFlds_[11] = &ExSysDilPymtNSM_; break;
            case 12: aFlds_[12] = &ProcessDate_; break;
            case 13: aFlds_[13] = &Username_; break;
            case 14: aFlds_[14] = &ModDate_; break;
            case 15: aFlds_[15] = &ModUser_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0339_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0339_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0339_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0339_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 525 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0339_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0339_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0339_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000063: return( true );
      case 40000476: return( true );
      case 40001353: return( true );
      case 40005082: return( true );
      case 40000342: return( true );
      case 40005088: return( true );
      case 40005083: return( true );
      case 40005692: return( true );
      case 40005704: return( true );
      case 40005703: return( true );
      case 40007323: return( true );
      case 40007324: return( true );
      case 40000216: return( true );
      case 40000117: return( true );
      case 40000217: return( true );
      case 40000218: return( true );
   }
   return false;
}

