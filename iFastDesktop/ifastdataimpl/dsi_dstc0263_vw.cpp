// BFDataImpl implementation file for DataSet DSTC0263.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0263_vw.h"


// This function creates an instance of dsi_DSTC0263_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0263_VW() { return new dsi_DSTC0263_VW; }

dsi_DSTC0263_VW::dsi_DSTC0263_VW()
: BFDataImpl( 40004083 )
, DefaultRebFreq_( ifds::DefaultRebFreq, &ifds::s_FldProp_DefaultRebFreq )
, DefaultRoundFund_( ifds::DefaultRoundFund, &ifds::s_FldProp_DefaultRoundFund )
, DefaultRoundClass_( ifds::DefaultRoundClass, &ifds::s_FldProp_DefaultRoundClass )
, UpdAMSOnNewAcct_( ifds::UpdAMSOnNewAcct, &ifds::s_FldProp_UpdAMSOnNewAcct )
, DefaultAllocOverride_( ifds::DefaultAllocOverride, &ifds::s_FldProp_DefaultAllocOverride )
, PACSWPOverride_( ifds::PACSWPOverride, &ifds::s_FldProp_PACSWPOverride )
, NextRebDateApplicable_( ifds::NextRebDateApplicable, &ifds::s_FldProp_NextRebDateApplicable )
{
   cFields_ = 7;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0263_VW::~dsi_DSTC0263_VW()
{
}

BFDataImpl* dsi_DSTC0263_VW::clone()
{
   dsi_DSTC0263_VW* p = new dsi_DSTC0263_VW;
   p->DefaultRebFreq_ = DefaultRebFreq_;
   p->DefaultRoundFund_ = DefaultRoundFund_;
   p->DefaultRoundClass_ = DefaultRoundClass_;
   p->UpdAMSOnNewAcct_ = UpdAMSOnNewAcct_;
   p->DefaultAllocOverride_ = DefaultAllocOverride_;
   p->PACSWPOverride_ = PACSWPOverride_;
   p->NextRebDateApplicable_ = NextRebDateApplicable_;
   return(p);
}

BFDataField* dsi_DSTC0263_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40004086: return ( &DefaultRebFreq_ ); break; // DefaultRebFreq
      case 40004085: return ( &DefaultRoundFund_ ); break; // DefaultRoundFund
      case 40004084: return ( &DefaultRoundClass_ ); break; // DefaultRoundClass
      case 40004087: return ( &UpdAMSOnNewAcct_ ); break; // UpdAMSOnNewAcct
      case 40004088: return ( &DefaultAllocOverride_ ); break; // DefaultAllocOverride
      case 40004089: return ( &PACSWPOverride_ ); break; // PACSWPOverride
      case 40004104: return ( &NextRebDateApplicable_ ); break; // NextRebDateApplicable
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0263_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0263_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0263_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 7 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &DefaultRebFreq_; break;
            case 1: aFlds_[1] = &DefaultRoundFund_; break;
            case 2: aFlds_[2] = &DefaultRoundClass_; break;
            case 3: aFlds_[3] = &UpdAMSOnNewAcct_; break;
            case 4: aFlds_[4] = &DefaultAllocOverride_; break;
            case 5: aFlds_[5] = &PACSWPOverride_; break;
            case 6: aFlds_[6] = &NextRebDateApplicable_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0263_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0263_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0263_VW::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0263_VW::getDefinedByteLength( void ) const
{
   return( 184 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0263_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0263_VW::fieldExists( id );
}

bool dsi_DSTC0263_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40004086: return( true );
      case 40004085: return( true );
      case 40004084: return( true );
      case 40004087: return( true );
      case 40004088: return( true );
      case 40004089: return( true );
      case 40004104: return( true );
   }
   return false;
}

