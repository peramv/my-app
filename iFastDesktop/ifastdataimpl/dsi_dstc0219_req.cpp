// BFDataImpl implementation file for DataSet DSTC0219.REQ
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Monday, July 03, 2017 03:47:17


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0219_req.h"


// This function creates an instance of dsi_DSTC0219_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0219_REQ() { return new dsi_DSTC0219_REQ; }

dsi_DSTC0219_REQ::dsi_DSTC0219_REQ()
: BFDataImpl( 40003438, 40003446 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, AMSCode_( ifds::AMSCode, &ifds::s_FldProp_AMSCode )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, AMSCodeVer_( ifds::AMSCodeVer, &ifds::s_FldProp_AMSCodeVer )
, Percentage_( ifds::Percentage, &ifds::s_FldProp_Percentage )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, AMSType_( ifds::AMSType, &ifds::s_FldProp_AMSType )
, Name_( ifds::Name, &ifds::s_FldProp_Name )
, DefaultAlloc_( ifds::DefaultAlloc, &ifds::s_FldProp_DefaultAlloc )
, FundAlloc_( ifds::FundAlloc, &ifds::s_FldProp_FundAlloc )
, EnglishShortName_( ifds::EnglishShortName, &ifds::s_FldProp_EnglishShortName )
, EnglishLongName_( ifds::EnglishLongName, &ifds::s_FldProp_EnglishLongName )
, EnglishName_( ifds::EnglishName, &ifds::s_FldProp_EnglishName )
, FrenchShortName_( ifds::FrenchShortName, &ifds::s_FldProp_FrenchShortName )
, FrenchLongName_( ifds::FrenchLongName, &ifds::s_FldProp_FrenchLongName )
, FrenchName_( ifds::FrenchName, &ifds::s_FldProp_FrenchName )
, ForeignRelFund_( ifds::ForeignRelFund, &ifds::s_FldProp_ForeignRelFund )
, ForeignRelClass_( ifds::ForeignRelClass, &ifds::s_FldProp_ForeignRelClass )
, RoundingFund_( ifds::RoundingFund, &ifds::s_FldProp_RoundingFund )
, RoundingClass_( ifds::RoundingClass, &ifds::s_FldProp_RoundingClass )
, GrandFatheredDate_( ifds::GrandFatheredDate, &ifds::s_FldProp_GrandFatheredDate )
, NextRebDate_( ifds::NextRebDate, &ifds::s_FldProp_NextRebDate )
, ThresholdAmt_( ifds::ThresholdAmt, &ifds::s_FldProp_ThresholdAmt )
, WireEleg_( ifds::WireEleg, &ifds::s_FldProp_WireEleg )
, DayOfWeek_( ifds::DayOfWeek, &ifds::s_FldProp_DayOfWeek )
, VerifyPrecreate_( ifds::VerifyPrecreate, &ifds::s_FldProp_VerifyPrecreate )
, AssocFund_( ifds::AssocFund, &ifds::s_FldProp_AssocFund )
, AssocClass_( ifds::AssocClass, &ifds::s_FldProp_AssocClass )
, SchedSetupFreqID_( ifds::SchedSetupFreqID, &ifds::s_FldProp_SchedSetupFreqID )
, ParentFndClsTrdg_( ifds::ParentFndClsTrdg, &ifds::s_FldProp_ParentFndClsTrdg )
, RebalReq_( ifds::RebalReq, &ifds::s_FldProp_RebalReq )
, TargetMixOption_( ifds::TargetMixOption, &ifds::s_FldProp_TargetMixOption )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
    cFields_ = 39;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0219_REQ::~dsi_DSTC0219_REQ()
{
}

BFDataImpl* dsi_DSTC0219_REQ::clone()
{
    dsi_DSTC0219_REQ* p = new dsi_DSTC0219_REQ;
    p->SessionId_ = SessionId_;
    p->User_Id_ = User_Id_;
    p->LanguageCode_ = LanguageCode_;
    p->CompanyId_ = CompanyId_;
    p->Track_ = Track_;
    p->Activity_ = Activity_;
    p->AMSCode_ = AMSCode_;
    p->RunMode_ = RunMode_;
    p->AMSCodeVer_ = AMSCodeVer_;
    p->Percentage_ = Percentage_;
    p->Currency_ = Currency_;
    p->EffectiveDate_ = EffectiveDate_;
    p->AMSType_ = AMSType_;
    p->Name_ = Name_;
    p->DefaultAlloc_ = DefaultAlloc_;
    p->FundAlloc_ = FundAlloc_;
    p->EnglishShortName_ = EnglishShortName_;
    p->EnglishLongName_ = EnglishLongName_;
    p->EnglishName_ = EnglishName_;
    p->FrenchShortName_ = FrenchShortName_;
    p->FrenchLongName_ = FrenchLongName_;
    p->FrenchName_ = FrenchName_;
    p->ForeignRelFund_ = ForeignRelFund_;
    p->ForeignRelClass_ = ForeignRelClass_;
    p->RoundingFund_ = RoundingFund_;
    p->RoundingClass_ = RoundingClass_;
    p->GrandFatheredDate_ = GrandFatheredDate_;
    p->NextRebDate_ = NextRebDate_;
    p->ThresholdAmt_ = ThresholdAmt_;
    p->WireEleg_ = WireEleg_;
    p->DayOfWeek_ = DayOfWeek_;
    p->VerifyPrecreate_ = VerifyPrecreate_;
    p->AssocFund_ = AssocFund_;
    p->AssocClass_ = AssocClass_;
    p->SchedSetupFreqID_ = SchedSetupFreqID_;
    p->ParentFndClsTrdg_ = ParentFndClsTrdg_;
    p->RebalReq_ = RebalReq_;
    p->TargetMixOption_ = TargetMixOption_;
    p->RepeatCount_ = RepeatCount_;
    return(p);
}

BFDataField* dsi_DSTC0219_REQ::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000005: return ( &SessionId_ ); break; // SessionId
        case 40000002: return ( &User_Id_ ); break; // User_Id
        case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
        case 40000031: return ( &CompanyId_ ); break; // CompanyId
        case 40002065: return ( &Track_ ); break; // Track
        case 40002066: return ( &Activity_ ); break; // Activity
        case 40000193: return ( &AMSCode_ ); break; // AMSCode
        case 40000990: return ( &RunMode_ ); break; // RunMode
        case 40003431: return ( &AMSCodeVer_ ); break; // AMSCodeVer
        case 40000291: return ( &Percentage_ ); break; // Percentage
        case 40000180: return ( &Currency_ ); break; // Currency
        case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
        case 40003518: return ( &AMSType_ ); break; // AMSType
        case 40001090: return ( &Name_ ); break; // Name
        case 40003515: return ( &DefaultAlloc_ ); break; // DefaultAlloc
        case 40003517: return ( &FundAlloc_ ); break; // FundAlloc
        case 40004028: return ( &EnglishShortName_ ); break; // EnglishShortName
        case 40004029: return ( &EnglishLongName_ ); break; // EnglishLongName
        case 40004030: return ( &EnglishName_ ); break; // EnglishName
        case 40004031: return ( &FrenchShortName_ ); break; // FrenchShortName
        case 40004032: return ( &FrenchLongName_ ); break; // FrenchLongName
        case 40004033: return ( &FrenchName_ ); break; // FrenchName
        case 40004034: return ( &ForeignRelFund_ ); break; // ForeignRelFund
        case 40004035: return ( &ForeignRelClass_ ); break; // ForeignRelClass
        case 40004036: return ( &RoundingFund_ ); break; // RoundingFund
        case 40004037: return ( &RoundingClass_ ); break; // RoundingClass
        case 40004038: return ( &GrandFatheredDate_ ); break; // GrandFatheredDate
        case 40004039: return ( &NextRebDate_ ); break; // NextRebDate
        case 40004041: return ( &ThresholdAmt_ ); break; // ThresholdAmt
        case 40004043: return ( &WireEleg_ ); break; // WireEleg
        case 40000275: return ( &DayOfWeek_ ); break; // DayOfWeek
        case 40004046: return ( &VerifyPrecreate_ ); break; // VerifyPrecreate
        case 40005596: return ( &AssocFund_ ); break; // AssocFund
        case 40005597: return ( &AssocClass_ ); break; // AssocClass
        case 40005605: return ( &SchedSetupFreqID_ ); break; // SchedSetupFreqID
        case 40007124: return ( &ParentFndClsTrdg_ ); break; // ParentFndClsTrdg
        case 40007773: return ( &RebalReq_ ); break; // RebalReq
        case 40007774: return ( &TargetMixOption_ ); break; // TargetMixOption
        case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0219_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0219_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0219_REQ::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 39 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &SessionId_; break;
                case 1: aFlds_[1] = &User_Id_; break;
                case 2: aFlds_[2] = &LanguageCode_; break;
                case 3: aFlds_[3] = &CompanyId_; break;
                case 4: aFlds_[4] = &Track_; break;
                case 5: aFlds_[5] = &Activity_; break;
                case 6: aFlds_[6] = &AMSCode_; break;
                case 7: aFlds_[7] = &RunMode_; break;
                case 8: aFlds_[8] = &AMSCodeVer_; break;
                case 9: aFlds_[9] = &Percentage_; break;
                case 10: aFlds_[10] = &Currency_; break;
                case 11: aFlds_[11] = &EffectiveDate_; break;
                case 12: aFlds_[12] = &AMSType_; break;
                case 13: aFlds_[13] = &Name_; break;
                case 14: aFlds_[14] = &DefaultAlloc_; break;
                case 15: aFlds_[15] = &FundAlloc_; break;
                case 16: aFlds_[16] = &EnglishShortName_; break;
                case 17: aFlds_[17] = &EnglishLongName_; break;
                case 18: aFlds_[18] = &EnglishName_; break;
                case 19: aFlds_[19] = &FrenchShortName_; break;
                case 20: aFlds_[20] = &FrenchLongName_; break;
                case 21: aFlds_[21] = &FrenchName_; break;
                case 22: aFlds_[22] = &ForeignRelFund_; break;
                case 23: aFlds_[23] = &ForeignRelClass_; break;
                case 24: aFlds_[24] = &RoundingFund_; break;
                case 25: aFlds_[25] = &RoundingClass_; break;
                case 26: aFlds_[26] = &GrandFatheredDate_; break;
                case 27: aFlds_[27] = &NextRebDate_; break;
                case 28: aFlds_[28] = &ThresholdAmt_; break;
                case 29: aFlds_[29] = &WireEleg_; break;
                case 30: aFlds_[30] = &DayOfWeek_; break;
                case 31: aFlds_[31] = &VerifyPrecreate_; break;
                case 32: aFlds_[32] = &AssocFund_; break;
                case 33: aFlds_[33] = &AssocClass_; break;
                case 34: aFlds_[34] = &SchedSetupFreqID_; break;
                case 35: aFlds_[35] = &ParentFndClsTrdg_; break;
                case 36: aFlds_[36] = &RebalReq_; break;
                case 37: aFlds_[37] = &TargetMixOption_; break;
                case 38: aFlds_[38] = &RepeatCount_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0219_REQ::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0219_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0219_REQ::getLargestDefinedField( void ) const
{
    return( 200 );
}

unsigned long dsi_DSTC0219_REQ::getDefinedByteLength( void ) const
{
    return( 1467 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0219_REQ::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0219_REQ::fieldExists( id );
}

bool dsi_DSTC0219_REQ::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000005: return ( true );
        case 40000002: return ( true );
        case 40000030: return ( true );
        case 40000031: return ( true );
        case 40002065: return ( true );
        case 40002066: return ( true );
        case 40000193: return ( true );
        case 40000990: return ( true );
        case 40003431: return ( true );
        case 40000291: return ( true );
        case 40000180: return ( true );
        case 40000327: return ( true );
        case 40003518: return ( true );
        case 40001090: return ( true );
        case 40003515: return ( true );
        case 40003517: return ( true );
        case 40004028: return ( true );
        case 40004029: return ( true );
        case 40004030: return ( true );
        case 40004031: return ( true );
        case 40004032: return ( true );
        case 40004033: return ( true );
        case 40004034: return ( true );
        case 40004035: return ( true );
        case 40004036: return ( true );
        case 40004037: return ( true );
        case 40004038: return ( true );
        case 40004039: return ( true );
        case 40004041: return ( true );
        case 40004043: return ( true );
        case 40000275: return ( true );
        case 40004046: return ( true );
        case 40005596: return ( true );
        case 40005597: return ( true );
        case 40005605: return ( true );
        case 40007124: return ( true );
        case 40007773: return ( true );
        case 40007774: return ( true );
        case 40000120: return ( true );
    }
    return false;
}

