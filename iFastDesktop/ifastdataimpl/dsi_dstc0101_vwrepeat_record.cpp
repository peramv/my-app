// BFDataImpl implementation file for DataSet DSTC0101.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0101_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0101_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0101_VWRepeat_Record() { return new dsi_DSTC0101_VWRepeat_Record; }

dsi_DSTC0101_VWRepeat_Record::dsi_DSTC0101_VWRepeat_Record()
: BFDataImpl( 40001303 )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, Name_( ifds::Name, &ifds::s_FldProp_Name )
, Precision_( ifds::Precision, &ifds::s_FldProp_Precision )
, RoundMethod_( ifds::RoundMethod, &ifds::s_FldProp_RoundMethod )
, CurrencyType_( ifds::CurrencyType, &ifds::s_FldProp_CurrencyType )
{
   cFields_ = 6;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0101_VWRepeat_Record::~dsi_DSTC0101_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0101_VWRepeat_Record::clone()
{
   dsi_DSTC0101_VWRepeat_Record* p = new dsi_DSTC0101_VWRepeat_Record;
   p->Currency_ = Currency_;
   p->EffectiveDate_ = EffectiveDate_;
   p->Name_ = Name_;
   p->Precision_ = Precision_;
   p->RoundMethod_ = RoundMethod_;
   p->CurrencyType_ = CurrencyType_;
   return(p);
}

BFDataField* dsi_DSTC0101_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40001090: return ( &Name_ ); break; // Name
      case 40001304: return ( &Precision_ ); break; // Precision
      case 40001305: return ( &RoundMethod_ ); break; // RoundMethod
      case 40002195: return ( &CurrencyType_ ); break; // CurrencyType
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0101_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0101_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0101_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 6 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &Currency_; break;
            case 1: aFlds_[1] = &EffectiveDate_; break;
            case 2: aFlds_[2] = &Name_; break;
            case 3: aFlds_[3] = &Precision_; break;
            case 4: aFlds_[4] = &RoundMethod_; break;
            case 5: aFlds_[5] = &CurrencyType_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0101_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0101_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0101_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0101_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 405 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0101_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0101_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0101_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000180: return( true );
      case 40000327: return( true );
      case 40001090: return( true );
      case 40001304: return( true );
      case 40001305: return( true );
      case 40002195: return( true );
   }
   return false;
}

