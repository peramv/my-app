// BFDataImpl implementation file for DataSet DSTC0294.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0294_req.h"


// This function creates an instance of dsi_DSTC0294_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0294_REQ() { return new dsi_DSTC0294_REQ; }

dsi_DSTC0294_REQ::dsi_DSTC0294_REQ()
: BFDataImpl( 40004506 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, TradesTransType_( ifds::TradesTransType, &ifds::s_FldProp_TradesTransType )
, FromFund_( ifds::FromFund, &ifds::s_FldProp_FromFund )
, FromClass_( ifds::FromClass, &ifds::s_FldProp_FromClass )
, ToFund_( ifds::ToFund, &ifds::s_FldProp_ToFund )
, ToClass_( ifds::ToClass, &ifds::s_FldProp_ToClass )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, AmtType_( ifds::AmtType, &ifds::s_FldProp_AmtType )
{
   cFields_ = 15;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0294_REQ::~dsi_DSTC0294_REQ()
{
}

BFDataImpl* dsi_DSTC0294_REQ::clone()
{
   dsi_DSTC0294_REQ* p = new dsi_DSTC0294_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->AccountNum_ = AccountNum_;
   p->TradesTransType_ = TradesTransType_;
   p->FromFund_ = FromFund_;
   p->FromClass_ = FromClass_;
   p->ToFund_ = ToFund_;
   p->ToClass_ = ToClass_;
   p->EffectiveDate_ = EffectiveDate_;
   p->Amount_ = Amount_;
   p->AmtType_ = AmtType_;
   return(p);
}

BFDataField* dsi_DSTC0294_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40001378: return ( &TradesTransType_ ); break; // TradesTransType
      case 40000719: return ( &FromFund_ ); break; // FromFund
      case 40000720: return ( &FromClass_ ); break; // FromClass
      case 40000721: return ( &ToFund_ ); break; // ToFund
      case 40000722: return ( &ToClass_ ); break; // ToClass
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40000726: return ( &AmtType_ ); break; // AmtType
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0294_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0294_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0294_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 15 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &AccountNum_; break;
            case 7: aFlds_[7] = &TradesTransType_; break;
            case 8: aFlds_[8] = &FromFund_; break;
            case 9: aFlds_[9] = &FromClass_; break;
            case 10: aFlds_[10] = &ToFund_; break;
            case 11: aFlds_[11] = &ToClass_; break;
            case 12: aFlds_[12] = &EffectiveDate_; break;
            case 13: aFlds_[13] = &Amount_; break;
            case 14: aFlds_[14] = &AmtType_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0294_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0294_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0294_REQ::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0294_REQ::getDefinedByteLength( void ) const
{
   return( 708 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0294_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0294_REQ::fieldExists( id );
}

bool dsi_DSTC0294_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40000040: return( true );
      case 40001378: return( true );
      case 40000719: return( true );
      case 40000720: return( true );
      case 40000721: return( true );
      case 40000722: return( true );
      case 40000327: return( true );
      case 40000231: return( true );
      case 40000726: return( true );
   }
   return false;
}

