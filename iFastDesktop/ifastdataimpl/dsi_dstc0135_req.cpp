// BFDataImpl implementation file for DataSet DSTC0135.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0135_req.h"


// This function creates an instance of dsi_DSTC0135_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0135_REQ() { return new dsi_DSTC0135_REQ; }

dsi_DSTC0135_REQ::dsi_DSTC0135_REQ()
: BFDataImpl( 40001749 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, PayType_( ifds::PayType, &ifds::s_FldProp_PayType )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, ValidationType_( ifds::ValidationType, &ifds::s_FldProp_ValidationType )
, TradeDate_( ifds::TradeDate, &ifds::s_FldProp_TradeDate )
, SettleDate_( ifds::SettleDate, &ifds::s_FldProp_SettleDate )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, OrderType_( ifds::OrderType, &ifds::s_FldProp_OrderType )
, SettleCurrency_( ifds::SettleCurrency, &ifds::s_FldProp_SettleCurrency )
, DealDate_( ifds::DealDate, &ifds::s_FldProp_DealDate )
, DealTime_( ifds::DealTime, &ifds::s_FldProp_DealTime )
, FundToCode_( ifds::FundToCode, &ifds::s_FldProp_FundToCode )
, ClassToCode_( ifds::ClassToCode, &ifds::s_FldProp_ClassToCode )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, AmountType_( ifds::AmountType, &ifds::s_FldProp_AmountType )
, LinkNumber_( ifds::LinkNumber, &ifds::s_FldProp_LinkNumber )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, ValueDate_( ifds::ValueDate, &ifds::s_FldProp_ValueDate )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, BrokerToCode_( ifds::BrokerToCode, &ifds::s_FldProp_BrokerToCode )
, SettleInDate_( ifds::SettleInDate, &ifds::s_FldProp_SettleInDate )
, AccountTo_( ifds::AccountTo, &ifds::s_FldProp_AccountTo )
, FrSettlCurrency_( ifds::FrSettlCurrency, &ifds::s_FldProp_FrSettlCurrency )
, ToSettlCurrency_( ifds::ToSettlCurrency, &ifds::s_FldProp_ToSettlCurrency )
, ValuationDt_( ifds::ValuationDt, &ifds::s_FldProp_ValuationDt )
, NetworkID_( ifds::NetworkID, &ifds::s_FldProp_NetworkID )
, TradeInDate_( ifds::TradeInDate, &ifds::s_FldProp_TradeInDate )
, ValuationInDt_( ifds::ValuationInDt, &ifds::s_FldProp_ValuationInDt )
{
   cFields_ = 35;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0135_REQ::~dsi_DSTC0135_REQ()
{
}

BFDataImpl* dsi_DSTC0135_REQ::clone()
{
   dsi_DSTC0135_REQ* p = new dsi_DSTC0135_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->PayType_ = PayType_;
   p->TransType_ = TransType_;
   p->ValidationType_ = ValidationType_;
   p->TradeDate_ = TradeDate_;
   p->SettleDate_ = SettleDate_;
   p->EffectiveDate_ = EffectiveDate_;
   p->BrokerCode_ = BrokerCode_;
   p->OrderType_ = OrderType_;
   p->SettleCurrency_ = SettleCurrency_;
   p->DealDate_ = DealDate_;
   p->DealTime_ = DealTime_;
   p->FundToCode_ = FundToCode_;
   p->ClassToCode_ = ClassToCode_;
   p->Amount_ = Amount_;
   p->AmountType_ = AmountType_;
   p->LinkNumber_ = LinkNumber_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->ValueDate_ = ValueDate_;
   p->AccountNum_ = AccountNum_;
   p->BrokerToCode_ = BrokerToCode_;
   p->SettleInDate_ = SettleInDate_;
   p->AccountTo_ = AccountTo_;
   p->FrSettlCurrency_ = FrSettlCurrency_;
   p->ToSettlCurrency_ = ToSettlCurrency_;
   p->ValuationDt_ = ValuationDt_;
   p->NetworkID_ = NetworkID_;
   p->TradeInDate_ = TradeInDate_;
   p->ValuationInDt_ = ValuationInDt_;
   return(p);
}

BFDataField* dsi_DSTC0135_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000242: return ( &PayType_ ); break; // PayType
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40001750: return ( &ValidationType_ ); break; // ValidationType
      case 40000097: return ( &TradeDate_ ); break; // TradeDate
      case 40000348: return ( &SettleDate_ ); break; // SettleDate
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000431: return ( &OrderType_ ); break; // OrderType
      case 40000455: return ( &SettleCurrency_ ); break; // SettleCurrency
      case 40000451: return ( &DealDate_ ); break; // DealDate
      case 40000452: return ( &DealTime_ ); break; // DealTime
      case 40000340: return ( &FundToCode_ ); break; // FundToCode
      case 40000341: return ( &ClassToCode_ ); break; // ClassToCode
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40000232: return ( &AmountType_ ); break; // AmountType
      case 40002056: return ( &LinkNumber_ ); break; // LinkNumber
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40003139: return ( &ValueDate_ ); break; // ValueDate
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40005572: return ( &BrokerToCode_ ); break; // BrokerToCode
      case 40005571: return ( &SettleInDate_ ); break; // SettleInDate
      case 40000646: return ( &AccountTo_ ); break; // AccountTo
      case 40005788: return ( &FrSettlCurrency_ ); break; // FrSettlCurrency
      case 40005789: return ( &ToSettlCurrency_ ); break; // ToSettlCurrency
      case 40006656: return ( &ValuationDt_ ); break; // ValuationDt
      case 40003522: return ( &NetworkID_ ); break; // NetworkID
      case 40007782: return ( &TradeInDate_ ); break; // TradeInDate
      case 40007783: return ( &ValuationInDt_ ); break; // ValuationInDt
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0135_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0135_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0135_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 35 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &FundCode_; break;
            case 5: aFlds_[5] = &ClassCode_; break;
            case 6: aFlds_[6] = &PayType_; break;
            case 7: aFlds_[7] = &TransType_; break;
            case 8: aFlds_[8] = &ValidationType_; break;
            case 9: aFlds_[9] = &TradeDate_; break;
            case 10: aFlds_[10] = &SettleDate_; break;
            case 11: aFlds_[11] = &EffectiveDate_; break;
            case 12: aFlds_[12] = &BrokerCode_; break;
            case 13: aFlds_[13] = &OrderType_; break;
            case 14: aFlds_[14] = &SettleCurrency_; break;
            case 15: aFlds_[15] = &DealDate_; break;
            case 16: aFlds_[16] = &DealTime_; break;
            case 17: aFlds_[17] = &FundToCode_; break;
            case 18: aFlds_[18] = &ClassToCode_; break;
            case 19: aFlds_[19] = &Amount_; break;
            case 20: aFlds_[20] = &AmountType_; break;
            case 21: aFlds_[21] = &LinkNumber_; break;
            case 22: aFlds_[22] = &Track_; break;
            case 23: aFlds_[23] = &Activity_; break;
            case 24: aFlds_[24] = &ValueDate_; break;
            case 25: aFlds_[25] = &AccountNum_; break;
            case 26: aFlds_[26] = &BrokerToCode_; break;
            case 27: aFlds_[27] = &SettleInDate_; break;
            case 28: aFlds_[28] = &AccountTo_; break;
            case 29: aFlds_[29] = &FrSettlCurrency_; break;
            case 30: aFlds_[30] = &ToSettlCurrency_; break;
            case 31: aFlds_[31] = &ValuationDt_; break;
            case 32: aFlds_[32] = &NetworkID_; break;
			case 33: aFlds_[33] = &TradeInDate_; break;
            case 34: aFlds_[34] = &ValuationInDt_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0135_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0135_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0135_REQ::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0135_REQ::getDefinedByteLength( void ) const
{
   return( 1449 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0135_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0135_REQ::fieldExists( id );
}

bool dsi_DSTC0135_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000242: return( true );
      case 40000095: return( true );
      case 40001750: return( true );
      case 40000097: return( true );
      case 40000348: return( true );
      case 40000327: return( true );
      case 40000044: return( true );
      case 40000431: return( true );
      case 40000455: return( true );
      case 40000451: return( true );
      case 40000452: return( true );
      case 40000340: return( true );
      case 40000341: return( true );
      case 40000231: return( true );
      case 40000232: return( true );
      case 40002056: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40003139: return( true );
      case 40000040: return( true );
      case 40005572: return( true );
      case 40005571: return( true );
      case 40000646: return( true );
      case 40005788: return( true );
      case 40005789: return( true );
      case 40006656: return( true );
      case 40003522: return( true );
	  case 40007782: return ( true );
      case 40007783: return ( true );
   }
   return false;
}

