// BFDataImpl implementation file for DataSet DSTC0121.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0121_req.h"


// This function creates an instance of dsi_DSTC0121_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0121_REQ() { return new dsi_DSTC0121_REQ; }

dsi_DSTC0121_REQ::dsi_DSTC0121_REQ()
: BFDataImpl( 40001669 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, TaxType_( ifds::TaxType, &ifds::s_FldProp_TaxType )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, AmountType_( ifds::AmountType, &ifds::s_FldProp_AmountType )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, ExchRate_( ifds::ExchRate, &ifds::s_FldProp_ExchRate )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, FundToCode_( ifds::FundToCode, &ifds::s_FldProp_FundToCode )
, ClassToCode_( ifds::ClassToCode, &ifds::s_FldProp_ClassToCode )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, FlatPercent_( ifds::FlatPercent, &ifds::s_FldProp_FlatPercent )
, ToAcctTaxType_( ifds::ToAcctTaxType, &ifds::s_FldProp_ToAcctTaxType )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, TradeInDate_( ifds::TradeInDate, &ifds::s_FldProp_TradeInDate )
{
    cFields_ = 22;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0121_REQ::~dsi_DSTC0121_REQ()
{
}

BFDataImpl* dsi_DSTC0121_REQ::clone()
{
   dsi_DSTC0121_REQ* p = new dsi_DSTC0121_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->TaxType_ = TaxType_;
   p->TransType_ = TransType_;
   p->EffectiveDate_ = EffectiveDate_;
   p->Amount_ = Amount_;
   p->AmountType_ = AmountType_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->Currency_ = Currency_;
   p->ExchRate_ = ExchRate_;
   p->BrokerCode_ = BrokerCode_;
   p->FundToCode_ = FundToCode_;
   p->ClassToCode_ = ClassToCode_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->FlatPercent_ = FlatPercent_;
   p->ToAcctTaxType_ = ToAcctTaxType_;
   p->AccountNum_ = AccountNum_;
   p->TradeInDate_ = TradeInDate_;
   return(p);
}

BFDataField* dsi_DSTC0121_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40000134: return ( &TaxType_ ); break; // TaxType
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40000232: return ( &AmountType_ ); break; // AmountType
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40000456: return ( &ExchRate_ ); break; // ExchRate
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000340: return ( &FundToCode_ ); break; // FundToCode
      case 40000341: return ( &ClassToCode_ ); break; // ClassToCode
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40000658: return ( &FlatPercent_ ); break; // FlatPercent
      case 40005554: return ( &ToAcctTaxType_ ); break; // ToAcctTaxType
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
	  case 40007782: return ( &TradeInDate_ ); break; // TradeInDate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0121_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0121_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0121_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 22 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &TaxType_; break;
            case 5: aFlds_[5] = &TransType_; break;
            case 6: aFlds_[6] = &EffectiveDate_; break;
            case 7: aFlds_[7] = &Amount_; break;
            case 8: aFlds_[8] = &AmountType_; break;
            case 9: aFlds_[9] = &FundCode_; break;
            case 10: aFlds_[10] = &ClassCode_; break;
            case 11: aFlds_[11] = &Currency_; break;
            case 12: aFlds_[12] = &ExchRate_; break;
            case 13: aFlds_[13] = &BrokerCode_; break;
            case 14: aFlds_[14] = &FundToCode_; break;
            case 15: aFlds_[15] = &ClassToCode_; break;
            case 16: aFlds_[16] = &Track_; break;
            case 17: aFlds_[17] = &Activity_; break;
            case 18: aFlds_[18] = &FlatPercent_; break;
            case 19: aFlds_[19] = &ToAcctTaxType_; break;
            case 20: aFlds_[20] = &AccountNum_; break;
			case 21: aFlds_[21] = &TradeInDate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0121_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0121_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0121_REQ::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0121_REQ::getDefinedByteLength( void ) const
{
   return( 1329 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0121_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0121_REQ::fieldExists( id );
}

bool dsi_DSTC0121_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40000134: return( true );
      case 40000095: return( true );
      case 40000327: return( true );
      case 40000231: return( true );
      case 40000232: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000180: return( true );
      case 40000456: return( true );
      case 40000044: return( true );
      case 40000340: return( true );
      case 40000341: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40000658: return( true );
      case 40005554: return( true );
      case 40000040: return( true );
	  case 40007782: return ( true );
   }
   return false;
}

