// BFDataImpl implementation file for DataSet DSTC0024.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:58 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0024_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0024_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0024_VWRepeat_Record() { return new dsi_DSTC0024_VWRepeat_Record; }

dsi_DSTC0024_VWRepeat_Record::dsi_DSTC0024_VWRepeat_Record()
: BFDataImpl( 40000528 )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, SettleDate_( ifds::SettleDate, &ifds::s_FldProp_SettleDate )
, Settled_( ifds::Settled, &ifds::s_FldProp_Settled )
, TradeDate_( ifds::TradeDate, &ifds::s_FldProp_TradeDate )
, GrossAmt_( ifds::GrossAmt, &ifds::s_FldProp_GrossAmt )
, NetAmt_( ifds::NetAmt, &ifds::s_FldProp_NetAmt )
, UnitPrice_( ifds::UnitPrice, &ifds::s_FldProp_UnitPrice )
, Units_( ifds::Units, &ifds::s_FldProp_Units )
, OrderBatch_( ifds::OrderBatch, &ifds::s_FldProp_OrderBatch )
, OrderTrace_( ifds::OrderTrace, &ifds::s_FldProp_OrderTrace )
, OrderUser_( ifds::OrderUser, &ifds::s_FldProp_OrderUser )
, CancelBatch_( ifds::CancelBatch, &ifds::s_FldProp_CancelBatch )
, CancelTrace_( ifds::CancelTrace, &ifds::s_FldProp_CancelTrace )
, CancelUser_( ifds::CancelUser, &ifds::s_FldProp_CancelUser )
, SettleBatch_( ifds::SettleBatch, &ifds::s_FldProp_SettleBatch )
, SettleTrace_( ifds::SettleTrace, &ifds::s_FldProp_SettleTrace )
, SettleUser_( ifds::SettleUser, &ifds::s_FldProp_SettleUser )
, VerifiedBy_( ifds::VerifiedBy, &ifds::s_FldProp_VerifiedBy )
, BackDatedOn_( ifds::BackDatedOn, &ifds::s_FldProp_BackDatedOn )
, Cancelled_( ifds::Cancelled, &ifds::s_FldProp_Cancelled )
, Cancellation_( ifds::Cancellation, &ifds::s_FldProp_Cancellation )
, TransTypeDesc_( ifds::TransTypeDesc, &ifds::s_FldProp_TransTypeDesc )
, rxFundCode_( ifds::rxFundCode, &ifds::s_FldProp_rxFundCode )
, rxClassCode_( ifds::rxClassCode, &ifds::s_FldProp_rxClassCode )
, PayType_( ifds::PayType, &ifds::s_FldProp_PayType )
, PayTypeDesc_( ifds::PayTypeDesc, &ifds::s_FldProp_PayTypeDesc )
, StatementCode_( ifds::StatementCode, &ifds::s_FldProp_StatementCode )
, StatementCodeDesc_( ifds::StatementCodeDesc, &ifds::s_FldProp_StatementCodeDesc )
, PaymentType_( ifds::PaymentType, &ifds::s_FldProp_PaymentType )
{
   cFields_ = 31;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0024_VWRepeat_Record::~dsi_DSTC0024_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0024_VWRepeat_Record::clone()
{
   dsi_DSTC0024_VWRepeat_Record* p = new dsi_DSTC0024_VWRepeat_Record;
   p->TransId_ = TransId_;
   p->TransNum_ = TransNum_;
   p->TransType_ = TransType_;
   p->SettleDate_ = SettleDate_;
   p->Settled_ = Settled_;
   p->TradeDate_ = TradeDate_;
   p->GrossAmt_ = GrossAmt_;
   p->NetAmt_ = NetAmt_;
   p->UnitPrice_ = UnitPrice_;
   p->Units_ = Units_;
   p->OrderBatch_ = OrderBatch_;
   p->OrderTrace_ = OrderTrace_;
   p->OrderUser_ = OrderUser_;
   p->CancelBatch_ = CancelBatch_;
   p->CancelTrace_ = CancelTrace_;
   p->CancelUser_ = CancelUser_;
   p->SettleBatch_ = SettleBatch_;
   p->SettleTrace_ = SettleTrace_;
   p->SettleUser_ = SettleUser_;
   p->VerifiedBy_ = VerifiedBy_;
   p->BackDatedOn_ = BackDatedOn_;
   p->Cancelled_ = Cancelled_;
   p->Cancellation_ = Cancellation_;
   p->TransTypeDesc_ = TransTypeDesc_;
   p->rxFundCode_ = rxFundCode_;
   p->rxClassCode_ = rxClassCode_;
   p->PayType_ = PayType_;
   p->PayTypeDesc_ = PayTypeDesc_;
   p->StatementCode_ = StatementCode_;
   p->StatementCodeDesc_ = StatementCodeDesc_;
   p->PaymentType_ = PaymentType_;
   return(p);
}

BFDataField* dsi_DSTC0024_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40000348: return ( &SettleDate_ ); break; // SettleDate
      case 40000349: return ( &Settled_ ); break; // Settled
      case 40000097: return ( &TradeDate_ ); break; // TradeDate
      case 40000350: return ( &GrossAmt_ ); break; // GrossAmt
      case 40000351: return ( &NetAmt_ ); break; // NetAmt
      case 40000352: return ( &UnitPrice_ ); break; // UnitPrice
      case 40000332: return ( &Units_ ); break; // Units
      case 40000356: return ( &OrderBatch_ ); break; // OrderBatch
      case 40000357: return ( &OrderTrace_ ); break; // OrderTrace
      case 40000358: return ( &OrderUser_ ); break; // OrderUser
      case 40000359: return ( &CancelBatch_ ); break; // CancelBatch
      case 40000360: return ( &CancelTrace_ ); break; // CancelTrace
      case 40000361: return ( &CancelUser_ ); break; // CancelUser
      case 40000362: return ( &SettleBatch_ ); break; // SettleBatch
      case 40000363: return ( &SettleTrace_ ); break; // SettleTrace
      case 40000364: return ( &SettleUser_ ); break; // SettleUser
      case 40000365: return ( &VerifiedBy_ ); break; // VerifiedBy
      case 40000530: return ( &BackDatedOn_ ); break; // BackDatedOn
      case 40000354: return ( &Cancelled_ ); break; // Cancelled
      case 40000531: return ( &Cancellation_ ); break; // Cancellation
      case 40000337: return ( &TransTypeDesc_ ); break; // TransTypeDesc
      case 40000286: return ( &rxFundCode_ ); break; // rxFundCode
      case 40000287: return ( &rxClassCode_ ); break; // rxClassCode
      case 40000242: return ( &PayType_ ); break; // PayType
      case 40000243: return ( &PayTypeDesc_ ); break; // PayTypeDesc
      case 40000534: return ( &StatementCode_ ); break; // StatementCode
      case 40000535: return ( &StatementCodeDesc_ ); break; // StatementCodeDesc
      case 40000536: return ( &PaymentType_ ); break; // PaymentType
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0024_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0024_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0024_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 31 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TransId_; break;
            case 1: aFlds_[1] = &TransNum_; break;
            case 2: aFlds_[2] = &TransType_; break;
            case 3: aFlds_[3] = &SettleDate_; break;
            case 4: aFlds_[4] = &Settled_; break;
            case 5: aFlds_[5] = &TradeDate_; break;
            case 6: aFlds_[6] = &GrossAmt_; break;
            case 7: aFlds_[7] = &NetAmt_; break;
            case 8: aFlds_[8] = &UnitPrice_; break;
            case 9: aFlds_[9] = &Units_; break;
            case 10: aFlds_[10] = &OrderBatch_; break;
            case 11: aFlds_[11] = &OrderTrace_; break;
            case 12: aFlds_[12] = &OrderUser_; break;
            case 13: aFlds_[13] = &CancelBatch_; break;
            case 14: aFlds_[14] = &CancelTrace_; break;
            case 15: aFlds_[15] = &CancelUser_; break;
            case 16: aFlds_[16] = &SettleBatch_; break;
            case 17: aFlds_[17] = &SettleTrace_; break;
            case 18: aFlds_[18] = &SettleUser_; break;
            case 19: aFlds_[19] = &VerifiedBy_; break;
            case 20: aFlds_[20] = &BackDatedOn_; break;
            case 21: aFlds_[21] = &Cancelled_; break;
            case 22: aFlds_[22] = &Cancellation_; break;
            case 23: aFlds_[23] = &TransTypeDesc_; break;
            case 24: aFlds_[24] = &rxFundCode_; break;
            case 25: aFlds_[25] = &rxClassCode_; break;
            case 26: aFlds_[26] = &PayType_; break;
            case 27: aFlds_[27] = &PayTypeDesc_; break;
            case 28: aFlds_[28] = &StatementCode_; break;
            case 29: aFlds_[29] = &StatementCodeDesc_; break;
            case 30: aFlds_[30] = &PaymentType_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0024_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0024_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0024_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0024_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 1266 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0024_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0024_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0024_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000063: return( true );
      case 40000096: return( true );
      case 40000095: return( true );
      case 40000348: return( true );
      case 40000349: return( true );
      case 40000097: return( true );
      case 40000350: return( true );
      case 40000351: return( true );
      case 40000352: return( true );
      case 40000332: return( true );
      case 40000356: return( true );
      case 40000357: return( true );
      case 40000358: return( true );
      case 40000359: return( true );
      case 40000360: return( true );
      case 40000361: return( true );
      case 40000362: return( true );
      case 40000363: return( true );
      case 40000364: return( true );
      case 40000365: return( true );
      case 40000530: return( true );
      case 40000354: return( true );
      case 40000531: return( true );
      case 40000337: return( true );
      case 40000286: return( true );
      case 40000287: return( true );
      case 40000242: return( true );
      case 40000243: return( true );
      case 40000534: return( true );
      case 40000535: return( true );
      case 40000536: return( true );
   }
   return false;
}

