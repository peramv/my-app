// BFDataImpl implementation file for DataSet DSTC0401.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0401_vw.h"


// This function creates an instance of dsi_DSTC0401_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0401_VW() { return new dsi_DSTC0401_VW; }

dsi_DSTC0401_VW::dsi_DSTC0401_VW()
: BFDataImpl( 40006065 )
, FullMoneyOutFound_( ifds::FullMoneyOutFound, &ifds::s_FldProp_FullMoneyOutFound )
, ToleranceAmtExceeded_( ifds::ToleranceAmtExceeded, &ifds::s_FldProp_ToleranceAmtExceeded )
, TUPUnits_( ifds::TUPUnits, &ifds::s_FldProp_TUPUnits )
, TUPToleranceRate_( ifds::TUPToleranceRate, &ifds::s_FldProp_TUPToleranceRate )
, TUPToleranceUnits_( ifds::TUPToleranceUnits, &ifds::s_FldProp_TUPToleranceUnits )
, TradeEstimatedUnits_( ifds::TradeEstimatedUnits, &ifds::s_FldProp_TradeEstimatedUnits )
, TUPOversellUnits_( ifds::TUPOversellUnits, &ifds::s_FldProp_TUPOversellUnits )
, TUPOversell_( ifds::TUPOversell, &ifds::s_FldProp_TUPOversell )
, TUPCalcFailed_( ifds::TUPCalcFailed, &ifds::s_FldProp_TUPCalcFailed )
{
   cFields_ = 9;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0401_VW::~dsi_DSTC0401_VW()
{
}

BFDataImpl* dsi_DSTC0401_VW::clone()
{
   dsi_DSTC0401_VW* p = new dsi_DSTC0401_VW;
   p->FullMoneyOutFound_ = FullMoneyOutFound_;
   p->ToleranceAmtExceeded_ = ToleranceAmtExceeded_;
   p->TUPUnits_ = TUPUnits_;
   p->TUPToleranceRate_ = TUPToleranceRate_;
   p->TUPToleranceUnits_ = TUPToleranceUnits_;
   p->TradeEstimatedUnits_ = TradeEstimatedUnits_;
   p->TUPOversellUnits_ = TUPOversellUnits_;
   p->TUPOversell_ = TUPOversell_;
   p->TUPCalcFailed_ = TUPCalcFailed_;
   return(p);
}

BFDataField* dsi_DSTC0401_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40006067: return ( &FullMoneyOutFound_ ); break; // FullMoneyOutFound
      case 40006068: return ( &ToleranceAmtExceeded_ ); break; // ToleranceAmtExceeded
      case 40006069: return ( &TUPUnits_ ); break; // TUPUnits
      case 40006070: return ( &TUPToleranceRate_ ); break; // TUPToleranceRate
      case 40006071: return ( &TUPToleranceUnits_ ); break; // TUPToleranceUnits
      case 40006072: return ( &TradeEstimatedUnits_ ); break; // TradeEstimatedUnits
      case 40006073: return ( &TUPOversellUnits_ ); break; // TUPOversellUnits
      case 40006074: return ( &TUPOversell_ ); break; // TUPOversell
      case 40006075: return ( &TUPCalcFailed_ ); break; // TUPCalcFailed
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0401_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0401_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0401_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 9 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FullMoneyOutFound_; break;
            case 1: aFlds_[1] = &ToleranceAmtExceeded_; break;
            case 2: aFlds_[2] = &TUPUnits_; break;
            case 3: aFlds_[3] = &TUPToleranceRate_; break;
            case 4: aFlds_[4] = &TUPToleranceUnits_; break;
            case 5: aFlds_[5] = &TradeEstimatedUnits_; break;
            case 6: aFlds_[6] = &TUPOversellUnits_; break;
            case 7: aFlds_[7] = &TUPOversell_; break;
            case 8: aFlds_[8] = &TUPCalcFailed_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0401_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0401_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0401_VW::getLargestDefinedField( void ) const
{
   return( 20 );
}

unsigned long dsi_DSTC0401_VW::getDefinedByteLength( void ) const
{
   return( 140 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0401_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0401_VW::fieldExists( id );
}

bool dsi_DSTC0401_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40006067: return( true );
      case 40006068: return( true );
      case 40006069: return( true );
      case 40006070: return( true );
      case 40006071: return( true );
      case 40006072: return( true );
      case 40006073: return( true );
      case 40006074: return( true );
      case 40006075: return( true );
   }
   return false;
}

