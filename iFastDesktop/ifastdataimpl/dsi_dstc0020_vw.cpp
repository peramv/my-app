// BFDataImpl implementation file for DataSet DSTC0020.VW
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Monday, November 14, 2016 05:08:45


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0020_vw.h"


// This function creates an instance of dsi_DSTC0020_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0020_VW() { return new dsi_DSTC0020_VW; }

dsi_DSTC0020_VW::dsi_DSTC0020_VW()
: BFDataImpl( 40000395, 40000400 )
, MoreAvailable_( ifds::MoreAvailable, &ifds::s_FldProp_MoreAvailable )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, AccountBalance_( ifds::AccountBalance, &ifds::s_FldProp_AccountBalance )
, FrgnBalance_( ifds::FrgnBalance, &ifds::s_FldProp_FrgnBalance )
, FrgnACBUnsettl_( ifds::FrgnACBUnsettl, &ifds::s_FldProp_FrgnACBUnsettl )
, FrgnExcsACBUnsettl_( ifds::FrgnExcsACBUnsettl, &ifds::s_FldProp_FrgnExcsACBUnsettl )
, TotalValueAcctCurr_( ifds::TotalValueAcctCurr, &ifds::s_FldProp_TotalValueAcctCurr )
, ShrSettledValue_( ifds::ShrSettledValue, &ifds::s_FldProp_ShrSettledValue )
, TotalACBSettl_( ifds::TotalACBSettl, &ifds::s_FldProp_TotalACBSettl )
, TotalACBUnSettl_( ifds::TotalACBUnSettl, &ifds::s_FldProp_TotalACBUnSettl )
, FrgnACBSettl_( ifds::FrgnACBSettl, &ifds::s_FldProp_FrgnACBSettl )
, DomesticACBSettl_( ifds::DomesticACBSettl, &ifds::s_FldProp_DomesticACBSettl )
, DomesticACBUnSettl_( ifds::DomesticACBUnSettl, &ifds::s_FldProp_DomesticACBUnSettl )
, FrgnAllowPrcnt_( ifds::FrgnAllowPrcnt, &ifds::s_FldProp_FrgnAllowPrcnt )
, FrgnAllowACBSettl_( ifds::FrgnAllowACBSettl, &ifds::s_FldProp_FrgnAllowACBSettl )
, FrgnAllowACBUnSettl_( ifds::FrgnAllowACBUnSettl, &ifds::s_FldProp_FrgnAllowACBUnSettl )
, FrgnExcsPrcntUnSettl_( ifds::FrgnExcsPrcntUnSettl, &ifds::s_FldProp_FrgnExcsPrcntUnSettl )
, FrgnExcsPrcntSettl_( ifds::FrgnExcsPrcntSettl, &ifds::s_FldProp_FrgnExcsPrcntSettl )
, FrgnExcsACBSettl_( ifds::FrgnExcsACBSettl, &ifds::s_FldProp_FrgnExcsACBSettl )
, AcctACBAvailable_( ifds::AcctACBAvailable, &ifds::s_FldProp_AcctACBAvailable )
, TaxOnFullRed_( ifds::TaxOnFullRed, &ifds::s_FldProp_TaxOnFullRed )
, hasERISAProhibitedFund_( ifds::hasERISAProhibitedFund, &ifds::s_FldProp_hasERISAProhibitedFund )
, AccBalUnits_( ifds::AccBalUnits, &ifds::s_FldProp_AccBalUnits )
, PrcntFeeHolding_( ifds::PrcntFeeHolding, &ifds::s_FldProp_PrcntFeeHolding )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
    cFields_ = 25;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0020_VW::~dsi_DSTC0020_VW()
{
}

BFDataImpl* dsi_DSTC0020_VW::clone()
{
    dsi_DSTC0020_VW* p = new dsi_DSTC0020_VW;
    p->MoreAvailable_ = MoreAvailable_;
    p->NextKey_ = NextKey_;
    p->AccountBalance_ = AccountBalance_;
    p->FrgnBalance_ = FrgnBalance_;
    p->FrgnACBUnsettl_ = FrgnACBUnsettl_;
    p->FrgnExcsACBUnsettl_ = FrgnExcsACBUnsettl_;
    p->TotalValueAcctCurr_ = TotalValueAcctCurr_;
    p->ShrSettledValue_ = ShrSettledValue_;
    p->TotalACBSettl_ = TotalACBSettl_;
    p->TotalACBUnSettl_ = TotalACBUnSettl_;
    p->FrgnACBSettl_ = FrgnACBSettl_;
    p->DomesticACBSettl_ = DomesticACBSettl_;
    p->DomesticACBUnSettl_ = DomesticACBUnSettl_;
    p->FrgnAllowPrcnt_ = FrgnAllowPrcnt_;
    p->FrgnAllowACBSettl_ = FrgnAllowACBSettl_;
    p->FrgnAllowACBUnSettl_ = FrgnAllowACBUnSettl_;
    p->FrgnExcsPrcntUnSettl_ = FrgnExcsPrcntUnSettl_;
    p->FrgnExcsPrcntSettl_ = FrgnExcsPrcntSettl_;
    p->FrgnExcsACBSettl_ = FrgnExcsACBSettl_;
    p->AcctACBAvailable_ = AcctACBAvailable_;
    p->TaxOnFullRed_ = TaxOnFullRed_;
    p->hasERISAProhibitedFund_ = hasERISAProhibitedFund_;
    p->AccBalUnits_ = AccBalUnits_;
    p->PrcntFeeHolding_ = PrcntFeeHolding_;
    p->RepeatCount_ = RepeatCount_;
    return(p);
}

BFDataField* dsi_DSTC0020_VW::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000126: return ( &MoreAvailable_ ); break; // MoreAvailable
        case 40000029: return ( &NextKey_ ); break; // NextKey
        case 40000396: return ( &AccountBalance_ ); break; // AccountBalance
        case 40000397: return ( &FrgnBalance_ ); break; // FrgnBalance
        case 40002962: return ( &FrgnACBUnsettl_ ); break; // FrgnACBUnsettl
        case 40002948: return ( &FrgnExcsACBUnsettl_ ); break; // FrgnExcsACBUnsettl
        case 40002087: return ( &TotalValueAcctCurr_ ); break; // TotalValueAcctCurr
        case 40002088: return ( &ShrSettledValue_ ); break; // ShrSettledValue
        case 40002947: return ( &TotalACBSettl_ ); break; // TotalACBSettl
        case 40002950: return ( &TotalACBUnSettl_ ); break; // TotalACBUnSettl
        case 40002867: return ( &FrgnACBSettl_ ); break; // FrgnACBSettl
        case 40002871: return ( &DomesticACBSettl_ ); break; // DomesticACBSettl
        case 40002954: return ( &DomesticACBUnSettl_ ); break; // DomesticACBUnSettl
        case 40002955: return ( &FrgnAllowPrcnt_ ); break; // FrgnAllowPrcnt
        case 40002956: return ( &FrgnAllowACBSettl_ ); break; // FrgnAllowACBSettl
        case 40002957: return ( &FrgnAllowACBUnSettl_ ); break; // FrgnAllowACBUnSettl
        case 40002958: return ( &FrgnExcsPrcntUnSettl_ ); break; // FrgnExcsPrcntUnSettl
        case 40002959: return ( &FrgnExcsPrcntSettl_ ); break; // FrgnExcsPrcntSettl
        case 40002960: return ( &FrgnExcsACBSettl_ ); break; // FrgnExcsACBSettl
        case 40003761: return ( &AcctACBAvailable_ ); break; // AcctACBAvailable
        case 40004115: return ( &TaxOnFullRed_ ); break; // TaxOnFullRed
        case 40006663: return ( &hasERISAProhibitedFund_ ); break; // hasERISAProhibitedFund
        case 40007381: return ( &AccBalUnits_ ); break; // AccBalUnits
        case 40007697: return ( &PrcntFeeHolding_ ); break; // PrcntFeeHolding
        case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0020_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0020_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0020_VW::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 25 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &MoreAvailable_; break;
                case 1: aFlds_[1] = &NextKey_; break;
                case 2: aFlds_[2] = &AccountBalance_; break;
                case 3: aFlds_[3] = &FrgnBalance_; break;
                case 4: aFlds_[4] = &FrgnACBUnsettl_; break;
                case 5: aFlds_[5] = &FrgnExcsACBUnsettl_; break;
                case 6: aFlds_[6] = &TotalValueAcctCurr_; break;
                case 7: aFlds_[7] = &ShrSettledValue_; break;
                case 8: aFlds_[8] = &TotalACBSettl_; break;
                case 9: aFlds_[9] = &TotalACBUnSettl_; break;
                case 10: aFlds_[10] = &FrgnACBSettl_; break;
                case 11: aFlds_[11] = &DomesticACBSettl_; break;
                case 12: aFlds_[12] = &DomesticACBUnSettl_; break;
                case 13: aFlds_[13] = &FrgnAllowPrcnt_; break;
                case 14: aFlds_[14] = &FrgnAllowACBSettl_; break;
                case 15: aFlds_[15] = &FrgnAllowACBUnSettl_; break;
                case 16: aFlds_[16] = &FrgnExcsPrcntUnSettl_; break;
                case 17: aFlds_[17] = &FrgnExcsPrcntSettl_; break;
                case 18: aFlds_[18] = &FrgnExcsACBSettl_; break;
                case 19: aFlds_[19] = &AcctACBAvailable_; break;
                case 20: aFlds_[20] = &TaxOnFullRed_; break;
                case 21: aFlds_[21] = &hasERISAProhibitedFund_; break;
                case 22: aFlds_[22] = &AccBalUnits_; break;
                case 23: aFlds_[23] = &PrcntFeeHolding_; break;
                case 24: aFlds_[24] = &RepeatCount_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0020_VW::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0020_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0020_VW::getLargestDefinedField( void ) const
{
    return( 100 );
}

unsigned long dsi_DSTC0020_VW::getDefinedByteLength( void ) const
{
    return( 523 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0020_VW::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0020_VW::fieldExists( id );
}

bool dsi_DSTC0020_VW::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000126: return ( true );
        case 40000029: return ( true );
        case 40000396: return ( true );
        case 40000397: return ( true );
        case 40002962: return ( true );
        case 40002948: return ( true );
        case 40002087: return ( true );
        case 40002088: return ( true );
        case 40002947: return ( true );
        case 40002950: return ( true );
        case 40002867: return ( true );
        case 40002871: return ( true );
        case 40002954: return ( true );
        case 40002955: return ( true );
        case 40002956: return ( true );
        case 40002957: return ( true );
        case 40002958: return ( true );
        case 40002959: return ( true );
        case 40002960: return ( true );
        case 40003761: return ( true );
        case 40004115: return ( true );
        case 40006663: return ( true );
        case 40007381: return ( true );
        case 40007697: return ( true );
        case 40000120: return ( true );
    }
    return false;
}

