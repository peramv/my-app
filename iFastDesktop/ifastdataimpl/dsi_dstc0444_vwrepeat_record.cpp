// BFDataImpl implementation file for DataSet DSTC0444.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0444_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0444_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0444_VWRepeat_Record() { return new dsi_DSTC0444_VWRepeat_Record; }

dsi_DSTC0444_VWRepeat_Record::dsi_DSTC0444_VWRepeat_Record()
: BFDataImpl( 40006979 )
, TaxJurisCode_( ifds::TaxJurisCode, &ifds::s_FldProp_TaxJurisCode )
, ComplyCode_( ifds::ComplyCode, &ifds::s_FldProp_ComplyCode )
, Deff_( ifds::Deff, &ifds::s_FldProp_Deff )
, OwnershipPrcnt_( ifds::OwnershipPrcnt, &ifds::s_FldProp_OwnershipPrcnt )
, TaxablePrcnt_( ifds::TaxablePrcnt, &ifds::s_FldProp_TaxablePrcnt )
{
   cFields_ = 5;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0444_VWRepeat_Record::~dsi_DSTC0444_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0444_VWRepeat_Record::clone()
{
   dsi_DSTC0444_VWRepeat_Record* p = new dsi_DSTC0444_VWRepeat_Record;
   p->TaxJurisCode_ = TaxJurisCode_;
   p->ComplyCode_ = ComplyCode_;
   p->Deff_ = Deff_;
   p->OwnershipPrcnt_ = OwnershipPrcnt_;
   p->TaxablePrcnt_ = TaxablePrcnt_;
   return(p);
}

BFDataField* dsi_DSTC0444_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000796: return ( &TaxJurisCode_ ); break; // TaxJurisCode
      case 40005989: return ( &ComplyCode_ ); break; // ComplyCode
      case 40000215: return ( &Deff_ ); break; // Deff
      case 40006975: return ( &OwnershipPrcnt_ ); break; // OwnershipPrcnt
      case 40006976: return ( &TaxablePrcnt_ ); break; // TaxablePrcnt
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0444_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0444_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0444_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 5 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TaxJurisCode_; break;
            case 1: aFlds_[1] = &ComplyCode_; break;
            case 2: aFlds_[2] = &Deff_; break;
            case 3: aFlds_[3] = &OwnershipPrcnt_; break;
            case 4: aFlds_[4] = &TaxablePrcnt_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0444_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0444_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0444_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 250 );
}

unsigned long dsi_DSTC0444_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 360 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0444_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0444_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0444_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000796: return( true );
      case 40005989: return( true );
      case 40000215: return( true );
      case 40006975: return( true );
      case 40006976: return( true );
   }
   return false;
}

