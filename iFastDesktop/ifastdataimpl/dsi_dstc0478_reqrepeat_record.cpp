// BFDataImpl implementation file for DataSet DSTC0478.REQRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Wednesday, April 19, 2017 06:12:23


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0478_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0478_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0478_REQRepeat_Record() { return new dsi_DSTC0478_REQRepeat_Record; }

dsi_DSTC0478_REQRepeat_Record::dsi_DSTC0478_REQRepeat_Record()
: BFDataImpl( 40007727 )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, RiskLevel_( ifds::RiskLevel, &ifds::s_FldProp_RiskLevel )
, CountryOfExposure_( ifds::CountryOfExposure, &ifds::s_FldProp_CountryOfExposure )
, RiskDetlUUID_( ifds::RiskDetlUUID, &ifds::s_FldProp_RiskDetlUUID )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
{
    cFields_ = 6;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0478_REQRepeat_Record::~dsi_DSTC0478_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0478_REQRepeat_Record::clone()
{
    dsi_DSTC0478_REQRepeat_Record* p = new dsi_DSTC0478_REQRepeat_Record;
    p->RunMode_ = RunMode_;
    p->RiskLevel_ = RiskLevel_;
    p->CountryOfExposure_ = CountryOfExposure_;
    p->RiskDetlUUID_ = RiskDetlUUID_;
    p->EffectiveDate_ = EffectiveDate_;
    p->StopDate_ = StopDate_;
    return(p);
}

BFDataField* dsi_DSTC0478_REQRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000990: return ( &RunMode_ ); break; // RunMode
        case 40004435: return ( &RiskLevel_ ); break; // RiskLevel
        case 40007577: return ( &CountryOfExposure_ ); break; // CountryOfExposure
        case 40007722: return ( &RiskDetlUUID_ ); break; // RiskDetlUUID
        case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
        case 40000279: return ( &StopDate_ ); break; // StopDate
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0478_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0478_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0478_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 6 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &RunMode_; break;
                case 1: aFlds_[1] = &RiskLevel_; break;
                case 2: aFlds_[2] = &CountryOfExposure_; break;
                case 3: aFlds_[3] = &RiskDetlUUID_; break;
                case 4: aFlds_[4] = &EffectiveDate_; break;
                case 5: aFlds_[5] = &StopDate_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0478_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0478_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0478_REQRepeat_Record::getLargestDefinedField( void ) const
{
    return( 60 );
}

unsigned long dsi_DSTC0478_REQRepeat_Record::getDefinedByteLength( void ) const
{
    return( 206 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0478_REQRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0478_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0478_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000990: return ( true );
        case 40004435: return ( true );
        case 40007577: return ( true );
        case 40007722: return ( true );
        case 40000327: return ( true );
        case 40000279: return ( true );
    }
    return false;
}

