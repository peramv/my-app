// BFDataImpl implementation file for DataSet DSTC0053.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0053_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0053_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0053_VWRepeat_Record() { return new dsi_DSTC0053_VWRepeat_Record; }

dsi_DSTC0053_VWRepeat_Record::dsi_DSTC0053_VWRepeat_Record()
: BFDataImpl( 40000645 )
, rxFundCode_( ifds::rxFundCode, &ifds::s_FldProp_rxFundCode )
, rxClassCode_( ifds::rxClassCode, &ifds::s_FldProp_rxClassCode )
, TradeDate_( ifds::TradeDate, &ifds::s_FldProp_TradeDate )
, SettleDate_( ifds::SettleDate, &ifds::s_FldProp_SettleDate )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, TransTypeDesc_( ifds::TransTypeDesc, &ifds::s_FldProp_TransTypeDesc )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, AccountTo_( ifds::AccountTo, &ifds::s_FldProp_AccountTo )
, AcctToName_( ifds::AcctToName, &ifds::s_FldProp_AcctToName )
, FundTo_( ifds::FundTo, &ifds::s_FldProp_FundTo )
, ClassToCode_( ifds::ClassToCode, &ifds::s_FldProp_ClassToCode )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, AmountType_( ifds::AmountType, &ifds::s_FldProp_AmountType )
, AmountTypeDesc_( ifds::AmountTypeDesc, &ifds::s_FldProp_AmountTypeDesc )
, GrossNetMethod_( ifds::GrossNetMethod, &ifds::s_FldProp_GrossNetMethod )
, OrderType_( ifds::OrderType, &ifds::s_FldProp_OrderType )
, WireOrdNum_( ifds::WireOrdNum, &ifds::s_FldProp_WireOrdNum )
, BatchUser_( ifds::BatchUser, &ifds::s_FldProp_BatchUser )
, BatchName_( ifds::BatchName, &ifds::s_FldProp_BatchName )
, BatchTrace_( ifds::BatchTrace, &ifds::s_FldProp_BatchTrace )
, GoodBad_( ifds::GoodBad, &ifds::s_FldProp_GoodBad )
, PendingRid_( ifds::PendingRid, &ifds::s_FldProp_PendingRid )
, SettleCurrency_( ifds::SettleCurrency, &ifds::s_FldProp_SettleCurrency )
, CashDate_( ifds::CashDate, &ifds::s_FldProp_CashDate )
, ShrNum_( ifds::ShrNum, &ifds::s_FldProp_ShrNum )
, rxAcctNum_( ifds::rxAcctNum, &ifds::s_FldProp_rxAcctNum )
, GoodBadDesc_( ifds::GoodBadDesc, &ifds::s_FldProp_GoodBadDesc )
, OrderTypeDesc_( ifds::OrderTypeDesc, &ifds::s_FldProp_OrderTypeDesc )
, AMSTrade_( ifds::AMSTrade, &ifds::s_FldProp_AMSTrade )
, TradeAMSCode_( ifds::TradeAMSCode, &ifds::s_FldProp_TradeAMSCode )
, ExistExternalId_( ifds::ExistExternalId, &ifds::s_FldProp_ExistExternalId )
, ClntSettlAmt_( ifds::ClntSettlAmt, &ifds::s_FldProp_ClntSettlAmt )
, BrkSettlAmt_( ifds::BrkSettlAmt, &ifds::s_FldProp_BrkSettlAmt )
, ConditionRate_( ifds::ConditionRate, &ifds::s_FldProp_ConditionRate )
, TxnFee_( ifds::TxnFee, &ifds::s_FldProp_TxnFee )
, AcqFeeOption_( ifds::AcqFeeOption, &ifds::s_FldProp_AcqFeeOption )
, GainOrLossAmt_( ifds::GainOrLossAmt, &ifds::s_FldProp_GainOrLossAmt )
, MsgExists_( ifds::MsgExists, &ifds::s_FldProp_MsgExists )
, SettleInDate_( ifds::SettleInDate, &ifds::s_FldProp_SettleInDate )
, VerifyPerm_( ifds::VerifyPerm, &ifds::s_FldProp_VerifyPerm )
, DeletePerm_( ifds::DeletePerm, &ifds::s_FldProp_DeletePerm )
, MessageExits_( ifds::MessageExits, &ifds::s_FldProp_MessageExits )
, NetworkID_( ifds::NetworkID, &ifds::s_FldProp_NetworkID )
, SponsorCode_( ifds::SponsorCode, &ifds::s_FldProp_SponsorCode )
, Platform_( ifds::Platform, &ifds::s_FldProp_Platform )
, FundGroup_( ifds::FundGroup, &ifds::s_FldProp_FundGroup )
, PricingCode_( ifds::PricingCode, &ifds::s_FldProp_PricingCode )
, PriceInCode_( ifds::PriceInCode, &ifds::s_FldProp_PriceInCode )
, GateOverrideIndicator_( ifds::GateOverrideIndicator, &ifds::s_FldProp_GateOverrideIndicator )
{
    cFields_ = 49;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0053_VWRepeat_Record::~dsi_DSTC0053_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0053_VWRepeat_Record::clone()
{
   dsi_DSTC0053_VWRepeat_Record* p = new dsi_DSTC0053_VWRepeat_Record;
   p->rxFundCode_ = rxFundCode_;
   p->rxClassCode_ = rxClassCode_;
   p->TradeDate_ = TradeDate_;
   p->SettleDate_ = SettleDate_;
   p->TransType_ = TransType_;
   p->TransTypeDesc_ = TransTypeDesc_;
   p->TransNum_ = TransNum_;
   p->AccountTo_ = AccountTo_;
   p->AcctToName_ = AcctToName_;
   p->FundTo_ = FundTo_;
   p->ClassToCode_ = ClassToCode_;
   p->Amount_ = Amount_;
   p->AmountType_ = AmountType_;
   p->AmountTypeDesc_ = AmountTypeDesc_;
   p->GrossNetMethod_ = GrossNetMethod_;
   p->OrderType_ = OrderType_;
   p->WireOrdNum_ = WireOrdNum_;
   p->BatchUser_ = BatchUser_;
   p->BatchName_ = BatchName_;
   p->BatchTrace_ = BatchTrace_;
   p->GoodBad_ = GoodBad_;
   p->PendingRid_ = PendingRid_;
   p->SettleCurrency_ = SettleCurrency_;
   p->CashDate_ = CashDate_;
   p->ShrNum_ = ShrNum_;
   p->rxAcctNum_ = rxAcctNum_;
   p->GoodBadDesc_ = GoodBadDesc_;
   p->OrderTypeDesc_ = OrderTypeDesc_;
   p->AMSTrade_ = AMSTrade_;
   p->TradeAMSCode_ = TradeAMSCode_;
   p->ExistExternalId_ = ExistExternalId_;
   p->ClntSettlAmt_ = ClntSettlAmt_;
   p->BrkSettlAmt_ = BrkSettlAmt_;
   p->ConditionRate_ = ConditionRate_;
   p->TxnFee_ = TxnFee_;
   p->AcqFeeOption_ = AcqFeeOption_;
   p->GainOrLossAmt_ = GainOrLossAmt_;
   p->MsgExists_ = MsgExists_;
   p->SettleInDate_ = SettleInDate_;
   p->VerifyPerm_ = VerifyPerm_;
   p->DeletePerm_ = DeletePerm_;
   p->MessageExits_ = MessageExits_;
   p->NetworkID_ = NetworkID_;
   p->SponsorCode_ = SponsorCode_;
   p->Platform_ = Platform_;
   p->FundGroup_ = FundGroup_;
   p->PricingCode_ = PricingCode_;
   p->PriceInCode_ = PriceInCode_;
   p->GateOverrideIndicator_ = GateOverrideIndicator_;
   return(p);
}

BFDataField* dsi_DSTC0053_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000286: return ( &rxFundCode_ ); break; // rxFundCode
      case 40000287: return ( &rxClassCode_ ); break; // rxClassCode
      case 40000097: return ( &TradeDate_ ); break; // TradeDate
      case 40000348: return ( &SettleDate_ ); break; // SettleDate
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40000337: return ( &TransTypeDesc_ ); break; // TransTypeDesc
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40000646: return ( &AccountTo_ ); break; // AccountTo
      case 40000647: return ( &AcctToName_ ); break; // AcctToName
      case 40000648: return ( &FundTo_ ); break; // FundTo
      case 40000341: return ( &ClassToCode_ ); break; // ClassToCode
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40000232: return ( &AmountType_ ); break; // AmountType
      case 40000233: return ( &AmountTypeDesc_ ); break; // AmountTypeDesc
      case 40005728: return ( &GrossNetMethod_ ); break; // GrossNetMethod
      case 40000431: return ( &OrderType_ ); break; // OrderType
      case 40000432: return ( &WireOrdNum_ ); break; // WireOrdNum
      case 40000652: return ( &BatchUser_ ); break; // BatchUser
      case 40000653: return ( &BatchName_ ); break; // BatchName
      case 40000654: return ( &BatchTrace_ ); break; // BatchTrace
      case 40000496: return ( &GoodBad_ ); break; // GoodBad
      case 40000868: return ( &PendingRid_ ); break; // PendingRid
      case 40000455: return ( &SettleCurrency_ ); break; // SettleCurrency
      case 40000450: return ( &CashDate_ ); break; // CashDate
      case 40000114: return ( &ShrNum_ ); break; // ShrNum
      case 40000371: return ( &rxAcctNum_ ); break; // rxAcctNum
      case 40002854: return ( &GoodBadDesc_ ); break; // GoodBadDesc
      case 40002855: return ( &OrderTypeDesc_ ); break; // OrderTypeDesc
      case 40003787: return ( &AMSTrade_ ); break; // AMSTrade
      case 40003852: return ( &TradeAMSCode_ ); break; // TradeAMSCode
      case 40004680: return ( &ExistExternalId_ ); break; // ExistExternalId
      case 40004845: return ( &ClntSettlAmt_ ); break; // ClntSettlAmt
      case 40004846: return ( &BrkSettlAmt_ ); break; // BrkSettlAmt
      case 40004844: return ( &ConditionRate_ ); break; // ConditionRate
      case 40004848: return ( &TxnFee_ ); break; // TxnFee
      case 40004591: return ( &AcqFeeOption_ ); break; // AcqFeeOption
      case 40000336: return ( &GainOrLossAmt_ ); break; // GainOrLossAmt
      case 40005049: return ( &MsgExists_ ); break; // MsgExists
      case 40005571: return ( &SettleInDate_ ); break; // SettleInDate
      case 40007404: return ( &VerifyPerm_ ); break; // VerifyPerm
      case 40007405: return ( &DeletePerm_ ); break; // DeletePerm
      case 40007406: return ( &MessageExits_ ); break; // MessageExits
      case 40003522: return ( &NetworkID_ ); break; // NetworkID
      case 40002627: return ( &SponsorCode_ ); break; // SponsorCode
      case 40007196: return ( &Platform_ ); break; // Platform
	  case 40002031: return ( &FundGroup_ ); break; // FundGroup
      case 40007796: return ( &PricingCode_ ); break; // PricingCode
   	  case 40007875: return ( &PriceInCode_ ); break; // PriceInCode
      case 40007896: return ( &GateOverrideIndicator_ ); break; // GateOverrideIndicator
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0053_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0053_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0053_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 49 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &rxFundCode_; break;
            case 1: aFlds_[1] = &rxClassCode_; break;
            case 2: aFlds_[2] = &TradeDate_; break;
            case 3: aFlds_[3] = &SettleDate_; break;
            case 4: aFlds_[4] = &TransType_; break;
            case 5: aFlds_[5] = &TransTypeDesc_; break;
            case 6: aFlds_[6] = &TransNum_; break;
            case 7: aFlds_[7] = &AccountTo_; break;
            case 8: aFlds_[8] = &AcctToName_; break;
            case 9: aFlds_[9] = &FundTo_; break;
            case 10: aFlds_[10] = &ClassToCode_; break;
            case 11: aFlds_[11] = &Amount_; break;
            case 12: aFlds_[12] = &AmountType_; break;
            case 13: aFlds_[13] = &AmountTypeDesc_; break;
            case 14: aFlds_[14] = &GrossNetMethod_; break;
            case 15: aFlds_[15] = &OrderType_; break;
            case 16: aFlds_[16] = &WireOrdNum_; break;
            case 17: aFlds_[17] = &BatchUser_; break;
            case 18: aFlds_[18] = &BatchName_; break;
            case 19: aFlds_[19] = &BatchTrace_; break;
            case 20: aFlds_[20] = &GoodBad_; break;
            case 21: aFlds_[21] = &PendingRid_; break;
            case 22: aFlds_[22] = &SettleCurrency_; break;
            case 23: aFlds_[23] = &CashDate_; break;
            case 24: aFlds_[24] = &ShrNum_; break;
            case 25: aFlds_[25] = &rxAcctNum_; break;
            case 26: aFlds_[26] = &GoodBadDesc_; break;
            case 27: aFlds_[27] = &OrderTypeDesc_; break;
            case 28: aFlds_[28] = &AMSTrade_; break;
            case 29: aFlds_[29] = &TradeAMSCode_; break;
            case 30: aFlds_[30] = &ExistExternalId_; break;
            case 31: aFlds_[31] = &ClntSettlAmt_; break;
            case 32: aFlds_[32] = &BrkSettlAmt_; break;
            case 33: aFlds_[33] = &ConditionRate_; break;
            case 34: aFlds_[34] = &TxnFee_; break;
            case 35: aFlds_[35] = &AcqFeeOption_; break;
            case 36: aFlds_[36] = &GainOrLossAmt_; break;
            case 37: aFlds_[37] = &MsgExists_; break;
            case 38: aFlds_[38] = &SettleInDate_; break;
            case 39: aFlds_[39] = &VerifyPerm_; break;
            case 40: aFlds_[40] = &DeletePerm_; break;
            case 41: aFlds_[41] = &MessageExits_; break;
            case 42: aFlds_[42] = &NetworkID_; break;
            case 43: aFlds_[43] = &SponsorCode_; break;
            case 44: aFlds_[44] = &Platform_; break;
            case 45: aFlds_[45] = &FundGroup_; break;
            case 46: aFlds_[46] = &PricingCode_; break;
            case 47: aFlds_[47] = &PriceInCode_; break;
            case 48: aFlds_[48] = &GateOverrideIndicator_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0053_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0053_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0053_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0053_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 1718 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0053_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0053_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0053_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000286: return( true );
      case 40000287: return( true );
      case 40000097: return( true );
      case 40000348: return( true );
      case 40000095: return( true );
      case 40000337: return( true );
      case 40000096: return( true );
      case 40000646: return( true );
      case 40000647: return( true );
      case 40000648: return( true );
      case 40000341: return( true );
      case 40000231: return( true );
      case 40000232: return( true );
      case 40000233: return( true );
      case 40005728: return( true );
      case 40000431: return( true );
      case 40000432: return( true );
      case 40000652: return( true );
      case 40000653: return( true );
      case 40000654: return( true );
      case 40000496: return( true );
      case 40000868: return( true );
      case 40000455: return( true );
      case 40000450: return( true );
      case 40000114: return( true );
      case 40000371: return( true );
      case 40002854: return( true );
      case 40002855: return( true );
      case 40003787: return( true );
      case 40003852: return( true );
      case 40004680: return( true );
      case 40004845: return( true );
      case 40004846: return( true );
      case 40004844: return( true );
      case 40004848: return( true );
      case 40004591: return( true );
      case 40000336: return( true );
      case 40005049: return( true );
      case 40005571: return( true );
      case 40007404: return( true );
      case 40007405: return( true );
      case 40007406: return( true );
      case 40003522: return( true );
	  case 40002627: return ( true );
      case 40007196: return ( true );
      case 40002031: return ( true );
      case 40007796: return ( true );
      case 40007875: return ( true );
      case 40007896: return ( true );
   }
   return false;
}

