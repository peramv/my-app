// BFDataImpl implementation file for DataSet DSTC0208.REQRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0208_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0208_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0208_REQRepeat_Record() { return new dsi_DSTC0208_REQRepeat_Record; }

dsi_DSTC0208_REQRepeat_Record::dsi_DSTC0208_REQRepeat_Record()
: BFDataImpl( 40003189 )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, Settled_( ifds::Settled, &ifds::s_FldProp_Settled )
, IndTransType_( ifds::IndTransType, &ifds::s_FldProp_IndTransType )
, CashDate_( ifds::CashDate, &ifds::s_FldProp_CashDate )
{
    cFields_ = 4;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0208_REQRepeat_Record::~dsi_DSTC0208_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0208_REQRepeat_Record::clone()
{
   dsi_DSTC0208_REQRepeat_Record* p = new dsi_DSTC0208_REQRepeat_Record;
   p->TransId_ = TransId_;
   p->Settled_ = Settled_;
   p->IndTransType_ = IndTransType_;
   p->CashDate_ = CashDate_;
   return(p);
}

BFDataField* dsi_DSTC0208_REQRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40000349: return ( &Settled_ ); break; // Settled
      case 40005583: return ( &IndTransType_ ); break; // IndTransType
      case 40000450: return ( &CashDate_ ); break; // CashDate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0208_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0208_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0208_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 4 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TransId_; break;
            case 1: aFlds_[1] = &Settled_; break;
            case 2: aFlds_[2] = &IndTransType_; break;
            case 3: aFlds_[3] = &CashDate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0208_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0208_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0208_REQRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0208_REQRepeat_Record::getDefinedByteLength( void ) const
{
   return( 92 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0208_REQRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0208_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0208_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000063: return( true );
      case 40000349: return( true );
      case 40005583: return( true );
	  case 40000450: return ( true );
   }
   return false;
}

