// BFDataImpl implementation file for DataSet DSTC0227.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0227_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0227_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0227_VWRepeat_Record() { return new dsi_DSTC0227_VWRepeat_Record; }

dsi_DSTC0227_VWRepeat_Record::dsi_DSTC0227_VWRepeat_Record()
: BFDataImpl( 40003417 )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, Baycom_( ifds::Baycom, &ifds::s_FldProp_Baycom )
, FundCurrency_( ifds::FundCurrency, &ifds::s_FldProp_FundCurrency )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, Units_( ifds::Units, &ifds::s_FldProp_Units )
, FeePercent_( ifds::FeePercent, &ifds::s_FldProp_FeePercent )
, DSC_( ifds::DSC, &ifds::s_FldProp_DSC )
, FedClawback_( ifds::FedClawback, &ifds::s_FldProp_FedClawback )
, ProvClawback_( ifds::ProvClawback, &ifds::s_FldProp_ProvClawback )
, AdditionalProvClawback_( ifds::AdditionalProvClawback, &ifds::s_FldProp_AdditionalProvClawback )
{
   cFields_ = 11;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0227_VWRepeat_Record::~dsi_DSTC0227_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0227_VWRepeat_Record::clone()
{
   dsi_DSTC0227_VWRepeat_Record* p = new dsi_DSTC0227_VWRepeat_Record;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->Baycom_ = Baycom_;
   p->FundCurrency_ = FundCurrency_;
   p->Amount_ = Amount_;
   p->Units_ = Units_;
   p->FeePercent_ = FeePercent_;
   p->DSC_ = DSC_;
   p->FedClawback_ = FedClawback_;
   p->ProvClawback_ = ProvClawback_;
   p->AdditionalProvClawback_ = AdditionalProvClawback_;
   return(p);
}

BFDataField* dsi_DSTC0227_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000958: return ( &Baycom_ ); break; // Baycom
      case 40001948: return ( &FundCurrency_ ); break; // FundCurrency
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40000332: return ( &Units_ ); break; // Units
      case 40000236: return ( &FeePercent_ ); break; // FeePercent
      case 40001735: return ( &DSC_ ); break; // DSC
      case 40004441: return ( &FedClawback_ ); break; // FedClawback
      case 40004442: return ( &ProvClawback_ ); break; // ProvClawback
      case 40004462: return ( &AdditionalProvClawback_ ); break; // AdditionalProvClawback
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0227_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0227_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0227_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 11 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FundCode_; break;
            case 1: aFlds_[1] = &ClassCode_; break;
            case 2: aFlds_[2] = &Baycom_; break;
            case 3: aFlds_[3] = &FundCurrency_; break;
            case 4: aFlds_[4] = &Amount_; break;
            case 5: aFlds_[5] = &Units_; break;
            case 6: aFlds_[6] = &FeePercent_; break;
            case 7: aFlds_[7] = &DSC_; break;
            case 8: aFlds_[8] = &FedClawback_; break;
            case 9: aFlds_[9] = &ProvClawback_; break;
            case 10: aFlds_[10] = &AdditionalProvClawback_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0227_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0227_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0227_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0227_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 635 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0227_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0227_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0227_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000958: return( true );
      case 40001948: return( true );
      case 40000231: return( true );
      case 40000332: return( true );
      case 40000236: return( true );
      case 40001735: return( true );
      case 40004441: return( true );
      case 40004442: return( true );
      case 40004462: return( true );
   }
   return false;
}

