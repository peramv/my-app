// BFDataImpl implementation file for DataSet DSTC0430.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0430_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0430_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0430_VWRepeat_Record() { return new dsi_DSTC0430_VWRepeat_Record; }

dsi_DSTC0430_VWRepeat_Record::dsi_DSTC0430_VWRepeat_Record()
: BFDataImpl( 40006684 )
, InstId_( ifds::InstId, &ifds::s_FldProp_InstId )
, AcctID_( ifds::AcctID, &ifds::s_FldProp_AcctID )
, PolicyYear_( ifds::PolicyYear, &ifds::s_FldProp_PolicyYear )
, PolicyTerm_( ifds::PolicyTerm, &ifds::s_FldProp_PolicyTerm )
, MaturityDate_( ifds::MaturityDate, &ifds::s_FldProp_MaturityDate )
, RedCode_( ifds::RedCode, &ifds::s_FldProp_RedCode )
, RedCodeDesc_( ifds::RedCodeDesc, &ifds::s_FldProp_RedCodeDesc )
, ADCD_( ifds::ADCD, &ifds::s_FldProp_ADCD )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, PUD1_( ifds::PUD1, &ifds::s_FldProp_PUD1 )
, SourceOfFunds_( ifds::SourceOfFunds, &ifds::s_FldProp_SourceOfFunds )
, PayType3_( ifds::PayType3, &ifds::s_FldProp_PayType3 )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, UserName2_( ifds::UserName2, &ifds::s_FldProp_UserName2 )
, SegMatInstDetlUUID_( ifds::SegMatInstDetlUUID, &ifds::s_FldProp_SegMatInstDetlUUID )
, InstName_( ifds::InstName, &ifds::s_FldProp_InstName )
, SwiftCode_( ifds::SwiftCode, &ifds::s_FldProp_SwiftCode )
, RefNumber_( ifds::RefNumber, &ifds::s_FldProp_RefNumber )
, TransitNum_( ifds::TransitNum, &ifds::s_FldProp_TransitNum )
, BankIdNum_( ifds::BankIdNum, &ifds::s_FldProp_BankIdNum )
, BankId_( ifds::BankId, &ifds::s_FldProp_BankId )
, BankAcctNum_( ifds::BankAcctNum, &ifds::s_FldProp_BankAcctNum )
, BankAcctName_( ifds::BankAcctName, &ifds::s_FldProp_BankAcctName )
, BankAcctType_( ifds::BankAcctType, &ifds::s_FldProp_BankAcctType )
, BankAcctTypeDesc_( ifds::BankAcctTypeDesc, &ifds::s_FldProp_BankAcctTypeDesc )
, BankAcctCurr_( ifds::BankAcctCurr, &ifds::s_FldProp_BankAcctCurr )
, BankAcctCurrDesc_( ifds::BankAcctCurrDesc, &ifds::s_FldProp_BankAcctCurrDesc )
, BankAddr1_( ifds::BankAddr1, &ifds::s_FldProp_BankAddr1 )
, BankAddr2_( ifds::BankAddr2, &ifds::s_FldProp_BankAddr2 )
, BankAddr3_( ifds::BankAddr3, &ifds::s_FldProp_BankAddr3 )
, BankAddr4_( ifds::BankAddr4, &ifds::s_FldProp_BankAddr4 )
, BankAddr5_( ifds::BankAddr5, &ifds::s_FldProp_BankAddr5 )
, BankContact_( ifds::BankContact, &ifds::s_FldProp_BankContact )
, BankCntry_( ifds::BankCntry, &ifds::s_FldProp_BankCntry )
, BankPstl_( ifds::BankPstl, &ifds::s_FldProp_BankPstl )
, BankType_( ifds::BankType, &ifds::s_FldProp_BankType )
, PayReason1_( ifds::PayReason1, &ifds::s_FldProp_PayReason1 )
, PayReason2_( ifds::PayReason2, &ifds::s_FldProp_PayReason2 )
, ACHProcessor_( ifds::ACHProcessor, &ifds::s_FldProp_ACHProcessor )
, CorrespBankType_( ifds::CorrespBankType, &ifds::s_FldProp_CorrespBankType )
, CorrespBankIdNum_( ifds::CorrespBankIdNum, &ifds::s_FldProp_CorrespBankIdNum )
, CreditInfoLine1_( ifds::CreditInfoLine1, &ifds::s_FldProp_CreditInfoLine1 )
, CreditInfoLine2_( ifds::CreditInfoLine2, &ifds::s_FldProp_CreditInfoLine2 )
, CorrespBankId_( ifds::CorrespBankId, &ifds::s_FldProp_CorrespBankId )
, CorrespTransitNo_( ifds::CorrespTransitNo, &ifds::s_FldProp_CorrespTransitNo )
, CorrespInstName_( ifds::CorrespInstName, &ifds::s_FldProp_CorrespInstName )
, CorrespBankContact_( ifds::CorrespBankContact, &ifds::s_FldProp_CorrespBankContact )
, CorrespBankCntry_( ifds::CorrespBankCntry, &ifds::s_FldProp_CorrespBankCntry )
, CorrespBankPstl_( ifds::CorrespBankPstl, &ifds::s_FldProp_CorrespBankPstl )
, CorrespBankAddr1_( ifds::CorrespBankAddr1, &ifds::s_FldProp_CorrespBankAddr1 )
, CorrespBankAddr2_( ifds::CorrespBankAddr2, &ifds::s_FldProp_CorrespBankAddr2 )
, CorrespBankAddr3_( ifds::CorrespBankAddr3, &ifds::s_FldProp_CorrespBankAddr3 )
, CorrespBankAddr4_( ifds::CorrespBankAddr4, &ifds::s_FldProp_CorrespBankAddr4 )
, CorrespBankAddr5_( ifds::CorrespBankAddr5, &ifds::s_FldProp_CorrespBankAddr5 )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, BankAcctVer_( ifds::BankAcctVer, &ifds::s_FldProp_BankAcctVer )
, AcctUseCode_( ifds::AcctUseCode, &ifds::s_FldProp_AcctUseCode )
{
   cFields_ = 59;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0430_VWRepeat_Record::~dsi_DSTC0430_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0430_VWRepeat_Record::clone()
{
   dsi_DSTC0430_VWRepeat_Record* p = new dsi_DSTC0430_VWRepeat_Record;
   p->InstId_ = InstId_;
   p->AcctID_ = AcctID_;
   p->PolicyYear_ = PolicyYear_;
   p->PolicyTerm_ = PolicyTerm_;
   p->MaturityDate_ = MaturityDate_;
   p->RedCode_ = RedCode_;
   p->RedCodeDesc_ = RedCodeDesc_;
   p->ADCD_ = ADCD_;
   p->Amount_ = Amount_;
   p->PUD1_ = PUD1_;
   p->SourceOfFunds_ = SourceOfFunds_;
   p->PayType3_ = PayType3_;
   p->ModDate_ = ModDate_;
   p->Username_ = Username_;
   p->UserName2_ = UserName2_;
   p->SegMatInstDetlUUID_ = SegMatInstDetlUUID_;
   p->InstName_ = InstName_;
   p->SwiftCode_ = SwiftCode_;
   p->RefNumber_ = RefNumber_;
   p->TransitNum_ = TransitNum_;
   p->BankIdNum_ = BankIdNum_;
   p->BankId_ = BankId_;
   p->BankAcctNum_ = BankAcctNum_;
   p->BankAcctName_ = BankAcctName_;
   p->BankAcctType_ = BankAcctType_;
   p->BankAcctTypeDesc_ = BankAcctTypeDesc_;
   p->BankAcctCurr_ = BankAcctCurr_;
   p->BankAcctCurrDesc_ = BankAcctCurrDesc_;
   p->BankAddr1_ = BankAddr1_;
   p->BankAddr2_ = BankAddr2_;
   p->BankAddr3_ = BankAddr3_;
   p->BankAddr4_ = BankAddr4_;
   p->BankAddr5_ = BankAddr5_;
   p->BankContact_ = BankContact_;
   p->BankCntry_ = BankCntry_;
   p->BankPstl_ = BankPstl_;
   p->BankType_ = BankType_;
   p->PayReason1_ = PayReason1_;
   p->PayReason2_ = PayReason2_;
   p->ACHProcessor_ = ACHProcessor_;
   p->CorrespBankType_ = CorrespBankType_;
   p->CorrespBankIdNum_ = CorrespBankIdNum_;
   p->CreditInfoLine1_ = CreditInfoLine1_;
   p->CreditInfoLine2_ = CreditInfoLine2_;
   p->CorrespBankId_ = CorrespBankId_;
   p->CorrespTransitNo_ = CorrespTransitNo_;
   p->CorrespInstName_ = CorrespInstName_;
   p->CorrespBankContact_ = CorrespBankContact_;
   p->CorrespBankCntry_ = CorrespBankCntry_;
   p->CorrespBankPstl_ = CorrespBankPstl_;
   p->CorrespBankAddr1_ = CorrespBankAddr1_;
   p->CorrespBankAddr2_ = CorrespBankAddr2_;
   p->CorrespBankAddr3_ = CorrespBankAddr3_;
   p->CorrespBankAddr4_ = CorrespBankAddr4_;
   p->CorrespBankAddr5_ = CorrespBankAddr5_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->BankAcctVer_ = BankAcctVer_;
   p->AcctUseCode_ = AcctUseCode_;
   return(p);
}

BFDataField* dsi_DSTC0430_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40006688: return ( &InstId_ ); break; // InstId
      case 40006056: return ( &AcctID_ ); break; // AcctID
      case 40002593: return ( &PolicyYear_ ); break; // PolicyYear
      case 40002685: return ( &PolicyTerm_ ); break; // PolicyTerm
      case 40000679: return ( &MaturityDate_ ); break; // MaturityDate
      case 40000435: return ( &RedCode_ ); break; // RedCode
      case 40000436: return ( &RedCodeDesc_ ); break; // RedCodeDesc
      case 40006689: return ( &ADCD_ ); break; // ADCD
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40006817: return ( &PUD1_ ); break; // PUD1
      case 40006786: return ( &SourceOfFunds_ ); break; // SourceOfFunds
      case 40006788: return ( &PayType3_ ); break; // PayType3
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40006691: return ( &UserName2_ ); break; // UserName2
      case 40006690: return ( &SegMatInstDetlUUID_ ); break; // SegMatInstDetlUUID
      case 40000285: return ( &InstName_ ); break; // InstName
      case 40000245: return ( &SwiftCode_ ); break; // SwiftCode
      case 40000246: return ( &RefNumber_ ); break; // RefNumber
      case 40006780: return ( &TransitNum_ ); break; // TransitNum
      case 40002301: return ( &BankIdNum_ ); break; // BankIdNum
      case 40002283: return ( &BankId_ ); break; // BankId
      case 40000248: return ( &BankAcctNum_ ); break; // BankAcctNum
      case 40000249: return ( &BankAcctName_ ); break; // BankAcctName
      case 40000253: return ( &BankAcctType_ ); break; // BankAcctType
      case 40000254: return ( &BankAcctTypeDesc_ ); break; // BankAcctTypeDesc
      case 40006692: return ( &BankAcctCurr_ ); break; // BankAcctCurr
      case 40003144: return ( &BankAcctCurrDesc_ ); break; // BankAcctCurrDesc
      case 40002167: return ( &BankAddr1_ ); break; // BankAddr1
      case 40002168: return ( &BankAddr2_ ); break; // BankAddr2
      case 40002169: return ( &BankAddr3_ ); break; // BankAddr3
      case 40002170: return ( &BankAddr4_ ); break; // BankAddr4
      case 40002171: return ( &BankAddr5_ ); break; // BankAddr5
      case 40002146: return ( &BankContact_ ); break; // BankContact
      case 40006693: return ( &BankCntry_ ); break; // BankCntry
      case 40006694: return ( &BankPstl_ ); break; // BankPstl
      case 40002299: return ( &BankType_ ); break; // BankType
      case 40000642: return ( &PayReason1_ ); break; // PayReason1
      case 40000643: return ( &PayReason2_ ); break; // PayReason2
      case 40002150: return ( &ACHProcessor_ ); break; // ACHProcessor
      case 40003111: return ( &CorrespBankType_ ); break; // CorrespBankType
      case 40003114: return ( &CorrespBankIdNum_ ); break; // CorrespBankIdNum
      case 40002294: return ( &CreditInfoLine1_ ); break; // CreditInfoLine1
      case 40002295: return ( &CreditInfoLine2_ ); break; // CreditInfoLine2
      case 40002181: return ( &CorrespBankId_ ); break; // CorrespBankId
      case 40003113: return ( &CorrespTransitNo_ ); break; // CorrespTransitNo
      case 40003112: return ( &CorrespInstName_ ); break; // CorrespInstName
      case 40003115: return ( &CorrespBankContact_ ); break; // CorrespBankContact
      case 40006699: return ( &CorrespBankCntry_ ); break; // CorrespBankCntry
      case 40006696: return ( &CorrespBankPstl_ ); break; // CorrespBankPstl
      case 40003118: return ( &CorrespBankAddr1_ ); break; // CorrespBankAddr1
      case 40003119: return ( &CorrespBankAddr2_ ); break; // CorrespBankAddr2
      case 40003120: return ( &CorrespBankAddr3_ ); break; // CorrespBankAddr3
      case 40003121: return ( &CorrespBankAddr4_ ); break; // CorrespBankAddr4
      case 40003122: return ( &CorrespBankAddr5_ ); break; // CorrespBankAddr5
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40000956: return ( &BankAcctVer_ ); break; // BankAcctVer
      case 40000640: return ( &AcctUseCode_ ); break; // AcctUseCode
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0430_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0430_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0430_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 59 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &InstId_; break;
            case 1: aFlds_[1] = &AcctID_; break;
            case 2: aFlds_[2] = &PolicyYear_; break;
            case 3: aFlds_[3] = &PolicyTerm_; break;
            case 4: aFlds_[4] = &MaturityDate_; break;
            case 5: aFlds_[5] = &RedCode_; break;
            case 6: aFlds_[6] = &RedCodeDesc_; break;
            case 7: aFlds_[7] = &ADCD_; break;
            case 8: aFlds_[8] = &Amount_; break;
            case 9: aFlds_[9] = &PUD1_; break;
            case 10: aFlds_[10] = &SourceOfFunds_; break;
            case 11: aFlds_[11] = &PayType3_; break;
            case 12: aFlds_[12] = &ModDate_; break;
            case 13: aFlds_[13] = &Username_; break;
            case 14: aFlds_[14] = &UserName2_; break;
            case 15: aFlds_[15] = &SegMatInstDetlUUID_; break;
            case 16: aFlds_[16] = &InstName_; break;
            case 17: aFlds_[17] = &SwiftCode_; break;
            case 18: aFlds_[18] = &RefNumber_; break;
            case 19: aFlds_[19] = &TransitNum_; break;
            case 20: aFlds_[20] = &BankIdNum_; break;
            case 21: aFlds_[21] = &BankId_; break;
            case 22: aFlds_[22] = &BankAcctNum_; break;
            case 23: aFlds_[23] = &BankAcctName_; break;
            case 24: aFlds_[24] = &BankAcctType_; break;
            case 25: aFlds_[25] = &BankAcctTypeDesc_; break;
            case 26: aFlds_[26] = &BankAcctCurr_; break;
            case 27: aFlds_[27] = &BankAcctCurrDesc_; break;
            case 28: aFlds_[28] = &BankAddr1_; break;
            case 29: aFlds_[29] = &BankAddr2_; break;
            case 30: aFlds_[30] = &BankAddr3_; break;
            case 31: aFlds_[31] = &BankAddr4_; break;
            case 32: aFlds_[32] = &BankAddr5_; break;
            case 33: aFlds_[33] = &BankContact_; break;
            case 34: aFlds_[34] = &BankCntry_; break;
            case 35: aFlds_[35] = &BankPstl_; break;
            case 36: aFlds_[36] = &BankType_; break;
            case 37: aFlds_[37] = &PayReason1_; break;
            case 38: aFlds_[38] = &PayReason2_; break;
            case 39: aFlds_[39] = &ACHProcessor_; break;
            case 40: aFlds_[40] = &CorrespBankType_; break;
            case 41: aFlds_[41] = &CorrespBankIdNum_; break;
            case 42: aFlds_[42] = &CreditInfoLine1_; break;
            case 43: aFlds_[43] = &CreditInfoLine2_; break;
            case 44: aFlds_[44] = &CorrespBankId_; break;
            case 45: aFlds_[45] = &CorrespTransitNo_; break;
            case 46: aFlds_[46] = &CorrespInstName_; break;
            case 47: aFlds_[47] = &CorrespBankContact_; break;
            case 48: aFlds_[48] = &CorrespBankCntry_; break;
            case 49: aFlds_[49] = &CorrespBankPstl_; break;
            case 50: aFlds_[50] = &CorrespBankAddr1_; break;
            case 51: aFlds_[51] = &CorrespBankAddr2_; break;
            case 52: aFlds_[52] = &CorrespBankAddr3_; break;
            case 53: aFlds_[53] = &CorrespBankAddr4_; break;
            case 54: aFlds_[54] = &CorrespBankAddr5_; break;
            case 55: aFlds_[55] = &EffectiveDate_; break;
            case 56: aFlds_[56] = &StopDate_; break;
            case 57: aFlds_[57] = &BankAcctVer_; break;
            case 58: aFlds_[58] = &AcctUseCode_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0430_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0430_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0430_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0430_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 2606 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0430_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0430_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0430_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40006688: return( true );
      case 40006056: return( true );
      case 40002593: return( true );
      case 40002685: return( true );
      case 40000679: return( true );
      case 40000435: return( true );
      case 40000436: return( true );
      case 40006689: return( true );
      case 40000231: return( true );
      case 40006817: return( true );
      case 40006786: return( true );
      case 40006788: return( true );
      case 40000217: return( true );
      case 40000117: return( true );
      case 40006691: return( true );
      case 40006690: return( true );
      case 40000285: return( true );
      case 40000245: return( true );
      case 40000246: return( true );
      case 40006780: return( true );
      case 40002301: return( true );
      case 40002283: return( true );
      case 40000248: return( true );
      case 40000249: return( true );
      case 40000253: return( true );
      case 40000254: return( true );
      case 40006692: return( true );
      case 40003144: return( true );
      case 40002167: return( true );
      case 40002168: return( true );
      case 40002169: return( true );
      case 40002170: return( true );
      case 40002171: return( true );
      case 40002146: return( true );
      case 40006693: return( true );
      case 40006694: return( true );
      case 40002299: return( true );
      case 40000642: return( true );
      case 40000643: return( true );
      case 40002150: return( true );
      case 40003111: return( true );
      case 40003114: return( true );
      case 40002294: return( true );
      case 40002295: return( true );
      case 40002181: return( true );
      case 40003113: return( true );
      case 40003112: return( true );
      case 40003115: return( true );
      case 40006699: return( true );
      case 40006696: return( true );
      case 40003118: return( true );
      case 40003119: return( true );
      case 40003120: return( true );
      case 40003121: return( true );
      case 40003122: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40000956: return( true );
      case 40000640: return( true );
   }
   return false;
}

