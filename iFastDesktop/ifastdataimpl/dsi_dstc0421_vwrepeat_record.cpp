// BFDataImpl implementation file for DataSet DSTC0421.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0421_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0421_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0421_VWRepeat_Record() { return new dsi_DSTC0421_VWRepeat_Record; }

dsi_DSTC0421_VWRepeat_Record::dsi_DSTC0421_VWRepeat_Record()
: BFDataImpl( 40006453 )
, IntInvestUUID_( ifds::IntInvestUUID, &ifds::s_FldProp_IntInvestUUID )
, Fund_( ifds::Fund, &ifds::s_FldProp_Fund )
, Class_( ifds::Class, &ifds::s_FldProp_Class )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, InvHisNumber_( ifds::InvHisNumber, &ifds::s_FldProp_InvHisNumber )
, InvHisStatus_( ifds::InvHisStatus, &ifds::s_FldProp_InvHisStatus )
, InvHisIntCalcMthd_( ifds::InvHisIntCalcMthd, &ifds::s_FldProp_InvHisIntCalcMthd )
, InvHisIntRateType_( ifds::InvHisIntRateType, &ifds::s_FldProp_InvHisIntRateType )
, InvHisTerm_( ifds::InvHisTerm, &ifds::s_FldProp_InvHisTerm )
, InvHisIntRate_( ifds::InvHisIntRate, &ifds::s_FldProp_InvHisIntRate )
, InvHisDepDate_( ifds::InvHisDepDate, &ifds::s_FldProp_InvHisDepDate )
, InvHisMatDate_( ifds::InvHisMatDate, &ifds::s_FldProp_InvHisMatDate )
, InvHisPrincipal_( ifds::InvHisPrincipal, &ifds::s_FldProp_InvHisPrincipal )
, InvHisIntFreq_( ifds::InvHisIntFreq, &ifds::s_FldProp_InvHisIntFreq )
, InvHisCurMktVal_( ifds::InvHisCurMktVal, &ifds::s_FldProp_InvHisCurMktVal )
, InvHisLastIntCrdDate_( ifds::InvHisLastIntCrdDate, &ifds::s_FldProp_InvHisLastIntCrdDate )
, InvHisAcurdToDate_( ifds::InvHisAcurdToDate, &ifds::s_FldProp_InvHisAcurdToDate )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, Version_( ifds::Version, &ifds::s_FldProp_Version )
, InvHisLotId_( ifds::InvHisLotId, &ifds::s_FldProp_InvHisLotId )
, InvHisInvestId_( ifds::InvHisInvestId, &ifds::s_FldProp_InvHisInvestId )
, Principal_( ifds::Principal, &ifds::s_FldProp_Principal )
, MarketValue_( ifds::MarketValue, &ifds::s_FldProp_MarketValue )
, ValueAtMaturity_( ifds::ValueAtMaturity, &ifds::s_FldProp_ValueAtMaturity )
, SelInvAmtType_( ifds::SelInvAmtType, &ifds::s_FldProp_SelInvAmtType )
, SelInvAmount_( ifds::SelInvAmount, &ifds::s_FldProp_SelInvAmount )
, PrincRedeemed_( ifds::PrincRedeemed, &ifds::s_FldProp_PrincRedeemed )
, AccruedInterest_( ifds::AccruedInterest, &ifds::s_FldProp_AccruedInterest )
, AdminFee_( ifds::AdminFee, &ifds::s_FldProp_AdminFee )
, MVA_( ifds::MVA, &ifds::s_FldProp_MVA )
, AmountNet_( ifds::AmountNet, &ifds::s_FldProp_AmountNet )
, InvSummId_( ifds::InvSummId, &ifds::s_FldProp_InvSummId )
, IsInvSelected_( ifds::IsInvSelected, &ifds::s_FldProp_IsInvSelected )
, IntRateType_( ifds::IntRateType, &ifds::s_FldProp_IntRateType )
, AddlAmt_( ifds::AddlAmt, &ifds::s_FldProp_AddlAmt )
{
   cFields_ = 38;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0421_VWRepeat_Record::~dsi_DSTC0421_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0421_VWRepeat_Record::clone()
{
   dsi_DSTC0421_VWRepeat_Record* p = new dsi_DSTC0421_VWRepeat_Record;
   p->IntInvestUUID_ = IntInvestUUID_;
   p->Fund_ = Fund_;
   p->Class_ = Class_;
   p->TransNum_ = TransNum_;
   p->TransId_ = TransId_;
   p->InvHisNumber_ = InvHisNumber_;
   p->InvHisStatus_ = InvHisStatus_;
   p->InvHisIntCalcMthd_ = InvHisIntCalcMthd_;
   p->InvHisIntRateType_ = InvHisIntRateType_;
   p->InvHisTerm_ = InvHisTerm_;
   p->InvHisIntRate_ = InvHisIntRate_;
   p->InvHisDepDate_ = InvHisDepDate_;
   p->InvHisMatDate_ = InvHisMatDate_;
   p->InvHisPrincipal_ = InvHisPrincipal_;
   p->InvHisIntFreq_ = InvHisIntFreq_;
   p->InvHisCurMktVal_ = InvHisCurMktVal_;
   p->InvHisLastIntCrdDate_ = InvHisLastIntCrdDate_;
   p->InvHisAcurdToDate_ = InvHisAcurdToDate_;
   p->ModDate_ = ModDate_;
   p->ModUser_ = ModUser_;
   p->Username_ = Username_;
   p->Version_ = Version_;
   p->InvHisLotId_ = InvHisLotId_;
   p->InvHisInvestId_ = InvHisInvestId_;
   p->Principal_ = Principal_;
   p->MarketValue_ = MarketValue_;
   p->ValueAtMaturity_ = ValueAtMaturity_;
   p->SelInvAmtType_ = SelInvAmtType_;
   p->SelInvAmount_ = SelInvAmount_;
   p->PrincRedeemed_ = PrincRedeemed_;
   p->AccruedInterest_ = AccruedInterest_;
   p->AdminFee_ = AdminFee_;
   p->MVA_ = MVA_;
   p->AmountNet_ = AmountNet_;
   p->InvSummId_ = InvSummId_;
   p->IsInvSelected_ = IsInvSelected_;
   p->IntRateType_ = IntRateType_;
   p->AddlAmt_ = AddlAmt_;
   return(p);
}

BFDataField* dsi_DSTC0421_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40006498: return ( &IntInvestUUID_ ); break; // IntInvestUUID
      case 40002227: return ( &Fund_ ); break; // Fund
      case 40002228: return ( &Class_ ); break; // Class
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40006469: return ( &InvHisNumber_ ); break; // InvHisNumber
      case 40006470: return ( &InvHisStatus_ ); break; // InvHisStatus
      case 40006471: return ( &InvHisIntCalcMthd_ ); break; // InvHisIntCalcMthd
      case 40006472: return ( &InvHisIntRateType_ ); break; // InvHisIntRateType
      case 40006473: return ( &InvHisTerm_ ); break; // InvHisTerm
      case 40006474: return ( &InvHisIntRate_ ); break; // InvHisIntRate
      case 40006475: return ( &InvHisDepDate_ ); break; // InvHisDepDate
      case 40006476: return ( &InvHisMatDate_ ); break; // InvHisMatDate
      case 40006477: return ( &InvHisPrincipal_ ); break; // InvHisPrincipal
      case 40006478: return ( &InvHisIntFreq_ ); break; // InvHisIntFreq
      case 40006479: return ( &InvHisCurMktVal_ ); break; // InvHisCurMktVal
      case 40006480: return ( &InvHisLastIntCrdDate_ ); break; // InvHisLastIntCrdDate
      case 40006481: return ( &InvHisAcurdToDate_ ); break; // InvHisAcurdToDate
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40000117: return ( &Username_ ); break; // Username
      case 40003739: return ( &Version_ ); break; // Version
      case 40006533: return ( &InvHisLotId_ ); break; // InvHisLotId
      case 40006534: return ( &InvHisInvestId_ ); break; // InvHisInvestId
      case 40006670: return ( &Principal_ ); break; // Principal
      case 40006721: return ( &MarketValue_ ); break; // MarketValue
      case 40006672: return ( &ValueAtMaturity_ ); break; // ValueAtMaturity
      case 40006714: return ( &SelInvAmtType_ ); break; // SelInvAmtType
      case 40006718: return ( &SelInvAmount_ ); break; // SelInvAmount
      case 40006673: return ( &PrincRedeemed_ ); break; // PrincRedeemed
      case 40006674: return ( &AccruedInterest_ ); break; // AccruedInterest
      case 40000660: return ( &AdminFee_ ); break; // AdminFee
      case 40006675: return ( &MVA_ ); break; // MVA
      case 40006676: return ( &AmountNet_ ); break; // AmountNet
      case 40004394: return ( &InvSummId_ ); break; // InvSummId
      case 40006724: return ( &IsInvSelected_ ); break; // IsInvSelected
      case 40006515: return ( &IntRateType_ ); break; // IntRateType
      case 40006512: return ( &AddlAmt_ ); break; // AddlAmt
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0421_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0421_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0421_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 38 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &IntInvestUUID_; break;
            case 1: aFlds_[1] = &Fund_; break;
            case 2: aFlds_[2] = &Class_; break;
            case 3: aFlds_[3] = &TransNum_; break;
            case 4: aFlds_[4] = &TransId_; break;
            case 5: aFlds_[5] = &InvHisNumber_; break;
            case 6: aFlds_[6] = &InvHisStatus_; break;
            case 7: aFlds_[7] = &InvHisIntCalcMthd_; break;
            case 8: aFlds_[8] = &InvHisIntRateType_; break;
            case 9: aFlds_[9] = &InvHisTerm_; break;
            case 10: aFlds_[10] = &InvHisIntRate_; break;
            case 11: aFlds_[11] = &InvHisDepDate_; break;
            case 12: aFlds_[12] = &InvHisMatDate_; break;
            case 13: aFlds_[13] = &InvHisPrincipal_; break;
            case 14: aFlds_[14] = &InvHisIntFreq_; break;
            case 15: aFlds_[15] = &InvHisCurMktVal_; break;
            case 16: aFlds_[16] = &InvHisLastIntCrdDate_; break;
            case 17: aFlds_[17] = &InvHisAcurdToDate_; break;
            case 18: aFlds_[18] = &ModDate_; break;
            case 19: aFlds_[19] = &ModUser_; break;
            case 20: aFlds_[20] = &Username_; break;
            case 21: aFlds_[21] = &Version_; break;
            case 22: aFlds_[22] = &InvHisLotId_; break;
            case 23: aFlds_[23] = &InvHisInvestId_; break;
            case 24: aFlds_[24] = &Principal_; break;
            case 25: aFlds_[25] = &MarketValue_; break;
            case 26: aFlds_[26] = &ValueAtMaturity_; break;
            case 27: aFlds_[27] = &SelInvAmtType_; break;
            case 28: aFlds_[28] = &SelInvAmount_; break;
            case 29: aFlds_[29] = &PrincRedeemed_; break;
            case 30: aFlds_[30] = &AccruedInterest_; break;
            case 31: aFlds_[31] = &AdminFee_; break;
            case 32: aFlds_[32] = &MVA_; break;
            case 33: aFlds_[33] = &AmountNet_; break;
            case 34: aFlds_[34] = &InvSummId_; break;
            case 35: aFlds_[35] = &IsInvSelected_; break;
            case 36: aFlds_[36] = &IntRateType_; break;
            case 37: aFlds_[37] = &AddlAmt_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0421_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0421_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0421_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0421_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 992 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0421_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0421_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0421_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40006498: return( true );
      case 40002227: return( true );
      case 40002228: return( true );
      case 40000096: return( true );
      case 40000063: return( true );
      case 40006469: return( true );
      case 40006470: return( true );
      case 40006471: return( true );
      case 40006472: return( true );
      case 40006473: return( true );
      case 40006474: return( true );
      case 40006475: return( true );
      case 40006476: return( true );
      case 40006477: return( true );
      case 40006478: return( true );
      case 40006479: return( true );
      case 40006480: return( true );
      case 40006481: return( true );
      case 40000217: return( true );
      case 40000218: return( true );
      case 40000117: return( true );
      case 40003739: return( true );
      case 40006533: return( true );
      case 40006534: return( true );
      case 40006670: return( true );
      case 40006721: return( true );
      case 40006672: return( true );
      case 40006714: return( true );
      case 40006718: return( true );
      case 40006673: return( true );
      case 40006674: return( true );
      case 40000660: return( true );
      case 40006675: return( true );
      case 40006676: return( true );
      case 40004394: return( true );
      case 40006724: return( true );
      case 40006515: return( true );
      case 40006512: return( true );
   }
   return false;
}

