// BFDataImpl implementation file for DataSet DSTC0118.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0118_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0118_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0118_VWRepeat_Record() { return new dsi_DSTC0118_VWRepeat_Record; }

dsi_DSTC0118_VWRepeat_Record::dsi_DSTC0118_VWRepeat_Record()
: BFDataImpl( 40002449 )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, SIN_( ifds::SIN, &ifds::s_FldProp_SIN )
, LastName_( ifds::LastName, &ifds::s_FldProp_LastName )
, FirstName_( ifds::FirstName, &ifds::s_FldProp_FirstName )
, AcctType_( ifds::AcctType, &ifds::s_FldProp_AcctType )
, AcctDesignation_( ifds::AcctDesignation, &ifds::s_FldProp_AcctDesignation )
, AcctStatus_( ifds::AcctStatus, &ifds::s_FldProp_AcctStatus )
, AltAccount_( ifds::AltAccount, &ifds::s_FldProp_AltAccount )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, SalesRepCode_( ifds::SalesRepCode, &ifds::s_FldProp_SalesRepCode )
, InTrustJoint_( ifds::InTrustJoint, &ifds::s_FldProp_InTrustJoint )
, TaxType_( ifds::TaxType, &ifds::s_FldProp_TaxType )
, InTrustJointName_( ifds::InTrustJointName, &ifds::s_FldProp_InTrustJointName )
, IntermCode_( ifds::IntermCode, &ifds::s_FldProp_IntermCode )
, InterAccount_( ifds::InterAccount, &ifds::s_FldProp_InterAccount )
, Salutation_( ifds::Salutation, &ifds::s_FldProp_Salutation )
{
   cFields_ = 16;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0118_VWRepeat_Record::~dsi_DSTC0118_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0118_VWRepeat_Record::clone()
{
   dsi_DSTC0118_VWRepeat_Record* p = new dsi_DSTC0118_VWRepeat_Record;
   p->AccountNum_ = AccountNum_;
   p->SIN_ = SIN_;
   p->LastName_ = LastName_;
   p->FirstName_ = FirstName_;
   p->AcctType_ = AcctType_;
   p->AcctDesignation_ = AcctDesignation_;
   p->AcctStatus_ = AcctStatus_;
   p->AltAccount_ = AltAccount_;
   p->BrokerCode_ = BrokerCode_;
   p->SalesRepCode_ = SalesRepCode_;
   p->InTrustJoint_ = InTrustJoint_;
   p->TaxType_ = TaxType_;
   p->InTrustJointName_ = InTrustJointName_;
   p->IntermCode_ = IntermCode_;
   p->InterAccount_ = InterAccount_;
   p->Salutation_ = Salutation_;
   return(p);
}

BFDataField* dsi_DSTC0118_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40000132: return ( &SIN_ ); break; // SIN
      case 40000128: return ( &LastName_ ); break; // LastName
      case 40000129: return ( &FirstName_ ); break; // FirstName
      case 40000174: return ( &AcctType_ ); break; // AcctType
      case 40000178: return ( &AcctDesignation_ ); break; // AcctDesignation
      case 40000188: return ( &AcctStatus_ ); break; // AcctStatus
      case 40000173: return ( &AltAccount_ ); break; // AltAccount
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000046: return ( &SalesRepCode_ ); break; // SalesRepCode
      case 40002190: return ( &InTrustJoint_ ); break; // InTrustJoint
      case 40000134: return ( &TaxType_ ); break; // TaxType
      case 40002776: return ( &InTrustJointName_ ); break; // InTrustJointName
      case 40001160: return ( &IntermCode_ ); break; // IntermCode
      case 40000187: return ( &InterAccount_ ); break; // InterAccount
      case 40000416: return ( &Salutation_ ); break; // Salutation
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0118_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0118_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0118_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 16 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AccountNum_; break;
            case 1: aFlds_[1] = &SIN_; break;
            case 2: aFlds_[2] = &LastName_; break;
            case 3: aFlds_[3] = &FirstName_; break;
            case 4: aFlds_[4] = &AcctType_; break;
            case 5: aFlds_[5] = &AcctDesignation_; break;
            case 6: aFlds_[6] = &AcctStatus_; break;
            case 7: aFlds_[7] = &AltAccount_; break;
            case 8: aFlds_[8] = &BrokerCode_; break;
            case 9: aFlds_[9] = &SalesRepCode_; break;
            case 10: aFlds_[10] = &InTrustJoint_; break;
            case 11: aFlds_[11] = &TaxType_; break;
            case 12: aFlds_[12] = &InTrustJointName_; break;
            case 13: aFlds_[13] = &IntermCode_; break;
            case 14: aFlds_[14] = &InterAccount_; break;
            case 15: aFlds_[15] = &Salutation_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0118_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0118_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0118_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 80 );
}

unsigned long dsi_DSTC0118_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 844 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0118_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0118_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0118_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000040: return( true );
      case 40000132: return( true );
      case 40000128: return( true );
      case 40000129: return( true );
      case 40000174: return( true );
      case 40000178: return( true );
      case 40000188: return( true );
      case 40000173: return( true );
      case 40000044: return( true );
      case 40000046: return( true );
      case 40002190: return( true );
      case 40000134: return( true );
      case 40002776: return( true );
      case 40001160: return( true );
      case 40000187: return( true );
      case 40000416: return( true );
   }
   return false;
}

