// BFDataImpl implementation file for DataSet DSTC1052.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc1052_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC1052_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC1052_VWRepeat_Record() { return new dsi_DSTC1052_VWRepeat_Record; }

dsi_DSTC1052_VWRepeat_Record::dsi_DSTC1052_VWRepeat_Record()
: BFDataImpl( 40000638 )
, rxShrNumber_( ifds::rxShrNumber, &ifds::s_FldProp_rxShrNumber )
, AcctUseCode_( ifds::AcctUseCode, &ifds::s_FldProp_AcctUseCode )
, AcctUseDesc_( ifds::AcctUseDesc, &ifds::s_FldProp_AcctUseDesc )
, InstCode_( ifds::InstCode, &ifds::s_FldProp_InstCode )
, InstName_( ifds::InstName, &ifds::s_FldProp_InstName )
, SwiftCode_( ifds::SwiftCode, &ifds::s_FldProp_SwiftCode )
, RefNumber_( ifds::RefNumber, &ifds::s_FldProp_RefNumber )
, TransitNo_( ifds::TransitNo, &ifds::s_FldProp_TransitNo )
, BankAcctNum_( ifds::BankAcctNum, &ifds::s_FldProp_BankAcctNum )
, BankAcctName_( ifds::BankAcctName, &ifds::s_FldProp_BankAcctName )
, BankAcctType_( ifds::BankAcctType, &ifds::s_FldProp_BankAcctType )
, BankAcctTypeDesc_( ifds::BankAcctTypeDesc, &ifds::s_FldProp_BankAcctTypeDesc )
, BankAcctCurrency_( ifds::BankAcctCurrency, &ifds::s_FldProp_BankAcctCurrency )
, BankCurrDesc_( ifds::BankCurrDesc, &ifds::s_FldProp_BankCurrDesc )
, PayReason1_( ifds::PayReason1, &ifds::s_FldProp_PayReason1 )
, PayReason2_( ifds::PayReason2, &ifds::s_FldProp_PayReason2 )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, BankAcctVer_( ifds::BankAcctVer, &ifds::s_FldProp_BankAcctVer )
, BankAcctRid_( ifds::BankAcctRid, &ifds::s_FldProp_BankAcctRid )
{
   cFields_ = 24;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC1052_VWRepeat_Record::~dsi_DSTC1052_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC1052_VWRepeat_Record::clone()
{
   dsi_DSTC1052_VWRepeat_Record* p = new dsi_DSTC1052_VWRepeat_Record;
   p->rxShrNumber_ = rxShrNumber_;
   p->AcctUseCode_ = AcctUseCode_;
   p->AcctUseDesc_ = AcctUseDesc_;
   p->InstCode_ = InstCode_;
   p->InstName_ = InstName_;
   p->SwiftCode_ = SwiftCode_;
   p->RefNumber_ = RefNumber_;
   p->TransitNo_ = TransitNo_;
   p->BankAcctNum_ = BankAcctNum_;
   p->BankAcctName_ = BankAcctName_;
   p->BankAcctType_ = BankAcctType_;
   p->BankAcctTypeDesc_ = BankAcctTypeDesc_;
   p->BankAcctCurrency_ = BankAcctCurrency_;
   p->BankCurrDesc_ = BankCurrDesc_;
   p->PayReason1_ = PayReason1_;
   p->PayReason2_ = PayReason2_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->ModDate_ = ModDate_;
   p->Username_ = Username_;
   p->ModUser_ = ModUser_;
   p->ProcessDate_ = ProcessDate_;
   p->BankAcctVer_ = BankAcctVer_;
   p->BankAcctRid_ = BankAcctRid_;
   return(p);
}

BFDataField* dsi_DSTC1052_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000639: return ( &rxShrNumber_ ); break; // rxShrNumber
      case 40000640: return ( &AcctUseCode_ ); break; // AcctUseCode
      case 40000641: return ( &AcctUseDesc_ ); break; // AcctUseDesc
      case 40000244: return ( &InstCode_ ); break; // InstCode
      case 40000285: return ( &InstName_ ); break; // InstName
      case 40000245: return ( &SwiftCode_ ); break; // SwiftCode
      case 40000246: return ( &RefNumber_ ); break; // RefNumber
      case 40000247: return ( &TransitNo_ ); break; // TransitNo
      case 40000248: return ( &BankAcctNum_ ); break; // BankAcctNum
      case 40000249: return ( &BankAcctName_ ); break; // BankAcctName
      case 40000253: return ( &BankAcctType_ ); break; // BankAcctType
      case 40000254: return ( &BankAcctTypeDesc_ ); break; // BankAcctTypeDesc
      case 40000251: return ( &BankAcctCurrency_ ); break; // BankAcctCurrency
      case 40000252: return ( &BankCurrDesc_ ); break; // BankCurrDesc
      case 40000642: return ( &PayReason1_ ); break; // PayReason1
      case 40000643: return ( &PayReason2_ ); break; // PayReason2
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000956: return ( &BankAcctVer_ ); break; // BankAcctVer
      case 40000957: return ( &BankAcctRid_ ); break; // BankAcctRid
   }
   return( NULL );
}

const BFDataField* dsi_DSTC1052_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC1052_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC1052_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 24 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &rxShrNumber_; break;
            case 1: aFlds_[1] = &AcctUseCode_; break;
            case 2: aFlds_[2] = &AcctUseDesc_; break;
            case 3: aFlds_[3] = &InstCode_; break;
            case 4: aFlds_[4] = &InstName_; break;
            case 5: aFlds_[5] = &SwiftCode_; break;
            case 6: aFlds_[6] = &RefNumber_; break;
            case 7: aFlds_[7] = &TransitNo_; break;
            case 8: aFlds_[8] = &BankAcctNum_; break;
            case 9: aFlds_[9] = &BankAcctName_; break;
            case 10: aFlds_[10] = &BankAcctType_; break;
            case 11: aFlds_[11] = &BankAcctTypeDesc_; break;
            case 12: aFlds_[12] = &BankAcctCurrency_; break;
            case 13: aFlds_[13] = &BankCurrDesc_; break;
            case 14: aFlds_[14] = &PayReason1_; break;
            case 15: aFlds_[15] = &PayReason2_; break;
            case 16: aFlds_[16] = &EffectiveDate_; break;
            case 17: aFlds_[17] = &StopDate_; break;
            case 18: aFlds_[18] = &ModDate_; break;
            case 19: aFlds_[19] = &Username_; break;
            case 20: aFlds_[20] = &ModUser_; break;
            case 21: aFlds_[21] = &ProcessDate_; break;
            case 22: aFlds_[22] = &BankAcctVer_; break;
            case 23: aFlds_[23] = &BankAcctRid_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC1052_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC1052_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC1052_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC1052_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 1008 * sizeof( I_CHAR ) );
}

bool dsi_DSTC1052_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC1052_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC1052_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000639: return( true );
      case 40000640: return( true );
      case 40000641: return( true );
      case 40000244: return( true );
      case 40000285: return( true );
      case 40000245: return( true );
      case 40000246: return( true );
      case 40000247: return( true );
      case 40000248: return( true );
      case 40000249: return( true );
      case 40000253: return( true );
      case 40000254: return( true );
      case 40000251: return( true );
      case 40000252: return( true );
      case 40000642: return( true );
      case 40000643: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40000217: return( true );
      case 40000117: return( true );
      case 40000218: return( true );
      case 40000216: return( true );
      case 40000956: return( true );
      case 40000957: return( true );
   }
   return false;
}

