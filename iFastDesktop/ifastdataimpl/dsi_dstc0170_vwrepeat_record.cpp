// BFDataImpl implementation file for DataSet DSTC0170.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0170_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0170_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0170_VWRepeat_Record() { return new dsi_DSTC0170_VWRepeat_Record; }

dsi_DSTC0170_VWRepeat_Record::dsi_DSTC0170_VWRepeat_Record()
: BFDataImpl( 40002688 )
, ContractType_( ifds::ContractType, &ifds::s_FldProp_ContractType )
, PolicyYear_( ifds::PolicyYear, &ifds::s_FldProp_PolicyYear )
, PolicyTerm_( ifds::PolicyTerm, &ifds::s_FldProp_PolicyTerm )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, IssueDate_( ifds::IssueDate, &ifds::s_FldProp_IssueDate )
, GuarActive_( ifds::GuarActive, &ifds::s_FldProp_GuarActive )
, MaturDate_( ifds::MaturDate, &ifds::s_FldProp_MaturDate )
, GuarStatus_( ifds::GuarStatus, &ifds::s_FldProp_GuarStatus )
, RequiresGuarUnitAdjust_( ifds::RequiresGuarUnitAdjust, &ifds::s_FldProp_RequiresGuarUnitAdjust )
, GuarSuspect_( ifds::GuarSuspect, &ifds::s_FldProp_GuarSuspect )
, SegGuarMatRecId_( ifds::SegGuarMatRecId, &ifds::s_FldProp_SegGuarMatRecId )
, GuarContrTotal_( ifds::GuarContrTotal, &ifds::s_FldProp_GuarContrTotal )
{
   cFields_ = 12;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0170_VWRepeat_Record::~dsi_DSTC0170_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0170_VWRepeat_Record::clone()
{
   dsi_DSTC0170_VWRepeat_Record* p = new dsi_DSTC0170_VWRepeat_Record;
   p->ContractType_ = ContractType_;
   p->PolicyYear_ = PolicyYear_;
   p->PolicyTerm_ = PolicyTerm_;
   p->EffectiveDate_ = EffectiveDate_;
   p->IssueDate_ = IssueDate_;
   p->GuarActive_ = GuarActive_;
   p->MaturDate_ = MaturDate_;
   p->GuarStatus_ = GuarStatus_;
   p->RequiresGuarUnitAdjust_ = RequiresGuarUnitAdjust_;
   p->GuarSuspect_ = GuarSuspect_;
   p->SegGuarMatRecId_ = SegGuarMatRecId_;
   p->GuarContrTotal_ = GuarContrTotal_;
   return(p);
}

BFDataField* dsi_DSTC0170_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40001385: return ( &ContractType_ ); break; // ContractType
      case 40002593: return ( &PolicyYear_ ); break; // PolicyYear
      case 40002685: return ( &PolicyTerm_ ); break; // PolicyTerm
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000376: return ( &IssueDate_ ); break; // IssueDate
      case 40004406: return ( &GuarActive_ ); break; // GuarActive
      case 40002689: return ( &MaturDate_ ); break; // MaturDate
      case 40004413: return ( &GuarStatus_ ); break; // GuarStatus
      case 40005196: return ( &RequiresGuarUnitAdjust_ ); break; // RequiresGuarUnitAdjust
      case 40005197: return ( &GuarSuspect_ ); break; // GuarSuspect
      case 40005252: return ( &SegGuarMatRecId_ ); break; // SegGuarMatRecId
      case 40005251: return ( &GuarContrTotal_ ); break; // GuarContrTotal
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0170_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0170_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0170_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 12 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &ContractType_; break;
            case 1: aFlds_[1] = &PolicyYear_; break;
            case 2: aFlds_[2] = &PolicyTerm_; break;
            case 3: aFlds_[3] = &EffectiveDate_; break;
            case 4: aFlds_[4] = &IssueDate_; break;
            case 5: aFlds_[5] = &GuarActive_; break;
            case 6: aFlds_[6] = &MaturDate_; break;
            case 7: aFlds_[7] = &GuarStatus_; break;
            case 8: aFlds_[8] = &RequiresGuarUnitAdjust_; break;
            case 9: aFlds_[9] = &GuarSuspect_; break;
            case 10: aFlds_[10] = &SegGuarMatRecId_; break;
            case 11: aFlds_[11] = &GuarContrTotal_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0170_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0170_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0170_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0170_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 298 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0170_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0170_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0170_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40001385: return( true );
      case 40002593: return( true );
      case 40002685: return( true );
      case 40000327: return( true );
      case 40000376: return( true );
      case 40004406: return( true );
      case 40002689: return( true );
      case 40004413: return( true );
      case 40005196: return( true );
      case 40005197: return( true );
      case 40005252: return( true );
      case 40005251: return( true );
   }
   return false;
}

