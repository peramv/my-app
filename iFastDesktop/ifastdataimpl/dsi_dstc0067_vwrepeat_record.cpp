// BFDataImpl implementation file for DataSet DSTC0067.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0067_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0067_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0067_VWRepeat_Record() { return new dsi_DSTC0067_VWRepeat_Record; }

dsi_DSTC0067_VWRepeat_Record::dsi_DSTC0067_VWRepeat_Record()
: BFDataImpl( 40000838 )
, PlanType_( ifds::PlanType, &ifds::s_FldProp_PlanType )
, RIFId_( ifds::RIFId, &ifds::s_FldProp_RIFId )
, RecType_( ifds::RecType, &ifds::s_FldProp_RecType )
, RecTypeDesc_( ifds::RecTypeDesc, &ifds::s_FldProp_RecTypeDesc )
, SuppFedTax_( ifds::SuppFedTax, &ifds::s_FldProp_SuppFedTax )
, SuppProvTax_( ifds::SuppProvTax, &ifds::s_FldProp_SuppProvTax )
, FedRate_( ifds::FedRate, &ifds::s_FldProp_FedRate )
, FedRatePUD_( ifds::FedRatePUD, &ifds::s_FldProp_FedRatePUD )
, ProvRate_( ifds::ProvRate, &ifds::s_FldProp_ProvRate )
, ProvRatePUD_( ifds::ProvRatePUD, &ifds::s_FldProp_ProvRatePUD )
, RRIFAmount_( ifds::RRIFAmount, &ifds::s_FldProp_RRIFAmount )
, GrossNetMethod_( ifds::GrossNetMethod, &ifds::s_FldProp_GrossNetMethod )
, NetAmt_( ifds::NetAmt, &ifds::s_FldProp_NetAmt )
, NowPlanValue_( ifds::NowPlanValue, &ifds::s_FldProp_NowPlanValue )
, PYEPlanValue_( ifds::PYEPlanValue, &ifds::s_FldProp_PYEPlanValue )
, CalcMandYr_( ifds::CalcMandYr, &ifds::s_FldProp_CalcMandYr )
, CalcMaxYr_( ifds::CalcMaxYr, &ifds::s_FldProp_CalcMaxYr )
, MandAmtPay_( ifds::MandAmtPay, &ifds::s_FldProp_MandAmtPay )
, MandAmtYr_( ifds::MandAmtYr, &ifds::s_FldProp_MandAmtYr )
, RIFPayType_( ifds::RIFPayType, &ifds::s_FldProp_RIFPayType )
, PayTypeDesc_( ifds::PayTypeDesc, &ifds::s_FldProp_PayTypeDesc )
, InstCode_( ifds::InstCode, &ifds::s_FldProp_InstCode )
, InstName_( ifds::InstName, &ifds::s_FldProp_InstName )
, TransitNo_( ifds::TransitNo, &ifds::s_FldProp_TransitNo )
, BankAcctNum_( ifds::BankAcctNum, &ifds::s_FldProp_BankAcctNum )
, PayOption_( ifds::PayOption, &ifds::s_FldProp_PayOption )
, PayOptionDesc_( ifds::PayOptionDesc, &ifds::s_FldProp_PayOptionDesc )
, MaxAmtYr_( ifds::MaxAmtYr, &ifds::s_FldProp_MaxAmtYr )
, TaxOnMin_( ifds::TaxOnMin, &ifds::s_FldProp_TaxOnMin )
, OverrideAmtYr_( ifds::OverrideAmtYr, &ifds::s_FldProp_OverrideAmtYr )
, RIFSrcOfFund_( ifds::RIFSrcOfFund, &ifds::s_FldProp_RIFSrcOfFund )
, RIFSrcOfFundDesc_( ifds::RIFSrcOfFundDesc, &ifds::s_FldProp_RIFSrcOfFundDesc )
, January_( ifds::January, &ifds::s_FldProp_January )
, February_( ifds::February, &ifds::s_FldProp_February )
, March_( ifds::March, &ifds::s_FldProp_March )
, April_( ifds::April, &ifds::s_FldProp_April )
, May_( ifds::May, &ifds::s_FldProp_May )
, June_( ifds::June, &ifds::s_FldProp_June )
, July_( ifds::July, &ifds::s_FldProp_July )
, August_( ifds::August, &ifds::s_FldProp_August )
, September_( ifds::September, &ifds::s_FldProp_September )
, October_( ifds::October, &ifds::s_FldProp_October )
, November_( ifds::November, &ifds::s_FldProp_November )
, December_( ifds::December, &ifds::s_FldProp_December )
, EndOfMonth_( ifds::EndOfMonth, &ifds::s_FldProp_EndOfMonth )
, LastProcessDate_( ifds::LastProcessDate, &ifds::s_FldProp_LastProcessDate )
, AddrCode_( ifds::AddrCode, &ifds::s_FldProp_AddrCode )
, GoodBad_( ifds::GoodBad, &ifds::s_FldProp_GoodBad )
, EffectiveFrom_( ifds::EffectiveFrom, &ifds::s_FldProp_EffectiveFrom )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, AddrLine1_( ifds::AddrLine1, &ifds::s_FldProp_AddrLine1 )
, AddrLine2_( ifds::AddrLine2, &ifds::s_FldProp_AddrLine2 )
, AddrLine3_( ifds::AddrLine3, &ifds::s_FldProp_AddrLine3 )
, AddrLine4_( ifds::AddrLine4, &ifds::s_FldProp_AddrLine4 )
, AddrLine5_( ifds::AddrLine5, &ifds::s_FldProp_AddrLine5 )
, PostalCode_( ifds::PostalCode, &ifds::s_FldProp_PostalCode )
, IndexRate_( ifds::IndexRate, &ifds::s_FldProp_IndexRate )
, Qualified_( ifds::Qualified, &ifds::s_FldProp_Qualified )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, BatchEffective_( ifds::BatchEffective, &ifds::s_FldProp_BatchEffective )
, BatchName_( ifds::BatchName, &ifds::s_FldProp_BatchName )
, RRIFBatchTrace_( ifds::RRIFBatchTrace, &ifds::s_FldProp_RRIFBatchTrace )
, SpouseBirth_( ifds::SpouseBirth, &ifds::s_FldProp_SpouseBirth )
, PayTerm_( ifds::PayTerm, &ifds::s_FldProp_PayTerm )
, PayTermDesc_( ifds::PayTermDesc, &ifds::s_FldProp_PayTermDesc )
, Factor_( ifds::Factor, &ifds::s_FldProp_Factor )
, CansimRate_( ifds::CansimRate, &ifds::s_FldProp_CansimRate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, VersionNum_( ifds::VersionNum, &ifds::s_FldProp_VersionNum )
, Allocations_( ifds::Allocations, &ifds::s_FldProp_Allocations )
, AccountTo_( ifds::AccountTo, &ifds::s_FldProp_AccountTo )
, PreYrPercent_( ifds::PreYrPercent, &ifds::s_FldProp_PreYrPercent )
, ToAllocations_( ifds::ToAllocations, &ifds::s_FldProp_ToAllocations )
, OverrideUnusedMax_( ifds::OverrideUnusedMax, &ifds::s_FldProp_OverrideUnusedMax )
, PYUnusedMax_( ifds::PYUnusedMax, &ifds::s_FldProp_PYUnusedMax )
, Frequency_( ifds::Frequency, &ifds::s_FldProp_Frequency )
, DayOfWeek_( ifds::DayOfWeek, &ifds::s_FldProp_DayOfWeek )
, DaysOfMonth_( ifds::DaysOfMonth, &ifds::s_FldProp_DaysOfMonth )
, RefTempInc_( ifds::RefTempInc, &ifds::s_FldProp_RefTempInc )
, AdjLifeInc_( ifds::AdjLifeInc, &ifds::s_FldProp_AdjLifeInc )
, BankType_( ifds::BankType, &ifds::s_FldProp_BankType )
, OrigPlanDeff_( ifds::OrigPlanDeff, &ifds::s_FldProp_OrigPlanDeff )
, OrigPlanDeffApplied_( ifds::OrigPlanDeffApplied, &ifds::s_FldProp_OrigPlanDeffApplied )
, ExternalAssets_( ifds::ExternalAssets, &ifds::s_FldProp_ExternalAssets )
, RRIFSrcOfFund_( ifds::RRIFSrcOfFund, &ifds::s_FldProp_RRIFSrcOfFund )
, RRIFSrcOfAcct_( ifds::RRIFSrcOfAcct, &ifds::s_FldProp_RRIFSrcOfAcct )
{
   cFields_ = 88;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0067_VWRepeat_Record::~dsi_DSTC0067_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0067_VWRepeat_Record::clone()
{
   dsi_DSTC0067_VWRepeat_Record* p = new dsi_DSTC0067_VWRepeat_Record;
   p->PlanType_ = PlanType_;
   p->RIFId_ = RIFId_;
   p->RecType_ = RecType_;
   p->RecTypeDesc_ = RecTypeDesc_;
   p->SuppFedTax_ = SuppFedTax_;
   p->SuppProvTax_ = SuppProvTax_;
   p->FedRate_ = FedRate_;
   p->FedRatePUD_ = FedRatePUD_;
   p->ProvRate_ = ProvRate_;
   p->ProvRatePUD_ = ProvRatePUD_;
   p->RRIFAmount_ = RRIFAmount_;
   p->GrossNetMethod_ = GrossNetMethod_;
   p->NetAmt_ = NetAmt_;
   p->NowPlanValue_ = NowPlanValue_;
   p->PYEPlanValue_ = PYEPlanValue_;
   p->CalcMandYr_ = CalcMandYr_;
   p->CalcMaxYr_ = CalcMaxYr_;
   p->MandAmtPay_ = MandAmtPay_;
   p->MandAmtYr_ = MandAmtYr_;
   p->RIFPayType_ = RIFPayType_;
   p->PayTypeDesc_ = PayTypeDesc_;
   p->InstCode_ = InstCode_;
   p->InstName_ = InstName_;
   p->TransitNo_ = TransitNo_;
   p->BankAcctNum_ = BankAcctNum_;
   p->PayOption_ = PayOption_;
   p->PayOptionDesc_ = PayOptionDesc_;
   p->MaxAmtYr_ = MaxAmtYr_;
   p->TaxOnMin_ = TaxOnMin_;
   p->OverrideAmtYr_ = OverrideAmtYr_;
   p->RIFSrcOfFund_ = RIFSrcOfFund_;
   p->RIFSrcOfFundDesc_ = RIFSrcOfFundDesc_;
   p->January_ = January_;
   p->February_ = February_;
   p->March_ = March_;
   p->April_ = April_;
   p->May_ = May_;
   p->June_ = June_;
   p->July_ = July_;
   p->August_ = August_;
   p->September_ = September_;
   p->October_ = October_;
   p->November_ = November_;
   p->December_ = December_;
   p->EndOfMonth_ = EndOfMonth_;
   p->LastProcessDate_ = LastProcessDate_;
   p->AddrCode_ = AddrCode_;
   p->GoodBad_ = GoodBad_;
   p->EffectiveFrom_ = EffectiveFrom_;
   p->ModDate_ = ModDate_;
   p->StopDate_ = StopDate_;
   p->AddrLine1_ = AddrLine1_;
   p->AddrLine2_ = AddrLine2_;
   p->AddrLine3_ = AddrLine3_;
   p->AddrLine4_ = AddrLine4_;
   p->AddrLine5_ = AddrLine5_;
   p->PostalCode_ = PostalCode_;
   p->IndexRate_ = IndexRate_;
   p->Qualified_ = Qualified_;
   p->Username_ = Username_;
   p->BatchEffective_ = BatchEffective_;
   p->BatchName_ = BatchName_;
   p->RRIFBatchTrace_ = RRIFBatchTrace_;
   p->SpouseBirth_ = SpouseBirth_;
   p->PayTerm_ = PayTerm_;
   p->PayTermDesc_ = PayTermDesc_;
   p->Factor_ = Factor_;
   p->CansimRate_ = CansimRate_;
   p->ModUser_ = ModUser_;
   p->ProcessDate_ = ProcessDate_;
   p->VersionNum_ = VersionNum_;
   p->Allocations_ = Allocations_;
   p->AccountTo_ = AccountTo_;
   p->PreYrPercent_ = PreYrPercent_;
   p->ToAllocations_ = ToAllocations_;
   p->OverrideUnusedMax_ = OverrideUnusedMax_;
   p->PYUnusedMax_ = PYUnusedMax_;
   p->Frequency_ = Frequency_;
   p->DayOfWeek_ = DayOfWeek_;
   p->DaysOfMonth_ = DaysOfMonth_;
   p->RefTempInc_ = RefTempInc_;
   p->AdjLifeInc_ = AdjLifeInc_;
   p->BankType_ = BankType_;
   p->OrigPlanDeff_ = OrigPlanDeff_;
   p->OrigPlanDeffApplied_ = OrigPlanDeffApplied_;
   p->ExternalAssets_ = ExternalAssets_;
   p->RRIFSrcOfFund_ = RRIFSrcOfFund_;
   p->RRIFSrcOfAcct_ = RRIFSrcOfAcct_;
   return(p);
}

BFDataField* dsi_DSTC0067_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000839: return ( &PlanType_ ); break; // PlanType
      case 40000840: return ( &RIFId_ ); break; // RIFId
      case 40000411: return ( &RecType_ ); break; // RecType
      case 40000841: return ( &RecTypeDesc_ ); break; // RecTypeDesc
      case 40000842: return ( &SuppFedTax_ ); break; // SuppFedTax
      case 40000843: return ( &SuppProvTax_ ); break; // SuppProvTax
      case 40000844: return ( &FedRate_ ); break; // FedRate
      case 40000845: return ( &FedRatePUD_ ); break; // FedRatePUD
      case 40000846: return ( &ProvRate_ ); break; // ProvRate
      case 40000847: return ( &ProvRatePUD_ ); break; // ProvRatePUD
      case 40002807: return ( &RRIFAmount_ ); break; // RRIFAmount
      case 40005728: return ( &GrossNetMethod_ ); break; // GrossNetMethod
      case 40000351: return ( &NetAmt_ ); break; // NetAmt
      case 40000848: return ( &NowPlanValue_ ); break; // NowPlanValue
      case 40000849: return ( &PYEPlanValue_ ); break; // PYEPlanValue
      case 40000850: return ( &CalcMandYr_ ); break; // CalcMandYr
      case 40000851: return ( &CalcMaxYr_ ); break; // CalcMaxYr
      case 40000852: return ( &MandAmtPay_ ); break; // MandAmtPay
      case 40000853: return ( &MandAmtYr_ ); break; // MandAmtYr
      case 40001531: return ( &RIFPayType_ ); break; // RIFPayType
      case 40000243: return ( &PayTypeDesc_ ); break; // PayTypeDesc
      case 40000244: return ( &InstCode_ ); break; // InstCode
      case 40000285: return ( &InstName_ ); break; // InstName
      case 40000247: return ( &TransitNo_ ); break; // TransitNo
      case 40000248: return ( &BankAcctNum_ ); break; // BankAcctNum
      case 40000854: return ( &PayOption_ ); break; // PayOption
      case 40000855: return ( &PayOptionDesc_ ); break; // PayOptionDesc
      case 40000856: return ( &MaxAmtYr_ ); break; // MaxAmtYr
      case 40000857: return ( &TaxOnMin_ ); break; // TaxOnMin
      case 40000858: return ( &OverrideAmtYr_ ); break; // OverrideAmtYr
      case 40001372: return ( &RIFSrcOfFund_ ); break; // RIFSrcOfFund
      case 40001373: return ( &RIFSrcOfFundDesc_ ); break; // RIFSrcOfFundDesc
      case 40000257: return ( &January_ ); break; // January
      case 40000258: return ( &February_ ); break; // February
      case 40000259: return ( &March_ ); break; // March
      case 40000260: return ( &April_ ); break; // April
      case 40000261: return ( &May_ ); break; // May
      case 40000262: return ( &June_ ); break; // June
      case 40000263: return ( &July_ ); break; // July
      case 40000264: return ( &August_ ); break; // August
      case 40000265: return ( &September_ ); break; // September
      case 40000266: return ( &October_ ); break; // October
      case 40000267: return ( &November_ ); break; // November
      case 40000268: return ( &December_ ); break; // December
      case 40000272: return ( &EndOfMonth_ ); break; // EndOfMonth
      case 40000276: return ( &LastProcessDate_ ); break; // LastProcessDate
      case 40000277: return ( &AddrCode_ ); break; // AddrCode
      case 40000496: return ( &GoodBad_ ); break; // GoodBad
      case 40000223: return ( &EffectiveFrom_ ); break; // EffectiveFrom
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40000280: return ( &AddrLine1_ ); break; // AddrLine1
      case 40000281: return ( &AddrLine2_ ); break; // AddrLine2
      case 40000282: return ( &AddrLine3_ ); break; // AddrLine3
      case 40000283: return ( &AddrLine4_ ); break; // AddrLine4
      case 40000284: return ( &AddrLine5_ ); break; // AddrLine5
      case 40000143: return ( &PostalCode_ ); break; // PostalCode
      case 40000859: return ( &IndexRate_ ); break; // IndexRate
      case 40000860: return ( &Qualified_ ); break; // Qualified
      case 40000117: return ( &Username_ ); break; // Username
      case 40000861: return ( &BatchEffective_ ); break; // BatchEffective
      case 40000653: return ( &BatchName_ ); break; // BatchName
      case 40001702: return ( &RRIFBatchTrace_ ); break; // RRIFBatchTrace
      case 40000862: return ( &SpouseBirth_ ); break; // SpouseBirth
      case 40000863: return ( &PayTerm_ ); break; // PayTerm
      case 40000864: return ( &PayTermDesc_ ); break; // PayTermDesc
      case 40000865: return ( &Factor_ ); break; // Factor
      case 40000866: return ( &CansimRate_ ); break; // CansimRate
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000228: return ( &VersionNum_ ); break; // VersionNum
      case 40002849: return ( &Allocations_ ); break; // Allocations
      case 40000646: return ( &AccountTo_ ); break; // AccountTo
      case 40003593: return ( &PreYrPercent_ ); break; // PreYrPercent
      case 40003932: return ( &ToAllocations_ ); break; // ToAllocations
      case 40005534: return ( &OverrideUnusedMax_ ); break; // OverrideUnusedMax
      case 40005536: return ( &PYUnusedMax_ ); break; // PYUnusedMax
      case 40000730: return ( &Frequency_ ); break; // Frequency
      case 40000275: return ( &DayOfWeek_ ); break; // DayOfWeek
      case 40005673: return ( &DaysOfMonth_ ); break; // DaysOfMonth
      case 40005720: return ( &RefTempInc_ ); break; // RefTempInc
      case 40005721: return ( &AdjLifeInc_ ); break; // AdjLifeInc
      case 40002299: return ( &BankType_ ); break; // BankType
      case 40006275: return ( &OrigPlanDeff_ ); break; // OrigPlanDeff
      case 40006319: return ( &OrigPlanDeffApplied_ ); break; // OrigPlanDeffApplied
      case 40006729: return ( &ExternalAssets_ ); break; // ExternalAssets
      case 40006878: return ( &RRIFSrcOfFund_ ); break; // RRIFSrcOfFund
      case 40006877: return ( &RRIFSrcOfAcct_ ); break; // RRIFSrcOfAcct
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0067_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0067_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0067_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 88 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &PlanType_; break;
            case 1: aFlds_[1] = &RIFId_; break;
            case 2: aFlds_[2] = &RecType_; break;
            case 3: aFlds_[3] = &RecTypeDesc_; break;
            case 4: aFlds_[4] = &SuppFedTax_; break;
            case 5: aFlds_[5] = &SuppProvTax_; break;
            case 6: aFlds_[6] = &FedRate_; break;
            case 7: aFlds_[7] = &FedRatePUD_; break;
            case 8: aFlds_[8] = &ProvRate_; break;
            case 9: aFlds_[9] = &ProvRatePUD_; break;
            case 10: aFlds_[10] = &RRIFAmount_; break;
            case 11: aFlds_[11] = &GrossNetMethod_; break;
            case 12: aFlds_[12] = &NetAmt_; break;
            case 13: aFlds_[13] = &NowPlanValue_; break;
            case 14: aFlds_[14] = &PYEPlanValue_; break;
            case 15: aFlds_[15] = &CalcMandYr_; break;
            case 16: aFlds_[16] = &CalcMaxYr_; break;
            case 17: aFlds_[17] = &MandAmtPay_; break;
            case 18: aFlds_[18] = &MandAmtYr_; break;
            case 19: aFlds_[19] = &RIFPayType_; break;
            case 20: aFlds_[20] = &PayTypeDesc_; break;
            case 21: aFlds_[21] = &InstCode_; break;
            case 22: aFlds_[22] = &InstName_; break;
            case 23: aFlds_[23] = &TransitNo_; break;
            case 24: aFlds_[24] = &BankAcctNum_; break;
            case 25: aFlds_[25] = &PayOption_; break;
            case 26: aFlds_[26] = &PayOptionDesc_; break;
            case 27: aFlds_[27] = &MaxAmtYr_; break;
            case 28: aFlds_[28] = &TaxOnMin_; break;
            case 29: aFlds_[29] = &OverrideAmtYr_; break;
            case 30: aFlds_[30] = &RIFSrcOfFund_; break;
            case 31: aFlds_[31] = &RIFSrcOfFundDesc_; break;
            case 32: aFlds_[32] = &January_; break;
            case 33: aFlds_[33] = &February_; break;
            case 34: aFlds_[34] = &March_; break;
            case 35: aFlds_[35] = &April_; break;
            case 36: aFlds_[36] = &May_; break;
            case 37: aFlds_[37] = &June_; break;
            case 38: aFlds_[38] = &July_; break;
            case 39: aFlds_[39] = &August_; break;
            case 40: aFlds_[40] = &September_; break;
            case 41: aFlds_[41] = &October_; break;
            case 42: aFlds_[42] = &November_; break;
            case 43: aFlds_[43] = &December_; break;
            case 44: aFlds_[44] = &EndOfMonth_; break;
            case 45: aFlds_[45] = &LastProcessDate_; break;
            case 46: aFlds_[46] = &AddrCode_; break;
            case 47: aFlds_[47] = &GoodBad_; break;
            case 48: aFlds_[48] = &EffectiveFrom_; break;
            case 49: aFlds_[49] = &ModDate_; break;
            case 50: aFlds_[50] = &StopDate_; break;
            case 51: aFlds_[51] = &AddrLine1_; break;
            case 52: aFlds_[52] = &AddrLine2_; break;
            case 53: aFlds_[53] = &AddrLine3_; break;
            case 54: aFlds_[54] = &AddrLine4_; break;
            case 55: aFlds_[55] = &AddrLine5_; break;
            case 56: aFlds_[56] = &PostalCode_; break;
            case 57: aFlds_[57] = &IndexRate_; break;
            case 58: aFlds_[58] = &Qualified_; break;
            case 59: aFlds_[59] = &Username_; break;
            case 60: aFlds_[60] = &BatchEffective_; break;
            case 61: aFlds_[61] = &BatchName_; break;
            case 62: aFlds_[62] = &RRIFBatchTrace_; break;
            case 63: aFlds_[63] = &SpouseBirth_; break;
            case 64: aFlds_[64] = &PayTerm_; break;
            case 65: aFlds_[65] = &PayTermDesc_; break;
            case 66: aFlds_[66] = &Factor_; break;
            case 67: aFlds_[67] = &CansimRate_; break;
            case 68: aFlds_[68] = &ModUser_; break;
            case 69: aFlds_[69] = &ProcessDate_; break;
            case 70: aFlds_[70] = &VersionNum_; break;
            case 71: aFlds_[71] = &Allocations_; break;
            case 72: aFlds_[72] = &AccountTo_; break;
            case 73: aFlds_[73] = &PreYrPercent_; break;
            case 74: aFlds_[74] = &ToAllocations_; break;
            case 75: aFlds_[75] = &OverrideUnusedMax_; break;
            case 76: aFlds_[76] = &PYUnusedMax_; break;
            case 77: aFlds_[77] = &Frequency_; break;
            case 78: aFlds_[78] = &DayOfWeek_; break;
            case 79: aFlds_[79] = &DaysOfMonth_; break;
            case 80: aFlds_[80] = &RefTempInc_; break;
            case 81: aFlds_[81] = &AdjLifeInc_; break;
            case 82: aFlds_[82] = &BankType_; break;
            case 83: aFlds_[83] = &OrigPlanDeff_; break;
            case 84: aFlds_[84] = &OrigPlanDeffApplied_; break;
            case 85: aFlds_[85] = &ExternalAssets_; break;
            case 86: aFlds_[86] = &RRIFSrcOfFund_; break;
            case 87: aFlds_[87] = &RRIFSrcOfAcct_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0067_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0067_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0067_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0067_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 2408 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0067_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0067_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0067_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000839: return( true );
      case 40000840: return( true );
      case 40000411: return( true );
      case 40000841: return( true );
      case 40000842: return( true );
      case 40000843: return( true );
      case 40000844: return( true );
      case 40000845: return( true );
      case 40000846: return( true );
      case 40000847: return( true );
      case 40002807: return( true );
      case 40005728: return( true );
      case 40000351: return( true );
      case 40000848: return( true );
      case 40000849: return( true );
      case 40000850: return( true );
      case 40000851: return( true );
      case 40000852: return( true );
      case 40000853: return( true );
      case 40001531: return( true );
      case 40000243: return( true );
      case 40000244: return( true );
      case 40000285: return( true );
      case 40000247: return( true );
      case 40000248: return( true );
      case 40000854: return( true );
      case 40000855: return( true );
      case 40000856: return( true );
      case 40000857: return( true );
      case 40000858: return( true );
      case 40001372: return( true );
      case 40001373: return( true );
      case 40000257: return( true );
      case 40000258: return( true );
      case 40000259: return( true );
      case 40000260: return( true );
      case 40000261: return( true );
      case 40000262: return( true );
      case 40000263: return( true );
      case 40000264: return( true );
      case 40000265: return( true );
      case 40000266: return( true );
      case 40000267: return( true );
      case 40000268: return( true );
      case 40000272: return( true );
      case 40000276: return( true );
      case 40000277: return( true );
      case 40000496: return( true );
      case 40000223: return( true );
      case 40000217: return( true );
      case 40000279: return( true );
      case 40000280: return( true );
      case 40000281: return( true );
      case 40000282: return( true );
      case 40000283: return( true );
      case 40000284: return( true );
      case 40000143: return( true );
      case 40000859: return( true );
      case 40000860: return( true );
      case 40000117: return( true );
      case 40000861: return( true );
      case 40000653: return( true );
      case 40001702: return( true );
      case 40000862: return( true );
      case 40000863: return( true );
      case 40000864: return( true );
      case 40000865: return( true );
      case 40000866: return( true );
      case 40000218: return( true );
      case 40000216: return( true );
      case 40000228: return( true );
      case 40002849: return( true );
      case 40000646: return( true );
      case 40003593: return( true );
      case 40003932: return( true );
      case 40005534: return( true );
      case 40005536: return( true );
      case 40000730: return( true );
      case 40000275: return( true );
      case 40005673: return( true );
      case 40005720: return( true );
      case 40005721: return( true );
      case 40002299: return( true );
      case 40006275: return( true );
      case 40006319: return( true );
      case 40006729: return( true );
      case 40006878: return( true );
      case 40006877: return( true );
   }
   return false;
}

