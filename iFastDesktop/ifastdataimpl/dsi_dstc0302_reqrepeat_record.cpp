// BFDataImpl implementation file for DataSet DSTC0302.REQRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0302_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0302_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0302_REQRepeat_Record() { return new dsi_DSTC0302_REQRepeat_Record; }

dsi_DSTC0302_REQRepeat_Record::dsi_DSTC0302_REQRepeat_Record()
: BFDataImpl( 40004570 )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, TaxExemptId_( ifds::TaxExemptId, &ifds::s_FldProp_TaxExemptId )
, TaxJurisCode_( ifds::TaxJurisCode, &ifds::s_FldProp_TaxJurisCode )
, TaxExType_( ifds::TaxExType, &ifds::s_FldProp_TaxExType )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, ExemptAmtOrig_( ifds::ExemptAmtOrig, &ifds::s_FldProp_ExemptAmtOrig )
, VersionNum_( ifds::VersionNum, &ifds::s_FldProp_VersionNum )
, EntityId_( ifds::EntityId, &ifds::s_FldProp_EntityId )
, CertNumber_( ifds::CertNumber, &ifds::s_FldProp_CertNumber )
, ExemptionScope_( ifds::ExemptionScope, &ifds::s_FldProp_ExemptionScope )
, ExemptionReasonCode_( ifds::ExemptionReasonCode, &ifds::s_FldProp_ExemptionReasonCode )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
{
   cFields_ = 14;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0302_REQRepeat_Record::~dsi_DSTC0302_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0302_REQRepeat_Record::clone()
{
   dsi_DSTC0302_REQRepeat_Record* p = new dsi_DSTC0302_REQRepeat_Record;
   p->RunMode_ = RunMode_;
   p->TaxExemptId_ = TaxExemptId_;
   p->TaxJurisCode_ = TaxJurisCode_;
   p->TaxExType_ = TaxExType_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->ExemptAmtOrig_ = ExemptAmtOrig_;
   p->VersionNum_ = VersionNum_;
   p->EntityId_ = EntityId_;
   p->CertNumber_ = CertNumber_;
   p->ExemptionScope_ = ExemptionScope_;
   p->ExemptionReasonCode_ = ExemptionReasonCode_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   return(p);
}

BFDataField* dsi_DSTC0302_REQRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40004557: return ( &TaxExemptId_ ); break; // TaxExemptId
      case 40000796: return ( &TaxJurisCode_ ); break; // TaxJurisCode
      case 40004558: return ( &TaxExType_ ); break; // TaxExType
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40004559: return ( &ExemptAmtOrig_ ); break; // ExemptAmtOrig
      case 40000228: return ( &VersionNum_ ); break; // VersionNum
      case 40000033: return ( &EntityId_ ); break; // EntityId
      case 40000372: return ( &CertNumber_ ); break; // CertNumber
      case 40005054: return ( &ExemptionScope_ ); break; // ExemptionScope
      case 40005074: return ( &ExemptionReasonCode_ ); break; // ExemptionReasonCode
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0302_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0302_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0302_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 14 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RunMode_; break;
            case 1: aFlds_[1] = &TaxExemptId_; break;
            case 2: aFlds_[2] = &TaxJurisCode_; break;
            case 3: aFlds_[3] = &TaxExType_; break;
            case 4: aFlds_[4] = &EffectiveDate_; break;
            case 5: aFlds_[5] = &StopDate_; break;
            case 6: aFlds_[6] = &ExemptAmtOrig_; break;
            case 7: aFlds_[7] = &VersionNum_; break;
            case 8: aFlds_[8] = &EntityId_; break;
            case 9: aFlds_[9] = &CertNumber_; break;
            case 10: aFlds_[10] = &ExemptionScope_; break;
            case 11: aFlds_[11] = &ExemptionReasonCode_; break;
            case 12: aFlds_[12] = &FundCode_; break;
            case 13: aFlds_[13] = &ClassCode_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0302_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0302_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0302_REQRepeat_Record::getLargestDefinedField( void ) const
{
   return( 250 );
}

unsigned long dsi_DSTC0302_REQRepeat_Record::getDefinedByteLength( void ) const
{
   return( 945 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0302_REQRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0302_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0302_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000990: return( true );
      case 40004557: return( true );
      case 40000796: return( true );
      case 40004558: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40004559: return( true );
      case 40000228: return( true );
      case 40000033: return( true );
      case 40000372: return( true );
      case 40005054: return( true );
      case 40005074: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
   }
   return false;
}

