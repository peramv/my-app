// BFDataImpl implementation file for DataSet DSTC0151.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0151_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0151_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0151_VWRepeat_Record() { return new dsi_DSTC0151_VWRepeat_Record; }

dsi_DSTC0151_VWRepeat_Record::dsi_DSTC0151_VWRepeat_Record()
: BFDataImpl( 40002197 )
, CommEntType_( ifds::CommEntType, &ifds::s_FldProp_CommEntType )
, CommEntTypeDesc_( ifds::CommEntTypeDesc, &ifds::s_FldProp_CommEntTypeDesc )
, CommEntCode_( ifds::CommEntCode, &ifds::s_FldProp_CommEntCode )
, CommPrcnt_( ifds::CommPrcnt, &ifds::s_FldProp_CommPrcnt )
, CommAmount_( ifds::CommAmount, &ifds::s_FldProp_CommAmount )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, TradesPayType_( ifds::TradesPayType, &ifds::s_FldProp_TradesPayType )
, Fixed_( ifds::Fixed, &ifds::s_FldProp_Fixed )
, GrossOrNet_( ifds::GrossOrNet, &ifds::s_FldProp_GrossOrNet )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, SlsrepCode_( ifds::SlsrepCode, &ifds::s_FldProp_SlsrepCode )
, CommEntName_( ifds::CommEntName, &ifds::s_FldProp_CommEntName )
, CommRate_( ifds::CommRate, &ifds::s_FldProp_CommRate )
, BrokerName_( ifds::BrokerName, &ifds::s_FldProp_BrokerName )
, BranchName_( ifds::BranchName, &ifds::s_FldProp_BranchName )
, CommLevel_( ifds::CommLevel, &ifds::s_FldProp_CommLevel )
, SplitCommRid_( ifds::SplitCommRid, &ifds::s_FldProp_SplitCommRid )
, RenunAmount_( ifds::RenunAmount, &ifds::s_FldProp_RenunAmount )
{
   cFields_ = 19;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0151_VWRepeat_Record::~dsi_DSTC0151_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0151_VWRepeat_Record::clone()
{
   dsi_DSTC0151_VWRepeat_Record* p = new dsi_DSTC0151_VWRepeat_Record;
   p->CommEntType_ = CommEntType_;
   p->CommEntTypeDesc_ = CommEntTypeDesc_;
   p->CommEntCode_ = CommEntCode_;
   p->CommPrcnt_ = CommPrcnt_;
   p->CommAmount_ = CommAmount_;
   p->Currency_ = Currency_;
   p->TradesPayType_ = TradesPayType_;
   p->Fixed_ = Fixed_;
   p->GrossOrNet_ = GrossOrNet_;
   p->BrokerCode_ = BrokerCode_;
   p->BranchCode_ = BranchCode_;
   p->SlsrepCode_ = SlsrepCode_;
   p->CommEntName_ = CommEntName_;
   p->CommRate_ = CommRate_;
   p->BrokerName_ = BrokerName_;
   p->BranchName_ = BranchName_;
   p->CommLevel_ = CommLevel_;
   p->SplitCommRid_ = SplitCommRid_;
   p->RenunAmount_ = RenunAmount_;
   return(p);
}

BFDataField* dsi_DSTC0151_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40002208: return ( &CommEntType_ ); break; // CommEntType
      case 40002209: return ( &CommEntTypeDesc_ ); break; // CommEntTypeDesc
      case 40002210: return ( &CommEntCode_ ); break; // CommEntCode
      case 40002211: return ( &CommPrcnt_ ); break; // CommPrcnt
      case 40002212: return ( &CommAmount_ ); break; // CommAmount
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40001377: return ( &TradesPayType_ ); break; // TradesPayType
      case 40002213: return ( &Fixed_ ); break; // Fixed
      case 40000234: return ( &GrossOrNet_ ); break; // GrossOrNet
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000045: return ( &BranchCode_ ); break; // BranchCode
      case 40000656: return ( &SlsrepCode_ ); break; // SlsrepCode
      case 40002215: return ( &CommEntName_ ); break; // CommEntName
      case 40002444: return ( &CommRate_ ); break; // CommRate
      case 40000210: return ( &BrokerName_ ); break; // BrokerName
      case 40000211: return ( &BranchName_ ); break; // BranchName
      case 40002240: return ( &CommLevel_ ); break; // CommLevel
      case 40002963: return ( &SplitCommRid_ ); break; // SplitCommRid
      case 40005048: return ( &RenunAmount_ ); break; // RenunAmount
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0151_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0151_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0151_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 19 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &CommEntType_; break;
            case 1: aFlds_[1] = &CommEntTypeDesc_; break;
            case 2: aFlds_[2] = &CommEntCode_; break;
            case 3: aFlds_[3] = &CommPrcnt_; break;
            case 4: aFlds_[4] = &CommAmount_; break;
            case 5: aFlds_[5] = &Currency_; break;
            case 6: aFlds_[6] = &TradesPayType_; break;
            case 7: aFlds_[7] = &Fixed_; break;
            case 8: aFlds_[8] = &GrossOrNet_; break;
            case 9: aFlds_[9] = &BrokerCode_; break;
            case 10: aFlds_[10] = &BranchCode_; break;
            case 11: aFlds_[11] = &SlsrepCode_; break;
            case 12: aFlds_[12] = &CommEntName_; break;
            case 13: aFlds_[13] = &CommRate_; break;
            case 14: aFlds_[14] = &BrokerName_; break;
            case 15: aFlds_[15] = &BranchName_; break;
            case 16: aFlds_[16] = &CommLevel_; break;
            case 17: aFlds_[17] = &SplitCommRid_; break;
            case 18: aFlds_[18] = &RenunAmount_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0151_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0151_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0151_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0151_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 993 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0151_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0151_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0151_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40002208: return( true );
      case 40002209: return( true );
      case 40002210: return( true );
      case 40002211: return( true );
      case 40002212: return( true );
      case 40000180: return( true );
      case 40001377: return( true );
      case 40002213: return( true );
      case 40000234: return( true );
      case 40000044: return( true );
      case 40000045: return( true );
      case 40000656: return( true );
      case 40002215: return( true );
      case 40002444: return( true );
      case 40000210: return( true );
      case 40000211: return( true );
      case 40002240: return( true );
      case 40002963: return( true );
      case 40005048: return( true );
   }
   return false;
}

