// BFDataImpl implementation file for DataSet DSTC0076.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0076_req.h"


// This function creates an instance of dsi_DSTC0076_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0076_REQ() { return new dsi_DSTC0076_REQ; }

dsi_DSTC0076_REQ::dsi_DSTC0076_REQ()
: BFDataImpl( 40001003 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, ShrNum_( ifds::ShrNum, &ifds::s_FldProp_ShrNum )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, AccountNumManual_( ifds::AccountNumManual, &ifds::s_FldProp_AccountNumManual )
, AltAccount_( ifds::AltAccount, &ifds::s_FldProp_AltAccount )
, AcctType_( ifds::AcctType, &ifds::s_FldProp_AcctType )
, TaxType_( ifds::TaxType, &ifds::s_FldProp_TaxType )
, RecipientType_( ifds::RecipientType, &ifds::s_FldProp_RecipientType )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, XrefNum_( ifds::XrefNum, &ifds::s_FldProp_XrefNum )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, Slsrep_( ifds::Slsrep, &ifds::s_FldProp_Slsrep )
, InterCode_( ifds::InterCode, &ifds::s_FldProp_InterCode )
, InterAccount_( ifds::InterAccount, &ifds::s_FldProp_InterAccount )
, AcctStatus_( ifds::AcctStatus, &ifds::s_FldProp_AcctStatus )
, DateOfReg_( ifds::DateOfReg, &ifds::s_FldProp_DateOfReg )
, RRSPFee_( ifds::RRSPFee, &ifds::s_FldProp_RRSPFee )
, PensionJuris_( ifds::PensionJuris, &ifds::s_FldProp_PensionJuris )
, StopPurchase_( ifds::StopPurchase, &ifds::s_FldProp_StopPurchase )
, StopXferIn_( ifds::StopXferIn, &ifds::s_FldProp_StopXferIn )
, StopXferOut_( ifds::StopXferOut, &ifds::s_FldProp_StopXferOut )
, StopRed_( ifds::StopRed, &ifds::s_FldProp_StopRed )
, FeeWaived_( ifds::FeeWaived, &ifds::s_FldProp_FeeWaived )
, MarketMail_( ifds::MarketMail, &ifds::s_FldProp_MarketMail )
, MarketMailChgSh_( ifds::MarketMailChgSh, &ifds::s_FldProp_MarketMailChgSh )
, Unseizable_( ifds::Unseizable, &ifds::s_FldProp_Unseizable )
, RegCompleted_( ifds::RegCompleted, &ifds::s_FldProp_RegCompleted )
, SupConf_( ifds::SupConf, &ifds::s_FldProp_SupConf )
, SupEmpConf_( ifds::SupEmpConf, &ifds::s_FldProp_SupEmpConf )
, InTrustFor_( ifds::InTrustFor, &ifds::s_FldProp_InTrustFor )
, Escrow_( ifds::Escrow, &ifds::s_FldProp_Escrow )
, AcctGroup_( ifds::AcctGroup, &ifds::s_FldProp_AcctGroup )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, AcctMstrVer_( ifds::AcctMstrVer, &ifds::s_FldProp_AcctMstrVer )
, CreateRep_( ifds::CreateRep, &ifds::s_FldProp_CreateRep )
, Employee_( ifds::Employee, &ifds::s_FldProp_Employee )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, SocialCode_( ifds::SocialCode, &ifds::s_FldProp_SocialCode )
, StopFCrebal_( ifds::StopFCrebal, &ifds::s_FldProp_StopFCrebal )
, GSTExempt_( ifds::GSTExempt, &ifds::s_FldProp_GSTExempt )
, ApplyPST_( ifds::ApplyPST, &ifds::s_FldProp_ApplyPST )
, StopSWP_( ifds::StopSWP, &ifds::s_FldProp_StopSWP )
, BankChrgs_( ifds::BankChrgs, &ifds::s_FldProp_BankChrgs )
, ConsolidEFT_( ifds::ConsolidEFT, &ifds::s_FldProp_ConsolidEFT )
, MgmtFeePayOption_( ifds::MgmtFeePayOption, &ifds::s_FldProp_MgmtFeePayOption )
, ChargeERFee_( ifds::ChargeERFee, &ifds::s_FldProp_ChargeERFee )
, ChargeSTTRFee_( ifds::ChargeSTTRFee, &ifds::s_FldProp_ChargeSTTRFee )
, StopAMSRebalancing_( ifds::StopAMSRebalancing, &ifds::s_FldProp_StopAMSRebalancing )
, AcctPurpose_( ifds::AcctPurpose, &ifds::s_FldProp_AcctPurpose )
, AdditionalInfo_( ifds::AdditionalInfo, &ifds::s_FldProp_AdditionalInfo )
, BusinessNo_( ifds::BusinessNo, &ifds::s_FldProp_BusinessNo )
, MemorablePlace_( ifds::MemorablePlace, &ifds::s_FldProp_MemorablePlace )
, MemorableWord_( ifds::MemorableWord, &ifds::s_FldProp_MemorableWord )
, MemorableDate_( ifds::MemorableDate, &ifds::s_FldProp_MemorableDate )
, PensionLegCode_( ifds::PensionLegCode, &ifds::s_FldProp_PensionLegCode )
, TelFaxAgreement_( ifds::TelFaxAgreement, &ifds::s_FldProp_TelFaxAgreement )
, ClearingID_( ifds::ClearingID, &ifds::s_FldProp_ClearingID )
, Networkcontrolind_( ifds::Networkcontrolind, &ifds::s_FldProp_Networkcontrolind )
, StopRedSettle_( ifds::StopRedSettle, &ifds::s_FldProp_StopRedSettle )
, RegistrationInfo_( ifds::RegistrationInfo, &ifds::s_FldProp_RegistrationInfo )
, FeeModelCode_( ifds::FeeModelCode, &ifds::s_FldProp_FeeModelCode )
, ClearingFirm_( ifds::ClearingFirm, &ifds::s_FldProp_ClearingFirm )
, AgentForFirm_( ifds::AgentForFirm, &ifds::s_FldProp_AgentForFirm )
, TPA_( ifds::TPA, &ifds::s_FldProp_TPA )
, NetworkID_( ifds::NetworkID, &ifds::s_FldProp_NetworkID )
, ConsolTypePW_( ifds::ConsolTypePW, &ifds::s_FldProp_ConsolTypePW )
, ConsolTypeID_( ifds::ConsolTypeID, &ifds::s_FldProp_ConsolTypeID )
, AccountClosingReason_( ifds::AccountClosingReason, &ifds::s_FldProp_AccountClosingReason )
, Affluent_( ifds::Affluent, &ifds::s_FldProp_Affluent )
, HoldDivPymt_( ifds::HoldDivPymt, &ifds::s_FldProp_HoldDivPymt )
, TaxTypeSchedule_( ifds::TaxTypeSchedule, &ifds::s_FldProp_TaxTypeSchedule )
, StopReason_( ifds::StopReason, &ifds::s_FldProp_StopReason )
, AdditionalStopReason_( ifds::AdditionalStopReason, &ifds::s_FldProp_AdditionalStopReason )
, UnitRoundMethod_( ifds::UnitRoundMethod, &ifds::s_FldProp_UnitRoundMethod )
, SiblingOnly_( ifds::SiblingOnly, &ifds::s_FldProp_SiblingOnly )
, CESGEligible_( ifds::CESGEligible, &ifds::s_FldProp_CESGEligible )
, Pre98Contrib_( ifds::Pre98Contrib, &ifds::s_FldProp_Pre98Contrib )
, ConsolTypeED_( ifds::ConsolTypeED, &ifds::s_FldProp_ConsolTypeED )
, ProdPortfolioUUID_( ifds::ProdPortfolioUUID, &ifds::s_FldProp_ProdPortfolioUUID )
, ProdPortfolioPlanUUID_( ifds::ProdPortfolioPlanUUID, &ifds::s_FldProp_ProdPortfolioPlanUUID )
, UnclmRemitDate_( ifds::UnclmRemitDate, &ifds::s_FldProp_UnclmRemitDate )
, NSCCSocialCode_( ifds::NSCCSocialCode, &ifds::s_FldProp_NSCCSocialCode )
, OrgType_( ifds::OrgType, &ifds::s_FldProp_OrgType )
, SubOrgType_( ifds::SubOrgType, &ifds::s_FldProp_SubOrgType )
, SettleCurrency_( ifds::SettleCurrency, &ifds::s_FldProp_SettleCurrency )
, NonFinConfirm_( ifds::NonFinConfirm, &ifds::s_FldProp_NonFinConfirm )
, StopAdjDate_( ifds::StopAdjDate, &ifds::s_FldProp_StopAdjDate )
, InitialDate_( ifds::InitialDate, &ifds::s_FldProp_InitialDate )
, InitialMarketValue_( ifds::InitialMarketValue, &ifds::s_FldProp_InitialMarketValue )
, NetTransAmt_( ifds::NetTransAmt, &ifds::s_FldProp_NetTransAmt )
, NetTransAmtAsOfDate_( ifds::NetTransAmtAsOfDate, &ifds::s_FldProp_NetTransAmtAsOfDate )
, ShrOutputType_( ifds::ShrOutputType, &ifds::s_FldProp_ShrOutputType )
, InvestorClassification_( ifds::InvestorClassification, &ifds::s_FldProp_InvestorClassification )
, AIFMDInvestorCategory_( ifds::AIFMDInvestorCategory, &ifds::s_FldProp_AIFMDInvestorCategory )
, AggregationType_( ifds::AggregationType, &ifds::s_FldProp_AggregationType )
, AcctTaxModel_( ifds::AcctTaxModel, &ifds::s_FldProp_AcctTaxModel )
{
    cFields_ = 102;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0076_REQ::~dsi_DSTC0076_REQ()
{
}

BFDataImpl* dsi_DSTC0076_REQ::clone()
{
   dsi_DSTC0076_REQ* p = new dsi_DSTC0076_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->RunMode_ = RunMode_;
   p->ShrNum_ = ShrNum_;
   p->AccountNum_ = AccountNum_;
   p->AccountNumManual_ = AccountNumManual_;
   p->AltAccount_ = AltAccount_;
   p->AcctType_ = AcctType_;
   p->TaxType_ = TaxType_;
   p->RecipientType_ = RecipientType_;
   p->Currency_ = Currency_;
   p->XrefNum_ = XrefNum_;
   p->BrokerCode_ = BrokerCode_;
   p->BranchCode_ = BranchCode_;
   p->Slsrep_ = Slsrep_;
   p->InterCode_ = InterCode_;
   p->InterAccount_ = InterAccount_;
   p->AcctStatus_ = AcctStatus_;
   p->DateOfReg_ = DateOfReg_;
   p->RRSPFee_ = RRSPFee_;
   p->PensionJuris_ = PensionJuris_;
   p->StopPurchase_ = StopPurchase_;
   p->StopXferIn_ = StopXferIn_;
   p->StopXferOut_ = StopXferOut_;
   p->StopRed_ = StopRed_;
   p->FeeWaived_ = FeeWaived_;
   p->MarketMail_ = MarketMail_;
   p->MarketMailChgSh_ = MarketMailChgSh_;
   p->Unseizable_ = Unseizable_;
   p->RegCompleted_ = RegCompleted_;
   p->SupConf_ = SupConf_;
   p->SupEmpConf_ = SupEmpConf_;
   p->InTrustFor_ = InTrustFor_;
   p->Escrow_ = Escrow_;
   p->AcctGroup_ = AcctGroup_;
   p->EffectiveDate_ = EffectiveDate_;
   p->AcctMstrVer_ = AcctMstrVer_;
   p->CreateRep_ = CreateRep_;
   p->Employee_ = Employee_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->SocialCode_ = SocialCode_;
   p->StopFCrebal_ = StopFCrebal_;
   p->GSTExempt_ = GSTExempt_;
   p->ApplyPST_ = ApplyPST_;
   p->StopSWP_ = StopSWP_;
   p->BankChrgs_ = BankChrgs_;
   p->ConsolidEFT_ = ConsolidEFT_;
   p->MgmtFeePayOption_ = MgmtFeePayOption_;
   p->ChargeERFee_ = ChargeERFee_;
   p->ChargeSTTRFee_ = ChargeSTTRFee_;
   p->StopAMSRebalancing_ = StopAMSRebalancing_;
   p->AcctPurpose_ = AcctPurpose_;
   p->AdditionalInfo_ = AdditionalInfo_;
   p->BusinessNo_ = BusinessNo_;
   p->MemorablePlace_ = MemorablePlace_;
   p->MemorableWord_ = MemorableWord_;
   p->MemorableDate_ = MemorableDate_;
   p->PensionLegCode_ = PensionLegCode_;
   p->TelFaxAgreement_ = TelFaxAgreement_;
   p->ClearingID_ = ClearingID_;
   p->Networkcontrolind_ = Networkcontrolind_;
   p->StopRedSettle_ = StopRedSettle_;
   p->RegistrationInfo_ = RegistrationInfo_;
   p->FeeModelCode_ = FeeModelCode_;
   p->ClearingFirm_ = ClearingFirm_;
   p->AgentForFirm_ = AgentForFirm_;
   p->TPA_ = TPA_;
   p->NetworkID_ = NetworkID_;
   p->ConsolTypePW_ = ConsolTypePW_;
   p->ConsolTypeID_ = ConsolTypeID_;
   p->AccountClosingReason_ = AccountClosingReason_;
   p->Affluent_ = Affluent_;
   p->HoldDivPymt_ = HoldDivPymt_;
   p->TaxTypeSchedule_ = TaxTypeSchedule_;
   p->StopReason_ = StopReason_;
   p->AdditionalStopReason_ = AdditionalStopReason_;
   p->UnitRoundMethod_ = UnitRoundMethod_;
   p->SiblingOnly_ = SiblingOnly_;
   p->CESGEligible_ = CESGEligible_;
   p->Pre98Contrib_ = Pre98Contrib_;
   p->ConsolTypeED_ = ConsolTypeED_;
   p->ProdPortfolioUUID_ = ProdPortfolioUUID_;
   p->ProdPortfolioPlanUUID_ = ProdPortfolioPlanUUID_;
   p->UnclmRemitDate_ = UnclmRemitDate_;
   p->NSCCSocialCode_ = NSCCSocialCode_;
   p->OrgType_ = OrgType_;
   p->SubOrgType_ = SubOrgType_;
   p->SettleCurrency_ = SettleCurrency_;
   p->NonFinConfirm_ = NonFinConfirm_;
   p->StopAdjDate_ = StopAdjDate_;
   p->InitialDate_ = InitialDate_;
   p->InitialMarketValue_ = InitialMarketValue_;
   p->NetTransAmt_ = NetTransAmt_;
   p->NetTransAmtAsOfDate_ = NetTransAmtAsOfDate_;
   p->ShrOutputType_ = ShrOutputType_;
   p->InvestorClassification_ = InvestorClassification_;
   p->AIFMDInvestorCategory_ = AIFMDInvestorCategory_;
   p->AggregationType_ = AggregationType_;
   p->AcctTaxModel_ = AcctTaxModel_;
   return(p);
}

BFDataField* dsi_DSTC0076_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40000114: return ( &ShrNum_ ); break; // ShrNum
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40001004: return ( &AccountNumManual_ ); break; // AccountNumManual
      case 40000173: return ( &AltAccount_ ); break; // AltAccount
      case 40000174: return ( &AcctType_ ); break; // AcctType
      case 40000134: return ( &TaxType_ ); break; // TaxType
      case 40000176: return ( &RecipientType_ ); break; // RecipientType
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40000182: return ( &XrefNum_ ); break; // XrefNum
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000045: return ( &BranchCode_ ); break; // BranchCode
      case 40000185: return ( &Slsrep_ ); break; // Slsrep
      case 40000186: return ( &InterCode_ ); break; // InterCode
      case 40000187: return ( &InterAccount_ ); break; // InterAccount
      case 40000188: return ( &AcctStatus_ ); break; // AcctStatus
      case 40000190: return ( &DateOfReg_ ); break; // DateOfReg
      case 40000191: return ( &RRSPFee_ ); break; // RRSPFee
      case 40000194: return ( &PensionJuris_ ); break; // PensionJuris
      case 40000699: return ( &StopPurchase_ ); break; // StopPurchase
      case 40000197: return ( &StopXferIn_ ); break; // StopXferIn
      case 40000198: return ( &StopXferOut_ ); break; // StopXferOut
      case 40000593: return ( &StopRed_ ); break; // StopRed
      case 40000200: return ( &FeeWaived_ ); break; // FeeWaived
      case 40000201: return ( &MarketMail_ ); break; // MarketMail
      case 40001005: return ( &MarketMailChgSh_ ); break; // MarketMailChgSh
      case 40000202: return ( &Unseizable_ ); break; // Unseizable
      case 40000203: return ( &RegCompleted_ ); break; // RegCompleted
      case 40000204: return ( &SupConf_ ); break; // SupConf
      case 40000205: return ( &SupEmpConf_ ); break; // SupEmpConf
      case 40000206: return ( &InTrustFor_ ); break; // InTrustFor
      case 40000207: return ( &Escrow_ ); break; // Escrow
      case 40000208: return ( &AcctGroup_ ); break; // AcctGroup
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000909: return ( &AcctMstrVer_ ); break; // AcctMstrVer
      case 40001006: return ( &CreateRep_ ); break; // CreateRep
      case 40001117: return ( &Employee_ ); break; // Employee
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40002187: return ( &SocialCode_ ); break; // SocialCode
      case 40001774: return ( &StopFCrebal_ ); break; // StopFCrebal
      case 40002901: return ( &GSTExempt_ ); break; // GSTExempt
      case 40003002: return ( &ApplyPST_ ); break; // ApplyPST
      case 40003027: return ( &StopSWP_ ); break; // StopSWP
      case 40003100: return ( &BankChrgs_ ); break; // BankChrgs
      case 40003123: return ( &ConsolidEFT_ ); break; // ConsolidEFT
      case 40003530: return ( &MgmtFeePayOption_ ); break; // MgmtFeePayOption
      case 40003826: return ( &ChargeERFee_ ); break; // ChargeERFee
      case 40003827: return ( &ChargeSTTRFee_ ); break; // ChargeSTTRFee
      case 40003894: return ( &StopAMSRebalancing_ ); break; // StopAMSRebalancing
      case 40004009: return ( &AcctPurpose_ ); break; // AcctPurpose
      case 40004010: return ( &AdditionalInfo_ ); break; // AdditionalInfo
      case 40004011: return ( &BusinessNo_ ); break; // BusinessNo
      case 40004019: return ( &MemorablePlace_ ); break; // MemorablePlace
      case 40004020: return ( &MemorableWord_ ); break; // MemorableWord
      case 40004021: return ( &MemorableDate_ ); break; // MemorableDate
      case 40004093: return ( &PensionLegCode_ ); break; // PensionLegCode
      case 40004137: return ( &TelFaxAgreement_ ); break; // TelFaxAgreement
      case 40004302: return ( &ClearingID_ ); break; // ClearingID
      case 40004418: return ( &Networkcontrolind_ ); break; // Networkcontrolind
      case 40004571: return ( &StopRedSettle_ ); break; // StopRedSettle
      case 40004572: return ( &RegistrationInfo_ ); break; // RegistrationInfo
      case 40004584: return ( &FeeModelCode_ ); break; // FeeModelCode
      case 40004420: return ( &ClearingFirm_ ); break; // ClearingFirm
      case 40005212: return ( &AgentForFirm_ ); break; // AgentForFirm
      case 40005213: return ( &TPA_ ); break; // TPA
      case 40003522: return ( &NetworkID_ ); break; // NetworkID
      case 40005568: return ( &ConsolTypePW_ ); break; // ConsolTypePW
      case 40005563: return ( &ConsolTypeID_ ); break; // ConsolTypeID
      case 40005649: return ( &AccountClosingReason_ ); break; // AccountClosingReason
      case 40005677: return ( &Affluent_ ); break; // Affluent
      case 40005743: return ( &HoldDivPymt_ ); break; // HoldDivPymt
      case 40005778: return ( &TaxTypeSchedule_ ); break; // TaxTypeSchedule
      case 40005790: return ( &StopReason_ ); break; // StopReason
      case 40005791: return ( &AdditionalStopReason_ ); break; // AdditionalStopReason
      case 40005816: return ( &UnitRoundMethod_ ); break; // UnitRoundMethod
      case 40005670: return ( &SiblingOnly_ ); break; // SiblingOnly
      case 40000770: return ( &CESGEligible_ ); break; // CESGEligible
      case 40006083: return ( &Pre98Contrib_ ); break; // Pre98Contrib
      case 40006355: return ( &ConsolTypeED_ ); break; // ConsolTypeED
      case 40006390: return ( &ProdPortfolioUUID_ ); break; // ProdPortfolioUUID
      case 40006391: return ( &ProdPortfolioPlanUUID_ ); break; // ProdPortfolioPlanUUID
      case 40005893: return ( &UnclmRemitDate_ ); break; // UnclmRemitDate
      case 40006420: return ( &NSCCSocialCode_ ); break; // NSCCSocialCode
      case 40006661: return ( &OrgType_ ); break; // OrgType
      case 40006662: return ( &SubOrgType_ ); break; // SubOrgType
      case 40000455: return ( &SettleCurrency_ ); break; // SettleCurrency
      case 40006844: return ( &NonFinConfirm_ ); break; // NonFinConfirm
      case 40006876: return ( &StopAdjDate_ ); break; // StopAdjDate
      case 40007012: return ( &InitialDate_ ); break; // InitialDate
      case 40007013: return ( &InitialMarketValue_ ); break; // InitialMarketValue
      case 40007014: return ( &NetTransAmt_ ); break; // NetTransAmt
      case 40007015: return ( &NetTransAmtAsOfDate_ ); break; // NetTransAmtAsOfDate
      case 40007034: return ( &ShrOutputType_ ); break; // ShrOutputType
      case 40007400: return ( &InvestorClassification_ ); break; // InvestorClassification
      case 40007401: return ( &AIFMDInvestorCategory_ ); break; // AIFMDInvestorCategory
      case 40007493: return ( &AggregationType_ ); break; // AggregationType
      case 40007799: return ( &AcctTaxModel_ ); break; // AcctTaxModel
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0076_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0076_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0076_REQ::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 102 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &RunMode_; break;
            case 5: aFlds_[5] = &ShrNum_; break;
            case 6: aFlds_[6] = &AccountNum_; break;
            case 7: aFlds_[7] = &AccountNumManual_; break;
            case 8: aFlds_[8] = &AltAccount_; break;
            case 9: aFlds_[9] = &AcctType_; break;
            case 10: aFlds_[10] = &TaxType_; break;
            case 11: aFlds_[11] = &RecipientType_; break;
            case 12: aFlds_[12] = &Currency_; break;
            case 13: aFlds_[13] = &XrefNum_; break;
            case 14: aFlds_[14] = &BrokerCode_; break;
            case 15: aFlds_[15] = &BranchCode_; break;
            case 16: aFlds_[16] = &Slsrep_; break;
            case 17: aFlds_[17] = &InterCode_; break;
            case 18: aFlds_[18] = &InterAccount_; break;
            case 19: aFlds_[19] = &AcctStatus_; break;
            case 20: aFlds_[20] = &DateOfReg_; break;
            case 21: aFlds_[21] = &RRSPFee_; break;
            case 22: aFlds_[22] = &PensionJuris_; break;
            case 23: aFlds_[23] = &StopPurchase_; break;
            case 24: aFlds_[24] = &StopXferIn_; break;
            case 25: aFlds_[25] = &StopXferOut_; break;
            case 26: aFlds_[26] = &StopRed_; break;
            case 27: aFlds_[27] = &FeeWaived_; break;
            case 28: aFlds_[28] = &MarketMail_; break;
            case 29: aFlds_[29] = &MarketMailChgSh_; break;
            case 30: aFlds_[30] = &Unseizable_; break;
            case 31: aFlds_[31] = &RegCompleted_; break;
            case 32: aFlds_[32] = &SupConf_; break;
            case 33: aFlds_[33] = &SupEmpConf_; break;
            case 34: aFlds_[34] = &InTrustFor_; break;
            case 35: aFlds_[35] = &Escrow_; break;
            case 36: aFlds_[36] = &AcctGroup_; break;
            case 37: aFlds_[37] = &EffectiveDate_; break;
            case 38: aFlds_[38] = &AcctMstrVer_; break;
            case 39: aFlds_[39] = &CreateRep_; break;
            case 40: aFlds_[40] = &Employee_; break;
            case 41: aFlds_[41] = &Track_; break;
            case 42: aFlds_[42] = &Activity_; break;
            case 43: aFlds_[43] = &SocialCode_; break;
            case 44: aFlds_[44] = &StopFCrebal_; break;
            case 45: aFlds_[45] = &GSTExempt_; break;
            case 46: aFlds_[46] = &ApplyPST_; break;
            case 47: aFlds_[47] = &StopSWP_; break;
            case 48: aFlds_[48] = &BankChrgs_; break;
            case 49: aFlds_[49] = &ConsolidEFT_; break;
            case 50: aFlds_[50] = &MgmtFeePayOption_; break;
            case 51: aFlds_[51] = &ChargeERFee_; break;
            case 52: aFlds_[52] = &ChargeSTTRFee_; break;
            case 53: aFlds_[53] = &StopAMSRebalancing_; break;
            case 54: aFlds_[54] = &AcctPurpose_; break;
            case 55: aFlds_[55] = &AdditionalInfo_; break;
            case 56: aFlds_[56] = &BusinessNo_; break;
            case 57: aFlds_[57] = &MemorablePlace_; break;
            case 58: aFlds_[58] = &MemorableWord_; break;
            case 59: aFlds_[59] = &MemorableDate_; break;
            case 60: aFlds_[60] = &PensionLegCode_; break;
            case 61: aFlds_[61] = &TelFaxAgreement_; break;
            case 62: aFlds_[62] = &ClearingID_; break;
            case 63: aFlds_[63] = &Networkcontrolind_; break;
            case 64: aFlds_[64] = &StopRedSettle_; break;
            case 65: aFlds_[65] = &RegistrationInfo_; break;
            case 66: aFlds_[66] = &FeeModelCode_; break;
            case 67: aFlds_[67] = &ClearingFirm_; break;
            case 68: aFlds_[68] = &AgentForFirm_; break;
            case 69: aFlds_[69] = &TPA_; break;
            case 70: aFlds_[70] = &NetworkID_; break;
            case 71: aFlds_[71] = &ConsolTypePW_; break;
            case 72: aFlds_[72] = &ConsolTypeID_; break;
            case 73: aFlds_[73] = &AccountClosingReason_; break;
            case 74: aFlds_[74] = &Affluent_; break;
            case 75: aFlds_[75] = &HoldDivPymt_; break;
            case 76: aFlds_[76] = &TaxTypeSchedule_; break;
            case 77: aFlds_[77] = &StopReason_; break;
            case 78: aFlds_[78] = &AdditionalStopReason_; break;
            case 79: aFlds_[79] = &UnitRoundMethod_; break;
            case 80: aFlds_[80] = &SiblingOnly_; break;
            case 81: aFlds_[81] = &CESGEligible_; break;
            case 82: aFlds_[82] = &Pre98Contrib_; break;
            case 83: aFlds_[83] = &ConsolTypeED_; break;
            case 84: aFlds_[84] = &ProdPortfolioUUID_; break;
            case 85: aFlds_[85] = &ProdPortfolioPlanUUID_; break;
            case 86: aFlds_[86] = &UnclmRemitDate_; break;
            case 87: aFlds_[87] = &NSCCSocialCode_; break;
            case 88: aFlds_[88] = &OrgType_; break;
            case 89: aFlds_[89] = &SubOrgType_; break;
            case 90: aFlds_[90] = &SettleCurrency_; break;
            case 91: aFlds_[91] = &NonFinConfirm_; break;
            case 92: aFlds_[92] = &StopAdjDate_; break;
            case 93: aFlds_[93] = &InitialDate_; break;
            case 94: aFlds_[94] = &InitialMarketValue_; break;
            case 95: aFlds_[95] = &NetTransAmt_; break;
            case 96: aFlds_[96] = &NetTransAmtAsOfDate_; break;
            case 97: aFlds_[97] = &ShrOutputType_; break;
            case 98: aFlds_[98] = &InvestorClassification_; break;
            case 99: aFlds_[99] = &AIFMDInvestorCategory_; break;
            case 100: aFlds_[100] = &AggregationType_; break;
            case 101: aFlds_[101] = &AcctTaxModel_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0076_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0076_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0076_REQ::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0076_REQ::getDefinedByteLength( void ) const
{
    return( 3388 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0076_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0076_REQ::fieldExists( id );
}

bool dsi_DSTC0076_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40000990: return( true );
      case 40000114: return( true );
      case 40000040: return( true );
      case 40001004: return( true );
      case 40000173: return( true );
      case 40000174: return( true );
      case 40000134: return( true );
      case 40000176: return( true );
      case 40000180: return( true );
      case 40000182: return( true );
      case 40000044: return( true );
      case 40000045: return( true );
      case 40000185: return( true );
      case 40000186: return( true );
      case 40000187: return( true );
      case 40000188: return( true );
      case 40000190: return( true );
      case 40000191: return( true );
      case 40000194: return( true );
      case 40000699: return( true );
      case 40000197: return( true );
      case 40000198: return( true );
      case 40000593: return( true );
      case 40000200: return( true );
      case 40000201: return( true );
      case 40001005: return( true );
      case 40000202: return( true );
      case 40000203: return( true );
      case 40000204: return( true );
      case 40000205: return( true );
      case 40000206: return( true );
      case 40000207: return( true );
      case 40000208: return( true );
      case 40000327: return( true );
      case 40000909: return( true );
      case 40001006: return( true );
      case 40001117: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40002187: return( true );
      case 40001774: return( true );
      case 40002901: return( true );
      case 40003002: return( true );
      case 40003027: return( true );
      case 40003100: return( true );
      case 40003123: return( true );
      case 40003530: return( true );
      case 40003826: return( true );
      case 40003827: return( true );
      case 40003894: return( true );
      case 40004009: return( true );
      case 40004010: return( true );
      case 40004011: return( true );
      case 40004019: return( true );
      case 40004020: return( true );
      case 40004021: return( true );
      case 40004093: return( true );
      case 40004137: return( true );
      case 40004302: return( true );
      case 40004418: return( true );
      case 40004571: return( true );
      case 40004572: return( true );
      case 40004584: return( true );
      case 40004420: return( true );
      case 40005212: return( true );
      case 40005213: return( true );
      case 40003522: return( true );
      case 40005568: return( true );
      case 40005563: return( true );
      case 40005649: return( true );
      case 40005677: return( true );
      case 40005743: return( true );
      case 40005778: return( true );
      case 40005790: return( true );
      case 40005791: return( true );
      case 40005816: return( true );
      case 40005670: return( true );
      case 40000770: return( true );
      case 40006083: return( true );
      case 40006355: return( true );
      case 40006390: return( true );
      case 40006391: return( true );
      case 40005893: return( true );
      case 40006420: return( true );
      case 40006661: return( true );
      case 40006662: return( true );
      case 40000455: return( true );
      case 40006844: return( true );
      case 40006876: return( true );
      case 40007012: return( true );
      case 40007013: return( true );
      case 40007014: return( true );
      case 40007015: return( true );
      case 40007034: return( true );
      case 40007400: return( true );
      case 40007401: return( true );
      case 40007493: return( true );
        case 40007799: return ( true );
   }
   return false;
}

