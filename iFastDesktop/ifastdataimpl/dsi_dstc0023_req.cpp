// BFDataImpl implementation file for DataSet DSTC0023.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:58 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0023_req.h"


// This function creates an instance of dsi_DSTC0023_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0023_REQ() { return new dsi_DSTC0023_REQ; }

dsi_DSTC0023_REQ::dsi_DSTC0023_REQ()
: BFDataImpl( 40000066 )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, FromDate_( ifds::FromDate, &ifds::s_FldProp_FromDate )
, ToDate_( ifds::ToDate, &ifds::s_FldProp_ToDate )
, PrevDatePressed_( ifds::PrevDatePressed, &ifds::s_FldProp_PrevDatePressed )
, NextDatePressed_( ifds::NextDatePressed, &ifds::s_FldProp_NextDatePressed )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, SearchFundType_( ifds::SearchFundType, &ifds::s_FldProp_SearchFundType )
, FundWKN_( ifds::FundWKN, &ifds::s_FldProp_FundWKN )
, FundISIN_( ifds::FundISIN, &ifds::s_FldProp_FundISIN )
, OverrideRepeats_( ifds::OverrideRepeats, &ifds::s_FldProp_OverrideRepeats )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, SalesRepCode_( ifds::SalesRepCode, &ifds::s_FldProp_SalesRepCode )
, IgnoreFundLoadGrp_( ifds::IgnoreFundLoadGrp, &ifds::s_FldProp_IgnoreFundLoadGrp )
, ExcludeClass_( ifds::ExcludeClass, &ifds::s_FldProp_ExcludeClass )
, GetLastIDRate_( ifds::GetLastIDRate, &ifds::s_FldProp_GetLastIDRate )
, GetTransType_( ifds::GetTransType, &ifds::s_FldProp_GetTransType )
, GetNextAvailRate_( ifds::GetNextAvailRate, &ifds::s_FldProp_GetNextAvailRate )
, CUSIP_( ifds::CUSIP, &ifds::s_FldProp_CUSIP )
{
    cFields_ = 26;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0023_REQ::~dsi_DSTC0023_REQ()
{
}

BFDataImpl* dsi_DSTC0023_REQ::clone()
{
   dsi_DSTC0023_REQ* p = new dsi_DSTC0023_REQ;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->FromDate_ = FromDate_;
   p->ToDate_ = ToDate_;
   p->PrevDatePressed_ = PrevDatePressed_;
   p->NextDatePressed_ = NextDatePressed_;
   p->NextKey_ = NextKey_;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->SearchFundType_ = SearchFundType_;
   p->FundWKN_ = FundWKN_;
   p->FundISIN_ = FundISIN_;
   p->OverrideRepeats_ = OverrideRepeats_;
   p->BrokerCode_ = BrokerCode_;
   p->BranchCode_ = BranchCode_;
   p->SalesRepCode_ = SalesRepCode_;
   p->IgnoreFundLoadGrp_ = IgnoreFundLoadGrp_;
   p->ExcludeClass_ = ExcludeClass_;
   p->GetLastIDRate_ = GetLastIDRate_;
   p->GetTransType_ = GetTransType_;
   p->GetNextAvailRate_ = GetNextAvailRate_;
   p->CUSIP_ = CUSIP_;
   return(p);
}

BFDataField* dsi_DSTC0023_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000067: return ( &FromDate_ ); break; // FromDate
      case 40000068: return ( &ToDate_ ); break; // ToDate
      case 40000069: return ( &PrevDatePressed_ ); break; // PrevDatePressed
      case 40000070: return ( &NextDatePressed_ ); break; // NextDatePressed
      case 40000029: return ( &NextKey_ ); break; // NextKey
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40004673: return ( &SearchFundType_ ); break; // SearchFundType
      case 40004586: return ( &FundWKN_ ); break; // FundWKN
      case 40004587: return ( &FundISIN_ ); break; // FundISIN
      case 40002139: return ( &OverrideRepeats_ ); break; // OverrideRepeats
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000045: return ( &BranchCode_ ); break; // BranchCode
      case 40000046: return ( &SalesRepCode_ ); break; // SalesRepCode
      case 40005429: return ( &IgnoreFundLoadGrp_ ); break; // IgnoreFundLoadGrp
      case 40005428: return ( &ExcludeClass_ ); break; // ExcludeClass
      case 40007299: return ( &GetLastIDRate_ ); break; // GetLastIDRate
      case 40007426: return ( &GetTransType_ ); break; // GetTransType
      case 40007427: return ( &GetNextAvailRate_ ); break; // GetNextAvailRate
	  case 40007172: return ( &CUSIP_ ); break; // CUSIP
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0023_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0023_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0023_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 26 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FundCode_; break;
            case 1: aFlds_[1] = &ClassCode_; break;
            case 2: aFlds_[2] = &FromDate_; break;
            case 3: aFlds_[3] = &ToDate_; break;
            case 4: aFlds_[4] = &PrevDatePressed_; break;
            case 5: aFlds_[5] = &NextDatePressed_; break;
            case 6: aFlds_[6] = &NextKey_; break;
            case 7: aFlds_[7] = &SessionId_; break;
            case 8: aFlds_[8] = &User_Id_; break;
            case 9: aFlds_[9] = &LanguageCode_; break;
            case 10: aFlds_[10] = &CompanyId_; break;
            case 11: aFlds_[11] = &Track_; break;
            case 12: aFlds_[12] = &Activity_; break;
            case 13: aFlds_[13] = &SearchFundType_; break;
            case 14: aFlds_[14] = &FundWKN_; break;
            case 15: aFlds_[15] = &FundISIN_; break;
            case 16: aFlds_[16] = &OverrideRepeats_; break;
            case 17: aFlds_[17] = &BrokerCode_; break;
            case 18: aFlds_[18] = &BranchCode_; break;
            case 19: aFlds_[19] = &SalesRepCode_; break;
            case 20: aFlds_[20] = &IgnoreFundLoadGrp_; break;
            case 21: aFlds_[21] = &ExcludeClass_; break;
            case 22: aFlds_[22] = &GetLastIDRate_; break;
            case 23: aFlds_[23] = &GetTransType_; break;
            case 24: aFlds_[24] = &GetNextAvailRate_; break;
			case 25: aFlds_[25] = &CUSIP_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0023_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0023_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0023_REQ::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0023_REQ::getDefinedByteLength( void ) const
{
   return( 1295 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0023_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0023_REQ::fieldExists( id );
}

bool dsi_DSTC0023_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000067: return( true );
      case 40000068: return( true );
      case 40000069: return( true );
      case 40000070: return( true );
      case 40000029: return( true );
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40004673: return( true );
      case 40004586: return( true );
      case 40004587: return( true );
      case 40002139: return( true );
      case 40000044: return( true );
      case 40000045: return( true );
      case 40000046: return( true );
      case 40005429: return( true );
      case 40005428: return( true );
      case 40007299: return( true );
      case 40007426: return( true );
      case 40007427: return( true );
      case 40007172: return ( true );
   }
   return false;
}

