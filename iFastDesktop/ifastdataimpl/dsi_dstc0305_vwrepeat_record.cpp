// BFDataImpl implementation file for DataSet DSTC0305.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0305_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0305_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0305_VWRepeat_Record() { return new dsi_DSTC0305_VWRepeat_Record; }

dsi_DSTC0305_VWRepeat_Record::dsi_DSTC0305_VWRepeat_Record()
: BFDataImpl( 40004626 )
, FeeModelCode_( ifds::FeeModelCode, &ifds::s_FldProp_FeeModelCode )
, FeeModelRecid_( ifds::FeeModelRecid, &ifds::s_FldProp_FeeModelRecid )
, FeeModelDesc_( ifds::FeeModelDesc, &ifds::s_FldProp_FeeModelDesc )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, Version_( ifds::Version, &ifds::s_FldProp_Version )
, CodeIsInUse_( ifds::CodeIsInUse, &ifds::s_FldProp_CodeIsInUse )
, FeeModelType_( ifds::FeeModelType, &ifds::s_FldProp_FeeModelType )
, HoldingCompCode_( ifds::HoldingCompCode, &ifds::s_FldProp_HoldingCompCode )
, HoldingCompName_( ifds::HoldingCompName, &ifds::s_FldProp_HoldingCompName )
, GBCD_( ifds::GBCD, &ifds::s_FldProp_GBCD )
, CalcCurrency_( ifds::CalcCurrency, &ifds::s_FldProp_CalcCurrency )
, CalcRateType_( ifds::CalcRateType, &ifds::s_FldProp_CalcRateType )
, ModelAggregationMethod_( ifds::ModelAggregationMethod, &ifds::s_FldProp_ModelAggregationMethod )
, EligibleFundBy_( ifds::EligibleFundBy, &ifds::s_FldProp_EligibleFundBy )
, Program_( ifds::Program, &ifds::s_FldProp_Program )
, ScheduleFreqID_( ifds::ScheduleFreqID, &ifds::s_FldProp_ScheduleFreqID )
, ShrAcctDeff_( ifds::ShrAcctDeff, &ifds::s_FldProp_ShrAcctDeff )
, FeeModelFundGroup_( ifds::FeeModelFundGroup, &ifds::s_FldProp_FeeModelFundGroup )
, FundSponsorRID_( ifds::FundSponsorRID, &ifds::s_FldProp_FundSponsorRID )
, HoldEntRID_( ifds::HoldEntRID, &ifds::s_FldProp_HoldEntRID )
, FundSponsorVer_( ifds::FundSponsorVer, &ifds::s_FldProp_FundSponsorVer )
, ShrAcctFeeExist_( ifds::ShrAcctFeeExist, &ifds::s_FldProp_ShrAcctFeeExist )
, FeeParmExist_( ifds::FeeParmExist, &ifds::s_FldProp_FeeParmExist )
, LastProcDate_( ifds::LastProcDate, &ifds::s_FldProp_LastProcDate )
, FullMoneyOutApplicable_( ifds::FullMoneyOutApplicable, &ifds::s_FldProp_FullMoneyOutApplicable )
{
   cFields_ = 30;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0305_VWRepeat_Record::~dsi_DSTC0305_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0305_VWRepeat_Record::clone()
{
   dsi_DSTC0305_VWRepeat_Record* p = new dsi_DSTC0305_VWRepeat_Record;
   p->FeeModelCode_ = FeeModelCode_;
   p->FeeModelRecid_ = FeeModelRecid_;
   p->FeeModelDesc_ = FeeModelDesc_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->ProcessDate_ = ProcessDate_;
   p->Username_ = Username_;
   p->ModDate_ = ModDate_;
   p->ModUser_ = ModUser_;
   p->Version_ = Version_;
   p->CodeIsInUse_ = CodeIsInUse_;
   p->FeeModelType_ = FeeModelType_;
   p->HoldingCompCode_ = HoldingCompCode_;
   p->HoldingCompName_ = HoldingCompName_;
   p->GBCD_ = GBCD_;
   p->CalcCurrency_ = CalcCurrency_;
   p->CalcRateType_ = CalcRateType_;
   p->ModelAggregationMethod_ = ModelAggregationMethod_;
   p->EligibleFundBy_ = EligibleFundBy_;
   p->Program_ = Program_;
   p->ScheduleFreqID_ = ScheduleFreqID_;
   p->ShrAcctDeff_ = ShrAcctDeff_;
   p->FeeModelFundGroup_ = FeeModelFundGroup_;
   p->FundSponsorRID_ = FundSponsorRID_;
   p->HoldEntRID_ = HoldEntRID_;
   p->FundSponsorVer_ = FundSponsorVer_;
   p->ShrAcctFeeExist_ = ShrAcctFeeExist_;
   p->FeeParmExist_ = FeeParmExist_;
   p->LastProcDate_ = LastProcDate_;
   p->FullMoneyOutApplicable_ = FullMoneyOutApplicable_;
   return(p);
}

BFDataField* dsi_DSTC0305_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40004584: return ( &FeeModelCode_ ); break; // FeeModelCode
      case 40004617: return ( &FeeModelRecid_ ); break; // FeeModelRecid
      case 40004618: return ( &FeeModelDesc_ ); break; // FeeModelDesc
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40003739: return ( &Version_ ); break; // Version
      case 40004695: return ( &CodeIsInUse_ ); break; // CodeIsInUse
      case 40007025: return ( &FeeModelType_ ); break; // FeeModelType
      case 40007044: return ( &HoldingCompCode_ ); break; // HoldingCompCode
      case 40007043: return ( &HoldingCompName_ ); break; // HoldingCompName
      case 40001901: return ( &GBCD_ ); break; // GBCD
      case 40007059: return ( &CalcCurrency_ ); break; // CalcCurrency
      case 40007060: return ( &CalcRateType_ ); break; // CalcRateType
      case 40007092: return ( &ModelAggregationMethod_ ); break; // ModelAggregationMethod
      case 40007101: return ( &EligibleFundBy_ ); break; // EligibleFundBy
      case 40007061: return ( &Program_ ); break; // Program
      case 40007064: return ( &ScheduleFreqID_ ); break; // ScheduleFreqID
      case 40007063: return ( &ShrAcctDeff_ ); break; // ShrAcctDeff
      case 40007102: return ( &FeeModelFundGroup_ ); break; // FeeModelFundGroup
      case 40007093: return ( &FundSponsorRID_ ); break; // FundSponsorRID
      case 40007094: return ( &HoldEntRID_ ); break; // HoldEntRID
      case 40007095: return ( &FundSponsorVer_ ); break; // FundSponsorVer
      case 40007096: return ( &ShrAcctFeeExist_ ); break; // ShrAcctFeeExist
      case 40007097: return ( &FeeParmExist_ ); break; // FeeParmExist
      case 40000829: return ( &LastProcDate_ ); break; // LastProcDate
      case 40007248: return ( &FullMoneyOutApplicable_ ); break; // FullMoneyOutApplicable
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0305_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0305_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0305_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 30 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FeeModelCode_; break;
            case 1: aFlds_[1] = &FeeModelRecid_; break;
            case 2: aFlds_[2] = &FeeModelDesc_; break;
            case 3: aFlds_[3] = &EffectiveDate_; break;
            case 4: aFlds_[4] = &StopDate_; break;
            case 5: aFlds_[5] = &ProcessDate_; break;
            case 6: aFlds_[6] = &Username_; break;
            case 7: aFlds_[7] = &ModDate_; break;
            case 8: aFlds_[8] = &ModUser_; break;
            case 9: aFlds_[9] = &Version_; break;
            case 10: aFlds_[10] = &CodeIsInUse_; break;
            case 11: aFlds_[11] = &FeeModelType_; break;
            case 12: aFlds_[12] = &HoldingCompCode_; break;
            case 13: aFlds_[13] = &HoldingCompName_; break;
            case 14: aFlds_[14] = &GBCD_; break;
            case 15: aFlds_[15] = &CalcCurrency_; break;
            case 16: aFlds_[16] = &CalcRateType_; break;
            case 17: aFlds_[17] = &ModelAggregationMethod_; break;
            case 18: aFlds_[18] = &EligibleFundBy_; break;
            case 19: aFlds_[19] = &Program_; break;
            case 20: aFlds_[20] = &ScheduleFreqID_; break;
            case 21: aFlds_[21] = &ShrAcctDeff_; break;
            case 22: aFlds_[22] = &FeeModelFundGroup_; break;
            case 23: aFlds_[23] = &FundSponsorRID_; break;
            case 24: aFlds_[24] = &HoldEntRID_; break;
            case 25: aFlds_[25] = &FundSponsorVer_; break;
            case 26: aFlds_[26] = &ShrAcctFeeExist_; break;
            case 27: aFlds_[27] = &FeeParmExist_; break;
            case 28: aFlds_[28] = &LastProcDate_; break;
            case 29: aFlds_[29] = &FullMoneyOutApplicable_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0305_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0305_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0305_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 80 );
}

unsigned long dsi_DSTC0305_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 949 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0305_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0305_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0305_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40004584: return( true );
      case 40004617: return( true );
      case 40004618: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40000216: return( true );
      case 40000117: return( true );
      case 40000217: return( true );
      case 40000218: return( true );
      case 40003739: return( true );
      case 40004695: return( true );
      case 40007025: return( true );
      case 40007044: return( true );
      case 40007043: return( true );
      case 40001901: return( true );
      case 40007059: return( true );
      case 40007060: return( true );
      case 40007092: return( true );
      case 40007101: return( true );
      case 40007061: return( true );
      case 40007064: return( true );
      case 40007063: return( true );
      case 40007102: return( true );
      case 40007093: return( true );
      case 40007094: return( true );
      case 40007095: return( true );
      case 40007096: return( true );
      case 40007097: return( true );
      case 40000829: return( true );
      case 40007248: return( true );
   }
   return false;
}

