// BFDataImpl implementation file for DataSet DSTC0354.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0354_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0354_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0354_VWRepeat_Record() { return new dsi_DSTC0354_VWRepeat_Record; }

dsi_DSTC0354_VWRepeat_Record::dsi_DSTC0354_VWRepeat_Record()
: BFDataImpl( 40005322 )
, WarnCode_( ifds::WarnCode, &ifds::s_FldProp_WarnCode )
, WarnDesc_( ifds::WarnDesc, &ifds::s_FldProp_WarnDesc )
, WarnParam_( ifds::WarnParam, &ifds::s_FldProp_WarnParam )
, RetType_( ifds::RetType, &ifds::s_FldProp_RetType )
, RuleCode_( ifds::RuleCode, &ifds::s_FldProp_RuleCode )
, RuleValue_( ifds::RuleValue, &ifds::s_FldProp_RuleValue )
{
   cFields_ = 6;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0354_VWRepeat_Record::~dsi_DSTC0354_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0354_VWRepeat_Record::clone()
{
   dsi_DSTC0354_VWRepeat_Record* p = new dsi_DSTC0354_VWRepeat_Record;
   p->WarnCode_ = WarnCode_;
   p->WarnDesc_ = WarnDesc_;
   p->WarnParam_ = WarnParam_;
   p->RetType_ = RetType_;
   p->RuleCode_ = RuleCode_;
   p->RuleValue_ = RuleValue_;
   return(p);
}

BFDataField* dsi_DSTC0354_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40005181: return ( &WarnCode_ ); break; // WarnCode
      case 40005182: return ( &WarnDesc_ ); break; // WarnDesc
      case 40005453: return ( &WarnParam_ ); break; // WarnParam
      case 40007421: return ( &RetType_ ); break; // RetType
      case 40007422: return ( &RuleCode_ ); break; // RuleCode
      case 40007423: return ( &RuleValue_ ); break; // RuleValue
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0354_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0354_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0354_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 6 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &WarnCode_; break;
            case 1: aFlds_[1] = &WarnDesc_; break;
            case 2: aFlds_[2] = &WarnParam_; break;
            case 3: aFlds_[3] = &RetType_; break;
            case 4: aFlds_[4] = &RuleCode_; break;
            case 5: aFlds_[5] = &RuleValue_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0354_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0354_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0354_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0354_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 157 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0354_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0354_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0354_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40005181: return( true );
      case 40005182: return( true );
      case 40005453: return( true );
      case 40007421: return( true );
      case 40007422: return( true );
      case 40007423: return( true );
   }
   return false;
}

