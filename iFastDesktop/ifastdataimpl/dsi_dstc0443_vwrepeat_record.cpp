// BFDataImpl implementation file for DataSet DSTC0443.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Tuesday, October 13, 2015 16:26:25


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0443_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0443_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0443_VWRepeat_Record() { return new dsi_DSTC0443_VWRepeat_Record; }

dsi_DSTC0443_VWRepeat_Record::dsi_DSTC0443_VWRepeat_Record()
: BFDataImpl( 40006973 )
, RegDocId_( ifds::RegDocId, &ifds::s_FldProp_RegDocId )
, RegDocName_( ifds::RegDocName, &ifds::s_FldProp_RegDocName )
, TaxImpact_( ifds::TaxImpact, &ifds::s_FldProp_TaxImpact )
, TaxJuris_( ifds::TaxJuris, &ifds::s_FldProp_TaxJuris )
, TaxExType_( ifds::TaxExType, &ifds::s_FldProp_TaxExType )
, RegDocComplyRule_( ifds::RegDocComplyRule, &ifds::s_FldProp_RegDocComplyRule )
{
   cFields_ = 6;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0443_VWRepeat_Record::~dsi_DSTC0443_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0443_VWRepeat_Record::clone()
{
   dsi_DSTC0443_VWRepeat_Record* p = new dsi_DSTC0443_VWRepeat_Record;
   p->RegDocId_ = RegDocId_;
   p->RegDocName_ = RegDocName_;
   p->TaxImpact_ = TaxImpact_;
   p->TaxJuris_ = TaxJuris_;
   p->TaxExType_ = TaxExType_;
   p->RegDocComplyRule_ = RegDocComplyRule_;
   return(p);
}

BFDataField* dsi_DSTC0443_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40005804: return ( &RegDocId_ ); break; // RegDocId
      case 40005803: return ( &RegDocName_ ); break; // RegDocName
      case 40007001: return ( &TaxImpact_ ); break; // TaxImpact
      case 40004447: return ( &TaxJuris_ ); break; // TaxJuris
      case 40004558: return ( &TaxExType_ ); break; // TaxExType
      case 40007588: return ( &RegDocComplyRule_ ); break; // RegDocComplyRule
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0443_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0443_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0443_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 6 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RegDocId_; break;
            case 1: aFlds_[1] = &RegDocName_; break;
            case 2: aFlds_[2] = &TaxImpact_; break;
            case 3: aFlds_[3] = &TaxJuris_; break;
            case 4: aFlds_[4] = &TaxExType_; break;
            case 5: aFlds_[5] = &RegDocComplyRule_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0443_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0443_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0443_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 256 );
}

unsigned long dsi_DSTC0443_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 548 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0443_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0443_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0443_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40005804: return( true );
      case 40005803: return( true );
      case 40007001: return( true );
      case 40004447: return( true );
      case 40004558: return( true );
      case 40007588: return ( true );
   }
   return false;
}

