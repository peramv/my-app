// BFDataImpl implementation file for DataSet DSTC0323.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0323_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0323_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0323_VWRepeat_Record() { return new dsi_DSTC0323_VWRepeat_Record; }

dsi_DSTC0323_VWRepeat_Record::dsi_DSTC0323_VWRepeat_Record()
: BFDataImpl( 40004785 )
, AggregateOption_( ifds::AggregateOption, &ifds::s_FldProp_AggregateOption )
, OmnibusID_( ifds::OmnibusID, &ifds::s_FldProp_OmnibusID )
, FundBrokerCode_( ifds::FundBrokerCode, &ifds::s_FldProp_FundBrokerCode )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, GroupCode_( ifds::GroupCode, &ifds::s_FldProp_GroupCode )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, AmountType_( ifds::AmountType, &ifds::s_FldProp_AmountType )
, TradeDate_( ifds::TradeDate, &ifds::s_FldProp_TradeDate )
, BrkSettlDate_( ifds::BrkSettlDate, &ifds::s_FldProp_BrkSettlDate )
, BrkSettlAmtUnits_( ifds::BrkSettlAmtUnits, &ifds::s_FldProp_BrkSettlAmtUnits )
, BrkSettlPUD_( ifds::BrkSettlPUD, &ifds::s_FldProp_BrkSettlPUD )
, AFTBenefit_( ifds::AFTBenefit, &ifds::s_FldProp_AFTBenefit )
, Price_( ifds::Price, &ifds::s_FldProp_Price )
, AggrPriceType_( ifds::AggrPriceType, &ifds::s_FldProp_AggrPriceType )
, Commission_( ifds::Commission, &ifds::s_FldProp_Commission )
, ExternCharge_( ifds::ExternCharge, &ifds::s_FldProp_ExternCharge )
, RebateRate_( ifds::RebateRate, &ifds::s_FldProp_RebateRate )
, OrdStatus_( ifds::OrdStatus, &ifds::s_FldProp_OrdStatus )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, NAV_( ifds::NAV, &ifds::s_FldProp_NAV )
, OfferPrice_( ifds::OfferPrice, &ifds::s_FldProp_OfferPrice )
, DeliveryTo_( ifds::DeliveryTo, &ifds::s_FldProp_DeliveryTo )
, ForAccount_( ifds::ForAccount, &ifds::s_FldProp_ForAccount )
, InFavourOf_( ifds::InFavourOf, &ifds::s_FldProp_InFavourOf )
, SettlInstrCode_( ifds::SettlInstrCode, &ifds::s_FldProp_SettlInstrCode )
, SettleAccountNum_( ifds::SettleAccountNum, &ifds::s_FldProp_SettleAccountNum )
, SettleLocationCode_( ifds::SettleLocationCode, &ifds::s_FldProp_SettleLocationCode )
, ProcessTime_( ifds::ProcessTime, &ifds::s_FldProp_ProcessTime )
, RemarksAggr_( ifds::RemarksAggr, &ifds::s_FldProp_RemarksAggr )
, RoutingRef_( ifds::RoutingRef, &ifds::s_FldProp_RoutingRef )
, RoutingType_( ifds::RoutingType, &ifds::s_FldProp_RoutingType )
, AggrOrdId_( ifds::AggrOrdId, &ifds::s_FldProp_AggrOrdId )
, AggrOrdVer_( ifds::AggrOrdVer, &ifds::s_FldProp_AggrOrdVer )
, ClrSettlMethod_( ifds::ClrSettlMethod, &ifds::s_FldProp_ClrSettlMethod )
, BrokerName_( ifds::BrokerName, &ifds::s_FldProp_BrokerName )
, FundName_( ifds::FundName, &ifds::s_FldProp_FundName )
, ReasonCode_( ifds::ReasonCode, &ifds::s_FldProp_ReasonCode )
, FundIDType_( ifds::FundIDType, &ifds::s_FldProp_FundIDType )
, FundIDValue_( ifds::FundIDValue, &ifds::s_FldProp_FundIDValue )
, SecRecFileIndicator_( ifds::SecRecFileIndicator, &ifds::s_FldProp_SecRecFileIndicator )
, ProcessedTrade_( ifds::ProcessedTrade, &ifds::s_FldProp_ProcessedTrade )
, AggrDate_( ifds::AggrDate, &ifds::s_FldProp_AggrDate )
, AggrTime_( ifds::AggrTime, &ifds::s_FldProp_AggrTime )
, CashMsgType_( ifds::CashMsgType, &ifds::s_FldProp_CashMsgType )
, IntermediaryBank_( ifds::IntermediaryBank, &ifds::s_FldProp_IntermediaryBank )
, ReceivingBank_( ifds::ReceivingBank, &ifds::s_FldProp_ReceivingBank )
, Beneficiary_( ifds::Beneficiary, &ifds::s_FldProp_Beneficiary )
, SpecialInstructions_( ifds::SpecialInstructions, &ifds::s_FldProp_SpecialInstructions )
, InternalSettlementAccount_( ifds::InternalSettlementAccount, &ifds::s_FldProp_InternalSettlementAccount )
, LastModfiedStatus_( ifds::LastModfiedStatus, &ifds::s_FldProp_LastModfiedStatus )
, CancelRequestedUser_( ifds::CancelRequestedUser, &ifds::s_FldProp_CancelRequestedUser )
{
   cFields_ = 56;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0323_VWRepeat_Record::~dsi_DSTC0323_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0323_VWRepeat_Record::clone()
{
   dsi_DSTC0323_VWRepeat_Record* p = new dsi_DSTC0323_VWRepeat_Record;
   p->AggregateOption_ = AggregateOption_;
   p->OmnibusID_ = OmnibusID_;
   p->FundBrokerCode_ = FundBrokerCode_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->TransType_ = TransType_;
   p->GroupCode_ = GroupCode_;
   p->Amount_ = Amount_;
   p->AmountType_ = AmountType_;
   p->TradeDate_ = TradeDate_;
   p->BrkSettlDate_ = BrkSettlDate_;
   p->BrkSettlAmtUnits_ = BrkSettlAmtUnits_;
   p->BrkSettlPUD_ = BrkSettlPUD_;
   p->AFTBenefit_ = AFTBenefit_;
   p->Price_ = Price_;
   p->AggrPriceType_ = AggrPriceType_;
   p->Commission_ = Commission_;
   p->ExternCharge_ = ExternCharge_;
   p->RebateRate_ = RebateRate_;
   p->OrdStatus_ = OrdStatus_;
   p->Username_ = Username_;
   p->ProcessDate_ = ProcessDate_;
   p->ModUser_ = ModUser_;
   p->ModDate_ = ModDate_;
   p->NAV_ = NAV_;
   p->OfferPrice_ = OfferPrice_;
   p->DeliveryTo_ = DeliveryTo_;
   p->ForAccount_ = ForAccount_;
   p->InFavourOf_ = InFavourOf_;
   p->SettlInstrCode_ = SettlInstrCode_;
   p->SettleAccountNum_ = SettleAccountNum_;
   p->SettleLocationCode_ = SettleLocationCode_;
   p->ProcessTime_ = ProcessTime_;
   p->RemarksAggr_ = RemarksAggr_;
   p->RoutingRef_ = RoutingRef_;
   p->RoutingType_ = RoutingType_;
   p->AggrOrdId_ = AggrOrdId_;
   p->AggrOrdVer_ = AggrOrdVer_;
   p->ClrSettlMethod_ = ClrSettlMethod_;
   p->BrokerName_ = BrokerName_;
   p->FundName_ = FundName_;
   p->ReasonCode_ = ReasonCode_;
   p->FundIDType_ = FundIDType_;
   p->FundIDValue_ = FundIDValue_;
   p->SecRecFileIndicator_ = SecRecFileIndicator_;
   p->ProcessedTrade_ = ProcessedTrade_;
   p->AggrDate_ = AggrDate_;
   p->AggrTime_ = AggrTime_;
   p->CashMsgType_ = CashMsgType_;
   p->IntermediaryBank_ = IntermediaryBank_;
   p->ReceivingBank_ = ReceivingBank_;
   p->Beneficiary_ = Beneficiary_;
   p->SpecialInstructions_ = SpecialInstructions_;
   p->InternalSettlementAccount_ = InternalSettlementAccount_;
   p->LastModfiedStatus_ = LastModfiedStatus_;
   p->CancelRequestedUser_ = CancelRequestedUser_;
   return(p);
}

BFDataField* dsi_DSTC0323_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40004789: return ( &AggregateOption_ ); break; // AggregateOption
      case 40004780: return ( &OmnibusID_ ); break; // OmnibusID
      case 40004712: return ( &FundBrokerCode_ ); break; // FundBrokerCode
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40000800: return ( &GroupCode_ ); break; // GroupCode
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40000232: return ( &AmountType_ ); break; // AmountType
      case 40000097: return ( &TradeDate_ ); break; // TradeDate
      case 40004814: return ( &BrkSettlDate_ ); break; // BrkSettlDate
      case 40004815: return ( &BrkSettlAmtUnits_ ); break; // BrkSettlAmtUnits
      case 40004816: return ( &BrkSettlPUD_ ); break; // BrkSettlPUD
      case 40004817: return ( &AFTBenefit_ ); break; // AFTBenefit
      case 40003094: return ( &Price_ ); break; // Price
      case 40004906: return ( &AggrPriceType_ ); break; // AggrPriceType
      case 40000441: return ( &Commission_ ); break; // Commission
      case 40004818: return ( &ExternCharge_ ); break; // ExternCharge
      case 40004819: return ( &RebateRate_ ); break; // RebateRate
      case 40004783: return ( &OrdStatus_ ); break; // OrdStatus
      case 40000117: return ( &Username_ ); break; // Username
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40004821: return ( &NAV_ ); break; // NAV
      case 40002191: return ( &OfferPrice_ ); break; // OfferPrice
      case 40004822: return ( &DeliveryTo_ ); break; // DeliveryTo
      case 40004823: return ( &ForAccount_ ); break; // ForAccount
      case 40002178: return ( &InFavourOf_ ); break; // InFavourOf
      case 40004825: return ( &SettlInstrCode_ ); break; // SettlInstrCode
      case 40004263: return ( &SettleAccountNum_ ); break; // SettleAccountNum
      case 40004261: return ( &SettleLocationCode_ ); break; // SettleLocationCode
      case 40000491: return ( &ProcessTime_ ); break; // ProcessTime
      case 40004833: return ( &RemarksAggr_ ); break; // RemarksAggr
      case 40004836: return ( &RoutingRef_ ); break; // RoutingRef
      case 40004717: return ( &RoutingType_ ); break; // RoutingType
      case 40004828: return ( &AggrOrdId_ ); break; // AggrOrdId
      case 40004829: return ( &AggrOrdVer_ ); break; // AggrOrdVer
      case 40004830: return ( &ClrSettlMethod_ ); break; // ClrSettlMethod
      case 40000210: return ( &BrokerName_ ); break; // BrokerName
      case 40001841: return ( &FundName_ ); break; // FundName
      case 40000618: return ( &ReasonCode_ ); break; // ReasonCode
      case 40004966: return ( &FundIDType_ ); break; // FundIDType
      case 40004967: return ( &FundIDValue_ ); break; // FundIDValue
      case 40005381: return ( &SecRecFileIndicator_ ); break; // SecRecFileIndicator
      case 40005400: return ( &ProcessedTrade_ ); break; // ProcessedTrade
      case 40007352: return ( &AggrDate_ ); break; // AggrDate
      case 40007353: return ( &AggrTime_ ); break; // AggrTime
      case 40007434: return ( &CashMsgType_ ); break; // CashMsgType
      case 40007435: return ( &IntermediaryBank_ ); break; // IntermediaryBank
      case 40007436: return ( &ReceivingBank_ ); break; // ReceivingBank
      case 40007437: return ( &Beneficiary_ ); break; // Beneficiary
      case 40007438: return ( &SpecialInstructions_ ); break; // SpecialInstructions
      case 40007453: return ( &InternalSettlementAccount_ ); break; // InternalSettlementAccount
      case 40007458: return ( &LastModfiedStatus_ ); break; // LastModfiedStatus
      case 40007459: return ( &CancelRequestedUser_ ); break; // CancelRequestedUser
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0323_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0323_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0323_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 56 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AggregateOption_; break;
            case 1: aFlds_[1] = &OmnibusID_; break;
            case 2: aFlds_[2] = &FundBrokerCode_; break;
            case 3: aFlds_[3] = &FundCode_; break;
            case 4: aFlds_[4] = &ClassCode_; break;
            case 5: aFlds_[5] = &TransType_; break;
            case 6: aFlds_[6] = &GroupCode_; break;
            case 7: aFlds_[7] = &Amount_; break;
            case 8: aFlds_[8] = &AmountType_; break;
            case 9: aFlds_[9] = &TradeDate_; break;
            case 10: aFlds_[10] = &BrkSettlDate_; break;
            case 11: aFlds_[11] = &BrkSettlAmtUnits_; break;
            case 12: aFlds_[12] = &BrkSettlPUD_; break;
            case 13: aFlds_[13] = &AFTBenefit_; break;
            case 14: aFlds_[14] = &Price_; break;
            case 15: aFlds_[15] = &AggrPriceType_; break;
            case 16: aFlds_[16] = &Commission_; break;
            case 17: aFlds_[17] = &ExternCharge_; break;
            case 18: aFlds_[18] = &RebateRate_; break;
            case 19: aFlds_[19] = &OrdStatus_; break;
            case 20: aFlds_[20] = &Username_; break;
            case 21: aFlds_[21] = &ProcessDate_; break;
            case 22: aFlds_[22] = &ModUser_; break;
            case 23: aFlds_[23] = &ModDate_; break;
            case 24: aFlds_[24] = &NAV_; break;
            case 25: aFlds_[25] = &OfferPrice_; break;
            case 26: aFlds_[26] = &DeliveryTo_; break;
            case 27: aFlds_[27] = &ForAccount_; break;
            case 28: aFlds_[28] = &InFavourOf_; break;
            case 29: aFlds_[29] = &SettlInstrCode_; break;
            case 30: aFlds_[30] = &SettleAccountNum_; break;
            case 31: aFlds_[31] = &SettleLocationCode_; break;
            case 32: aFlds_[32] = &ProcessTime_; break;
            case 33: aFlds_[33] = &RemarksAggr_; break;
            case 34: aFlds_[34] = &RoutingRef_; break;
            case 35: aFlds_[35] = &RoutingType_; break;
            case 36: aFlds_[36] = &AggrOrdId_; break;
            case 37: aFlds_[37] = &AggrOrdVer_; break;
            case 38: aFlds_[38] = &ClrSettlMethod_; break;
            case 39: aFlds_[39] = &BrokerName_; break;
            case 40: aFlds_[40] = &FundName_; break;
            case 41: aFlds_[41] = &ReasonCode_; break;
            case 42: aFlds_[42] = &FundIDType_; break;
            case 43: aFlds_[43] = &FundIDValue_; break;
            case 44: aFlds_[44] = &SecRecFileIndicator_; break;
            case 45: aFlds_[45] = &ProcessedTrade_; break;
            case 46: aFlds_[46] = &AggrDate_; break;
            case 47: aFlds_[47] = &AggrTime_; break;
            case 48: aFlds_[48] = &CashMsgType_; break;
            case 49: aFlds_[49] = &IntermediaryBank_; break;
            case 50: aFlds_[50] = &ReceivingBank_; break;
            case 51: aFlds_[51] = &Beneficiary_; break;
            case 52: aFlds_[52] = &SpecialInstructions_; break;
            case 53: aFlds_[53] = &InternalSettlementAccount_; break;
            case 54: aFlds_[54] = &LastModfiedStatus_; break;
            case 55: aFlds_[55] = &CancelRequestedUser_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0323_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0323_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0323_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0323_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 2576 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0323_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0323_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0323_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40004789: return( true );
      case 40004780: return( true );
      case 40004712: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000095: return( true );
      case 40000800: return( true );
      case 40000231: return( true );
      case 40000232: return( true );
      case 40000097: return( true );
      case 40004814: return( true );
      case 40004815: return( true );
      case 40004816: return( true );
      case 40004817: return( true );
      case 40003094: return( true );
      case 40004906: return( true );
      case 40000441: return( true );
      case 40004818: return( true );
      case 40004819: return( true );
      case 40004783: return( true );
      case 40000117: return( true );
      case 40000216: return( true );
      case 40000218: return( true );
      case 40000217: return( true );
      case 40004821: return( true );
      case 40002191: return( true );
      case 40004822: return( true );
      case 40004823: return( true );
      case 40002178: return( true );
      case 40004825: return( true );
      case 40004263: return( true );
      case 40004261: return( true );
      case 40000491: return( true );
      case 40004833: return( true );
      case 40004836: return( true );
      case 40004717: return( true );
      case 40004828: return( true );
      case 40004829: return( true );
      case 40004830: return( true );
      case 40000210: return( true );
      case 40001841: return( true );
      case 40000618: return( true );
      case 40004966: return( true );
      case 40004967: return( true );
      case 40005381: return( true );
      case 40005400: return( true );
      case 40007352: return( true );
      case 40007353: return( true );
      case 40007434: return( true );
      case 40007435: return( true );
      case 40007436: return( true );
      case 40007437: return( true );
      case 40007438: return( true );
      case 40007453: return( true );
      case 40007458: return( true );
      case 40007459: return( true );
   }
   return false;
}

