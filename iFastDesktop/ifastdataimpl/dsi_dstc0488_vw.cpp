// BFDataImpl implementation file for DataSet DSTC0488.VW
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Monday, November 12, 2018 16:30:09


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0488_vw.h"


// This function creates an instance of dsi_DSTC0488_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0488_VW() { return new dsi_DSTC0488_VW; }

dsi_DSTC0488_VW::dsi_DSTC0488_VW()
: BFDataImpl( 40007914 )
, ExtAccount_( ifds::ExtAccount, &ifds::s_FldProp_ExtAccount )
, ExtSpecimenPlanNo_( ifds::ExtSpecimenPlanNo, &ifds::s_FldProp_ExtSpecimenPlanNo )
, NontaxContrib_( ifds::NontaxContrib, &ifds::s_FldProp_NontaxContrib )
, Rollovers_( ifds::Rollovers, &ifds::s_FldProp_Rollovers )
, CDSGrant_( ifds::CDSGrant, &ifds::s_FldProp_CDSGrant )
, CDSBond_( ifds::CDSBond, &ifds::s_FldProp_CDSBond )
, CurrYrFMV_( ifds::CurrYrFMV, &ifds::s_FldProp_CurrYrFMV )
, PrevYrGrantBond_( ifds::PrevYrGrantBond, &ifds::s_FldProp_PrevYrGrantBond )
, PrevYrContrib_( ifds::PrevYrContrib, &ifds::s_FldProp_PrevYrContrib )
, PrevYrNonTaxRedAmt_( ifds::PrevYrNonTaxRedAmt, &ifds::s_FldProp_PrevYrNonTaxRedAmt )
, PrevYrTaxRedAmt_( ifds::PrevYrTaxRedAmt, &ifds::s_FldProp_PrevYrTaxRedAmt )
, CurrYrNonTaxRedAmt_( ifds::CurrYrNonTaxRedAmt, &ifds::s_FldProp_CurrYrNonTaxRedAmt )
, CurrYrTaxRedAmt_( ifds::CurrYrTaxRedAmt, &ifds::s_FldProp_CurrYrTaxRedAmt )
{
    cFields_ = 13;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0488_VW::~dsi_DSTC0488_VW()
{
}

BFDataImpl* dsi_DSTC0488_VW::clone()
{
    dsi_DSTC0488_VW* p = new dsi_DSTC0488_VW;
    p->ExtAccount_ = ExtAccount_;
    p->ExtSpecimenPlanNo_ = ExtSpecimenPlanNo_;
    p->NontaxContrib_ = NontaxContrib_;
    p->Rollovers_ = Rollovers_;
    p->CDSGrant_ = CDSGrant_;
    p->CDSBond_ = CDSBond_;
    p->CurrYrFMV_ = CurrYrFMV_;
    p->PrevYrGrantBond_ = PrevYrGrantBond_;
    p->PrevYrContrib_ = PrevYrContrib_;
    p->PrevYrNonTaxRedAmt_ = PrevYrNonTaxRedAmt_;
    p->PrevYrTaxRedAmt_ = PrevYrTaxRedAmt_;
    p->CurrYrNonTaxRedAmt_ = CurrYrNonTaxRedAmt_;
    p->CurrYrTaxRedAmt_ = CurrYrTaxRedAmt_;
    return(p);
}

BFDataField* dsi_DSTC0488_VW::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40007900: return ( &ExtAccount_ ); break; // ExtAccount
        case 40007901: return ( &ExtSpecimenPlanNo_ ); break; // ExtSpecimenPlanNo
        case 40007902: return ( &NontaxContrib_ ); break; // NontaxContrib
        case 40007903: return ( &Rollovers_ ); break; // Rollovers
        case 40007904: return ( &CDSGrant_ ); break; // CDSGrant
        case 40007905: return ( &CDSBond_ ); break; // CDSBond
        case 40007906: return ( &CurrYrFMV_ ); break; // CurrYrFMV
        case 40007907: return ( &PrevYrGrantBond_ ); break; // PrevYrGrantBond
        case 40007908: return ( &PrevYrContrib_ ); break; // PrevYrContrib
        case 40007909: return ( &PrevYrNonTaxRedAmt_ ); break; // PrevYrNonTaxRedAmt
        case 40007910: return ( &PrevYrTaxRedAmt_ ); break; // PrevYrTaxRedAmt
        case 40007911: return ( &CurrYrNonTaxRedAmt_ ); break; // CurrYrNonTaxRedAmt
        case 40007912: return ( &CurrYrTaxRedAmt_ ); break; // CurrYrTaxRedAmt
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0488_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0488_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0488_VW::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 13 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &ExtAccount_; break;
                case 1: aFlds_[1] = &ExtSpecimenPlanNo_; break;
                case 2: aFlds_[2] = &NontaxContrib_; break;
                case 3: aFlds_[3] = &Rollovers_; break;
                case 4: aFlds_[4] = &CDSGrant_; break;
                case 5: aFlds_[5] = &CDSBond_; break;
                case 6: aFlds_[6] = &CurrYrFMV_; break;
                case 7: aFlds_[7] = &PrevYrGrantBond_; break;
                case 8: aFlds_[8] = &PrevYrContrib_; break;
                case 9: aFlds_[9] = &PrevYrNonTaxRedAmt_; break;
                case 10: aFlds_[10] = &PrevYrTaxRedAmt_; break;
                case 11: aFlds_[11] = &CurrYrNonTaxRedAmt_; break;
                case 12: aFlds_[12] = &CurrYrTaxRedAmt_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0488_VW::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0488_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0488_VW::getLargestDefinedField( void ) const
{
    return( 30 );
}

unsigned long dsi_DSTC0488_VW::getDefinedByteLength( void ) const
{
    return( 280 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0488_VW::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0488_VW::fieldExists( id );
}

bool dsi_DSTC0488_VW::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40007900: return ( true );
        case 40007901: return ( true );
        case 40007902: return ( true );
        case 40007903: return ( true );
        case 40007904: return ( true );
        case 40007905: return ( true );
        case 40007906: return ( true );
        case 40007907: return ( true );
        case 40007908: return ( true );
        case 40007909: return ( true );
        case 40007910: return ( true );
        case 40007911: return ( true );
        case 40007912: return ( true );
    }
    return false;
}

