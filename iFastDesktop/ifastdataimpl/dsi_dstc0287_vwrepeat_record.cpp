// BFDataImpl implementation file for DataSet DSTC0287.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0287_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0287_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0287_VWRepeat_Record() { return new dsi_DSTC0287_VWRepeat_Record; }

dsi_DSTC0287_VWRepeat_Record::dsi_DSTC0287_VWRepeat_Record()
: BFDataImpl( 40004393 )
, InvSummId_( ifds::InvSummId, &ifds::s_FldProp_InvSummId )
, InvStatus_( ifds::InvStatus, &ifds::s_FldProp_InvStatus )
, OrigEffectiveDate_( ifds::OrigEffectiveDate, &ifds::s_FldProp_OrigEffectiveDate )
, MaturityDate_( ifds::MaturityDate, &ifds::s_FldProp_MaturityDate )
, LastActiveDate_( ifds::LastActiveDate, &ifds::s_FldProp_LastActiveDate )
, FromFund_( ifds::FromFund, &ifds::s_FldProp_FromFund )
, FromClass_( ifds::FromClass, &ifds::s_FldProp_FromClass )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, PartnerShip_( ifds::PartnerShip, &ifds::s_FldProp_PartnerShip )
, OrigFundRate_( ifds::OrigFundRate, &ifds::s_FldProp_OrigFundRate )
, Rate_( ifds::Rate, &ifds::s_FldProp_Rate )
, OrigFundUnits_( ifds::OrigFundUnits, &ifds::s_FldProp_OrigFundUnits )
, Units_( ifds::Units, &ifds::s_FldProp_Units )
, Commissionable_( ifds::Commissionable, &ifds::s_FldProp_Commissionable )
, CommRate_( ifds::CommRate, &ifds::s_FldProp_CommRate )
, TraceNo_( ifds::TraceNo, &ifds::s_FldProp_TraceNo )
, MatureDate_( ifds::MatureDate, &ifds::s_FldProp_MatureDate )
, ReceiptStatus_( ifds::ReceiptStatus, &ifds::s_FldProp_ReceiptStatus )
, TaxJuris_( ifds::TaxJuris, &ifds::s_FldProp_TaxJuris )
, ReceiptNumber_( ifds::ReceiptNumber, &ifds::s_FldProp_ReceiptNumber )
, OriginalTotalUnits_( ifds::OriginalTotalUnits, &ifds::s_FldProp_OriginalTotalUnits )
, UsedUnits_( ifds::UsedUnits, &ifds::s_FldProp_UsedUnits )
, RollQualDate_( ifds::RollQualDate, &ifds::s_FldProp_RollQualDate )
, RDRAdvice_( ifds::RDRAdvice, &ifds::s_FldProp_RDRAdvice )
, GroupOrigDate_( ifds::GroupOrigDate, &ifds::s_FldProp_GroupOrigDate )
{
   cFields_ = 25;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0287_VWRepeat_Record::~dsi_DSTC0287_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0287_VWRepeat_Record::clone()
{
   dsi_DSTC0287_VWRepeat_Record* p = new dsi_DSTC0287_VWRepeat_Record;
   p->InvSummId_ = InvSummId_;
   p->InvStatus_ = InvStatus_;
   p->OrigEffectiveDate_ = OrigEffectiveDate_;
   p->MaturityDate_ = MaturityDate_;
   p->LastActiveDate_ = LastActiveDate_;
   p->FromFund_ = FromFund_;
   p->FromClass_ = FromClass_;
   p->TransType_ = TransType_;
   p->PartnerShip_ = PartnerShip_;
   p->OrigFundRate_ = OrigFundRate_;
   p->Rate_ = Rate_;
   p->OrigFundUnits_ = OrigFundUnits_;
   p->Units_ = Units_;
   p->Commissionable_ = Commissionable_;
   p->CommRate_ = CommRate_;
   p->TraceNo_ = TraceNo_;
   p->MatureDate_ = MatureDate_;
   p->ReceiptStatus_ = ReceiptStatus_;
   p->TaxJuris_ = TaxJuris_;
   p->ReceiptNumber_ = ReceiptNumber_;
   p->OriginalTotalUnits_ = OriginalTotalUnits_;
   p->UsedUnits_ = UsedUnits_;
   p->RollQualDate_ = RollQualDate_;
   p->RDRAdvice_ = RDRAdvice_;
   p->GroupOrigDate_ = GroupOrigDate_;
   return(p);
}

BFDataField* dsi_DSTC0287_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40004394: return ( &InvSummId_ ); break; // InvSummId
      case 40004395: return ( &InvStatus_ ); break; // InvStatus
      case 40004396: return ( &OrigEffectiveDate_ ); break; // OrigEffectiveDate
      case 40000679: return ( &MaturityDate_ ); break; // MaturityDate
      case 40004397: return ( &LastActiveDate_ ); break; // LastActiveDate
      case 40000719: return ( &FromFund_ ); break; // FromFund
      case 40000720: return ( &FromClass_ ); break; // FromClass
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40000447: return ( &PartnerShip_ ); break; // PartnerShip
      case 40004398: return ( &OrigFundRate_ ); break; // OrigFundRate
      case 40002919: return ( &Rate_ ); break; // Rate
      case 40004399: return ( &OrigFundUnits_ ); break; // OrigFundUnits
      case 40000332: return ( &Units_ ); break; // Units
      case 40004400: return ( &Commissionable_ ); break; // Commissionable
      case 40002444: return ( &CommRate_ ); break; // CommRate
      case 40004444: return ( &TraceNo_ ); break; // TraceNo
      case 40004445: return ( &MatureDate_ ); break; // MatureDate
      case 40004446: return ( &ReceiptStatus_ ); break; // ReceiptStatus
      case 40004447: return ( &TaxJuris_ ); break; // TaxJuris
      case 40004449: return ( &ReceiptNumber_ ); break; // ReceiptNumber
      case 40004498: return ( &OriginalTotalUnits_ ); break; // OriginalTotalUnits
      case 40000392: return ( &UsedUnits_ ); break; // UsedUnits
      case 40005785: return ( &RollQualDate_ ); break; // RollQualDate
      case 40006963: return ( &RDRAdvice_ ); break; // RDRAdvice
      case 40007238: return ( &GroupOrigDate_ ); break; // GroupOrigDate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0287_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0287_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0287_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 25 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &InvSummId_; break;
            case 1: aFlds_[1] = &InvStatus_; break;
            case 2: aFlds_[2] = &OrigEffectiveDate_; break;
            case 3: aFlds_[3] = &MaturityDate_; break;
            case 4: aFlds_[4] = &LastActiveDate_; break;
            case 5: aFlds_[5] = &FromFund_; break;
            case 6: aFlds_[6] = &FromClass_; break;
            case 7: aFlds_[7] = &TransType_; break;
            case 8: aFlds_[8] = &PartnerShip_; break;
            case 9: aFlds_[9] = &OrigFundRate_; break;
            case 10: aFlds_[10] = &Rate_; break;
            case 11: aFlds_[11] = &OrigFundUnits_; break;
            case 12: aFlds_[12] = &Units_; break;
            case 13: aFlds_[13] = &Commissionable_; break;
            case 14: aFlds_[14] = &CommRate_; break;
            case 15: aFlds_[15] = &TraceNo_; break;
            case 16: aFlds_[16] = &MatureDate_; break;
            case 17: aFlds_[17] = &ReceiptStatus_; break;
            case 18: aFlds_[18] = &TaxJuris_; break;
            case 19: aFlds_[19] = &ReceiptNumber_; break;
            case 20: aFlds_[20] = &OriginalTotalUnits_; break;
            case 21: aFlds_[21] = &UsedUnits_; break;
            case 22: aFlds_[22] = &RollQualDate_; break;
            case 23: aFlds_[23] = &RDRAdvice_; break;
            case 24: aFlds_[24] = &GroupOrigDate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0287_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0287_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0287_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0287_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 804 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0287_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0287_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0287_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40004394: return( true );
      case 40004395: return( true );
      case 40004396: return( true );
      case 40000679: return( true );
      case 40004397: return( true );
      case 40000719: return( true );
      case 40000720: return( true );
      case 40000095: return( true );
      case 40000447: return( true );
      case 40004398: return( true );
      case 40002919: return( true );
      case 40004399: return( true );
      case 40000332: return( true );
      case 40004400: return( true );
      case 40002444: return( true );
      case 40004444: return( true );
      case 40004445: return( true );
      case 40004446: return( true );
      case 40004447: return( true );
      case 40004449: return( true );
      case 40004498: return( true );
      case 40000392: return( true );
      case 40005785: return( true );
      case 40006963: return( true );
      case 40007238: return( true );
   }
   return false;
}

