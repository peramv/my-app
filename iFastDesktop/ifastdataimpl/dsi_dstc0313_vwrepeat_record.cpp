// BFDataImpl implementation file for DataSet DSTC0313.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0313_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0313_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0313_VWRepeat_Record() { return new dsi_DSTC0313_VWRepeat_Record; }

dsi_DSTC0313_VWRepeat_Record::dsi_DSTC0313_VWRepeat_Record()
: BFDataImpl( 40004670 )
, UnitId_( ifds::UnitId, &ifds::s_FldProp_UnitId )
, UnitFactor_( ifds::UnitFactor, &ifds::s_FldProp_UnitFactor )
, UnitFactorDesc_( ifds::UnitFactorDesc, &ifds::s_FldProp_UnitFactorDesc )
, FactorRate_( ifds::FactorRate, &ifds::s_FldProp_FactorRate )
{
   cFields_ = 4;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0313_VWRepeat_Record::~dsi_DSTC0313_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0313_VWRepeat_Record::clone()
{
   dsi_DSTC0313_VWRepeat_Record* p = new dsi_DSTC0313_VWRepeat_Record;
   p->UnitId_ = UnitId_;
   p->UnitFactor_ = UnitFactor_;
   p->UnitFactorDesc_ = UnitFactorDesc_;
   p->FactorRate_ = FactorRate_;
   return(p);
}

BFDataField* dsi_DSTC0313_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40004660: return ( &UnitId_ ); break; // UnitId
      case 40004664: return ( &UnitFactor_ ); break; // UnitFactor
      case 40004671: return ( &UnitFactorDesc_ ); break; // UnitFactorDesc
      case 40004666: return ( &FactorRate_ ); break; // FactorRate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0313_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0313_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0313_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 4 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &UnitId_; break;
            case 1: aFlds_[1] = &UnitFactor_; break;
            case 2: aFlds_[2] = &UnitFactorDesc_; break;
            case 3: aFlds_[3] = &FactorRate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0313_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0313_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0313_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0313_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 160 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0313_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0313_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0313_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40004660: return( true );
      case 40004664: return( true );
      case 40004671: return( true );
      case 40004666: return( true );
   }
   return false;
}

