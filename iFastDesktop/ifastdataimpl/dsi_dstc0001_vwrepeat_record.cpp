// BFDataImpl implementation file for DataSet DSTC0001.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:58 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0001_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0001_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0001_VWRepeat_Record() { return new dsi_DSTC0001_VWRepeat_Record; }

dsi_DSTC0001_VWRepeat_Record::dsi_DSTC0001_VWRepeat_Record()
: BFDataImpl( 40000121 )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, CompanyName_( ifds::CompanyName, &ifds::s_FldProp_CompanyName )
, AccessAllSlsRep_( ifds::AccessAllSlsRep, &ifds::s_FldProp_AccessAllSlsRep )
, ClientID_( ifds::ClientID, &ifds::s_FldProp_ClientID )
, CompanyUrl_( ifds::CompanyUrl, &ifds::s_FldProp_CompanyUrl )
, TAGroup_( ifds::TAGroup, &ifds::s_FldProp_TAGroup )
{
   cFields_ = 6;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0001_VWRepeat_Record::~dsi_DSTC0001_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0001_VWRepeat_Record::clone()
{
   dsi_DSTC0001_VWRepeat_Record* p = new dsi_DSTC0001_VWRepeat_Record;
   p->CompanyId_ = CompanyId_;
   p->CompanyName_ = CompanyName_;
   p->AccessAllSlsRep_ = AccessAllSlsRep_;
   p->ClientID_ = ClientID_;
   p->CompanyUrl_ = CompanyUrl_;
   p->TAGroup_ = TAGroup_;
   return(p);
}

BFDataField* dsi_DSTC0001_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40000122: return ( &CompanyName_ ); break; // CompanyName
      case 40001834: return ( &AccessAllSlsRep_ ); break; // AccessAllSlsRep
      case 40002744: return ( &ClientID_ ); break; // ClientID
      case 40005717: return ( &CompanyUrl_ ); break; // CompanyUrl
      case 40006411: return ( &TAGroup_ ); break; // TAGroup
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0001_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0001_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0001_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 6 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &CompanyId_; break;
            case 1: aFlds_[1] = &CompanyName_; break;
            case 2: aFlds_[2] = &AccessAllSlsRep_; break;
            case 3: aFlds_[3] = &ClientID_; break;
            case 4: aFlds_[4] = &CompanyUrl_; break;
            case 5: aFlds_[5] = &TAGroup_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0001_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0001_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0001_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 100 );
}

unsigned long dsi_DSTC0001_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 301 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0001_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0001_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0001_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000031: return( true );
      case 40000122: return( true );
      case 40001834: return( true );
      case 40002744: return( true );
      case 40005717: return( true );
      case 40006411: return( true );
   }
   return false;
}

