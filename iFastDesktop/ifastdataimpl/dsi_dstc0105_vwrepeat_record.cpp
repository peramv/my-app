// BFDataImpl implementation file for DataSet DSTC0105.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Tuesday, October 04, 2016 04:25:18


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0105_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0105_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0105_VWRepeat_Record() { return new dsi_DSTC0105_VWRepeat_Record; }

dsi_DSTC0105_VWRepeat_Record::dsi_DSTC0105_VWRepeat_Record()
: BFDataImpl( 40001403 )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, ContractType_( ifds::ContractType, &ifds::s_FldProp_ContractType )
, ContractTypeId_( ifds::ContractTypeId, &ifds::s_FldProp_ContractTypeId )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, PolicyNum_( ifds::PolicyNum, &ifds::s_FldProp_PolicyNum )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ContractTerm_( ifds::ContractTerm, &ifds::s_FldProp_ContractTerm )
, ContractTermDesc_( ifds::ContractTermDesc, &ifds::s_FldProp_ContractTermDesc )
, IssueDate_( ifds::IssueDate, &ifds::s_FldProp_IssueDate )
, AnnivMonth_( ifds::AnnivMonth, &ifds::s_FldProp_AnnivMonth )
, AnnivDay_( ifds::AnnivDay, &ifds::s_FldProp_AnnivDay )
, LastResetDate_( ifds::LastResetDate, &ifds::s_FldProp_LastResetDate )
, ProvinceCanada_( ifds::ProvinceCanada, &ifds::s_FldProp_ProvinceCanada )
, ProvinceName_( ifds::ProvinceName, &ifds::s_FldProp_ProvinceName )
, AgeBasedOn_( ifds::AgeBasedOn, &ifds::s_FldProp_AgeBasedOn )
, AgeBasedOnDesc_( ifds::AgeBasedOnDesc, &ifds::s_FldProp_AgeBasedOnDesc )
, LegalMaturityDate_( ifds::LegalMaturityDate, &ifds::s_FldProp_LegalMaturityDate )
, Status_( ifds::Status, &ifds::s_FldProp_Status )
, StatusDesc_( ifds::StatusDesc, &ifds::s_FldProp_StatusDesc )
, BailMaturityDate_( ifds::BailMaturityDate, &ifds::s_FldProp_BailMaturityDate )
, CotAcctVer_( ifds::CotAcctVer, &ifds::s_FldProp_CotAcctVer )
, CotAcctRid_( ifds::CotAcctRid, &ifds::s_FldProp_CotAcctRid )
, PolicyYear_( ifds::PolicyYear, &ifds::s_FldProp_PolicyYear )
, ContractMaturityDate_( ifds::ContractMaturityDate, &ifds::s_FldProp_ContractMaturityDate )
, CDStartDate_( ifds::CDStartDate, &ifds::s_FldProp_CDStartDate )
, SegTransExist_( ifds::SegTransExist, &ifds::s_FldProp_SegTransExist )
, RedAgeDate_( ifds::RedAgeDate, &ifds::s_FldProp_RedAgeDate )
, SuspectGuarType_( ifds::SuspectGuarType, &ifds::s_FldProp_SuspectGuarType )
, RequiresGuarUnitAdjust_( ifds::RequiresGuarUnitAdjust, &ifds::s_FldProp_RequiresGuarUnitAdjust )
, ModPerm_( ifds::ModPerm, &ifds::s_FldProp_ModPerm )
, GWOCotAnnivDate_( ifds::GWOCotAnnivDate, &ifds::s_FldProp_GWOCotAnnivDate )
, SettleDate_( ifds::SettleDate, &ifds::s_FldProp_SettleDate )
, ContractVer_( ifds::ContractVer, &ifds::s_FldProp_ContractVer )
, ContractMatBasedOn_( ifds::ContractMatBasedOn, &ifds::s_FldProp_ContractMatBasedOn )
, RefMatDate_( ifds::RefMatDate, &ifds::s_FldProp_RefMatDate )
, LWAAgeUsed_( ifds::LWAAgeUsed, &ifds::s_FldProp_LWAAgeUsed )
, LWAStartDate_( ifds::LWAStartDate, &ifds::s_FldProp_LWAStartDate )
, LWARateApplied_( ifds::LWARateApplied, &ifds::s_FldProp_LWARateApplied )
, ReqUnitAdj_( ifds::ReqUnitAdj, &ifds::s_FldProp_ReqUnitAdj )
, MaturityID_( ifds::MaturityID, &ifds::s_FldProp_MaturityID )
, ClsPerTerm_( ifds::ClsPerTerm, &ifds::s_FldProp_ClsPerTerm )
, LWAElectDate_( ifds::LWAElectDate, &ifds::s_FldProp_LWAElectDate )
, CMPolicyYear_( ifds::CMPolicyYear, &ifds::s_FldProp_CMPolicyYear )
, CMPolicyTerm_( ifds::CMPolicyTerm, &ifds::s_FldProp_CMPolicyTerm )
, CMMaturityDate_( ifds::CMMaturityDate, &ifds::s_FldProp_CMMaturityDate )
, GuaranteeFeeAppl_( ifds::GuaranteeFeeAppl, &ifds::s_FldProp_GuaranteeFeeAppl )
, GuaranteePayOption_( ifds::GuaranteePayOption, &ifds::s_FldProp_GuaranteePayOption )
, IsElected_( ifds::IsElected, &ifds::s_FldProp_IsElected )
, TOExistAfterPreElectReset_( ifds::TOExistAfterPreElectReset, &ifds::s_FldProp_TOExistAfterPreElectReset )
, VersionDesc_( ifds::VersionDesc, &ifds::s_FldProp_VersionDesc )
, EnableSegDates_( ifds::EnableSegDates, &ifds::s_FldProp_EnableSegDates )
, EnableOverride_( ifds::EnableOverride, &ifds::s_FldProp_EnableOverride )
{
    cFields_ = 55;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0105_VWRepeat_Record::~dsi_DSTC0105_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0105_VWRepeat_Record::clone()
{
    dsi_DSTC0105_VWRepeat_Record* p = new dsi_DSTC0105_VWRepeat_Record;
    p->EffectiveDate_ = EffectiveDate_;
    p->StopDate_ = StopDate_;
    p->Username_ = Username_;
    p->ProcessDate_ = ProcessDate_;
    p->ContractType_ = ContractType_;
    p->ContractTypeId_ = ContractTypeId_;
    p->ModUser_ = ModUser_;
    p->PolicyNum_ = PolicyNum_;
    p->ModDate_ = ModDate_;
    p->ContractTerm_ = ContractTerm_;
    p->ContractTermDesc_ = ContractTermDesc_;
    p->IssueDate_ = IssueDate_;
    p->AnnivMonth_ = AnnivMonth_;
    p->AnnivDay_ = AnnivDay_;
    p->LastResetDate_ = LastResetDate_;
    p->ProvinceCanada_ = ProvinceCanada_;
    p->ProvinceName_ = ProvinceName_;
    p->AgeBasedOn_ = AgeBasedOn_;
    p->AgeBasedOnDesc_ = AgeBasedOnDesc_;
    p->LegalMaturityDate_ = LegalMaturityDate_;
    p->Status_ = Status_;
    p->StatusDesc_ = StatusDesc_;
    p->BailMaturityDate_ = BailMaturityDate_;
    p->CotAcctVer_ = CotAcctVer_;
    p->CotAcctRid_ = CotAcctRid_;
    p->PolicyYear_ = PolicyYear_;
    p->ContractMaturityDate_ = ContractMaturityDate_;
    p->CDStartDate_ = CDStartDate_;
    p->SegTransExist_ = SegTransExist_;
    p->RedAgeDate_ = RedAgeDate_;
    p->SuspectGuarType_ = SuspectGuarType_;
    p->RequiresGuarUnitAdjust_ = RequiresGuarUnitAdjust_;
    p->ModPerm_ = ModPerm_;
    p->GWOCotAnnivDate_ = GWOCotAnnivDate_;
    p->SettleDate_ = SettleDate_;
    p->ContractVer_ = ContractVer_;
    p->ContractMatBasedOn_ = ContractMatBasedOn_;
    p->RefMatDate_ = RefMatDate_;
    p->LWAAgeUsed_ = LWAAgeUsed_;
    p->LWAStartDate_ = LWAStartDate_;
    p->LWARateApplied_ = LWARateApplied_;
    p->ReqUnitAdj_ = ReqUnitAdj_;
    p->MaturityID_ = MaturityID_;
    p->ClsPerTerm_ = ClsPerTerm_;
    p->LWAElectDate_ = LWAElectDate_;
    p->CMPolicyYear_ = CMPolicyYear_;
    p->CMPolicyTerm_ = CMPolicyTerm_;
    p->CMMaturityDate_ = CMMaturityDate_;
    p->GuaranteeFeeAppl_ = GuaranteeFeeAppl_;
    p->GuaranteePayOption_ = GuaranteePayOption_;
    p->IsElected_ = IsElected_;
    p->TOExistAfterPreElectReset_ = TOExistAfterPreElectReset_;
    p->VersionDesc_ = VersionDesc_;
    p->EnableSegDates_ = EnableSegDates_;
    p->EnableOverride_ = EnableOverride_;
    return(p);
}

BFDataField* dsi_DSTC0105_VWRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
        case 40000279: return ( &StopDate_ ); break; // StopDate
        case 40000117: return ( &Username_ ); break; // Username
        case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
        case 40001385: return ( &ContractType_ ); break; // ContractType
        case 40001386: return ( &ContractTypeId_ ); break; // ContractTypeId
        case 40000218: return ( &ModUser_ ); break; // ModUser
        case 40001387: return ( &PolicyNum_ ); break; // PolicyNum
        case 40000217: return ( &ModDate_ ); break; // ModDate
        case 40001388: return ( &ContractTerm_ ); break; // ContractTerm
        case 40001389: return ( &ContractTermDesc_ ); break; // ContractTermDesc
        case 40000376: return ( &IssueDate_ ); break; // IssueDate
        case 40001390: return ( &AnnivMonth_ ); break; // AnnivMonth
        case 40001391: return ( &AnnivDay_ ); break; // AnnivDay
        case 40001392: return ( &LastResetDate_ ); break; // LastResetDate
        case 40001731: return ( &ProvinceCanada_ ); break; // ProvinceCanada
        case 40000812: return ( &ProvinceName_ ); break; // ProvinceName
        case 40001395: return ( &AgeBasedOn_ ); break; // AgeBasedOn
        case 40001396: return ( &AgeBasedOnDesc_ ); break; // AgeBasedOnDesc
        case 40001397: return ( &LegalMaturityDate_ ); break; // LegalMaturityDate
        case 40001399: return ( &Status_ ); break; // Status
        case 40000374: return ( &StatusDesc_ ); break; // StatusDesc
        case 40001400: return ( &BailMaturityDate_ ); break; // BailMaturityDate
        case 40001401: return ( &CotAcctVer_ ); break; // CotAcctVer
        case 40001402: return ( &CotAcctRid_ ); break; // CotAcctRid
        case 40002593: return ( &PolicyYear_ ); break; // PolicyYear
        case 40005101: return ( &ContractMaturityDate_ ); break; // ContractMaturityDate
        case 40005108: return ( &CDStartDate_ ); break; // CDStartDate
        case 40005110: return ( &SegTransExist_ ); break; // SegTransExist
        case 40005109: return ( &RedAgeDate_ ); break; // RedAgeDate
        case 40005195: return ( &SuspectGuarType_ ); break; // SuspectGuarType
        case 40005196: return ( &RequiresGuarUnitAdjust_ ); break; // RequiresGuarUnitAdjust
        case 40000763: return ( &ModPerm_ ); break; // ModPerm
        case 40005440: return ( &GWOCotAnnivDate_ ); break; // GWOCotAnnivDate
        case 40000348: return ( &SettleDate_ ); break; // SettleDate
        case 40006627: return ( &ContractVer_ ); break; // ContractVer
        case 40006628: return ( &ContractMatBasedOn_ ); break; // ContractMatBasedOn
        case 40006629: return ( &RefMatDate_ ); break; // RefMatDate
        case 40006630: return ( &LWAAgeUsed_ ); break; // LWAAgeUsed
        case 40006631: return ( &LWAStartDate_ ); break; // LWAStartDate
        case 40006632: return ( &LWARateApplied_ ); break; // LWARateApplied
        case 40006633: return ( &ReqUnitAdj_ ); break; // ReqUnitAdj
        case 40006651: return ( &MaturityID_ ); break; // MaturityID
        case 40006704: return ( &ClsPerTerm_ ); break; // ClsPerTerm
        case 40006706: return ( &LWAElectDate_ ); break; // LWAElectDate
        case 40006781: return ( &CMPolicyYear_ ); break; // CMPolicyYear
        case 40006782: return ( &CMPolicyTerm_ ); break; // CMPolicyTerm
        case 40006784: return ( &CMMaturityDate_ ); break; // CMMaturityDate
        case 40006980: return ( &GuaranteeFeeAppl_ ); break; // GuaranteeFeeAppl
        case 40007135: return ( &GuaranteePayOption_ ); break; // GuaranteePayOption
        case 40007137: return ( &IsElected_ ); break; // IsElected
        case 40007509: return ( &TOExistAfterPreElectReset_ ); break; // TOExistAfterPreElectReset
        case 40007663: return ( &VersionDesc_ ); break; // VersionDesc
        case 40007664: return ( &EnableSegDates_ ); break; // EnableSegDates
        case 40007665: return ( &EnableOverride_ ); break; // EnableOverride
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0105_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0105_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0105_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 55 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &EffectiveDate_; break;
                case 1: aFlds_[1] = &StopDate_; break;
                case 2: aFlds_[2] = &Username_; break;
                case 3: aFlds_[3] = &ProcessDate_; break;
                case 4: aFlds_[4] = &ContractType_; break;
                case 5: aFlds_[5] = &ContractTypeId_; break;
                case 6: aFlds_[6] = &ModUser_; break;
                case 7: aFlds_[7] = &PolicyNum_; break;
                case 8: aFlds_[8] = &ModDate_; break;
                case 9: aFlds_[9] = &ContractTerm_; break;
                case 10: aFlds_[10] = &ContractTermDesc_; break;
                case 11: aFlds_[11] = &IssueDate_; break;
                case 12: aFlds_[12] = &AnnivMonth_; break;
                case 13: aFlds_[13] = &AnnivDay_; break;
                case 14: aFlds_[14] = &LastResetDate_; break;
                case 15: aFlds_[15] = &ProvinceCanada_; break;
                case 16: aFlds_[16] = &ProvinceName_; break;
                case 17: aFlds_[17] = &AgeBasedOn_; break;
                case 18: aFlds_[18] = &AgeBasedOnDesc_; break;
                case 19: aFlds_[19] = &LegalMaturityDate_; break;
                case 20: aFlds_[20] = &Status_; break;
                case 21: aFlds_[21] = &StatusDesc_; break;
                case 22: aFlds_[22] = &BailMaturityDate_; break;
                case 23: aFlds_[23] = &CotAcctVer_; break;
                case 24: aFlds_[24] = &CotAcctRid_; break;
                case 25: aFlds_[25] = &PolicyYear_; break;
                case 26: aFlds_[26] = &ContractMaturityDate_; break;
                case 27: aFlds_[27] = &CDStartDate_; break;
                case 28: aFlds_[28] = &SegTransExist_; break;
                case 29: aFlds_[29] = &RedAgeDate_; break;
                case 30: aFlds_[30] = &SuspectGuarType_; break;
                case 31: aFlds_[31] = &RequiresGuarUnitAdjust_; break;
                case 32: aFlds_[32] = &ModPerm_; break;
                case 33: aFlds_[33] = &GWOCotAnnivDate_; break;
                case 34: aFlds_[34] = &SettleDate_; break;
                case 35: aFlds_[35] = &ContractVer_; break;
                case 36: aFlds_[36] = &ContractMatBasedOn_; break;
                case 37: aFlds_[37] = &RefMatDate_; break;
                case 38: aFlds_[38] = &LWAAgeUsed_; break;
                case 39: aFlds_[39] = &LWAStartDate_; break;
                case 40: aFlds_[40] = &LWARateApplied_; break;
                case 41: aFlds_[41] = &ReqUnitAdj_; break;
                case 42: aFlds_[42] = &MaturityID_; break;
                case 43: aFlds_[43] = &ClsPerTerm_; break;
                case 44: aFlds_[44] = &LWAElectDate_; break;
                case 45: aFlds_[45] = &CMPolicyYear_; break;
                case 46: aFlds_[46] = &CMPolicyTerm_; break;
                case 47: aFlds_[47] = &CMMaturityDate_; break;
                case 48: aFlds_[48] = &GuaranteeFeeAppl_; break;
                case 49: aFlds_[49] = &GuaranteePayOption_; break;
                case 50: aFlds_[50] = &IsElected_; break;
                case 51: aFlds_[51] = &TOExistAfterPreElectReset_; break;
                case 52: aFlds_[52] = &VersionDesc_; break;
                case 53: aFlds_[53] = &EnableSegDates_; break;
                case 54: aFlds_[54] = &EnableOverride_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0105_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0105_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0105_VWRepeat_Record::getLargestDefinedField( void ) const
{
    return( 200 );
}

unsigned long dsi_DSTC0105_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 1490 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0105_VWRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0105_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0105_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000327: return ( true );
        case 40000279: return ( true );
        case 40000117: return ( true );
        case 40000216: return ( true );
        case 40001385: return ( true );
        case 40001386: return ( true );
        case 40000218: return ( true );
        case 40001387: return ( true );
        case 40000217: return ( true );
        case 40001388: return ( true );
        case 40001389: return ( true );
        case 40000376: return ( true );
        case 40001390: return ( true );
        case 40001391: return ( true );
        case 40001392: return ( true );
        case 40001731: return ( true );
        case 40000812: return ( true );
        case 40001395: return ( true );
        case 40001396: return ( true );
        case 40001397: return ( true );
        case 40001399: return ( true );
        case 40000374: return ( true );
        case 40001400: return ( true );
        case 40001401: return ( true );
        case 40001402: return ( true );
        case 40002593: return ( true );
        case 40005101: return ( true );
        case 40005108: return ( true );
        case 40005110: return ( true );
        case 40005109: return ( true );
        case 40005195: return ( true );
        case 40005196: return ( true );
        case 40000763: return ( true );
        case 40005440: return ( true );
        case 40000348: return ( true );
        case 40006627: return ( true );
        case 40006628: return ( true );
        case 40006629: return ( true );
        case 40006630: return ( true );
        case 40006631: return ( true );
        case 40006632: return ( true );
        case 40006633: return ( true );
        case 40006651: return ( true );
        case 40006704: return ( true );
        case 40006706: return ( true );
        case 40006781: return ( true );
        case 40006782: return ( true );
        case 40006784: return ( true );
        case 40006980: return ( true );
        case 40007135: return ( true );
        case 40007137: return ( true );
        case 40007509: return ( true );
        case 40007663: return ( true );
        case 40007664: return ( true );
        case 40007665: return ( true );
    }
    return false;
}

