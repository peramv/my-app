// BFDataImpl implementation file for DataSet DSTC0112.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0112_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0112_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0112_VWRepeat_Record() { return new dsi_DSTC0112_VWRepeat_Record; }

dsi_DSTC0112_VWRepeat_Record::dsi_DSTC0112_VWRepeat_Record()
: BFDataImpl( 40001492 )
, TaxJurisCode_( ifds::TaxJurisCode, &ifds::s_FldProp_TaxJurisCode )
, TaxJurisName_( ifds::TaxJurisName, &ifds::s_FldProp_TaxJurisName )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, FedIncRate_( ifds::FedIncRate, &ifds::s_FldProp_FedIncRate )
, FedRedRate_( ifds::FedRedRate, &ifds::s_FldProp_FedRedRate )
, ProvIncRate_( ifds::ProvIncRate, &ifds::s_FldProp_ProvIncRate )
, ProvRedRate_( ifds::ProvRedRate, &ifds::s_FldProp_ProvRedRate )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, LowerBound_( ifds::LowerBound, &ifds::s_FldProp_LowerBound )
, UpperBound_( ifds::UpperBound, &ifds::s_FldProp_UpperBound )
, PerPenRate_( ifds::PerPenRate, &ifds::s_FldProp_PerPenRate )
, LumpPenRate_( ifds::LumpPenRate, &ifds::s_FldProp_LumpPenRate )
, PAmtThreasholdCode_( ifds::PAmtThreasholdCode, &ifds::s_FldProp_PAmtThreasholdCode )
, PAmtThreasholdDesc_( ifds::PAmtThreasholdDesc, &ifds::s_FldProp_PAmtThreasholdDesc )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModName_( ifds::ModName, &ifds::s_FldProp_ModName )
, TaxRateRid_( ifds::TaxRateRid, &ifds::s_FldProp_TaxRateRid )
{
   cFields_ = 18;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0112_VWRepeat_Record::~dsi_DSTC0112_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0112_VWRepeat_Record::clone()
{
   dsi_DSTC0112_VWRepeat_Record* p = new dsi_DSTC0112_VWRepeat_Record;
   p->TaxJurisCode_ = TaxJurisCode_;
   p->TaxJurisName_ = TaxJurisName_;
   p->EffectiveDate_ = EffectiveDate_;
   p->FedIncRate_ = FedIncRate_;
   p->FedRedRate_ = FedRedRate_;
   p->ProvIncRate_ = ProvIncRate_;
   p->ProvRedRate_ = ProvRedRate_;
   p->ProcessDate_ = ProcessDate_;
   p->LowerBound_ = LowerBound_;
   p->UpperBound_ = UpperBound_;
   p->PerPenRate_ = PerPenRate_;
   p->LumpPenRate_ = LumpPenRate_;
   p->PAmtThreasholdCode_ = PAmtThreasholdCode_;
   p->PAmtThreasholdDesc_ = PAmtThreasholdDesc_;
   p->Username_ = Username_;
   p->ModDate_ = ModDate_;
   p->ModName_ = ModName_;
   p->TaxRateRid_ = TaxRateRid_;
   return(p);
}

BFDataField* dsi_DSTC0112_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000796: return ( &TaxJurisCode_ ); break; // TaxJurisCode
      case 40000797: return ( &TaxJurisName_ ); break; // TaxJurisName
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40001493: return ( &FedIncRate_ ); break; // FedIncRate
      case 40001494: return ( &FedRedRate_ ); break; // FedRedRate
      case 40001495: return ( &ProvIncRate_ ); break; // ProvIncRate
      case 40001496: return ( &ProvRedRate_ ); break; // ProvRedRate
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40001497: return ( &LowerBound_ ); break; // LowerBound
      case 40001498: return ( &UpperBound_ ); break; // UpperBound
      case 40001499: return ( &PerPenRate_ ); break; // PerPenRate
      case 40001500: return ( &LumpPenRate_ ); break; // LumpPenRate
      case 40001501: return ( &PAmtThreasholdCode_ ); break; // PAmtThreasholdCode
      case 40001502: return ( &PAmtThreasholdDesc_ ); break; // PAmtThreasholdDesc
      case 40000117: return ( &Username_ ); break; // Username
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40001504: return ( &ModName_ ); break; // ModName
      case 40001503: return ( &TaxRateRid_ ); break; // TaxRateRid
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0112_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0112_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0112_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 18 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TaxJurisCode_; break;
            case 1: aFlds_[1] = &TaxJurisName_; break;
            case 2: aFlds_[2] = &EffectiveDate_; break;
            case 3: aFlds_[3] = &FedIncRate_; break;
            case 4: aFlds_[4] = &FedRedRate_; break;
            case 5: aFlds_[5] = &ProvIncRate_; break;
            case 6: aFlds_[6] = &ProvRedRate_; break;
            case 7: aFlds_[7] = &ProcessDate_; break;
            case 8: aFlds_[8] = &LowerBound_; break;
            case 9: aFlds_[9] = &UpperBound_; break;
            case 10: aFlds_[10] = &PerPenRate_; break;
            case 11: aFlds_[11] = &LumpPenRate_; break;
            case 12: aFlds_[12] = &PAmtThreasholdCode_; break;
            case 13: aFlds_[13] = &PAmtThreasholdDesc_; break;
            case 14: aFlds_[14] = &Username_; break;
            case 15: aFlds_[15] = &ModDate_; break;
            case 16: aFlds_[16] = &ModName_; break;
            case 17: aFlds_[17] = &TaxRateRid_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0112_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0112_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0112_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 250 );
}

unsigned long dsi_DSTC0112_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 787 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0112_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0112_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0112_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000796: return( true );
      case 40000797: return( true );
      case 40000327: return( true );
      case 40001493: return( true );
      case 40001494: return( true );
      case 40001495: return( true );
      case 40001496: return( true );
      case 40000216: return( true );
      case 40001497: return( true );
      case 40001498: return( true );
      case 40001499: return( true );
      case 40001500: return( true );
      case 40001501: return( true );
      case 40001502: return( true );
      case 40000117: return( true );
      case 40000217: return( true );
      case 40001504: return( true );
      case 40001503: return( true );
   }
   return false;
}

