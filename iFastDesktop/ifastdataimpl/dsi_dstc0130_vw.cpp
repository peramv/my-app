// BFDataImpl implementation file for DataSet DSTC0130.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0130_vw.h"


// This function creates an instance of dsi_DSTC0130_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0130_VW() { return new dsi_DSTC0130_VW; }

dsi_DSTC0130_VW::dsi_DSTC0130_VW()
: BFDataImpl( 40001709 )
, NowPlanValue_( ifds::NowPlanValue, &ifds::s_FldProp_NowPlanValue )
, PYEPlanValue_( ifds::PYEPlanValue, &ifds::s_FldProp_PYEPlanValue )
, CalcMandYr_( ifds::CalcMandYr, &ifds::s_FldProp_CalcMandYr )
, CalcMaxYr_( ifds::CalcMaxYr, &ifds::s_FldProp_CalcMaxYr )
, PayTerm_( ifds::PayTerm, &ifds::s_FldProp_PayTerm )
, Factor_( ifds::Factor, &ifds::s_FldProp_Factor )
, MandAmtYrSysCalc_( ifds::MandAmtYrSysCalc, &ifds::s_FldProp_MandAmtYrSysCalc )
, MaxAmtYrSysCalc_( ifds::MaxAmtYrSysCalc, &ifds::s_FldProp_MaxAmtYrSysCalc )
, AcctValue_( ifds::AcctValue, &ifds::s_FldProp_AcctValue )
, TotRedem_( ifds::TotRedem, &ifds::s_FldProp_TotRedem )
, MandAmtPaySysCalc_( ifds::MandAmtPaySysCalc, &ifds::s_FldProp_MandAmtPaySysCalc )
, AmountSysCalc_( ifds::AmountSysCalc, &ifds::s_FldProp_AmountSysCalc )
, ProvRateSysCalc_( ifds::ProvRateSysCalc, &ifds::s_FldProp_ProvRateSysCalc )
, FedRateSysCalc_( ifds::FedRateSysCalc, &ifds::s_FldProp_FedRateSysCalc )
, NetAmountSysCalc_( ifds::NetAmountSysCalc, &ifds::s_FldProp_NetAmountSysCalc )
, MinPrevYrBalPctSysCalc_( ifds::MinPrevYrBalPctSysCalc, &ifds::s_FldProp_MinPrevYrBalPctSysCalc )
, MaxPrevYrBalPctSysCalc_( ifds::MaxPrevYrBalPctSysCalc, &ifds::s_FldProp_MaxPrevYrBalPctSysCalc )
, PYUnusedMaxSysCalc_( ifds::PYUnusedMaxSysCalc, &ifds::s_FldProp_PYUnusedMaxSysCalc )
, OrigPlanDeffApplied_( ifds::OrigPlanDeffApplied, &ifds::s_FldProp_OrigPlanDeffApplied )
{
   cFields_ = 19;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0130_VW::~dsi_DSTC0130_VW()
{
}

BFDataImpl* dsi_DSTC0130_VW::clone()
{
   dsi_DSTC0130_VW* p = new dsi_DSTC0130_VW;
   p->NowPlanValue_ = NowPlanValue_;
   p->PYEPlanValue_ = PYEPlanValue_;
   p->CalcMandYr_ = CalcMandYr_;
   p->CalcMaxYr_ = CalcMaxYr_;
   p->PayTerm_ = PayTerm_;
   p->Factor_ = Factor_;
   p->MandAmtYrSysCalc_ = MandAmtYrSysCalc_;
   p->MaxAmtYrSysCalc_ = MaxAmtYrSysCalc_;
   p->AcctValue_ = AcctValue_;
   p->TotRedem_ = TotRedem_;
   p->MandAmtPaySysCalc_ = MandAmtPaySysCalc_;
   p->AmountSysCalc_ = AmountSysCalc_;
   p->ProvRateSysCalc_ = ProvRateSysCalc_;
   p->FedRateSysCalc_ = FedRateSysCalc_;
   p->NetAmountSysCalc_ = NetAmountSysCalc_;
   p->MinPrevYrBalPctSysCalc_ = MinPrevYrBalPctSysCalc_;
   p->MaxPrevYrBalPctSysCalc_ = MaxPrevYrBalPctSysCalc_;
   p->PYUnusedMaxSysCalc_ = PYUnusedMaxSysCalc_;
   p->OrigPlanDeffApplied_ = OrigPlanDeffApplied_;
   return(p);
}

BFDataField* dsi_DSTC0130_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000848: return ( &NowPlanValue_ ); break; // NowPlanValue
      case 40000849: return ( &PYEPlanValue_ ); break; // PYEPlanValue
      case 40000850: return ( &CalcMandYr_ ); break; // CalcMandYr
      case 40000851: return ( &CalcMaxYr_ ); break; // CalcMaxYr
      case 40000863: return ( &PayTerm_ ); break; // PayTerm
      case 40000865: return ( &Factor_ ); break; // Factor
      case 40001710: return ( &MandAmtYrSysCalc_ ); break; // MandAmtYrSysCalc
      case 40001711: return ( &MaxAmtYrSysCalc_ ); break; // MaxAmtYrSysCalc
      case 40001713: return ( &AcctValue_ ); break; // AcctValue
      case 40001714: return ( &TotRedem_ ); break; // TotRedem
      case 40001712: return ( &MandAmtPaySysCalc_ ); break; // MandAmtPaySysCalc
      case 40001715: return ( &AmountSysCalc_ ); break; // AmountSysCalc
      case 40001716: return ( &ProvRateSysCalc_ ); break; // ProvRateSysCalc
      case 40001717: return ( &FedRateSysCalc_ ); break; // FedRateSysCalc
      case 40001718: return ( &NetAmountSysCalc_ ); break; // NetAmountSysCalc
      case 40003888: return ( &MinPrevYrBalPctSysCalc_ ); break; // MinPrevYrBalPctSysCalc
      case 40003889: return ( &MaxPrevYrBalPctSysCalc_ ); break; // MaxPrevYrBalPctSysCalc
      case 40005968: return ( &PYUnusedMaxSysCalc_ ); break; // PYUnusedMaxSysCalc
      case 40006319: return ( &OrigPlanDeffApplied_ ); break; // OrigPlanDeffApplied
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0130_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0130_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0130_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 19 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &NowPlanValue_; break;
            case 1: aFlds_[1] = &PYEPlanValue_; break;
            case 2: aFlds_[2] = &CalcMandYr_; break;
            case 3: aFlds_[3] = &CalcMaxYr_; break;
            case 4: aFlds_[4] = &PayTerm_; break;
            case 5: aFlds_[5] = &Factor_; break;
            case 6: aFlds_[6] = &MandAmtYrSysCalc_; break;
            case 7: aFlds_[7] = &MaxAmtYrSysCalc_; break;
            case 8: aFlds_[8] = &AcctValue_; break;
            case 9: aFlds_[9] = &TotRedem_; break;
            case 10: aFlds_[10] = &MandAmtPaySysCalc_; break;
            case 11: aFlds_[11] = &AmountSysCalc_; break;
            case 12: aFlds_[12] = &ProvRateSysCalc_; break;
            case 13: aFlds_[13] = &FedRateSysCalc_; break;
            case 14: aFlds_[14] = &NetAmountSysCalc_; break;
            case 15: aFlds_[15] = &MinPrevYrBalPctSysCalc_; break;
            case 16: aFlds_[16] = &MaxPrevYrBalPctSysCalc_; break;
            case 17: aFlds_[17] = &PYUnusedMaxSysCalc_; break;
            case 18: aFlds_[18] = &OrigPlanDeffApplied_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0130_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0130_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0130_VW::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0130_VW::getDefinedByteLength( void ) const
{
   return( 525 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0130_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0130_VW::fieldExists( id );
}

bool dsi_DSTC0130_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000848: return( true );
      case 40000849: return( true );
      case 40000850: return( true );
      case 40000851: return( true );
      case 40000863: return( true );
      case 40000865: return( true );
      case 40001710: return( true );
      case 40001711: return( true );
      case 40001713: return( true );
      case 40001714: return( true );
      case 40001712: return( true );
      case 40001715: return( true );
      case 40001716: return( true );
      case 40001717: return( true );
      case 40001718: return( true );
      case 40003888: return( true );
      case 40003889: return( true );
      case 40005968: return( true );
      case 40006319: return( true );
   }
   return false;
}

