// BFDataImpl implementation file for DataSet DSTC0418.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0418_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0418_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0418_VWRepeat_Record() { return new dsi_DSTC0418_VWRepeat_Record; }

dsi_DSTC0418_VWRepeat_Record::dsi_DSTC0418_VWRepeat_Record()
: BFDataImpl( 40006399 )
, ProdPortfolioUUID_( ifds::ProdPortfolioUUID, &ifds::s_FldProp_ProdPortfolioUUID )
, PortfolioCode_( ifds::PortfolioCode, &ifds::s_FldProp_PortfolioCode )
, PortfolioName_( ifds::PortfolioName, &ifds::s_FldProp_PortfolioName )
, Deff_( ifds::Deff, &ifds::s_FldProp_Deff )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, SegFundIncl_( ifds::SegFundIncl, &ifds::s_FldProp_SegFundIncl )
, CommitApplicable_( ifds::CommitApplicable, &ifds::s_FldProp_CommitApplicable )
{
   cFields_ = 7;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0418_VWRepeat_Record::~dsi_DSTC0418_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0418_VWRepeat_Record::clone()
{
   dsi_DSTC0418_VWRepeat_Record* p = new dsi_DSTC0418_VWRepeat_Record;
   p->ProdPortfolioUUID_ = ProdPortfolioUUID_;
   p->PortfolioCode_ = PortfolioCode_;
   p->PortfolioName_ = PortfolioName_;
   p->Deff_ = Deff_;
   p->StopDate_ = StopDate_;
   p->SegFundIncl_ = SegFundIncl_;
   p->CommitApplicable_ = CommitApplicable_;
   return(p);
}

BFDataField* dsi_DSTC0418_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40006390: return ( &ProdPortfolioUUID_ ); break; // ProdPortfolioUUID
      case 40006382: return ( &PortfolioCode_ ); break; // PortfolioCode
      case 40006395: return ( &PortfolioName_ ); break; // PortfolioName
      case 40000215: return ( &Deff_ ); break; // Deff
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40006635: return ( &SegFundIncl_ ); break; // SegFundIncl
      case 40006731: return ( &CommitApplicable_ ); break; // CommitApplicable
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0418_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0418_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0418_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 7 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &ProdPortfolioUUID_; break;
            case 1: aFlds_[1] = &PortfolioCode_; break;
            case 2: aFlds_[2] = &PortfolioName_; break;
            case 3: aFlds_[3] = &Deff_; break;
            case 4: aFlds_[4] = &StopDate_; break;
            case 5: aFlds_[5] = &SegFundIncl_; break;
            case 6: aFlds_[6] = &CommitApplicable_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0418_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0418_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0418_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0418_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 226 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0418_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0418_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0418_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40006390: return( true );
      case 40006382: return( true );
      case 40006395: return( true );
      case 40000215: return( true );
      case 40000279: return( true );
      case 40006635: return( true );
      case 40006731: return( true );
   }
   return false;
}

