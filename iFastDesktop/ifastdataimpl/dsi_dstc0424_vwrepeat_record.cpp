// BFDataImpl implementation file for DataSet DSTC0424.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0424_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0424_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0424_VWRepeat_Record() { return new dsi_DSTC0424_VWRepeat_Record; }

dsi_DSTC0424_VWRepeat_Record::dsi_DSTC0424_VWRepeat_Record()
: BFDataImpl( 40006462 )
, SharelotDetlUUID_( ifds::SharelotDetlUUID, &ifds::s_FldProp_SharelotDetlUUID )
, InvHisTransType_( ifds::InvHisTransType, &ifds::s_FldProp_InvHisTransType )
, InvHisTradeDate_( ifds::InvHisTradeDate, &ifds::s_FldProp_InvHisTradeDate )
, InvHisPrincipalGrossMoneyOut_( ifds::InvHisPrincipalGrossMoneyOut, &ifds::s_FldProp_InvHisPrincipalGrossMoneyOut )
, InvHisMVA_( ifds::InvHisMVA, &ifds::s_FldProp_InvHisMVA )
, InvHisAdminFee_( ifds::InvHisAdminFee, &ifds::s_FldProp_InvHisAdminFee )
, InvHisNetOfFees_( ifds::InvHisNetOfFees, &ifds::s_FldProp_InvHisNetOfFees )
, InvHisCalculatedMVA_( ifds::InvHisCalculatedMVA, &ifds::s_FldProp_InvHisCalculatedMVA )
, InvHisMVAReason_( ifds::InvHisMVAReason, &ifds::s_FldProp_InvHisMVAReason )
{
   cFields_ = 9;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0424_VWRepeat_Record::~dsi_DSTC0424_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0424_VWRepeat_Record::clone()
{
   dsi_DSTC0424_VWRepeat_Record* p = new dsi_DSTC0424_VWRepeat_Record;
   p->SharelotDetlUUID_ = SharelotDetlUUID_;
   p->InvHisTransType_ = InvHisTransType_;
   p->InvHisTradeDate_ = InvHisTradeDate_;
   p->InvHisPrincipalGrossMoneyOut_ = InvHisPrincipalGrossMoneyOut_;
   p->InvHisMVA_ = InvHisMVA_;
   p->InvHisAdminFee_ = InvHisAdminFee_;
   p->InvHisNetOfFees_ = InvHisNetOfFees_;
   p->InvHisCalculatedMVA_ = InvHisCalculatedMVA_;
   p->InvHisMVAReason_ = InvHisMVAReason_;
   return(p);
}

BFDataField* dsi_DSTC0424_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40006501: return ( &SharelotDetlUUID_ ); break; // SharelotDetlUUID
      case 40006482: return ( &InvHisTransType_ ); break; // InvHisTransType
      case 40006483: return ( &InvHisTradeDate_ ); break; // InvHisTradeDate
      case 40006484: return ( &InvHisPrincipalGrossMoneyOut_ ); break; // InvHisPrincipalGrossMoneyOut
      case 40006485: return ( &InvHisMVA_ ); break; // InvHisMVA
      case 40006487: return ( &InvHisAdminFee_ ); break; // InvHisAdminFee
      case 40006488: return ( &InvHisNetOfFees_ ); break; // InvHisNetOfFees
      case 40006985: return ( &InvHisCalculatedMVA_ ); break; // InvHisCalculatedMVA
      case 40006986: return ( &InvHisMVAReason_ ); break; // InvHisMVAReason
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0424_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0424_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0424_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 9 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SharelotDetlUUID_; break;
            case 1: aFlds_[1] = &InvHisTransType_; break;
            case 2: aFlds_[2] = &InvHisTradeDate_; break;
            case 3: aFlds_[3] = &InvHisPrincipalGrossMoneyOut_; break;
            case 4: aFlds_[4] = &InvHisMVA_; break;
            case 5: aFlds_[5] = &InvHisAdminFee_; break;
            case 6: aFlds_[6] = &InvHisNetOfFees_; break;
            case 7: aFlds_[7] = &InvHisCalculatedMVA_; break;
            case 8: aFlds_[8] = &InvHisMVAReason_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0424_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0424_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0424_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0424_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 192 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0424_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0424_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0424_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40006501: return( true );
      case 40006482: return( true );
      case 40006483: return( true );
      case 40006484: return( true );
      case 40006485: return( true );
      case 40006487: return( true );
      case 40006488: return( true );
      case 40006985: return( true );
      case 40006986: return( true );
   }
   return false;
}

