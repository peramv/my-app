// BFDataImpl implementation file for DataSet DSTC0435.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0435_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0435_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0435_VWRepeat_Record() { return new dsi_DSTC0435_VWRepeat_Record; }

dsi_DSTC0435_VWRepeat_Record::dsi_DSTC0435_VWRepeat_Record()
: BFDataImpl( 40006775 )
, CommitmentUUID_( ifds::CommitmentUUID, &ifds::s_FldProp_CommitmentUUID )
, CommitCode_( ifds::CommitCode, &ifds::s_FldProp_CommitCode )
, Description_( ifds::Description, &ifds::s_FldProp_Description )
, Deff_( ifds::Deff, &ifds::s_FldProp_Deff )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, ValidTaxTypes_( ifds::ValidTaxTypes, &ifds::s_FldProp_ValidTaxTypes )
, ValidPayFreq_( ifds::ValidPayFreq, &ifds::s_FldProp_ValidPayFreq )
, ParentFund_( ifds::ParentFund, &ifds::s_FldProp_ParentFund )
, ParentClass_( ifds::ParentClass, &ifds::s_FldProp_ParentClass )
{
   cFields_ = 9;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0435_VWRepeat_Record::~dsi_DSTC0435_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0435_VWRepeat_Record::clone()
{
   dsi_DSTC0435_VWRepeat_Record* p = new dsi_DSTC0435_VWRepeat_Record;
   p->CommitmentUUID_ = CommitmentUUID_;
   p->CommitCode_ = CommitCode_;
   p->Description_ = Description_;
   p->Deff_ = Deff_;
   p->StopDate_ = StopDate_;
   p->ValidTaxTypes_ = ValidTaxTypes_;
   p->ValidPayFreq_ = ValidPayFreq_;
   p->ParentFund_ = ParentFund_;
   p->ParentClass_ = ParentClass_;
   return(p);
}

BFDataField* dsi_DSTC0435_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40006735: return ( &CommitmentUUID_ ); break; // CommitmentUUID
      case 40006794: return ( &CommitCode_ ); break; // CommitCode
      case 40002905: return ( &Description_ ); break; // Description
      case 40000215: return ( &Deff_ ); break; // Deff
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40006795: return ( &ValidTaxTypes_ ); break; // ValidTaxTypes
      case 40006796: return ( &ValidPayFreq_ ); break; // ValidPayFreq
      case 40006797: return ( &ParentFund_ ); break; // ParentFund
      case 40006798: return ( &ParentClass_ ); break; // ParentClass
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0435_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0435_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0435_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 9 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &CommitmentUUID_; break;
            case 1: aFlds_[1] = &CommitCode_; break;
            case 2: aFlds_[2] = &Description_; break;
            case 3: aFlds_[3] = &Deff_; break;
            case 4: aFlds_[4] = &StopDate_; break;
            case 5: aFlds_[5] = &ValidTaxTypes_; break;
            case 6: aFlds_[6] = &ValidPayFreq_; break;
            case 7: aFlds_[7] = &ParentFund_; break;
            case 8: aFlds_[8] = &ParentClass_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0435_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0435_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0435_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0435_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 410 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0435_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0435_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0435_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40006735: return( true );
      case 40006794: return( true );
      case 40002905: return( true );
      case 40000215: return( true );
      case 40000279: return( true );
      case 40006795: return( true );
      case 40006796: return( true );
      case 40006797: return( true );
      case 40006798: return( true );
   }
   return false;
}

