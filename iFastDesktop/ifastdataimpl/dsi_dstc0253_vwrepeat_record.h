// BFDataImpl header file for DataSet DSTC0253.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#pragma once
#include <commonport.h>
#include <clientlocale.hpp>

#undef IFAST_DATAIMPL_LINKAGE
#ifdef IFAST_DATAIMPL_DLL
   #define IFAST_DATAIMPL_LINKAGE CLASS_EXPORT
#else
   #define IFAST_DATAIMPL_LINKAGE CLASS_IMPORT
#endif

namespace ifds
{
   //Field Externs
   extern const BFTextFieldId FeeCode;
   extern const BFTextFieldId ShGroupApplicable;
   extern const BFTextFieldId BrokerApplicable;
   extern const BFTextFieldId BranchApplicable;
   extern const BFTextFieldId SalesrepApplicable;
   extern const BFTextFieldId FundGroupType;
   extern const BFTextFieldId FundClassApplicable;
   extern const BFTextFieldId FromFundClassApplicable;
   extern const BFTextFieldId FeeTypeList;
   extern const BFTextFieldId BaseOnList;
   extern const BFTextFieldId HowPaidList;
   extern const BFTextFieldId MinMaxFreqList;
   extern const BFTextFieldId OverrideList;
   extern const BFTextFieldId OnPWApplicable;
   extern const BFTextFieldId OnFWApplicable;
   extern const BFTextFieldId FeeSetupLevel;
   extern const BFTextFieldId FamilyCodeApplicable;
   extern const BFTextFieldId FeeLevel;
   extern const BFTextFieldId TradeFeeTypeList;
   extern const BFTextFieldId ChargeOptionList;
   extern const BFTextFieldId Status;
   extern const BFTextFieldId FeeExists;
   extern const BFTextFieldId FeeExistsByBroker;
   extern const BFTextFieldId FeeExistsByBranch;
   extern const BFTextFieldId FeeExistsBySlsrep;
   extern const BFTextFieldId FeeExistsByFundComGrp;
   extern const BFTextFieldId AppliedMethodList;
   extern const BFTextFieldId FundList;
   extern const BFTextFieldId ThresholdAmtApply;
   extern const BFTextFieldId UpdateRule;
   extern const BFDecimalFieldId MaxFee;

   //Property Externs
   extern const BFDataFieldProperties s_FldProp_FeeCode;
   extern const BFDataFieldProperties s_FldProp_ShGroupApplicable;
   extern const BFDataFieldProperties s_FldProp_BrokerApplicable;
   extern const BFDataFieldProperties s_FldProp_BranchApplicable;
   extern const BFDataFieldProperties s_FldProp_SalesrepApplicable;
   extern const BFDataFieldProperties s_FldProp_FundGroupType;
   extern const BFDataFieldProperties s_FldProp_FundClassApplicable;
   extern const BFDataFieldProperties s_FldProp_FromFundClassApplicable;
   extern const BFDataFieldProperties s_FldProp_FeeTypeList;
   extern const BFDataFieldProperties s_FldProp_BaseOnList;
   extern const BFDataFieldProperties s_FldProp_HowPaidList;
   extern const BFDataFieldProperties s_FldProp_MinMaxFreqList;
   extern const BFDataFieldProperties s_FldProp_OverrideList;
   extern const BFDataFieldProperties s_FldProp_OnPWApplicable;
   extern const BFDataFieldProperties s_FldProp_OnFWApplicable;
   extern const BFDataFieldProperties s_FldProp_FeeSetupLevel;
   extern const BFDataFieldProperties s_FldProp_FamilyCodeApplicable;
   extern const BFDataFieldProperties s_FldProp_FeeLevel;
   extern const BFDataFieldProperties s_FldProp_TradeFeeTypeList;
   extern const BFDataFieldProperties s_FldProp_ChargeOptionList;
   extern const BFDataFieldProperties s_FldProp_Status;
   extern const BFDataFieldProperties s_FldProp_FeeExists;
   extern const BFDataFieldProperties s_FldProp_FeeExistsByBroker;
   extern const BFDataFieldProperties s_FldProp_FeeExistsByBranch;
   extern const BFDataFieldProperties s_FldProp_FeeExistsBySlsrep;
   extern const BFDataFieldProperties s_FldProp_FeeExistsByFundComGrp;
   extern const BFDataFieldProperties s_FldProp_AppliedMethodList;
   extern const BFDataFieldProperties s_FldProp_FundList;
   extern const BFDataFieldProperties s_FldProp_ThresholdAmtApply;
   extern const BFDataFieldProperties s_FldProp_UpdateRule;
   extern const BFDataFieldProperties s_FldProp_MaxFee;
}


class dsi_DSTC0253_VWRepeat_Record : public BFDataImpl 
{
public:
   // Constructors
   dsi_DSTC0253_VWRepeat_Record();
   virtual ~dsi_DSTC0253_VWRepeat_Record();

   virtual BFDataImpl* clone();

   virtual BFDataField* getElement( const BFFieldId& id );
   virtual const BFDataField* getElement( const BFFieldId& id ) const;
   virtual BFDataField* getElementByIndex( unsigned int iField );
   virtual const BFDataField* getElementByIndex( unsigned int iField ) const;


   virtual unsigned long getLargestDefinedField( void ) const;
   virtual unsigned long getDefinedByteLength( void ) const;
   virtual bool exists( const BFFieldId& id ) const;
   static bool fieldExists( const BFFieldId& id );

private:
   BFDataField* aFlds_[31];
   // Field Declarations
   BFTextField_60 FeeCode_;
   BFTextField_60 ShGroupApplicable_;
   BFTextField_60 BrokerApplicable_;
   BFTextField_60 BranchApplicable_;
   BFTextField_60 SalesrepApplicable_;
   BFTextField_60 FundGroupType_;
   BFTextField_60 FundClassApplicable_;
   BFTextField_60 FromFundClassApplicable_;
   BFTextField_60 FeeTypeList_;
   BFTextField_60 BaseOnList_;
   BFTextField_60 HowPaidList_;
   BFTextField_60 MinMaxFreqList_;
   BFTextField_60 OverrideList_;
   BFTextField_60 OnPWApplicable_;
   BFTextField_60 OnFWApplicable_;
   BFTextField_60 FeeSetupLevel_;
   BFTextField_1 FamilyCodeApplicable_;
   BFTextField_60 FeeLevel_;
   BFTextField_60 TradeFeeTypeList_;
   BFTextField_60 ChargeOptionList_;
   BFTextField_60 Status_;
   BFTextField_1 FeeExists_;
   BFTextField<3> FeeExistsByBroker_;
   BFTextField<3> FeeExistsByBranch_;
   BFTextField<3> FeeExistsBySlsrep_;
   BFTextField<3> FeeExistsByFundComGrp_;
   BFTextField_60 AppliedMethodList_;
   BFTextField<1000> FundList_;
   BFTextField_10 ThresholdAmtApply_;
   BFTextField_60 UpdateRule_;
   BFDecimalField MaxFee_;

};
