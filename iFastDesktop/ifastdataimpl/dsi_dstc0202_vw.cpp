// BFDataImpl implementation file for DataSet DSTC0202.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0202_vw.h"


// This function creates an instance of dsi_DSTC0202_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0202_VW() { return new dsi_DSTC0202_VW; }

dsi_DSTC0202_VW::dsi_DSTC0202_VW()
: BFDataImpl( 40003067 )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, PensionJuris_( ifds::PensionJuris, &ifds::s_FldProp_PensionJuris )
, MinWithAge_( ifds::MinWithAge, &ifds::s_FldProp_MinWithAge )
, PenSourceLine1_( ifds::PenSourceLine1, &ifds::s_FldProp_PenSourceLine1 )
, PenSourceLine2_( ifds::PenSourceLine2, &ifds::s_FldProp_PenSourceLine2 )
, PenSourceLine3_( ifds::PenSourceLine3, &ifds::s_FldProp_PenSourceLine3 )
, UniSexPer_( ifds::UniSexPer, &ifds::s_FldProp_UniSexPer )
, SexDistinctPer_( ifds::SexDistinctPer, &ifds::s_FldProp_SexDistinctPer )
, LIPPenInfoVer_( ifds::LIPPenInfoVer, &ifds::s_FldProp_LIPPenInfoVer )
, LIPPenInfoRid_( ifds::LIPPenInfoRid, &ifds::s_FldProp_LIPPenInfoRid )
, ShrNum_( ifds::ShrNum, &ifds::s_FldProp_ShrNum )
{
   cFields_ = 15;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0202_VW::~dsi_DSTC0202_VW()
{
}

BFDataImpl* dsi_DSTC0202_VW::clone()
{
   dsi_DSTC0202_VW* p = new dsi_DSTC0202_VW;
   p->EffectiveDate_ = EffectiveDate_;
   p->ModDate_ = ModDate_;
   p->ProcessDate_ = ProcessDate_;
   p->Username_ = Username_;
   p->ModUser_ = ModUser_;
   p->PensionJuris_ = PensionJuris_;
   p->MinWithAge_ = MinWithAge_;
   p->PenSourceLine1_ = PenSourceLine1_;
   p->PenSourceLine2_ = PenSourceLine2_;
   p->PenSourceLine3_ = PenSourceLine3_;
   p->UniSexPer_ = UniSexPer_;
   p->SexDistinctPer_ = SexDistinctPer_;
   p->LIPPenInfoVer_ = LIPPenInfoVer_;
   p->LIPPenInfoRid_ = LIPPenInfoRid_;
   p->ShrNum_ = ShrNum_;
   return(p);
}

BFDataField* dsi_DSTC0202_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40000194: return ( &PensionJuris_ ); break; // PensionJuris
      case 40001358: return ( &MinWithAge_ ); break; // MinWithAge
      case 40003069: return ( &PenSourceLine1_ ); break; // PenSourceLine1
      case 40003071: return ( &PenSourceLine2_ ); break; // PenSourceLine2
      case 40003072: return ( &PenSourceLine3_ ); break; // PenSourceLine3
      case 40003073: return ( &UniSexPer_ ); break; // UniSexPer
      case 40003074: return ( &SexDistinctPer_ ); break; // SexDistinctPer
      case 40003075: return ( &LIPPenInfoVer_ ); break; // LIPPenInfoVer
      case 40003076: return ( &LIPPenInfoRid_ ); break; // LIPPenInfoRid
      case 40000114: return ( &ShrNum_ ); break; // ShrNum
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0202_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0202_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0202_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 15 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &EffectiveDate_; break;
            case 1: aFlds_[1] = &ModDate_; break;
            case 2: aFlds_[2] = &ProcessDate_; break;
            case 3: aFlds_[3] = &Username_; break;
            case 4: aFlds_[4] = &ModUser_; break;
            case 5: aFlds_[5] = &PensionJuris_; break;
            case 6: aFlds_[6] = &MinWithAge_; break;
            case 7: aFlds_[7] = &PenSourceLine1_; break;
            case 8: aFlds_[8] = &PenSourceLine2_; break;
            case 9: aFlds_[9] = &PenSourceLine3_; break;
            case 10: aFlds_[10] = &UniSexPer_; break;
            case 11: aFlds_[11] = &SexDistinctPer_; break;
            case 12: aFlds_[12] = &LIPPenInfoVer_; break;
            case 13: aFlds_[13] = &LIPPenInfoRid_; break;
            case 14: aFlds_[14] = &ShrNum_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0202_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0202_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0202_VW::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0202_VW::getDefinedByteLength( void ) const
{
   return( 442 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0202_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0202_VW::fieldExists( id );
}

bool dsi_DSTC0202_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000327: return( true );
      case 40000217: return( true );
      case 40000216: return( true );
      case 40000117: return( true );
      case 40000218: return( true );
      case 40000194: return( true );
      case 40001358: return( true );
      case 40003069: return( true );
      case 40003071: return( true );
      case 40003072: return( true );
      case 40003073: return( true );
      case 40003074: return( true );
      case 40003075: return( true );
      case 40003076: return( true );
      case 40000114: return( true );
   }
   return false;
}

