// BFDataImpl implementation file for DataSet DSTC0389.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Thursday, February 23, 2017 03:47:59


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0389_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0389_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0389_VWRepeat_Record() { return new dsi_DSTC0389_VWRepeat_Record; }

dsi_DSTC0389_VWRepeat_Record::dsi_DSTC0389_VWRepeat_Record()
: BFDataImpl( 40005825 )
, RegDocId_( ifds::RegDocId, &ifds::s_FldProp_RegDocId )
, RegDocName_( ifds::RegDocName, &ifds::s_FldProp_RegDocName )
, RegDocStatus_( ifds::RegDocStatus, &ifds::s_FldProp_RegDocStatus )
, DocReceivedDate_( ifds::DocReceivedDate, &ifds::s_FldProp_DocReceivedDate )
, RegDocRemarks_( ifds::RegDocRemarks, &ifds::s_FldProp_RegDocRemarks )
, RecId_( ifds::RecId, &ifds::s_FldProp_RecId )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, ExpireDate_( ifds::ExpireDate, &ifds::s_FldProp_ExpireDate )
, RequestDate_( ifds::RequestDate, &ifds::s_FldProp_RequestDate )
, RefNum_( ifds::RefNum, &ifds::s_FldProp_RefNum )
, AcctDocListUUID_( ifds::AcctDocListUUID, &ifds::s_FldProp_AcctDocListUUID )
, RegDocComplyRule_( ifds::RegDocComplyRule, &ifds::s_FldProp_RegDocComplyRule )
, RegDocJurisdiction_( ifds::RegDocJurisdiction, &ifds::s_FldProp_RegDocJurisdiction )
, TransmitMode_( ifds::TransmitMode, &ifds::s_FldProp_TransmitMode )
, IDMethod_( ifds::IDMethod, &ifds::s_FldProp_IDMethod )
, CountryOfIssue_( ifds::CountryOfIssue, &ifds::s_FldProp_CountryOfIssue )
, VerifiedDate_( ifds::VerifiedDate, &ifds::s_FldProp_VerifiedDate )
, DocSource_( ifds::DocSource, &ifds::s_FldProp_DocSource )
{
    cFields_ = 18;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0389_VWRepeat_Record::~dsi_DSTC0389_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0389_VWRepeat_Record::clone()
{
    dsi_DSTC0389_VWRepeat_Record* p = new dsi_DSTC0389_VWRepeat_Record;
    p->RegDocId_ = RegDocId_;
    p->RegDocName_ = RegDocName_;
    p->RegDocStatus_ = RegDocStatus_;
    p->DocReceivedDate_ = DocReceivedDate_;
    p->RegDocRemarks_ = RegDocRemarks_;
    p->RecId_ = RecId_;
    p->EffectiveDate_ = EffectiveDate_;
    p->ExpireDate_ = ExpireDate_;
    p->RequestDate_ = RequestDate_;
    p->RefNum_ = RefNum_;
    p->AcctDocListUUID_ = AcctDocListUUID_;
    p->RegDocComplyRule_ = RegDocComplyRule_;
    p->RegDocJurisdiction_ = RegDocJurisdiction_;
    p->TransmitMode_ = TransmitMode_;
    p->IDMethod_ = IDMethod_;
    p->CountryOfIssue_ = CountryOfIssue_;
    p->VerifiedDate_ = VerifiedDate_;
    p->DocSource_ = DocSource_;
    return(p);
}

BFDataField* dsi_DSTC0389_VWRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40005804: return ( &RegDocId_ ); break; // RegDocId
        case 40005803: return ( &RegDocName_ ); break; // RegDocName
        case 40005802: return ( &RegDocStatus_ ); break; // RegDocStatus
        case 40005805: return ( &DocReceivedDate_ ); break; // DocReceivedDate
        case 40005806: return ( &RegDocRemarks_ ); break; // RegDocRemarks
        case 40003737: return ( &RecId_ ); break; // RecId
        case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
        case 40006968: return ( &ExpireDate_ ); break; // ExpireDate
        case 40006969: return ( &RequestDate_ ); break; // RequestDate
        case 40004585: return ( &RefNum_ ); break; // RefNum
        case 40006970: return ( &AcctDocListUUID_ ); break; // AcctDocListUUID
        case 40007588: return ( &RegDocComplyRule_ ); break; // RegDocComplyRule
        case 40007578: return ( &RegDocJurisdiction_ ); break; // RegDocJurisdiction
        case 40007717: return ( &TransmitMode_ ); break; // TransmitMode
        case 40007719: return ( &IDMethod_ ); break; // IDMethod
        case 40006831: return ( &CountryOfIssue_ ); break; // CountryOfIssue
        case 40007721: return ( &VerifiedDate_ ); break; // VerifiedDate
        case 40007720: return ( &DocSource_ ); break; // DocSource
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0389_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0389_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0389_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 18 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &RegDocId_; break;
                case 1: aFlds_[1] = &RegDocName_; break;
                case 2: aFlds_[2] = &RegDocStatus_; break;
                case 3: aFlds_[3] = &DocReceivedDate_; break;
                case 4: aFlds_[4] = &RegDocRemarks_; break;
                case 5: aFlds_[5] = &RecId_; break;
                case 6: aFlds_[6] = &EffectiveDate_; break;
                case 7: aFlds_[7] = &ExpireDate_; break;
                case 8: aFlds_[8] = &RequestDate_; break;
                case 9: aFlds_[9] = &RefNum_; break;
                case 10: aFlds_[10] = &AcctDocListUUID_; break;
                case 11: aFlds_[11] = &RegDocComplyRule_; break;
                case 12: aFlds_[12] = &RegDocJurisdiction_; break;
                case 13: aFlds_[13] = &TransmitMode_; break;
                case 14: aFlds_[14] = &IDMethod_; break;
                case 15: aFlds_[15] = &CountryOfIssue_; break;
                case 16: aFlds_[16] = &VerifiedDate_; break;
                case 17: aFlds_[17] = &DocSource_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0389_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0389_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0389_VWRepeat_Record::getLargestDefinedField( void ) const
{
    return( 256 );
}

unsigned long dsi_DSTC0389_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 1031 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0389_VWRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0389_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0389_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40005804: return ( true );
        case 40005803: return ( true );
        case 40005802: return ( true );
        case 40005805: return ( true );
        case 40005806: return ( true );
        case 40003737: return ( true );
        case 40000327: return ( true );
        case 40006968: return ( true );
        case 40006969: return ( true );
        case 40004585: return ( true );
        case 40006970: return ( true );
        case 40007588: return ( true );
        case 40007578: return ( true );
        case 40007717: return ( true );
        case 40007719: return ( true );
        case 40006831: return ( true );
        case 40007721: return ( true );
        case 40007720: return ( true );
    }
    return false;
}

