// BFDataImpl implementation file for DataSet DSTC0117.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0117_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0117_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0117_VWRepeat_Record() { return new dsi_DSTC0117_VWRepeat_Record; }

dsi_DSTC0117_VWRepeat_Record::dsi_DSTC0117_VWRepeat_Record()
: BFDataImpl( 40002267 )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, ElongName1_( ifds::ElongName1, &ifds::s_FldProp_ElongName1 )
, TradeDate_( ifds::TradeDate, &ifds::s_FldProp_TradeDate )
, SettleDate_( ifds::SettleDate, &ifds::s_FldProp_SettleDate )
, Settled_( ifds::Settled, &ifds::s_FldProp_Settled )
, GrossAmt_( ifds::GrossAmt, &ifds::s_FldProp_GrossAmt )
, UnitPrice_( ifds::UnitPrice, &ifds::s_FldProp_UnitPrice )
, Units_( ifds::Units, &ifds::s_FldProp_Units )
, UnitBalance_( ifds::UnitBalance, &ifds::s_FldProp_UnitBalance )
, ShrNum_( ifds::ShrNum, &ifds::s_FldProp_ShrNum )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, SlsrepCode_( ifds::SlsrepCode, &ifds::s_FldProp_SlsrepCode )
, GoodBad_( ifds::GoodBad, &ifds::s_FldProp_GoodBad )
, TranStatus_( ifds::TranStatus, &ifds::s_FldProp_TranStatus )
, Baycom_( ifds::Baycom, &ifds::s_FldProp_Baycom )
, ProdEventIndc_( ifds::ProdEventIndc, &ifds::s_FldProp_ProdEventIndc )
{
   cFields_ = 20;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0117_VWRepeat_Record::~dsi_DSTC0117_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0117_VWRepeat_Record::clone()
{
   dsi_DSTC0117_VWRepeat_Record* p = new dsi_DSTC0117_VWRepeat_Record;
   p->TransId_ = TransId_;
   p->TransType_ = TransType_;
   p->TransNum_ = TransNum_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->ElongName1_ = ElongName1_;
   p->TradeDate_ = TradeDate_;
   p->SettleDate_ = SettleDate_;
   p->Settled_ = Settled_;
   p->GrossAmt_ = GrossAmt_;
   p->UnitPrice_ = UnitPrice_;
   p->Units_ = Units_;
   p->UnitBalance_ = UnitBalance_;
   p->ShrNum_ = ShrNum_;
   p->BrokerCode_ = BrokerCode_;
   p->SlsrepCode_ = SlsrepCode_;
   p->GoodBad_ = GoodBad_;
   p->TranStatus_ = TranStatus_;
   p->Baycom_ = Baycom_;
   p->ProdEventIndc_ = ProdEventIndc_;
   return(p);
}

BFDataField* dsi_DSTC0117_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000747: return ( &ElongName1_ ); break; // ElongName1
      case 40000097: return ( &TradeDate_ ); break; // TradeDate
      case 40000348: return ( &SettleDate_ ); break; // SettleDate
      case 40000349: return ( &Settled_ ); break; // Settled
      case 40000350: return ( &GrossAmt_ ); break; // GrossAmt
      case 40000352: return ( &UnitPrice_ ); break; // UnitPrice
      case 40000332: return ( &Units_ ); break; // Units
      case 40000353: return ( &UnitBalance_ ); break; // UnitBalance
      case 40000114: return ( &ShrNum_ ); break; // ShrNum
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000656: return ( &SlsrepCode_ ); break; // SlsrepCode
      case 40000496: return ( &GoodBad_ ); break; // GoodBad
      case 40002273: return ( &TranStatus_ ); break; // TranStatus
      case 40000958: return ( &Baycom_ ); break; // Baycom
      case 40006039: return ( &ProdEventIndc_ ); break; // ProdEventIndc
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0117_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0117_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0117_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 20 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TransId_; break;
            case 1: aFlds_[1] = &TransType_; break;
            case 2: aFlds_[2] = &TransNum_; break;
            case 3: aFlds_[3] = &FundCode_; break;
            case 4: aFlds_[4] = &ClassCode_; break;
            case 5: aFlds_[5] = &ElongName1_; break;
            case 6: aFlds_[6] = &TradeDate_; break;
            case 7: aFlds_[7] = &SettleDate_; break;
            case 8: aFlds_[8] = &Settled_; break;
            case 9: aFlds_[9] = &GrossAmt_; break;
            case 10: aFlds_[10] = &UnitPrice_; break;
            case 11: aFlds_[11] = &Units_; break;
            case 12: aFlds_[12] = &UnitBalance_; break;
            case 13: aFlds_[13] = &ShrNum_; break;
            case 14: aFlds_[14] = &BrokerCode_; break;
            case 15: aFlds_[15] = &SlsrepCode_; break;
            case 16: aFlds_[16] = &GoodBad_; break;
            case 17: aFlds_[17] = &TranStatus_; break;
            case 18: aFlds_[18] = &Baycom_; break;
            case 19: aFlds_[19] = &ProdEventIndc_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0117_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0117_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0117_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0117_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 967 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0117_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0117_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0117_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000063: return( true );
      case 40000095: return( true );
      case 40000096: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000747: return( true );
      case 40000097: return( true );
      case 40000348: return( true );
      case 40000349: return( true );
      case 40000350: return( true );
      case 40000352: return( true );
      case 40000332: return( true );
      case 40000353: return( true );
      case 40000114: return( true );
      case 40000044: return( true );
      case 40000656: return( true );
      case 40000496: return( true );
      case 40002273: return( true );
      case 40000958: return( true );
      case 40006039: return( true );
   }
   return false;
}

