// BFDataImpl implementation file for DataSet DSTC0075.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0075_req.h"


// This function creates an instance of dsi_DSTC0075_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0075_REQ() { return new dsi_DSTC0075_REQ; }

dsi_DSTC0075_REQ::dsi_DSTC0075_REQ()
: BFDataImpl( 40001001 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, ShrNum_( ifds::ShrNum, &ifds::s_FldProp_ShrNum )
, ShrNumManual_( ifds::ShrNumManual, &ifds::s_FldProp_ShrNumManual )
, AcctDesignation_( ifds::AcctDesignation, &ifds::s_FldProp_AcctDesignation )
, TaxJurisCode_( ifds::TaxJurisCode, &ifds::s_FldProp_TaxJurisCode )
, ResProvCode_( ifds::ResProvCode, &ifds::s_FldProp_ResProvCode )
, GroupCode_( ifds::GroupCode, &ifds::s_FldProp_GroupCode )
, FamilyCode_( ifds::FamilyCode, &ifds::s_FldProp_FamilyCode )
, FundRelnCode_( ifds::FundRelnCode, &ifds::s_FldProp_FundRelnCode )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, PrimMstrVer_( ifds::PrimMstrVer, &ifds::s_FldProp_PrimMstrVer )
, Name2_( ifds::Name2, &ifds::s_FldProp_Name2 )
, ConsolEFT_( ifds::ConsolEFT, &ifds::s_FldProp_ConsolEFT )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, ShType_( ifds::ShType, &ifds::s_FldProp_ShType )
, Confidential_( ifds::Confidential, &ifds::s_FldProp_Confidential )
, Channel_( ifds::Channel, &ifds::s_FldProp_Channel )
, FeeModelCode_( ifds::FeeModelCode, &ifds::s_FldProp_FeeModelCode )
, UpdAllNonFin_( ifds::UpdAllNonFin, &ifds::s_FldProp_UpdAllNonFin )
{
   cFields_ = 24;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0075_REQ::~dsi_DSTC0075_REQ()
{
}

BFDataImpl* dsi_DSTC0075_REQ::clone()
{
   dsi_DSTC0075_REQ* p = new dsi_DSTC0075_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->RunMode_ = RunMode_;
   p->ShrNum_ = ShrNum_;
   p->ShrNumManual_ = ShrNumManual_;
   p->AcctDesignation_ = AcctDesignation_;
   p->TaxJurisCode_ = TaxJurisCode_;
   p->ResProvCode_ = ResProvCode_;
   p->GroupCode_ = GroupCode_;
   p->FamilyCode_ = FamilyCode_;
   p->FundRelnCode_ = FundRelnCode_;
   p->EffectiveDate_ = EffectiveDate_;
   p->PrimMstrVer_ = PrimMstrVer_;
   p->Name2_ = Name2_;
   p->ConsolEFT_ = ConsolEFT_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->ShType_ = ShType_;
   p->Confidential_ = Confidential_;
   p->Channel_ = Channel_;
   p->FeeModelCode_ = FeeModelCode_;
   p->UpdAllNonFin_ = UpdAllNonFin_;
   return(p);
}

BFDataField* dsi_DSTC0075_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40000114: return ( &ShrNum_ ); break; // ShrNum
      case 40001002: return ( &ShrNumManual_ ); break; // ShrNumManual
      case 40000178: return ( &AcctDesignation_ ); break; // AcctDesignation
      case 40000796: return ( &TaxJurisCode_ ); break; // TaxJurisCode
      case 40000798: return ( &ResProvCode_ ); break; // ResProvCode
      case 40000800: return ( &GroupCode_ ); break; // GroupCode
      case 40000802: return ( &FamilyCode_ ); break; // FamilyCode
      case 40000804: return ( &FundRelnCode_ ); break; // FundRelnCode
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000914: return ( &PrimMstrVer_ ); break; // PrimMstrVer
      case 40000543: return ( &Name2_ ); break; // Name2
      case 40000975: return ( &ConsolEFT_ ); break; // ConsolEFT
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40002292: return ( &ShType_ ); break; // ShType
      case 40004123: return ( &Confidential_ ); break; // Confidential
      case 40004140: return ( &Channel_ ); break; // Channel
      case 40004584: return ( &FeeModelCode_ ); break; // FeeModelCode
      case 40005628: return ( &UpdAllNonFin_ ); break; // UpdAllNonFin
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0075_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0075_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0075_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 24 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &RunMode_; break;
            case 5: aFlds_[5] = &ShrNum_; break;
            case 6: aFlds_[6] = &ShrNumManual_; break;
            case 7: aFlds_[7] = &AcctDesignation_; break;
            case 8: aFlds_[8] = &TaxJurisCode_; break;
            case 9: aFlds_[9] = &ResProvCode_; break;
            case 10: aFlds_[10] = &GroupCode_; break;
            case 11: aFlds_[11] = &FamilyCode_; break;
            case 12: aFlds_[12] = &FundRelnCode_; break;
            case 13: aFlds_[13] = &EffectiveDate_; break;
            case 14: aFlds_[14] = &PrimMstrVer_; break;
            case 15: aFlds_[15] = &Name2_; break;
            case 16: aFlds_[16] = &ConsolEFT_; break;
            case 17: aFlds_[17] = &Track_; break;
            case 18: aFlds_[18] = &Activity_; break;
            case 19: aFlds_[19] = &ShType_; break;
            case 20: aFlds_[20] = &Confidential_; break;
            case 21: aFlds_[21] = &Channel_; break;
            case 22: aFlds_[22] = &FeeModelCode_; break;
            case 23: aFlds_[23] = &UpdAllNonFin_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0075_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0075_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0075_REQ::getLargestDefinedField( void ) const
{
   return( 250 );
}

unsigned long dsi_DSTC0075_REQ::getDefinedByteLength( void ) const
{
   return( 1184 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0075_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0075_REQ::fieldExists( id );
}

bool dsi_DSTC0075_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40000990: return( true );
      case 40000114: return( true );
      case 40001002: return( true );
      case 40000178: return( true );
      case 40000796: return( true );
      case 40000798: return( true );
      case 40000800: return( true );
      case 40000802: return( true );
      case 40000804: return( true );
      case 40000327: return( true );
      case 40000914: return( true );
      case 40000543: return( true );
      case 40000975: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40002292: return( true );
      case 40004123: return( true );
      case 40004140: return( true );
      case 40004584: return( true );
      case 40005628: return( true );
   }
   return false;
}

