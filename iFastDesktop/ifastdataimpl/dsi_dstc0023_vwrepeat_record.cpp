// BFDataImpl implementation file for DataSet DSTC0023.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Monday, May 08, 2017 01:15:39


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0023_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0023_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0023_VWRepeat_Record() { return new dsi_DSTC0023_VWRepeat_Record; }

dsi_DSTC0023_VWRepeat_Record::dsi_DSTC0023_VWRepeat_Record()
: BFDataImpl( 40000488 )
, ValueAsAt_( ifds::ValueAsAt, &ifds::s_FldProp_ValueAsAt )
, rxFundCode_( ifds::rxFundCode, &ifds::s_FldProp_rxFundCode )
, rxClassCode_( ifds::rxClassCode, &ifds::s_FldProp_rxClassCode )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, RecordDate_( ifds::RecordDate, &ifds::s_FldProp_RecordDate )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, ProcessTime_( ifds::ProcessTime, &ifds::s_FldProp_ProcessTime )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, UnitValue_( ifds::UnitValue, &ifds::s_FldProp_UnitValue )
, UnAllocIncome_( ifds::UnAllocIncome, &ifds::s_FldProp_UnAllocIncome )
, Notional_( ifds::Notional, &ifds::s_FldProp_Notional )
, SkeletonBusYr_( ifds::SkeletonBusYr, &ifds::s_FldProp_SkeletonBusYr )
, GoodBad_( ifds::GoodBad, &ifds::s_FldProp_GoodBad )
, CanDividend_( ifds::CanDividend, &ifds::s_FldProp_CanDividend )
, InelgDividend_( ifds::InelgDividend, &ifds::s_FldProp_InelgDividend )
, CanInterest_( ifds::CanInterest, &ifds::s_FldProp_CanInterest )
, ForeignInterest_( ifds::ForeignInterest, &ifds::s_FldProp_ForeignInterest )
, ForeignDividend_( ifds::ForeignDividend, &ifds::s_FldProp_ForeignDividend )
, AccrualIncome_( ifds::AccrualIncome, &ifds::s_FldProp_AccrualIncome )
, MgmtFee_( ifds::MgmtFee, &ifds::s_FldProp_MgmtFee )
, TaxCapGain_( ifds::TaxCapGain, &ifds::s_FldProp_TaxCapGain )
, ForeignTax_( ifds::ForeignTax, &ifds::s_FldProp_ForeignTax )
, OthIncome_( ifds::OthIncome, &ifds::s_FldProp_OthIncome )
, RealizeGain_( ifds::RealizeGain, &ifds::s_FldProp_RealizeGain )
, TrusteeFee_( ifds::TrusteeFee, &ifds::s_FldProp_TrusteeFee )
, EqualizationAmt_( ifds::EqualizationAmt, &ifds::s_FldProp_EqualizationAmt )
, PaidAmt_( ifds::PaidAmt, &ifds::s_FldProp_PaidAmt )
, PriceCode2_( ifds::PriceCode2, &ifds::s_FldProp_PriceCode2 )
, PriceDesc2_( ifds::PriceDesc2, &ifds::s_FldProp_PriceDesc2 )
, UnitValue2_( ifds::UnitValue2, &ifds::s_FldProp_UnitValue2 )
, ChgFactor2_( ifds::ChgFactor2, &ifds::s_FldProp_ChgFactor2 )
, PriceCode3_( ifds::PriceCode3, &ifds::s_FldProp_PriceCode3 )
, PriceDesc3_( ifds::PriceDesc3, &ifds::s_FldProp_PriceDesc3 )
, UnitValue3_( ifds::UnitValue3, &ifds::s_FldProp_UnitValue3 )
, ChgFactor3_( ifds::ChgFactor3, &ifds::s_FldProp_ChgFactor3 )
, PriceCode4_( ifds::PriceCode4, &ifds::s_FldProp_PriceCode4 )
, PriceDesc4_( ifds::PriceDesc4, &ifds::s_FldProp_PriceDesc4 )
, UnitValue4_( ifds::UnitValue4, &ifds::s_FldProp_UnitValue4 )
, ChgFactor4_( ifds::ChgFactor4, &ifds::s_FldProp_ChgFactor4 )
, PriceCode5_( ifds::PriceCode5, &ifds::s_FldProp_PriceCode5 )
, PriceDesc5_( ifds::PriceDesc5, &ifds::s_FldProp_PriceDesc5 )
, UnitValue5_( ifds::UnitValue5, &ifds::s_FldProp_UnitValue5 )
, ChgFactor5_( ifds::ChgFactor5, &ifds::s_FldProp_ChgFactor5 )
, ChgFactor_( ifds::ChgFactor, &ifds::s_FldProp_ChgFactor )
, FundLoadGrp_( ifds::FundLoadGrp, &ifds::s_FldProp_FundLoadGrp )
, ROC_( ifds::ROC, &ifds::s_FldProp_ROC )
, FundWKN_( ifds::FundWKN, &ifds::s_FldProp_FundWKN )
, FundISIN_( ifds::FundISIN, &ifds::s_FldProp_FundISIN )
, FactorAmt1_( ifds::FactorAmt1, &ifds::s_FldProp_FactorAmt1 )
, FactorAmt2_( ifds::FactorAmt2, &ifds::s_FldProp_FactorAmt2 )
, FactorAmt3_( ifds::FactorAmt3, &ifds::s_FldProp_FactorAmt3 )
, FactorAmt4_( ifds::FactorAmt4, &ifds::s_FldProp_FactorAmt4 )
, FactorAmt5_( ifds::FactorAmt5, &ifds::s_FldProp_FactorAmt5 )
, UnitId_( ifds::UnitId, &ifds::s_FldProp_UnitId )
, ExDate_( ifds::ExDate, &ifds::s_FldProp_ExDate )
, PayDate_( ifds::PayDate, &ifds::s_FldProp_PayDate )
, ReInvDate_( ifds::ReInvDate, &ifds::s_FldProp_ReInvDate )
, DistributionType_( ifds::DistributionType, &ifds::s_FldProp_DistributionType )
, ZeroDistributionAppl_( ifds::ZeroDistributionAppl, &ifds::s_FldProp_ZeroDistributionAppl )
, RatePeriod_( ifds::RatePeriod, &ifds::s_FldProp_RatePeriod )
, GAV_( ifds::GAV, &ifds::s_FldProp_GAV )
, LastIDRate_( ifds::LastIDRate, &ifds::s_FldProp_LastIDRate )
, MultiPriceUsageID_( ifds::MultiPriceUsageID, &ifds::s_FldProp_MultiPriceUsageID )
, CUSIP_( ifds::CUSIP, &ifds::s_FldProp_CUSIP )
, MultiPriceFund_( ifds::MultiPriceFund, &ifds::s_FldProp_MultiPriceFund )
, PriceCode6_( ifds::PriceCode6, &ifds::s_FldProp_PriceCode6 )
, PriceDesc6_( ifds::PriceDesc6, &ifds::s_FldProp_PriceDesc6 )
, UnitValue6_( ifds::UnitValue6, &ifds::s_FldProp_UnitValue6 )
, ChgFactor6_( ifds::ChgFactor6, &ifds::s_FldProp_ChgFactor6 )
, PriceCode7_( ifds::PriceCode7, &ifds::s_FldProp_PriceCode7 )
, PriceDesc7_( ifds::PriceDesc7, &ifds::s_FldProp_PriceDesc7 )
, UnitValue7_( ifds::UnitValue7, &ifds::s_FldProp_UnitValue7 )
, ChgFactor7_( ifds::ChgFactor7, &ifds::s_FldProp_ChgFactor7 )
, PriceCode8_( ifds::PriceCode8, &ifds::s_FldProp_PriceCode8 )
, PriceDesc8_( ifds::PriceDesc8, &ifds::s_FldProp_PriceDesc8 )
, UnitValue8_( ifds::UnitValue8, &ifds::s_FldProp_UnitValue8 )
, ChgFactor8_( ifds::ChgFactor8, &ifds::s_FldProp_ChgFactor8 )
, PriceCode9_( ifds::PriceCode9, &ifds::s_FldProp_PriceCode9 )
, PriceDesc9_( ifds::PriceDesc9, &ifds::s_FldProp_PriceDesc9 )
, UnitValue9_( ifds::UnitValue9, &ifds::s_FldProp_UnitValue9 )
, ChgFactor9_( ifds::ChgFactor9, &ifds::s_FldProp_ChgFactor9 )
, PriceCode10_( ifds::PriceCode10, &ifds::s_FldProp_PriceCode10 )
, PriceDesc10_( ifds::PriceDesc10, &ifds::s_FldProp_PriceDesc10 )
, UnitValue10_( ifds::UnitValue10, &ifds::s_FldProp_UnitValue10 )
, ChgFactor10_( ifds::ChgFactor10, &ifds::s_FldProp_ChgFactor10 )
, PriceCode11_( ifds::PriceCode11, &ifds::s_FldProp_PriceCode11 )
, PriceDesc11_( ifds::PriceDesc11, &ifds::s_FldProp_PriceDesc11 )
, UnitValue11_( ifds::UnitValue11, &ifds::s_FldProp_UnitValue11 )
, ChgFactor11_( ifds::ChgFactor11, &ifds::s_FldProp_ChgFactor11 )
, PriceCode12_( ifds::PriceCode12, &ifds::s_FldProp_PriceCode12 )
, PriceDesc12_( ifds::PriceDesc12, &ifds::s_FldProp_PriceDesc12 )
, UnitValue12_( ifds::UnitValue12, &ifds::s_FldProp_UnitValue12 )
, ChgFactor12_( ifds::ChgFactor12, &ifds::s_FldProp_ChgFactor12 )
, PriceCode13_( ifds::PriceCode13, &ifds::s_FldProp_PriceCode13 )
, PriceDesc13_( ifds::PriceDesc13, &ifds::s_FldProp_PriceDesc13 )
, UnitValue13_( ifds::UnitValue13, &ifds::s_FldProp_UnitValue13 )
, ChgFactor13_( ifds::ChgFactor13, &ifds::s_FldProp_ChgFactor13 )
{
    cFields_ = 100;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0023_VWRepeat_Record::~dsi_DSTC0023_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0023_VWRepeat_Record::clone()
{
    dsi_DSTC0023_VWRepeat_Record* p = new dsi_DSTC0023_VWRepeat_Record;
    p->ValueAsAt_ = ValueAsAt_;
    p->rxFundCode_ = rxFundCode_;
    p->rxClassCode_ = rxClassCode_;
    p->TransType_ = TransType_;
    p->RecordDate_ = RecordDate_;
    p->ProcessDate_ = ProcessDate_;
    p->ProcessTime_ = ProcessTime_;
    p->ModDate_ = ModDate_;
    p->Username_ = Username_;
    p->ModUser_ = ModUser_;
    p->Currency_ = Currency_;
    p->UnitValue_ = UnitValue_;
    p->UnAllocIncome_ = UnAllocIncome_;
    p->Notional_ = Notional_;
    p->SkeletonBusYr_ = SkeletonBusYr_;
    p->GoodBad_ = GoodBad_;
    p->CanDividend_ = CanDividend_;
    p->InelgDividend_ = InelgDividend_;
    p->CanInterest_ = CanInterest_;
    p->ForeignInterest_ = ForeignInterest_;
    p->ForeignDividend_ = ForeignDividend_;
    p->AccrualIncome_ = AccrualIncome_;
    p->MgmtFee_ = MgmtFee_;
    p->TaxCapGain_ = TaxCapGain_;
    p->ForeignTax_ = ForeignTax_;
    p->OthIncome_ = OthIncome_;
    p->RealizeGain_ = RealizeGain_;
    p->TrusteeFee_ = TrusteeFee_;
    p->EqualizationAmt_ = EqualizationAmt_;
    p->PaidAmt_ = PaidAmt_;
    p->PriceCode2_ = PriceCode2_;
    p->PriceDesc2_ = PriceDesc2_;
    p->UnitValue2_ = UnitValue2_;
    p->ChgFactor2_ = ChgFactor2_;
    p->PriceCode3_ = PriceCode3_;
    p->PriceDesc3_ = PriceDesc3_;
    p->UnitValue3_ = UnitValue3_;
    p->ChgFactor3_ = ChgFactor3_;
    p->PriceCode4_ = PriceCode4_;
    p->PriceDesc4_ = PriceDesc4_;
    p->UnitValue4_ = UnitValue4_;
    p->ChgFactor4_ = ChgFactor4_;
    p->PriceCode5_ = PriceCode5_;
    p->PriceDesc5_ = PriceDesc5_;
    p->UnitValue5_ = UnitValue5_;
    p->ChgFactor5_ = ChgFactor5_;
    p->ChgFactor_ = ChgFactor_;
    p->FundLoadGrp_ = FundLoadGrp_;
    p->ROC_ = ROC_;
    p->FundWKN_ = FundWKN_;
    p->FundISIN_ = FundISIN_;
    p->FactorAmt1_ = FactorAmt1_;
    p->FactorAmt2_ = FactorAmt2_;
    p->FactorAmt3_ = FactorAmt3_;
    p->FactorAmt4_ = FactorAmt4_;
    p->FactorAmt5_ = FactorAmt5_;
    p->UnitId_ = UnitId_;
    p->ExDate_ = ExDate_;
    p->PayDate_ = PayDate_;
    p->ReInvDate_ = ReInvDate_;
    p->DistributionType_ = DistributionType_;
    p->ZeroDistributionAppl_ = ZeroDistributionAppl_;
    p->RatePeriod_ = RatePeriod_;
    p->GAV_ = GAV_;
    p->LastIDRate_ = LastIDRate_;
    p->MultiPriceUsageID_ = MultiPriceUsageID_;
    p->CUSIP_ = CUSIP_;
    p->MultiPriceFund_ = MultiPriceFund_;
    p->PriceCode6_ = PriceCode6_;
    p->PriceDesc6_ = PriceDesc6_;
    p->UnitValue6_ = UnitValue6_;
    p->ChgFactor6_ = ChgFactor6_;
    p->PriceCode7_ = PriceCode7_;
    p->PriceDesc7_ = PriceDesc7_;
    p->UnitValue7_ = UnitValue7_;
    p->ChgFactor7_ = ChgFactor7_;
    p->PriceCode8_ = PriceCode8_;
    p->PriceDesc8_ = PriceDesc8_;
    p->UnitValue8_ = UnitValue8_;
    p->ChgFactor8_ = ChgFactor8_;
    p->PriceCode9_ = PriceCode9_;
    p->PriceDesc9_ = PriceDesc9_;
    p->UnitValue9_ = UnitValue9_;
    p->ChgFactor9_ = ChgFactor9_;
    p->PriceCode10_ = PriceCode10_;
    p->PriceDesc10_ = PriceDesc10_;
    p->UnitValue10_ = UnitValue10_;
    p->ChgFactor10_ = ChgFactor10_;
    p->PriceCode11_ = PriceCode11_;
    p->PriceDesc11_ = PriceDesc11_;
    p->UnitValue11_ = UnitValue11_;
    p->ChgFactor11_ = ChgFactor11_;
    p->PriceCode12_ = PriceCode12_;
    p->PriceDesc12_ = PriceDesc12_;
    p->UnitValue12_ = UnitValue12_;
    p->ChgFactor12_ = ChgFactor12_;
    p->PriceCode13_ = PriceCode13_;
    p->PriceDesc13_ = PriceDesc13_;
    p->UnitValue13_ = UnitValue13_;
    p->ChgFactor13_ = ChgFactor13_;
    return(p);
}

BFDataField* dsi_DSTC0023_VWRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000489: return ( &ValueAsAt_ ); break; // ValueAsAt
        case 40000286: return ( &rxFundCode_ ); break; // rxFundCode
        case 40000287: return ( &rxClassCode_ ); break; // rxClassCode
        case 40000095: return ( &TransType_ ); break; // TransType
        case 40000490: return ( &RecordDate_ ); break; // RecordDate
        case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
        case 40000491: return ( &ProcessTime_ ); break; // ProcessTime
        case 40000217: return ( &ModDate_ ); break; // ModDate
        case 40000117: return ( &Username_ ); break; // Username
        case 40000218: return ( &ModUser_ ); break; // ModUser
        case 40000180: return ( &Currency_ ); break; // Currency
        case 40000492: return ( &UnitValue_ ); break; // UnitValue
        case 40000493: return ( &UnAllocIncome_ ); break; // UnAllocIncome
        case 40000494: return ( &Notional_ ); break; // Notional
        case 40000495: return ( &SkeletonBusYr_ ); break; // SkeletonBusYr
        case 40000496: return ( &GoodBad_ ); break; // GoodBad
        case 40000497: return ( &CanDividend_ ); break; // CanDividend
        case 40000498: return ( &InelgDividend_ ); break; // InelgDividend
        case 40000499: return ( &CanInterest_ ); break; // CanInterest
        case 40000500: return ( &ForeignInterest_ ); break; // ForeignInterest
        case 40000501: return ( &ForeignDividend_ ); break; // ForeignDividend
        case 40000502: return ( &AccrualIncome_ ); break; // AccrualIncome
        case 40000503: return ( &MgmtFee_ ); break; // MgmtFee
        case 40000504: return ( &TaxCapGain_ ); break; // TaxCapGain
        case 40000505: return ( &ForeignTax_ ); break; // ForeignTax
        case 40000506: return ( &OthIncome_ ); break; // OthIncome
        case 40000507: return ( &RealizeGain_ ); break; // RealizeGain
        case 40000508: return ( &TrusteeFee_ ); break; // TrusteeFee
        case 40000509: return ( &EqualizationAmt_ ); break; // EqualizationAmt
        case 40000510: return ( &PaidAmt_ ); break; // PaidAmt
        case 40000511: return ( &PriceCode2_ ); break; // PriceCode2
        case 40000512: return ( &PriceDesc2_ ); break; // PriceDesc2
        case 40000513: return ( &UnitValue2_ ); break; // UnitValue2
        case 40000514: return ( &ChgFactor2_ ); break; // ChgFactor2
        case 40000515: return ( &PriceCode3_ ); break; // PriceCode3
        case 40000516: return ( &PriceDesc3_ ); break; // PriceDesc3
        case 40000517: return ( &UnitValue3_ ); break; // UnitValue3
        case 40000518: return ( &ChgFactor3_ ); break; // ChgFactor3
        case 40000519: return ( &PriceCode4_ ); break; // PriceCode4
        case 40000520: return ( &PriceDesc4_ ); break; // PriceDesc4
        case 40000521: return ( &UnitValue4_ ); break; // UnitValue4
        case 40000522: return ( &ChgFactor4_ ); break; // ChgFactor4
        case 40000523: return ( &PriceCode5_ ); break; // PriceCode5
        case 40000524: return ( &PriceDesc5_ ); break; // PriceDesc5
        case 40000525: return ( &UnitValue5_ ); break; // UnitValue5
        case 40000526: return ( &ChgFactor5_ ); break; // ChgFactor5
        case 40000891: return ( &ChgFactor_ ); break; // ChgFactor
        case 40003000: return ( &FundLoadGrp_ ); break; // FundLoadGrp
        case 40004301: return ( &ROC_ ); break; // ROC
        case 40004586: return ( &FundWKN_ ); break; // FundWKN
        case 40004587: return ( &FundISIN_ ); break; // FundISIN
        case 40004655: return ( &FactorAmt1_ ); break; // FactorAmt1
        case 40004656: return ( &FactorAmt2_ ); break; // FactorAmt2
        case 40004657: return ( &FactorAmt3_ ); break; // FactorAmt3
        case 40004658: return ( &FactorAmt4_ ); break; // FactorAmt4
        case 40004659: return ( &FactorAmt5_ ); break; // FactorAmt5
        case 40004660: return ( &UnitId_ ); break; // UnitId
        case 40005738: return ( &ExDate_ ); break; // ExDate
        case 40001627: return ( &PayDate_ ); break; // PayDate
        case 40005739: return ( &ReInvDate_ ); break; // ReInvDate
        case 40006989: return ( &DistributionType_ ); break; // DistributionType
        case 40007010: return ( &ZeroDistributionAppl_ ); break; // ZeroDistributionAppl
        case 40007215: return ( &RatePeriod_ ); break; // RatePeriod
        case 40007192: return ( &GAV_ ); break; // GAV
        case 40007300: return ( &LastIDRate_ ); break; // LastIDRate
        case 40007343: return ( &MultiPriceUsageID_ ); break; // MultiPriceUsageID
        case 40007172: return ( &CUSIP_ ); break; // CUSIP
        case 40007750: return ( &MultiPriceFund_ ); break; // MultiPriceFund
        case 40007802: return ( &PriceCode6_ ); break; // PriceCode6
        case 40007803: return ( &PriceDesc6_ ); break; // PriceDesc6
        case 40007804: return ( &UnitValue6_ ); break; // UnitValue6
        case 40007805: return ( &ChgFactor6_ ); break; // ChgFactor6
        case 40007806: return ( &PriceCode7_ ); break; // PriceCode7
        case 40007807: return ( &PriceDesc7_ ); break; // PriceDesc7
        case 40007808: return ( &UnitValue7_ ); break; // UnitValue7
        case 40007809: return ( &ChgFactor7_ ); break; // ChgFactor7
        case 40007810: return ( &PriceCode8_ ); break; // PriceCode8
        case 40007811: return ( &PriceDesc8_ ); break; // PriceDesc8
        case 40007812: return ( &UnitValue8_ ); break; // UnitValue8
        case 40007813: return ( &ChgFactor8_ ); break; // ChgFactor8
        case 40007814: return ( &PriceCode9_ ); break; // PriceCode9
        case 40007815: return ( &PriceDesc9_ ); break; // PriceDesc9
        case 40007816: return ( &UnitValue9_ ); break; // UnitValue9
        case 40007817: return ( &ChgFactor9_ ); break; // ChgFactor9
        case 40007818: return ( &PriceCode10_ ); break; // PriceCode10
        case 40007819: return ( &PriceDesc10_ ); break; // PriceDesc10
        case 40007820: return ( &UnitValue10_ ); break; // UnitValue10
        case 40007821: return ( &ChgFactor10_ ); break; // ChgFactor10
        case 40007822: return ( &PriceCode11_ ); break; // PriceCode11
        case 40007823: return ( &PriceDesc11_ ); break; // PriceDesc11
        case 40007824: return ( &UnitValue11_ ); break; // UnitValue11
        case 40007825: return ( &ChgFactor11_ ); break; // ChgFactor11
        case 40007826: return ( &PriceCode12_ ); break; // PriceCode12
        case 40007827: return ( &PriceDesc12_ ); break; // PriceDesc12
        case 40007828: return ( &UnitValue12_ ); break; // UnitValue12
        case 40007829: return ( &ChgFactor12_ ); break; // ChgFactor12
        case 40007830: return ( &PriceCode13_ ); break; // PriceCode13
        case 40007831: return ( &PriceDesc13_ ); break; // PriceDesc13
        case 40007832: return ( &UnitValue13_ ); break; // UnitValue13
        case 40007833: return ( &ChgFactor13_ ); break; // ChgFactor13
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0023_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0023_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0023_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 100 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &ValueAsAt_; break;
                case 1: aFlds_[1] = &rxFundCode_; break;
                case 2: aFlds_[2] = &rxClassCode_; break;
                case 3: aFlds_[3] = &TransType_; break;
                case 4: aFlds_[4] = &RecordDate_; break;
                case 5: aFlds_[5] = &ProcessDate_; break;
                case 6: aFlds_[6] = &ProcessTime_; break;
                case 7: aFlds_[7] = &ModDate_; break;
                case 8: aFlds_[8] = &Username_; break;
                case 9: aFlds_[9] = &ModUser_; break;
                case 10: aFlds_[10] = &Currency_; break;
                case 11: aFlds_[11] = &UnitValue_; break;
                case 12: aFlds_[12] = &UnAllocIncome_; break;
                case 13: aFlds_[13] = &Notional_; break;
                case 14: aFlds_[14] = &SkeletonBusYr_; break;
                case 15: aFlds_[15] = &GoodBad_; break;
                case 16: aFlds_[16] = &CanDividend_; break;
                case 17: aFlds_[17] = &InelgDividend_; break;
                case 18: aFlds_[18] = &CanInterest_; break;
                case 19: aFlds_[19] = &ForeignInterest_; break;
                case 20: aFlds_[20] = &ForeignDividend_; break;
                case 21: aFlds_[21] = &AccrualIncome_; break;
                case 22: aFlds_[22] = &MgmtFee_; break;
                case 23: aFlds_[23] = &TaxCapGain_; break;
                case 24: aFlds_[24] = &ForeignTax_; break;
                case 25: aFlds_[25] = &OthIncome_; break;
                case 26: aFlds_[26] = &RealizeGain_; break;
                case 27: aFlds_[27] = &TrusteeFee_; break;
                case 28: aFlds_[28] = &EqualizationAmt_; break;
                case 29: aFlds_[29] = &PaidAmt_; break;
                case 30: aFlds_[30] = &PriceCode2_; break;
                case 31: aFlds_[31] = &PriceDesc2_; break;
                case 32: aFlds_[32] = &UnitValue2_; break;
                case 33: aFlds_[33] = &ChgFactor2_; break;
                case 34: aFlds_[34] = &PriceCode3_; break;
                case 35: aFlds_[35] = &PriceDesc3_; break;
                case 36: aFlds_[36] = &UnitValue3_; break;
                case 37: aFlds_[37] = &ChgFactor3_; break;
                case 38: aFlds_[38] = &PriceCode4_; break;
                case 39: aFlds_[39] = &PriceDesc4_; break;
                case 40: aFlds_[40] = &UnitValue4_; break;
                case 41: aFlds_[41] = &ChgFactor4_; break;
                case 42: aFlds_[42] = &PriceCode5_; break;
                case 43: aFlds_[43] = &PriceDesc5_; break;
                case 44: aFlds_[44] = &UnitValue5_; break;
                case 45: aFlds_[45] = &ChgFactor5_; break;
                case 46: aFlds_[46] = &ChgFactor_; break;
                case 47: aFlds_[47] = &FundLoadGrp_; break;
                case 48: aFlds_[48] = &ROC_; break;
                case 49: aFlds_[49] = &FundWKN_; break;
                case 50: aFlds_[50] = &FundISIN_; break;
                case 51: aFlds_[51] = &FactorAmt1_; break;
                case 52: aFlds_[52] = &FactorAmt2_; break;
                case 53: aFlds_[53] = &FactorAmt3_; break;
                case 54: aFlds_[54] = &FactorAmt4_; break;
                case 55: aFlds_[55] = &FactorAmt5_; break;
                case 56: aFlds_[56] = &UnitId_; break;
                case 57: aFlds_[57] = &ExDate_; break;
                case 58: aFlds_[58] = &PayDate_; break;
                case 59: aFlds_[59] = &ReInvDate_; break;
                case 60: aFlds_[60] = &DistributionType_; break;
                case 61: aFlds_[61] = &ZeroDistributionAppl_; break;
                case 62: aFlds_[62] = &RatePeriod_; break;
                case 63: aFlds_[63] = &GAV_; break;
                case 64: aFlds_[64] = &LastIDRate_; break;
                case 65: aFlds_[65] = &MultiPriceUsageID_; break;
                case 66: aFlds_[66] = &CUSIP_; break;
                case 67: aFlds_[67] = &MultiPriceFund_; break;
                case 68: aFlds_[68] = &PriceCode6_; break;
                case 69: aFlds_[69] = &PriceDesc6_; break;
                case 70: aFlds_[70] = &UnitValue6_; break;
                case 71: aFlds_[71] = &ChgFactor6_; break;
                case 72: aFlds_[72] = &PriceCode7_; break;
                case 73: aFlds_[73] = &PriceDesc7_; break;
                case 74: aFlds_[74] = &UnitValue7_; break;
                case 75: aFlds_[75] = &ChgFactor7_; break;
                case 76: aFlds_[76] = &PriceCode8_; break;
                case 77: aFlds_[77] = &PriceDesc8_; break;
                case 78: aFlds_[78] = &UnitValue8_; break;
                case 79: aFlds_[79] = &ChgFactor8_; break;
                case 80: aFlds_[80] = &PriceCode9_; break;
                case 81: aFlds_[81] = &PriceDesc9_; break;
                case 82: aFlds_[82] = &UnitValue9_; break;
                case 83: aFlds_[83] = &ChgFactor9_; break;
                case 84: aFlds_[84] = &PriceCode10_; break;
                case 85: aFlds_[85] = &PriceDesc10_; break;
                case 86: aFlds_[86] = &UnitValue10_; break;
                case 87: aFlds_[87] = &ChgFactor10_; break;
                case 88: aFlds_[88] = &PriceCode11_; break;
                case 89: aFlds_[89] = &PriceDesc11_; break;
                case 90: aFlds_[90] = &UnitValue11_; break;
                case 91: aFlds_[91] = &ChgFactor11_; break;
                case 92: aFlds_[92] = &PriceCode12_; break;
                case 93: aFlds_[93] = &PriceDesc12_; break;
                case 94: aFlds_[94] = &UnitValue12_; break;
                case 95: aFlds_[95] = &ChgFactor12_; break;
                case 96: aFlds_[96] = &PriceCode13_; break;
                case 97: aFlds_[97] = &PriceDesc13_; break;
                case 98: aFlds_[98] = &UnitValue13_; break;
                case 99: aFlds_[99] = &ChgFactor13_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0023_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0023_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0023_VWRepeat_Record::getLargestDefinedField( void ) const
{
    return( 200 );
}

unsigned long dsi_DSTC0023_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 3746 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0023_VWRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0023_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0023_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000489: return ( true );
        case 40000286: return ( true );
        case 40000287: return ( true );
        case 40000095: return ( true );
        case 40000490: return ( true );
        case 40000216: return ( true );
        case 40000491: return ( true );
        case 40000217: return ( true );
        case 40000117: return ( true );
        case 40000218: return ( true );
        case 40000180: return ( true );
        case 40000492: return ( true );
        case 40000493: return ( true );
        case 40000494: return ( true );
        case 40000495: return ( true );
        case 40000496: return ( true );
        case 40000497: return ( true );
        case 40000498: return ( true );
        case 40000499: return ( true );
        case 40000500: return ( true );
        case 40000501: return ( true );
        case 40000502: return ( true );
        case 40000503: return ( true );
        case 40000504: return ( true );
        case 40000505: return ( true );
        case 40000506: return ( true );
        case 40000507: return ( true );
        case 40000508: return ( true );
        case 40000509: return ( true );
        case 40000510: return ( true );
        case 40000511: return ( true );
        case 40000512: return ( true );
        case 40000513: return ( true );
        case 40000514: return ( true );
        case 40000515: return ( true );
        case 40000516: return ( true );
        case 40000517: return ( true );
        case 40000518: return ( true );
        case 40000519: return ( true );
        case 40000520: return ( true );
        case 40000521: return ( true );
        case 40000522: return ( true );
        case 40000523: return ( true );
        case 40000524: return ( true );
        case 40000525: return ( true );
        case 40000526: return ( true );
        case 40000891: return ( true );
        case 40003000: return ( true );
        case 40004301: return ( true );
        case 40004586: return ( true );
        case 40004587: return ( true );
        case 40004655: return ( true );
        case 40004656: return ( true );
        case 40004657: return ( true );
        case 40004658: return ( true );
        case 40004659: return ( true );
        case 40004660: return ( true );
        case 40005738: return ( true );
        case 40001627: return ( true );
        case 40005739: return ( true );
        case 40006989: return ( true );
        case 40007010: return ( true );
        case 40007215: return ( true );
        case 40007192: return ( true );
        case 40007300: return ( true );
        case 40007343: return ( true );
        case 40007172: return ( true );
        case 40007750: return ( true );
        case 40007802: return ( true );
        case 40007803: return ( true );
        case 40007804: return ( true );
        case 40007805: return ( true );
        case 40007806: return ( true );
        case 40007807: return ( true );
        case 40007808: return ( true );
        case 40007809: return ( true );
        case 40007810: return ( true );
        case 40007811: return ( true );
        case 40007812: return ( true );
        case 40007813: return ( true );
        case 40007814: return ( true );
        case 40007815: return ( true );
        case 40007816: return ( true );
        case 40007817: return ( true );
        case 40007818: return ( true );
        case 40007819: return ( true );
        case 40007820: return ( true );
        case 40007821: return ( true );
        case 40007822: return ( true );
        case 40007823: return ( true );
        case 40007824: return ( true );
        case 40007825: return ( true );
        case 40007826: return ( true );
        case 40007827: return ( true );
        case 40007828: return ( true );
        case 40007829: return ( true );
        case 40007830: return ( true );
        case 40007831: return ( true );
        case 40007832: return ( true );
        case 40007833: return ( true );
    }
    return false;
}

