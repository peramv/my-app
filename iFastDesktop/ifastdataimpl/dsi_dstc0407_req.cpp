// BFDataImpl implementation file for DataSet DSTC0407.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0407_req.h"


// This function creates an instance of dsi_DSTC0407_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0407_REQ() { return new dsi_DSTC0407_REQ; }

dsi_DSTC0407_REQ::dsi_DSTC0407_REQ()
: BFDataImpl( 40006235, 40006236 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, CallType_( ifds::CallType, &ifds::s_FldProp_CallType )
, TradeType_( ifds::TradeType, &ifds::s_FldProp_TradeType )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, DepositType_( ifds::DepositType, &ifds::s_FldProp_DepositType )
, RedCode_( ifds::RedCode, &ifds::s_FldProp_RedCode )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, AccountTo_( ifds::AccountTo, &ifds::s_FldProp_AccountTo )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, RESPLetter_( ifds::RESPLetter, &ifds::s_FldProp_RESPLetter )
, RESPTransStat_( ifds::RESPTransStat, &ifds::s_FldProp_RESPTransStat )
, FromPlanNum_( ifds::FromPlanNum, &ifds::s_FldProp_FromPlanNum )
, FromContractId_( ifds::FromContractId, &ifds::s_FldProp_FromContractId )
, ToPlanNum_( ifds::ToPlanNum, &ifds::s_FldProp_ToPlanNum )
, ToContractId_( ifds::ToContractId, &ifds::s_FldProp_ToContractId )
, NEQ1_( ifds::NEQ1, &ifds::s_FldProp_NEQ1 )
, NEQ2_( ifds::NEQ2, &ifds::s_FldProp_NEQ2 )
, AcctLvlOverride_( ifds::AcctLvlOverride, &ifds::s_FldProp_AcctLvlOverride )
, InceptionDate_( ifds::InceptionDate, &ifds::s_FldProp_InceptionDate )
, TerminationDate_( ifds::TerminationDate, &ifds::s_FldProp_TerminationDate )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
   cFields_ = 28;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0407_REQ::~dsi_DSTC0407_REQ()
{
}

BFDataImpl* dsi_DSTC0407_REQ::clone()
{
   dsi_DSTC0407_REQ* p = new dsi_DSTC0407_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->CallType_ = CallType_;
   p->TradeType_ = TradeType_;
   p->TransId_ = TransId_;
   p->TransType_ = TransType_;
   p->DepositType_ = DepositType_;
   p->RedCode_ = RedCode_;
   p->AccountNum_ = AccountNum_;
   p->AccountTo_ = AccountTo_;
   p->EffectiveDate_ = EffectiveDate_;
   p->Amount_ = Amount_;
   p->RESPLetter_ = RESPLetter_;
   p->RESPTransStat_ = RESPTransStat_;
   p->FromPlanNum_ = FromPlanNum_;
   p->FromContractId_ = FromContractId_;
   p->ToPlanNum_ = ToPlanNum_;
   p->ToContractId_ = ToContractId_;
   p->NEQ1_ = NEQ1_;
   p->NEQ2_ = NEQ2_;
   p->AcctLvlOverride_ = AcctLvlOverride_;
   p->InceptionDate_ = InceptionDate_;
   p->TerminationDate_ = TerminationDate_;
   p->RepeatCount_ = RepeatCount_;
   return(p);
}

BFDataField* dsi_DSTC0407_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40006108: return ( &CallType_ ); break; // CallType
      case 40003162: return ( &TradeType_ ); break; // TradeType
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40000433: return ( &DepositType_ ); break; // DepositType
      case 40000435: return ( &RedCode_ ); break; // RedCode
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40000646: return ( &AccountTo_ ); break; // AccountTo
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40001519: return ( &RESPLetter_ ); break; // RESPLetter
      case 40001521: return ( &RESPTransStat_ ); break; // RESPTransStat
      case 40006181: return ( &FromPlanNum_ ); break; // FromPlanNum
      case 40006183: return ( &FromContractId_ ); break; // FromContractId
      case 40006182: return ( &ToPlanNum_ ); break; // ToPlanNum
      case 40006184: return ( &ToContractId_ ); break; // ToContractId
      case 40006187: return ( &NEQ1_ ); break; // NEQ1
      case 40006188: return ( &NEQ2_ ); break; // NEQ2
      case 40006215: return ( &AcctLvlOverride_ ); break; // AcctLvlOverride
      case 40006185: return ( &InceptionDate_ ); break; // InceptionDate
      case 40006186: return ( &TerminationDate_ ); break; // TerminationDate
      case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0407_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0407_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0407_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 28 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &CallType_; break;
            case 7: aFlds_[7] = &TradeType_; break;
            case 8: aFlds_[8] = &TransId_; break;
            case 9: aFlds_[9] = &TransType_; break;
            case 10: aFlds_[10] = &DepositType_; break;
            case 11: aFlds_[11] = &RedCode_; break;
            case 12: aFlds_[12] = &AccountNum_; break;
            case 13: aFlds_[13] = &AccountTo_; break;
            case 14: aFlds_[14] = &EffectiveDate_; break;
            case 15: aFlds_[15] = &Amount_; break;
            case 16: aFlds_[16] = &RESPLetter_; break;
            case 17: aFlds_[17] = &RESPTransStat_; break;
            case 18: aFlds_[18] = &FromPlanNum_; break;
            case 19: aFlds_[19] = &FromContractId_; break;
            case 20: aFlds_[20] = &ToPlanNum_; break;
            case 21: aFlds_[21] = &ToContractId_; break;
            case 22: aFlds_[22] = &NEQ1_; break;
            case 23: aFlds_[23] = &NEQ2_; break;
            case 24: aFlds_[24] = &AcctLvlOverride_; break;
            case 25: aFlds_[25] = &InceptionDate_; break;
            case 26: aFlds_[26] = &TerminationDate_; break;
            case 27: aFlds_[27] = &RepeatCount_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0407_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0407_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0407_REQ::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0407_REQ::getDefinedByteLength( void ) const
{
   return( 1036 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0407_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0407_REQ::fieldExists( id );
}

bool dsi_DSTC0407_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40006108: return( true );
      case 40003162: return( true );
      case 40000063: return( true );
      case 40000095: return( true );
      case 40000433: return( true );
      case 40000435: return( true );
      case 40000040: return( true );
      case 40000646: return( true );
      case 40000327: return( true );
      case 40000231: return( true );
      case 40001519: return( true );
      case 40001521: return( true );
      case 40006181: return( true );
      case 40006183: return( true );
      case 40006182: return( true );
      case 40006184: return( true );
      case 40006187: return( true );
      case 40006188: return( true );
      case 40006215: return( true );
      case 40006185: return( true );
      case 40006186: return( true );
      case 40000120: return( true );
   }
   return false;
}

