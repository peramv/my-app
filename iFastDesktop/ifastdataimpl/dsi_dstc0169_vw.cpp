// BFDataImpl implementation file for DataSet DSTC0169.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0169_vw.h"


// This function creates an instance of dsi_DSTC0169_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0169_VW() { return new dsi_DSTC0169_VW; }

dsi_DSTC0169_VW::dsi_DSTC0169_VW()
: BFDataImpl( 40002695 )
, IFASNumber_( ifds::IFASNumber, &ifds::s_FldProp_IFASNumber )
, InitPurchDate_( ifds::InitPurchDate, &ifds::s_FldProp_InitPurchDate )
, InitInvestDate_( ifds::InitInvestDate, &ifds::s_FldProp_InitInvestDate )
, ContStartDate_( ifds::ContStartDate, &ifds::s_FldProp_ContStartDate )
, ContEndDate_( ifds::ContEndDate, &ifds::s_FldProp_ContEndDate )
, AutoCreate_( ifds::AutoCreate, &ifds::s_FldProp_AutoCreate )
, ESoPStatus_( ifds::ESoPStatus, &ifds::s_FldProp_ESoPStatus )
, InactiveDate_( ifds::InactiveDate, &ifds::s_FldProp_InactiveDate )
, BlockStartDate_( ifds::BlockStartDate, &ifds::s_FldProp_BlockStartDate )
, BlockEndDate_( ifds::BlockEndDate, &ifds::s_FldProp_BlockEndDate )
, ContExpireDate_( ifds::ContExpireDate, &ifds::s_FldProp_ContExpireDate )
, InterruptDate_( ifds::InterruptDate, &ifds::s_FldProp_InterruptDate )
, InterruptCode_( ifds::InterruptCode, &ifds::s_FldProp_InterruptCode )
, BankEffectiveDate_( ifds::BankEffectiveDate, &ifds::s_FldProp_BankEffectiveDate )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, EsopVersion_( ifds::EsopVersion, &ifds::s_FldProp_EsopVersion )
, EsopRid_( ifds::EsopRid, &ifds::s_FldProp_EsopRid )
{
   cFields_ = 20;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0169_VW::~dsi_DSTC0169_VW()
{
}

BFDataImpl* dsi_DSTC0169_VW::clone()
{
   dsi_DSTC0169_VW* p = new dsi_DSTC0169_VW;
   p->IFASNumber_ = IFASNumber_;
   p->InitPurchDate_ = InitPurchDate_;
   p->InitInvestDate_ = InitInvestDate_;
   p->ContStartDate_ = ContStartDate_;
   p->ContEndDate_ = ContEndDate_;
   p->AutoCreate_ = AutoCreate_;
   p->ESoPStatus_ = ESoPStatus_;
   p->InactiveDate_ = InactiveDate_;
   p->BlockStartDate_ = BlockStartDate_;
   p->BlockEndDate_ = BlockEndDate_;
   p->ContExpireDate_ = ContExpireDate_;
   p->InterruptDate_ = InterruptDate_;
   p->InterruptCode_ = InterruptCode_;
   p->BankEffectiveDate_ = BankEffectiveDate_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->Amount_ = Amount_;
   p->Currency_ = Currency_;
   p->EsopVersion_ = EsopVersion_;
   p->EsopRid_ = EsopRid_;
   return(p);
}

BFDataField* dsi_DSTC0169_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40002697: return ( &IFASNumber_ ); break; // IFASNumber
      case 40002698: return ( &InitPurchDate_ ); break; // InitPurchDate
      case 40002699: return ( &InitInvestDate_ ); break; // InitInvestDate
      case 40002700: return ( &ContStartDate_ ); break; // ContStartDate
      case 40002701: return ( &ContEndDate_ ); break; // ContEndDate
      case 40002705: return ( &AutoCreate_ ); break; // AutoCreate
      case 40002706: return ( &ESoPStatus_ ); break; // ESoPStatus
      case 40002707: return ( &InactiveDate_ ); break; // InactiveDate
      case 40002708: return ( &BlockStartDate_ ); break; // BlockStartDate
      case 40002709: return ( &BlockEndDate_ ); break; // BlockEndDate
      case 40002710: return ( &ContExpireDate_ ); break; // ContExpireDate
      case 40002711: return ( &InterruptDate_ ); break; // InterruptDate
      case 40002712: return ( &InterruptCode_ ); break; // InterruptCode
      case 40002713: return ( &BankEffectiveDate_ ); break; // BankEffectiveDate
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40002779: return ( &EsopVersion_ ); break; // EsopVersion
      case 40002781: return ( &EsopRid_ ); break; // EsopRid
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0169_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0169_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0169_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 20 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &IFASNumber_; break;
            case 1: aFlds_[1] = &InitPurchDate_; break;
            case 2: aFlds_[2] = &InitInvestDate_; break;
            case 3: aFlds_[3] = &ContStartDate_; break;
            case 4: aFlds_[4] = &ContEndDate_; break;
            case 5: aFlds_[5] = &AutoCreate_; break;
            case 6: aFlds_[6] = &ESoPStatus_; break;
            case 7: aFlds_[7] = &InactiveDate_; break;
            case 8: aFlds_[8] = &BlockStartDate_; break;
            case 9: aFlds_[9] = &BlockEndDate_; break;
            case 10: aFlds_[10] = &ContExpireDate_; break;
            case 11: aFlds_[11] = &InterruptDate_; break;
            case 12: aFlds_[12] = &InterruptCode_; break;
            case 13: aFlds_[13] = &BankEffectiveDate_; break;
            case 14: aFlds_[14] = &FundCode_; break;
            case 15: aFlds_[15] = &ClassCode_; break;
            case 16: aFlds_[16] = &Amount_; break;
            case 17: aFlds_[17] = &Currency_; break;
            case 18: aFlds_[18] = &EsopVersion_; break;
            case 19: aFlds_[19] = &EsopRid_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0169_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0169_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0169_VW::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0169_VW::getDefinedByteLength( void ) const
{
   return( 911 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0169_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0169_VW::fieldExists( id );
}

bool dsi_DSTC0169_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40002697: return( true );
      case 40002698: return( true );
      case 40002699: return( true );
      case 40002700: return( true );
      case 40002701: return( true );
      case 40002705: return( true );
      case 40002706: return( true );
      case 40002707: return( true );
      case 40002708: return( true );
      case 40002709: return( true );
      case 40002710: return( true );
      case 40002711: return( true );
      case 40002712: return( true );
      case 40002713: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000231: return( true );
      case 40000180: return( true );
      case 40002779: return( true );
      case 40002781: return( true );
   }
   return false;
}

