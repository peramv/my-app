// BFDataImpl implementation file for DataSet DSTC0042.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0042_vw.h"


// This function creates an instance of dsi_DSTC0042_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0042_VW() { return new dsi_DSTC0042_VW; }

dsi_DSTC0042_VW::dsi_DSTC0042_VW()
: BFDataImpl( 40001119 )
, kAddrLine1_( ifds::kAddrLine1, &ifds::s_FldProp_kAddrLine1 )
, kAddrLine2_( ifds::kAddrLine2, &ifds::s_FldProp_kAddrLine2 )
, kAddrLine3_( ifds::kAddrLine3, &ifds::s_FldProp_kAddrLine3 )
, kAddrLine4_( ifds::kAddrLine4, &ifds::s_FldProp_kAddrLine4 )
, kAddrLine5_( ifds::kAddrLine5, &ifds::s_FldProp_kAddrLine5 )
, KAddrFileVer_( ifds::KAddrFileVer, &ifds::s_FldProp_KAddrFileVer )
, KAddrFileRid_( ifds::KAddrFileRid, &ifds::s_FldProp_KAddrFileRid )
{
   cFields_ = 7;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0042_VW::~dsi_DSTC0042_VW()
{
}

BFDataImpl* dsi_DSTC0042_VW::clone()
{
   dsi_DSTC0042_VW* p = new dsi_DSTC0042_VW;
   p->kAddrLine1_ = kAddrLine1_;
   p->kAddrLine2_ = kAddrLine2_;
   p->kAddrLine3_ = kAddrLine3_;
   p->kAddrLine4_ = kAddrLine4_;
   p->kAddrLine5_ = kAddrLine5_;
   p->KAddrFileVer_ = KAddrFileVer_;
   p->KAddrFileRid_ = KAddrFileRid_;
   return(p);
}

BFDataField* dsi_DSTC0042_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40001105: return ( &kAddrLine1_ ); break; // kAddrLine1
      case 40001106: return ( &kAddrLine2_ ); break; // kAddrLine2
      case 40001107: return ( &kAddrLine3_ ); break; // kAddrLine3
      case 40001108: return ( &kAddrLine4_ ); break; // kAddrLine4
      case 40001109: return ( &kAddrLine5_ ); break; // kAddrLine5
      case 40001307: return ( &KAddrFileVer_ ); break; // KAddrFileVer
      case 40001308: return ( &KAddrFileRid_ ); break; // KAddrFileRid
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0042_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0042_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0042_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 7 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &kAddrLine1_; break;
            case 1: aFlds_[1] = &kAddrLine2_; break;
            case 2: aFlds_[2] = &kAddrLine3_; break;
            case 3: aFlds_[3] = &kAddrLine4_; break;
            case 4: aFlds_[4] = &kAddrLine5_; break;
            case 5: aFlds_[5] = &KAddrFileVer_; break;
            case 6: aFlds_[6] = &KAddrFileRid_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0042_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0042_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0042_VW::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0042_VW::getDefinedByteLength( void ) const
{
   return( 340 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0042_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0042_VW::fieldExists( id );
}

bool dsi_DSTC0042_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40001105: return( true );
      case 40001106: return( true );
      case 40001107: return( true );
      case 40001108: return( true );
      case 40001109: return( true );
      case 40001307: return( true );
      case 40001308: return( true );
   }
   return false;
}

