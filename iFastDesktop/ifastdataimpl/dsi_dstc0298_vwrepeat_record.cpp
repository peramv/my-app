// BFDataImpl implementation file for DataSet DSTC0298.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0298_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0298_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0298_VWRepeat_Record() { return new dsi_DSTC0298_VWRepeat_Record; }

dsi_DSTC0298_VWRepeat_Record::dsi_DSTC0298_VWRepeat_Record()
: BFDataImpl( 40004601 )
, rxTransId_( ifds::rxTransId, &ifds::s_FldProp_rxTransId )
, rxAcctNum_( ifds::rxAcctNum, &ifds::s_FldProp_rxAcctNum )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, TransFeeCode_( ifds::TransFeeCode, &ifds::s_FldProp_TransFeeCode )
, FeeType_( ifds::FeeType, &ifds::s_FldProp_FeeType )
, FeeRate_( ifds::FeeRate, &ifds::s_FldProp_FeeRate )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, ChargeOption_( ifds::ChargeOption, &ifds::s_FldProp_ChargeOption )
, TradeFeeOption_( ifds::TradeFeeOption, &ifds::s_FldProp_TradeFeeOption )
, TransFeeRID_( ifds::TransFeeRID, &ifds::s_FldProp_TransFeeRID )
, OrigFeeType_( ifds::OrigFeeType, &ifds::s_FldProp_OrigFeeType )
, OrigFeeRate_( ifds::OrigFeeRate, &ifds::s_FldProp_OrigFeeRate )
{
   cFields_ = 13;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0298_VWRepeat_Record::~dsi_DSTC0298_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0298_VWRepeat_Record::clone()
{
   dsi_DSTC0298_VWRepeat_Record* p = new dsi_DSTC0298_VWRepeat_Record;
   p->rxTransId_ = rxTransId_;
   p->rxAcctNum_ = rxAcctNum_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->TransFeeCode_ = TransFeeCode_;
   p->FeeType_ = FeeType_;
   p->FeeRate_ = FeeRate_;
   p->Currency_ = Currency_;
   p->ChargeOption_ = ChargeOption_;
   p->TradeFeeOption_ = TradeFeeOption_;
   p->TransFeeRID_ = TransFeeRID_;
   p->OrigFeeType_ = OrigFeeType_;
   p->OrigFeeRate_ = OrigFeeRate_;
   return(p);
}

BFDataField* dsi_DSTC0298_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40002752: return ( &rxTransId_ ); break; // rxTransId
      case 40000371: return ( &rxAcctNum_ ); break; // rxAcctNum
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40004710: return ( &TransFeeCode_ ); break; // TransFeeCode
      case 40000728: return ( &FeeType_ ); break; // FeeType
      case 40004370: return ( &FeeRate_ ); break; // FeeRate
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40004602: return ( &ChargeOption_ ); break; // ChargeOption
      case 40004603: return ( &TradeFeeOption_ ); break; // TradeFeeOption
      case 40004606: return ( &TransFeeRID_ ); break; // TransFeeRID
      case 40004604: return ( &OrigFeeType_ ); break; // OrigFeeType
      case 40004838: return ( &OrigFeeRate_ ); break; // OrigFeeRate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0298_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0298_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0298_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 13 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &rxTransId_; break;
            case 1: aFlds_[1] = &rxAcctNum_; break;
            case 2: aFlds_[2] = &FundCode_; break;
            case 3: aFlds_[3] = &ClassCode_; break;
            case 4: aFlds_[4] = &TransFeeCode_; break;
            case 5: aFlds_[5] = &FeeType_; break;
            case 6: aFlds_[6] = &FeeRate_; break;
            case 7: aFlds_[7] = &Currency_; break;
            case 8: aFlds_[8] = &ChargeOption_; break;
            case 9: aFlds_[9] = &TradeFeeOption_; break;
            case 10: aFlds_[10] = &TransFeeRID_; break;
            case 11: aFlds_[11] = &OrigFeeType_; break;
            case 12: aFlds_[12] = &OrigFeeRate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0298_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0298_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0298_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0298_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 900 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0298_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0298_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0298_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40002752: return( true );
      case 40000371: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40004710: return( true );
      case 40000728: return( true );
      case 40004370: return( true );
      case 40000180: return( true );
      case 40004602: return( true );
      case 40004603: return( true );
      case 40004606: return( true );
      case 40004604: return( true );
      case 40004838: return( true );
   }
   return false;
}

