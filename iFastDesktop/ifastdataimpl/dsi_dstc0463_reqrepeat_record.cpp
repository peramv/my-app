// BFDataImpl implementation file for DataSet DSTC0463.REQRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0463_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0463_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0463_REQRepeat_Record() { return new dsi_DSTC0463_REQRepeat_Record; }

dsi_DSTC0463_REQRepeat_Record::dsi_DSTC0463_REQRepeat_Record()
: BFDataImpl( 40007409 )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, UserAction_( ifds::UserAction, &ifds::s_FldProp_UserAction )
{
   cFields_ = 2;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0463_REQRepeat_Record::~dsi_DSTC0463_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0463_REQRepeat_Record::clone()
{
   dsi_DSTC0463_REQRepeat_Record* p = new dsi_DSTC0463_REQRepeat_Record;
   p->TransNum_ = TransNum_;
   p->UserAction_ = UserAction_;
   return(p);
}

BFDataField* dsi_DSTC0463_REQRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40007410: return ( &UserAction_ ); break; // UserAction
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0463_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0463_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0463_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 2 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TransNum_; break;
            case 1: aFlds_[1] = &UserAction_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0463_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0463_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0463_REQRepeat_Record::getLargestDefinedField( void ) const
{
   return( 17 );
}

unsigned long dsi_DSTC0463_REQRepeat_Record::getDefinedByteLength( void ) const
{
   return( 27 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0463_REQRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0463_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0463_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000096: return( true );
      case 40007410: return( true );
   }
   return false;
}

