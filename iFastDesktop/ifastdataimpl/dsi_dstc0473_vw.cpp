// BFDataImpl implementation file for DataSet DSTC0473.VW
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Friday, November 04, 2016 11:42:13


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0473_vw.h"


// This function creates an instance of dsi_DSTC0473_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0473_VW() { return new dsi_DSTC0473_VW; }

dsi_DSTC0473_VW::dsi_DSTC0473_VW()
: BFDataImpl( 40007683, 40007686)
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
    cFields_ = 1;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0473_VW::~dsi_DSTC0473_VW()
{
}

BFDataImpl* dsi_DSTC0473_VW::clone()
{
    dsi_DSTC0473_VW* p = new dsi_DSTC0473_VW;
    p->RepeatCount_ = RepeatCount_;
    return(p);
}

BFDataField* dsi_DSTC0473_VW::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0473_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0473_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0473_VW::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 1 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &RepeatCount_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0473_VW::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0473_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0473_VW::getLargestDefinedField( void ) const
{
    return( 15 );
}

unsigned long dsi_DSTC0473_VW::getDefinedByteLength( void ) const
{
    return( 15 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0473_VW::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0473_VW::fieldExists( id );
}

bool dsi_DSTC0473_VW::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000120: return ( true );
    }
    return false;
}

