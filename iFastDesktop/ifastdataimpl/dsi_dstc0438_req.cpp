// BFDataImpl implementation file for DataSet DSTC0438.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0438_req.h"


// This function creates an instance of dsi_DSTC0438_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0438_REQ() { return new dsi_DSTC0438_REQ; }

dsi_DSTC0438_REQ::dsi_DSTC0438_REQ()
: BFDataImpl( 40006906 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LangCode_( ifds::LangCode, &ifds::s_FldProp_LangCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, ValidateType_( ifds::ValidateType, &ifds::s_FldProp_ValidateType )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, Fund_( ifds::Fund, &ifds::s_FldProp_Fund )
, Class_( ifds::Class, &ifds::s_FldProp_Class )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, PayOption_( ifds::PayOption, &ifds::s_FldProp_PayOption )
, RecId_( ifds::RecId, &ifds::s_FldProp_RecId )
{
   cFields_ = 16;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0438_REQ::~dsi_DSTC0438_REQ()
{
}

BFDataImpl* dsi_DSTC0438_REQ::clone()
{
   dsi_DSTC0438_REQ* p = new dsi_DSTC0438_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LangCode_ = LangCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->RunMode_ = RunMode_;
   p->AccountNum_ = AccountNum_;
   p->ValidateType_ = ValidateType_;
   p->TransNum_ = TransNum_;
   p->Fund_ = Fund_;
   p->Class_ = Class_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->PayOption_ = PayOption_;
   p->RecId_ = RecId_;
   return(p);
}

BFDataField* dsi_DSTC0438_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000119: return ( &LangCode_ ); break; // LangCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40003549: return ( &ValidateType_ ); break; // ValidateType
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40002227: return ( &Fund_ ); break; // Fund
      case 40002228: return ( &Class_ ); break; // Class
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40000854: return ( &PayOption_ ); break; // PayOption
      case 40003737: return ( &RecId_ ); break; // RecId
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0438_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0438_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0438_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 16 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LangCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &RunMode_; break;
            case 7: aFlds_[7] = &AccountNum_; break;
            case 8: aFlds_[8] = &ValidateType_; break;
            case 9: aFlds_[9] = &TransNum_; break;
            case 10: aFlds_[10] = &Fund_; break;
            case 11: aFlds_[11] = &Class_; break;
            case 12: aFlds_[12] = &EffectiveDate_; break;
            case 13: aFlds_[13] = &StopDate_; break;
            case 14: aFlds_[14] = &PayOption_; break;
            case 15: aFlds_[15] = &RecId_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0438_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0438_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0438_REQ::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0438_REQ::getDefinedByteLength( void ) const
{
   return( 670 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0438_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0438_REQ::fieldExists( id );
}

bool dsi_DSTC0438_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000119: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40000990: return( true );
      case 40000040: return( true );
      case 40003549: return( true );
      case 40000096: return( true );
      case 40002227: return( true );
      case 40002228: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40000854: return( true );
      case 40003737: return( true );
   }
   return false;
}

