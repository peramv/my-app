// BFDataImpl implementation file for DataSet DSTCF164.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstcf164_vwrepeat_record.h"


// This function creates an instance of dsi_DSTCF164_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTCF164_VWRepeat_Record() { return new dsi_DSTCF164_VWRepeat_Record; }

dsi_DSTCF164_VWRepeat_Record::dsi_DSTCF164_VWRepeat_Record()
: BFDataImpl( 40002647 )
, AcqFeeType_( ifds::AcqFeeType, &ifds::s_FldProp_AcqFeeType )
, AcqRate_( ifds::AcqRate, &ifds::s_FldProp_AcqRate )
, RedemFeeType_( ifds::RedemFeeType, &ifds::s_FldProp_RedemFeeType )
, RedemFee_( ifds::RedemFee, &ifds::s_FldProp_RedemFee )
, RedemFeeCurrency_( ifds::RedemFeeCurrency, &ifds::s_FldProp_RedemFeeCurrency )
, LoadType_( ifds::LoadType, &ifds::s_FldProp_LoadType )
, FundCurrency_( ifds::FundCurrency, &ifds::s_FldProp_FundCurrency )
, ClassIndex_( ifds::ClassIndex, &ifds::s_FldProp_ClassIndex )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
{
   cFields_ = 9;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTCF164_VWRepeat_Record::~dsi_DSTCF164_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTCF164_VWRepeat_Record::clone()
{
   dsi_DSTCF164_VWRepeat_Record* p = new dsi_DSTCF164_VWRepeat_Record;
   p->AcqFeeType_ = AcqFeeType_;
   p->AcqRate_ = AcqRate_;
   p->RedemFeeType_ = RedemFeeType_;
   p->RedemFee_ = RedemFee_;
   p->RedemFeeCurrency_ = RedemFeeCurrency_;
   p->LoadType_ = LoadType_;
   p->FundCurrency_ = FundCurrency_;
   p->ClassIndex_ = ClassIndex_;
   p->ClassCode_ = ClassCode_;
   return(p);
}

BFDataField* dsi_DSTCF164_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40001672: return ( &AcqFeeType_ ); break; // AcqFeeType
      case 40002311: return ( &AcqRate_ ); break; // AcqRate
      case 40002591: return ( &RedemFeeType_ ); break; // RedemFeeType
      case 40002590: return ( &RedemFee_ ); break; // RedemFee
      case 40002592: return ( &RedemFeeCurrency_ ); break; // RedemFeeCurrency
      case 40000960: return ( &LoadType_ ); break; // LoadType
      case 40001948: return ( &FundCurrency_ ); break; // FundCurrency
      case 40002656: return ( &ClassIndex_ ); break; // ClassIndex
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
   }
   return( NULL );
}

const BFDataField* dsi_DSTCF164_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTCF164_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTCF164_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 9 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AcqFeeType_; break;
            case 1: aFlds_[1] = &AcqRate_; break;
            case 2: aFlds_[2] = &RedemFeeType_; break;
            case 3: aFlds_[3] = &RedemFee_; break;
            case 4: aFlds_[4] = &RedemFeeCurrency_; break;
            case 5: aFlds_[5] = &LoadType_; break;
            case 6: aFlds_[6] = &FundCurrency_; break;
            case 7: aFlds_[7] = &ClassIndex_; break;
            case 8: aFlds_[8] = &ClassCode_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTCF164_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTCF164_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTCF164_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 120 );
}

unsigned long dsi_DSTCF164_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 506 * sizeof( I_CHAR ) );
}

bool dsi_DSTCF164_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTCF164_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTCF164_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40001672: return( true );
      case 40002311: return( true );
      case 40002591: return( true );
      case 40002590: return( true );
      case 40002592: return( true );
      case 40000960: return( true );
      case 40001948: return( true );
      case 40002656: return( true );
      case 40000050: return( true );
   }
   return false;
}

