// BFDataImpl implementation file for DataSet DSTC0245.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0245_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0245_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0245_VWRepeat_Record() { return new dsi_DSTC0245_VWRepeat_Record; }

dsi_DSTC0245_VWRepeat_Record::dsi_DSTC0245_VWRepeat_Record()
: BFDataImpl( 40003711 )
, AcctCategory_( ifds::AcctCategory, &ifds::s_FldProp_AcctCategory )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, AcctCatRId_( ifds::AcctCatRId, &ifds::s_FldProp_AcctCatRId )
, CatValue_( ifds::CatValue, &ifds::s_FldProp_CatValue )
{
   cFields_ = 5;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0245_VWRepeat_Record::~dsi_DSTC0245_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0245_VWRepeat_Record::clone()
{
   dsi_DSTC0245_VWRepeat_Record* p = new dsi_DSTC0245_VWRepeat_Record;
   p->AcctCategory_ = AcctCategory_;
   p->ProcessDate_ = ProcessDate_;
   p->Username_ = Username_;
   p->AcctCatRId_ = AcctCatRId_;
   p->CatValue_ = CatValue_;
   return(p);
}

BFDataField* dsi_DSTC0245_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40003700: return ( &AcctCategory_ ); break; // AcctCategory
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40003715: return ( &AcctCatRId_ ); break; // AcctCatRId
      case 40005920: return ( &CatValue_ ); break; // CatValue
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0245_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0245_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0245_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 5 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AcctCategory_; break;
            case 1: aFlds_[1] = &ProcessDate_; break;
            case 2: aFlds_[2] = &Username_; break;
            case 3: aFlds_[3] = &AcctCatRId_; break;
            case 4: aFlds_[4] = &CatValue_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0245_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0245_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0245_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0245_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 215 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0245_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0245_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0245_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40003700: return( true );
      case 40000216: return( true );
      case 40000117: return( true );
      case 40003715: return( true );
      case 40005920: return( true );
   }
   return false;
}

