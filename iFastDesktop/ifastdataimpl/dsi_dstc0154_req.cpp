// BFDataImpl implementation file for DataSet DSTC0154.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0154_req.h"


// This function creates an instance of dsi_DSTC0154_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0154_REQ() { return new dsi_DSTC0154_REQ; }

dsi_DSTC0154_REQ::dsi_DSTC0154_REQ()
: BFDataImpl( 40002433 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, ShareholderNum_( ifds::ShareholderNum, &ifds::s_FldProp_ShareholderNum )
, Remark1_( ifds::Remark1, &ifds::s_FldProp_Remark1 )
, Remark2_( ifds::Remark2, &ifds::s_FldProp_Remark2 )
, Remark3_( ifds::Remark3, &ifds::s_FldProp_Remark3 )
, Remark4_( ifds::Remark4, &ifds::s_FldProp_Remark4 )
, Remark5_( ifds::Remark5, &ifds::s_FldProp_Remark5 )
, Remark6_( ifds::Remark6, &ifds::s_FldProp_Remark6 )
, Remark7_( ifds::Remark7, &ifds::s_FldProp_Remark7 )
, Remark8_( ifds::Remark8, &ifds::s_FldProp_Remark8 )
, Remark9_( ifds::Remark9, &ifds::s_FldProp_Remark9 )
, Remark10_( ifds::Remark10, &ifds::s_FldProp_Remark10 )
{
   cFields_ = 17;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0154_REQ::~dsi_DSTC0154_REQ()
{
}

BFDataImpl* dsi_DSTC0154_REQ::clone()
{
   dsi_DSTC0154_REQ* p = new dsi_DSTC0154_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->ShareholderNum_ = ShareholderNum_;
   p->Remark1_ = Remark1_;
   p->Remark2_ = Remark2_;
   p->Remark3_ = Remark3_;
   p->Remark4_ = Remark4_;
   p->Remark5_ = Remark5_;
   p->Remark6_ = Remark6_;
   p->Remark7_ = Remark7_;
   p->Remark8_ = Remark8_;
   p->Remark9_ = Remark9_;
   p->Remark10_ = Remark10_;
   return(p);
}

BFDataField* dsi_DSTC0154_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40000038: return ( &ShareholderNum_ ); break; // ShareholderNum
      case 40000078: return ( &Remark1_ ); break; // Remark1
      case 40000079: return ( &Remark2_ ); break; // Remark2
      case 40000080: return ( &Remark3_ ); break; // Remark3
      case 40000081: return ( &Remark4_ ); break; // Remark4
      case 40000082: return ( &Remark5_ ); break; // Remark5
      case 40000083: return ( &Remark6_ ); break; // Remark6
      case 40000084: return ( &Remark7_ ); break; // Remark7
      case 40000085: return ( &Remark8_ ); break; // Remark8
      case 40000086: return ( &Remark9_ ); break; // Remark9
      case 40000087: return ( &Remark10_ ); break; // Remark10
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0154_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0154_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0154_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 17 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &ShareholderNum_; break;
            case 7: aFlds_[7] = &Remark1_; break;
            case 8: aFlds_[8] = &Remark2_; break;
            case 9: aFlds_[9] = &Remark3_; break;
            case 10: aFlds_[10] = &Remark4_; break;
            case 11: aFlds_[11] = &Remark5_; break;
            case 12: aFlds_[12] = &Remark6_; break;
            case 13: aFlds_[13] = &Remark7_; break;
            case 14: aFlds_[14] = &Remark8_; break;
            case 15: aFlds_[15] = &Remark9_; break;
            case 16: aFlds_[16] = &Remark10_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0154_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0154_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0154_REQ::getLargestDefinedField( void ) const
{
   return( 100 );
}

unsigned long dsi_DSTC0154_REQ::getDefinedByteLength( void ) const
{
   return( 1311 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0154_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0154_REQ::fieldExists( id );
}

bool dsi_DSTC0154_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40000038: return( true );
      case 40000078: return( true );
      case 40000079: return( true );
      case 40000080: return( true );
      case 40000081: return( true );
      case 40000082: return( true );
      case 40000083: return( true );
      case 40000084: return( true );
      case 40000085: return( true );
      case 40000086: return( true );
      case 40000087: return( true );
   }
   return false;
}

