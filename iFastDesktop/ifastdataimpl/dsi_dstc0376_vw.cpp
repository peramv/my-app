// BFDataImpl implementation file for DataSet DSTC0376.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0376_vw.h"


// This function creates an instance of dsi_DSTC0376_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0376_VW() { return new dsi_DSTC0376_VW; }

dsi_DSTC0376_VW::dsi_DSTC0376_VW()
: BFDataImpl( 40005551 )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, SalesRepCode_( ifds::SalesRepCode, &ifds::s_FldProp_SalesRepCode )
, PaymentFor_( ifds::PaymentFor, &ifds::s_FldProp_PaymentFor )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, ConsolType_( ifds::ConsolType, &ifds::s_FldProp_ConsolType )
, PayInstructRID_( ifds::PayInstructRID, &ifds::s_FldProp_PayInstructRID )
{
   cFields_ = 8;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0376_VW::~dsi_DSTC0376_VW()
{
}

BFDataImpl* dsi_DSTC0376_VW::clone()
{
   dsi_DSTC0376_VW* p = new dsi_DSTC0376_VW;
   p->BrokerCode_ = BrokerCode_;
   p->BranchCode_ = BranchCode_;
   p->SalesRepCode_ = SalesRepCode_;
   p->PaymentFor_ = PaymentFor_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->ConsolType_ = ConsolType_;
   p->PayInstructRID_ = PayInstructRID_;
   return(p);
}

BFDataField* dsi_DSTC0376_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000045: return ( &BranchCode_ ); break; // BranchCode
      case 40000046: return ( &SalesRepCode_ ); break; // SalesRepCode
      case 40003965: return ( &PaymentFor_ ); break; // PaymentFor
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40005490: return ( &ConsolType_ ); break; // ConsolType
      case 40004120: return ( &PayInstructRID_ ); break; // PayInstructRID
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0376_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0376_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0376_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 8 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &BrokerCode_; break;
            case 1: aFlds_[1] = &BranchCode_; break;
            case 2: aFlds_[2] = &SalesRepCode_; break;
            case 3: aFlds_[3] = &PaymentFor_; break;
            case 4: aFlds_[4] = &EffectiveDate_; break;
            case 5: aFlds_[5] = &StopDate_; break;
            case 6: aFlds_[6] = &ConsolType_; break;
            case 7: aFlds_[7] = &PayInstructRID_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0376_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0376_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0376_VW::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0376_VW::getDefinedByteLength( void ) const
{
   return( 335 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0376_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0376_VW::fieldExists( id );
}

bool dsi_DSTC0376_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000044: return( true );
      case 40000045: return( true );
      case 40000046: return( true );
      case 40003965: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40005490: return( true );
      case 40004120: return( true );
   }
   return false;
}

