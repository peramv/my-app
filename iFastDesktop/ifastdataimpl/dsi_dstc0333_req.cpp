// BFDataImpl implementation file for DataSet DSTC0333.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0333_req.h"


// This function creates an instance of dsi_DSTC0333_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0333_REQ() { return new dsi_DSTC0333_REQ; }

dsi_DSTC0333_REQ::dsi_DSTC0333_REQ()
: BFDataImpl( 40005003 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, OverrideRepeats_( ifds::OverrideRepeats, &ifds::s_FldProp_OverrideRepeats )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, MsgSearchType_( ifds::MsgSearchType, &ifds::s_FldProp_MsgSearchType )
, CompanyCode_( ifds::CompanyCode, &ifds::s_FldProp_CompanyCode )
, EnvelopeID_( ifds::EnvelopeID, &ifds::s_FldProp_EnvelopeID )
, MsgProcessType_( ifds::MsgProcessType, &ifds::s_FldProp_MsgProcessType )
, StartDate_( ifds::StartDate, &ifds::s_FldProp_StartDate )
, EndDate_( ifds::EndDate, &ifds::s_FldProp_EndDate )
, MsgProcessStatus_( ifds::MsgProcessStatus, &ifds::s_FldProp_MsgProcessStatus )
, NetworkID_( ifds::NetworkID, &ifds::s_FldProp_NetworkID )
, SendRefNum_( ifds::SendRefNum, &ifds::s_FldProp_SendRefNum )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, OmnibusID_( ifds::OmnibusID, &ifds::s_FldProp_OmnibusID )
, ActivityID_( ifds::ActivityID, &ifds::s_FldProp_ActivityID )
, MsgProcessCategory_( ifds::MsgProcessCategory, &ifds::s_FldProp_MsgProcessCategory )
{
   cFields_ = 21;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0333_REQ::~dsi_DSTC0333_REQ()
{
}

BFDataImpl* dsi_DSTC0333_REQ::clone()
{
   dsi_DSTC0333_REQ* p = new dsi_DSTC0333_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->OverrideRepeats_ = OverrideRepeats_;
   p->NextKey_ = NextKey_;
   p->MsgSearchType_ = MsgSearchType_;
   p->CompanyCode_ = CompanyCode_;
   p->EnvelopeID_ = EnvelopeID_;
   p->MsgProcessType_ = MsgProcessType_;
   p->StartDate_ = StartDate_;
   p->EndDate_ = EndDate_;
   p->MsgProcessStatus_ = MsgProcessStatus_;
   p->NetworkID_ = NetworkID_;
   p->SendRefNum_ = SendRefNum_;
   p->TransNum_ = TransNum_;
   p->OmnibusID_ = OmnibusID_;
   p->ActivityID_ = ActivityID_;
   p->MsgProcessCategory_ = MsgProcessCategory_;
   return(p);
}

BFDataField* dsi_DSTC0333_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40002139: return ( &OverrideRepeats_ ); break; // OverrideRepeats
      case 40000029: return ( &NextKey_ ); break; // NextKey
      case 40005004: return ( &MsgSearchType_ ); break; // MsgSearchType
      case 40002245: return ( &CompanyCode_ ); break; // CompanyCode
      case 40005006: return ( &EnvelopeID_ ); break; // EnvelopeID
      case 40005007: return ( &MsgProcessType_ ); break; // MsgProcessType
      case 40000107: return ( &StartDate_ ); break; // StartDate
      case 40000108: return ( &EndDate_ ); break; // EndDate
      case 40005008: return ( &MsgProcessStatus_ ); break; // MsgProcessStatus
      case 40003522: return ( &NetworkID_ ); break; // NetworkID
      case 40003524: return ( &SendRefNum_ ); break; // SendRefNum
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40004780: return ( &OmnibusID_ ); break; // OmnibusID
      case 40005010: return ( &ActivityID_ ); break; // ActivityID
      case 40005009: return ( &MsgProcessCategory_ ); break; // MsgProcessCategory
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0333_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0333_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0333_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 21 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &OverrideRepeats_; break;
            case 7: aFlds_[7] = &NextKey_; break;
            case 8: aFlds_[8] = &MsgSearchType_; break;
            case 9: aFlds_[9] = &CompanyCode_; break;
            case 10: aFlds_[10] = &EnvelopeID_; break;
            case 11: aFlds_[11] = &MsgProcessType_; break;
            case 12: aFlds_[12] = &StartDate_; break;
            case 13: aFlds_[13] = &EndDate_; break;
            case 14: aFlds_[14] = &MsgProcessStatus_; break;
            case 15: aFlds_[15] = &NetworkID_; break;
            case 16: aFlds_[16] = &SendRefNum_; break;
            case 17: aFlds_[17] = &TransNum_; break;
            case 18: aFlds_[18] = &OmnibusID_; break;
            case 19: aFlds_[19] = &ActivityID_; break;
            case 20: aFlds_[20] = &MsgProcessCategory_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0333_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0333_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0333_REQ::getLargestDefinedField( void ) const
{
   return( 100 );
}

unsigned long dsi_DSTC0333_REQ::getDefinedByteLength( void ) const
{
   return( 1008 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0333_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0333_REQ::fieldExists( id );
}

bool dsi_DSTC0333_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40002139: return( true );
      case 40000029: return( true );
      case 40005004: return( true );
      case 40002245: return( true );
      case 40005006: return( true );
      case 40005007: return( true );
      case 40000107: return( true );
      case 40000108: return( true );
      case 40005008: return( true );
      case 40003522: return( true );
      case 40003524: return( true );
      case 40000096: return( true );
      case 40004780: return( true );
      case 40005010: return( true );
      case 40005009: return( true );
   }
   return false;
}

