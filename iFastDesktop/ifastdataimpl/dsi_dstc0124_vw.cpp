// BFDataImpl implementation file for DataSet DSTC0124.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0124_vw.h"


// This function creates an instance of dsi_DSTC0124_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0124_VW() { return new dsi_DSTC0124_VW; }

dsi_DSTC0124_VW::dsi_DSTC0124_VW()
: BFDataImpl( 40001455 )
, rxBatchName_( ifds::rxBatchName, &ifds::s_FldProp_rxBatchName )
, SameBatchName_( ifds::SameBatchName, &ifds::s_FldProp_SameBatchName )
, OrderType_( ifds::OrderType, &ifds::s_FldProp_OrderType )
, BatchTrace_( ifds::BatchTrace, &ifds::s_FldProp_BatchTrace )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, CheckCloseBatch_( ifds::CheckCloseBatch, &ifds::s_FldProp_CheckCloseBatch )
, SameUserBatch_( ifds::SameUserBatch, &ifds::s_FldProp_SameUserBatch )
, ServerTime_( ifds::ServerTime, &ifds::s_FldProp_ServerTime )
{
   cFields_ = 8;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0124_VW::~dsi_DSTC0124_VW()
{
}

BFDataImpl* dsi_DSTC0124_VW::clone()
{
   dsi_DSTC0124_VW* p = new dsi_DSTC0124_VW;
   p->rxBatchName_ = rxBatchName_;
   p->SameBatchName_ = SameBatchName_;
   p->OrderType_ = OrderType_;
   p->BatchTrace_ = BatchTrace_;
   p->EffectiveDate_ = EffectiveDate_;
   p->CheckCloseBatch_ = CheckCloseBatch_;
   p->SameUserBatch_ = SameUserBatch_;
   p->ServerTime_ = ServerTime_;
   return(p);
}

BFDataField* dsi_DSTC0124_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40001800: return ( &rxBatchName_ ); break; // rxBatchName
      case 40001801: return ( &SameBatchName_ ); break; // SameBatchName
      case 40000431: return ( &OrderType_ ); break; // OrderType
      case 40000654: return ( &BatchTrace_ ); break; // BatchTrace
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40005712: return ( &CheckCloseBatch_ ); break; // CheckCloseBatch
      case 40005979: return ( &SameUserBatch_ ); break; // SameUserBatch
      case 40007202: return ( &ServerTime_ ); break; // ServerTime
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0124_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0124_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0124_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 8 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &rxBatchName_; break;
            case 1: aFlds_[1] = &SameBatchName_; break;
            case 2: aFlds_[2] = &OrderType_; break;
            case 3: aFlds_[3] = &BatchTrace_; break;
            case 4: aFlds_[4] = &EffectiveDate_; break;
            case 5: aFlds_[5] = &CheckCloseBatch_; break;
            case 6: aFlds_[6] = &SameUserBatch_; break;
            case 7: aFlds_[7] = &ServerTime_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0124_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0124_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0124_VW::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0124_VW::getDefinedByteLength( void ) const
{
   return( 123 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0124_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0124_VW::fieldExists( id );
}

bool dsi_DSTC0124_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40001800: return( true );
      case 40001801: return( true );
      case 40000431: return( true );
      case 40000654: return( true );
      case 40000327: return( true );
      case 40005712: return( true );
      case 40005979: return( true );
      case 40007202: return( true );
   }
   return false;
}

