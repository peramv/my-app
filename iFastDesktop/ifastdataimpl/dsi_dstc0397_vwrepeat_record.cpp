// BFDataImpl implementation file for DataSet DSTC0397.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0397_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0397_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0397_VWRepeat_Record() { return new dsi_DSTC0397_VWRepeat_Record; }

dsi_DSTC0397_VWRepeat_Record::dsi_DSTC0397_VWRepeat_Record()
: BFDataImpl( 40006025 )
, SettleLocCode_( ifds::SettleLocCode, &ifds::s_FldProp_SettleLocCode )
, TransClrSettlAmt_( ifds::TransClrSettlAmt, &ifds::s_FldProp_TransClrSettlAmt )
, ForAccount_( ifds::ForAccount, &ifds::s_FldProp_ForAccount )
, TransClrSettlUUID_( ifds::TransClrSettlUUID, &ifds::s_FldProp_TransClrSettlUUID )
, InFavourOf_( ifds::InFavourOf, &ifds::s_FldProp_InFavourOf )
, DeliveryTo_( ifds::DeliveryTo, &ifds::s_FldProp_DeliveryTo )
{
   cFields_ = 6;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0397_VWRepeat_Record::~dsi_DSTC0397_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0397_VWRepeat_Record::clone()
{
   dsi_DSTC0397_VWRepeat_Record* p = new dsi_DSTC0397_VWRepeat_Record;
   p->SettleLocCode_ = SettleLocCode_;
   p->TransClrSettlAmt_ = TransClrSettlAmt_;
   p->ForAccount_ = ForAccount_;
   p->TransClrSettlUUID_ = TransClrSettlUUID_;
   p->InFavourOf_ = InFavourOf_;
   p->DeliveryTo_ = DeliveryTo_;
   return(p);
}

BFDataField* dsi_DSTC0397_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40006017: return ( &SettleLocCode_ ); break; // SettleLocCode
      case 40006018: return ( &TransClrSettlAmt_ ); break; // TransClrSettlAmt
      case 40004823: return ( &ForAccount_ ); break; // ForAccount
      case 40006020: return ( &TransClrSettlUUID_ ); break; // TransClrSettlUUID
      case 40002178: return ( &InFavourOf_ ); break; // InFavourOf
      case 40004822: return ( &DeliveryTo_ ); break; // DeliveryTo
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0397_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0397_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0397_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 6 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SettleLocCode_; break;
            case 1: aFlds_[1] = &TransClrSettlAmt_; break;
            case 2: aFlds_[2] = &ForAccount_; break;
            case 3: aFlds_[3] = &TransClrSettlUUID_; break;
            case 4: aFlds_[4] = &InFavourOf_; break;
            case 5: aFlds_[5] = &DeliveryTo_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0397_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0397_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0397_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0397_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 310 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0397_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0397_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0397_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40006017: return( true );
      case 40006018: return( true );
      case 40004823: return( true );
      case 40006020: return( true );
      case 40002178: return( true );
      case 40004822: return( true );
   }
   return false;
}

