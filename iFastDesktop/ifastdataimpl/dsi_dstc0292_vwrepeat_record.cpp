// BFDataImpl implementation file for DataSet DSTC0292.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0292_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0292_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0292_VWRepeat_Record() { return new dsi_DSTC0292_VWRepeat_Record; }

dsi_DSTC0292_VWRepeat_Record::dsi_DSTC0292_VWRepeat_Record()
: BFDataImpl( 40004477 )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, TradeDate_( ifds::TradeDate, &ifds::s_FldProp_TradeDate )
, SettleDate_( ifds::SettleDate, &ifds::s_FldProp_SettleDate )
, Units_( ifds::Units, &ifds::s_FldProp_Units )
, Rate_( ifds::Rate, &ifds::s_FldProp_Rate )
{
   cFields_ = 7;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0292_VWRepeat_Record::~dsi_DSTC0292_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0292_VWRepeat_Record::clone()
{
   dsi_DSTC0292_VWRepeat_Record* p = new dsi_DSTC0292_VWRepeat_Record;
   p->TransId_ = TransId_;
   p->TransNum_ = TransNum_;
   p->TransType_ = TransType_;
   p->TradeDate_ = TradeDate_;
   p->SettleDate_ = SettleDate_;
   p->Units_ = Units_;
   p->Rate_ = Rate_;
   return(p);
}

BFDataField* dsi_DSTC0292_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40000097: return ( &TradeDate_ ); break; // TradeDate
      case 40000348: return ( &SettleDate_ ); break; // SettleDate
      case 40000332: return ( &Units_ ); break; // Units
      case 40002919: return ( &Rate_ ); break; // Rate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0292_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0292_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0292_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 7 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TransId_; break;
            case 1: aFlds_[1] = &TransNum_; break;
            case 2: aFlds_[2] = &TransType_; break;
            case 3: aFlds_[3] = &TradeDate_; break;
            case 4: aFlds_[4] = &SettleDate_; break;
            case 5: aFlds_[5] = &Units_; break;
            case 6: aFlds_[6] = &Rate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0292_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0292_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0292_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0292_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 163 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0292_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0292_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0292_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000063: return( true );
      case 40000096: return( true );
      case 40000095: return( true );
      case 40000097: return( true );
      case 40000348: return( true );
      case 40000332: return( true );
      case 40002919: return( true );
   }
   return false;
}

