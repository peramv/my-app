// BFDataImpl implementation file for DataSet DSTC0472.REQ
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Friday, November 04, 2016 09:21:38


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0472_req.h"


// This function creates an instance of dsi_DSTC0472_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0472_REQ() { return new dsi_DSTC0472_REQ; }

dsi_DSTC0472_REQ::dsi_DSTC0472_REQ()
: BFDataImpl( 40007673 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, SrchRegTransferMstrUUID_( ifds::SrchRegTransferMstrUUID, &ifds::s_FldProp_SrchRegTransferMstrUUID )
, SrchBroker_( ifds::SrchBroker, &ifds::s_FldProp_SrchBroker )
, SrchBranch_( ifds::SrchBranch, &ifds::s_FldProp_SrchBranch )
, SrchSlsrep_( ifds::SrchSlsrep, &ifds::s_FldProp_SrchSlsrep )
, SrchStat_( ifds::SrchStat, &ifds::s_FldProp_SrchStat )
, SrchAccountNum_( ifds::SrchAccountNum, &ifds::s_FldProp_SrchAccountNum )
, SrchExtInst_( ifds::SrchExtInst, &ifds::s_FldProp_SrchExtInst )
, SrchExtInstName_( ifds::SrchExtInstName, &ifds::s_FldProp_SrchExtInstName )
, SrchExtInstAcct_( ifds::SrchExtInstAcct, &ifds::s_FldProp_SrchExtInstAcct )
, SrchInitDate_( ifds::SrchInitDate, &ifds::s_FldProp_SrchInitDate )
, SrchClosedDate_( ifds::SrchClosedDate, &ifds::s_FldProp_SrchClosedDate )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
{
    cFields_ = 18;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0472_REQ::~dsi_DSTC0472_REQ()
{
}

BFDataImpl* dsi_DSTC0472_REQ::clone()
{
    dsi_DSTC0472_REQ* p = new dsi_DSTC0472_REQ;
    p->SessionId_ = SessionId_;
    p->User_Id_ = User_Id_;
    p->LanguageCode_ = LanguageCode_;
    p->CompanyId_ = CompanyId_;
    p->Track_ = Track_;
    p->Activity_ = Activity_;
    p->SrchRegTransferMstrUUID_ = SrchRegTransferMstrUUID_;
    p->SrchBroker_ = SrchBroker_;
    p->SrchBranch_ = SrchBranch_;
    p->SrchSlsrep_ = SrchSlsrep_;
    p->SrchStat_ = SrchStat_;
    p->SrchAccountNum_ = SrchAccountNum_;
    p->SrchExtInst_ = SrchExtInst_;
    p->SrchExtInstName_ = SrchExtInstName_;
    p->SrchExtInstAcct_ = SrchExtInstAcct_;
    p->SrchInitDate_ = SrchInitDate_;
    p->SrchClosedDate_ = SrchClosedDate_;
    p->NextKey_ = NextKey_;
    return(p);
}

BFDataField* dsi_DSTC0472_REQ::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000005: return ( &SessionId_ ); break; // SessionId
        case 40000002: return ( &User_Id_ ); break; // User_Id
        case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
        case 40000031: return ( &CompanyId_ ); break; // CompanyId
        case 40002065: return ( &Track_ ); break; // Track
        case 40002066: return ( &Activity_ ); break; // Activity
        case 40007666: return ( &SrchRegTransferMstrUUID_ ); break; // SrchRegTransferMstrUUID
        case 40000022: return ( &SrchBroker_ ); break; // SrchBroker
        case 40000023: return ( &SrchBranch_ ); break; // SrchBranch
        case 40000024: return ( &SrchSlsrep_ ); break; // SrchSlsrep
        case 40007667: return ( &SrchStat_ ); break; // SrchStat
        case 40000007: return ( &SrchAccountNum_ ); break; // SrchAccountNum
        case 40007668: return ( &SrchExtInst_ ); break; // SrchExtInst
        case 40007702: return ( &SrchExtInstName_ ); break; // SrchExtInstName
        case 40007669: return ( &SrchExtInstAcct_ ); break; // SrchExtInstAcct
        case 40007670: return ( &SrchInitDate_ ); break; // SrchInitDate
        case 40007671: return ( &SrchClosedDate_ ); break; // SrchClosedDate
        case 40000029: return ( &NextKey_ ); break; // NextKey
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0472_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0472_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0472_REQ::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 18 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &SessionId_; break;
                case 1: aFlds_[1] = &User_Id_; break;
                case 2: aFlds_[2] = &LanguageCode_; break;
                case 3: aFlds_[3] = &CompanyId_; break;
                case 4: aFlds_[4] = &Track_; break;
                case 5: aFlds_[5] = &Activity_; break;
                case 6: aFlds_[6] = &SrchRegTransferMstrUUID_; break;
                case 7: aFlds_[7] = &SrchBroker_; break;
                case 8: aFlds_[8] = &SrchBranch_; break;
                case 9: aFlds_[9] = &SrchSlsrep_; break;
                case 10: aFlds_[10] = &SrchStat_; break;
                case 11: aFlds_[11] = &SrchAccountNum_; break;
                case 12: aFlds_[12] = &SrchExtInst_; break;
                case 13: aFlds_[13] = &SrchExtInstName_; break;
                case 14: aFlds_[14] = &SrchExtInstAcct_; break;
                case 15: aFlds_[15] = &SrchInitDate_; break;
                case 16: aFlds_[16] = &SrchClosedDate_; break;
                case 17: aFlds_[17] = &NextKey_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0472_REQ::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0472_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0472_REQ::getLargestDefinedField( void ) const
{
    return( 100 );
}

unsigned long dsi_DSTC0472_REQ::getDefinedByteLength( void ) const
{
    return( 864 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0472_REQ::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0472_REQ::fieldExists( id );
}

bool dsi_DSTC0472_REQ::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000005: return ( true );
        case 40000002: return ( true );
        case 40000030: return ( true );
        case 40000031: return ( true );
        case 40002065: return ( true );
        case 40002066: return ( true );
        case 40007666: return ( true );
        case 40000022: return ( true );
        case 40000023: return ( true );
        case 40000024: return ( true );
        case 40007667: return ( true );
        case 40000007: return ( true );
        case 40007668: return ( true );
        case 40007702: return ( true );
        case 40007669: return ( true );
        case 40007670: return ( true );
        case 40007671: return ( true );
        case 40000029: return ( true );
    }
    return false;
}

