// BFDataImpl implementation file for DataSet DSTC0410.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0410_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0410_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0410_VWRepeat_Record() { return new dsi_DSTC0410_VWRepeat_Record; }

dsi_DSTC0410_VWRepeat_Record::dsi_DSTC0410_VWRepeat_Record()
: BFDataImpl( 40006278 )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, RedCode_( ifds::RedCode, &ifds::s_FldProp_RedCode )
, DepositType_( ifds::DepositType, &ifds::s_FldProp_DepositType )
, TransTypeDesc_( ifds::TransTypeDesc, &ifds::s_FldProp_TransTypeDesc )
, TransRecId_( ifds::TransRecId, &ifds::s_FldProp_TransRecId )
, TfrStat_( ifds::TfrStat, &ifds::s_FldProp_TfrStat )
, RepHRDC_( ifds::RepHRDC, &ifds::s_FldProp_RepHRDC )
{
   cFields_ = 7;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0410_VWRepeat_Record::~dsi_DSTC0410_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0410_VWRepeat_Record::clone()
{
   dsi_DSTC0410_VWRepeat_Record* p = new dsi_DSTC0410_VWRepeat_Record;
   p->TransType_ = TransType_;
   p->RedCode_ = RedCode_;
   p->DepositType_ = DepositType_;
   p->TransTypeDesc_ = TransTypeDesc_;
   p->TransRecId_ = TransRecId_;
   p->TfrStat_ = TfrStat_;
   p->RepHRDC_ = RepHRDC_;
   return(p);
}

BFDataField* dsi_DSTC0410_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40000435: return ( &RedCode_ ); break; // RedCode
      case 40000433: return ( &DepositType_ ); break; // DepositType
      case 40000337: return ( &TransTypeDesc_ ); break; // TransTypeDesc
      case 40006284: return ( &TransRecId_ ); break; // TransRecId
      case 40006282: return ( &TfrStat_ ); break; // TfrStat
      case 40006283: return ( &RepHRDC_ ); break; // RepHRDC
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0410_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0410_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0410_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 7 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TransType_; break;
            case 1: aFlds_[1] = &RedCode_; break;
            case 2: aFlds_[2] = &DepositType_; break;
            case 3: aFlds_[3] = &TransTypeDesc_; break;
            case 4: aFlds_[4] = &TransRecId_; break;
            case 5: aFlds_[5] = &TfrStat_; break;
            case 6: aFlds_[6] = &RepHRDC_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0410_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0410_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0410_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0410_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 316 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0410_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0410_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0410_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000095: return( true );
      case 40000435: return( true );
      case 40000433: return( true );
      case 40000337: return( true );
      case 40006284: return( true );
      case 40006282: return( true );
      case 40006283: return( true );
   }
   return false;
}

