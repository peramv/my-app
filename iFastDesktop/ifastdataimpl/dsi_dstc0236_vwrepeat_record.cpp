// BFDataImpl implementation file for DataSet DSTC0236.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0236_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0236_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0236_VWRepeat_Record() { return new dsi_DSTC0236_VWRepeat_Record; }

dsi_DSTC0236_VWRepeat_Record::dsi_DSTC0236_VWRepeat_Record()
: BFDataImpl( 40003600 )
, TaxJurisCode_( ifds::TaxJurisCode, &ifds::s_FldProp_TaxJurisCode )
, ResProvCode_( ifds::ResProvCode, &ifds::s_FldProp_ResProvCode )
, TaxType_( ifds::TaxType, &ifds::s_FldProp_TaxType )
, AcctType_( ifds::AcctType, &ifds::s_FldProp_AcctType )
, AcctDesignation_( ifds::AcctDesignation, &ifds::s_FldProp_AcctDesignation )
, StopFlag_( ifds::StopFlag, &ifds::s_FldProp_StopFlag )
, StopFlagSeverityCode_( ifds::StopFlagSeverityCode, &ifds::s_FldProp_StopFlagSeverityCode )
, MinInitAmt_( ifds::MinInitAmt, &ifds::s_FldProp_MinInitAmt )
, MinInitAmtSeverityCode_( ifds::MinInitAmtSeverityCode, &ifds::s_FldProp_MinInitAmtSeverityCode )
, MinSubSeqAmt_( ifds::MinSubSeqAmt, &ifds::s_FldProp_MinSubSeqAmt )
, MinSubSeqAmtSeverityCode_( ifds::MinSubSeqAmtSeverityCode, &ifds::s_FldProp_MinSubSeqAmtSeverityCode )
, RuleType_( ifds::RuleType, &ifds::s_FldProp_RuleType )
{
   cFields_ = 12;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0236_VWRepeat_Record::~dsi_DSTC0236_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0236_VWRepeat_Record::clone()
{
   dsi_DSTC0236_VWRepeat_Record* p = new dsi_DSTC0236_VWRepeat_Record;
   p->TaxJurisCode_ = TaxJurisCode_;
   p->ResProvCode_ = ResProvCode_;
   p->TaxType_ = TaxType_;
   p->AcctType_ = AcctType_;
   p->AcctDesignation_ = AcctDesignation_;
   p->StopFlag_ = StopFlag_;
   p->StopFlagSeverityCode_ = StopFlagSeverityCode_;
   p->MinInitAmt_ = MinInitAmt_;
   p->MinInitAmtSeverityCode_ = MinInitAmtSeverityCode_;
   p->MinSubSeqAmt_ = MinSubSeqAmt_;
   p->MinSubSeqAmtSeverityCode_ = MinSubSeqAmtSeverityCode_;
   p->RuleType_ = RuleType_;
   return(p);
}

BFDataField* dsi_DSTC0236_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000796: return ( &TaxJurisCode_ ); break; // TaxJurisCode
      case 40000798: return ( &ResProvCode_ ); break; // ResProvCode
      case 40000134: return ( &TaxType_ ); break; // TaxType
      case 40000174: return ( &AcctType_ ); break; // AcctType
      case 40000178: return ( &AcctDesignation_ ); break; // AcctDesignation
      case 40003603: return ( &StopFlag_ ); break; // StopFlag
      case 40003604: return ( &StopFlagSeverityCode_ ); break; // StopFlagSeverityCode
      case 40003606: return ( &MinInitAmt_ ); break; // MinInitAmt
      case 40003609: return ( &MinInitAmtSeverityCode_ ); break; // MinInitAmtSeverityCode
      case 40003608: return ( &MinSubSeqAmt_ ); break; // MinSubSeqAmt
      case 40003610: return ( &MinSubSeqAmtSeverityCode_ ); break; // MinSubSeqAmtSeverityCode
      case 40003775: return ( &RuleType_ ); break; // RuleType
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0236_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0236_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0236_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 12 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TaxJurisCode_; break;
            case 1: aFlds_[1] = &ResProvCode_; break;
            case 2: aFlds_[2] = &TaxType_; break;
            case 3: aFlds_[3] = &AcctType_; break;
            case 4: aFlds_[4] = &AcctDesignation_; break;
            case 5: aFlds_[5] = &StopFlag_; break;
            case 6: aFlds_[6] = &StopFlagSeverityCode_; break;
            case 7: aFlds_[7] = &MinInitAmt_; break;
            case 8: aFlds_[8] = &MinInitAmtSeverityCode_; break;
            case 9: aFlds_[9] = &MinSubSeqAmt_; break;
            case 10: aFlds_[10] = &MinSubSeqAmtSeverityCode_; break;
            case 11: aFlds_[11] = &RuleType_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0236_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0236_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0236_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 250 );
}

unsigned long dsi_DSTC0236_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 777 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0236_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0236_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0236_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000796: return( true );
      case 40000798: return( true );
      case 40000134: return( true );
      case 40000174: return( true );
      case 40000178: return( true );
      case 40003603: return( true );
      case 40003604: return( true );
      case 40003606: return( true );
      case 40003609: return( true );
      case 40003608: return( true );
      case 40003610: return( true );
      case 40003775: return( true );
   }
   return false;
}

