// BFDataImpl implementation file for DataSet DSTC0198.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0198_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0198_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0198_VWRepeat_Record() { return new dsi_DSTC0198_VWRepeat_Record; }

dsi_DSTC0198_VWRepeat_Record::dsi_DSTC0198_VWRepeat_Record()
: BFDataImpl( 40002941 )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, TaxType_( ifds::TaxType, &ifds::s_FldProp_TaxType )
, AcctType_( ifds::AcctType, &ifds::s_FldProp_AcctType )
, SocialCode_( ifds::SocialCode, &ifds::s_FldProp_SocialCode )
, AcctDesignation_( ifds::AcctDesignation, &ifds::s_FldProp_AcctDesignation )
, AltAccount_( ifds::AltAccount, &ifds::s_FldProp_AltAccount )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, SlsrepCode_( ifds::SlsrepCode, &ifds::s_FldProp_SlsrepCode )
, InterAccount_( ifds::InterAccount, &ifds::s_FldProp_InterAccount )
, DateOfReg_( ifds::DateOfReg, &ifds::s_FldProp_DateOfReg )
, RRSPFee_( ifds::RRSPFee, &ifds::s_FldProp_RRSPFee )
, AMSCode_( ifds::AMSCode, &ifds::s_FldProp_AMSCode )
, PensionJuris_( ifds::PensionJuris, &ifds::s_FldProp_PensionJuris )
, StopPurchase_( ifds::StopPurchase, &ifds::s_FldProp_StopPurchase )
, StopXferIn_( ifds::StopXferIn, &ifds::s_FldProp_StopXferIn )
, StopXferOut_( ifds::StopXferOut, &ifds::s_FldProp_StopXferOut )
, StopRed_( ifds::StopRed, &ifds::s_FldProp_StopRed )
, FeeWaived_( ifds::FeeWaived, &ifds::s_FldProp_FeeWaived )
, Unseizable_( ifds::Unseizable, &ifds::s_FldProp_Unseizable )
, MarketMail_( ifds::MarketMail, &ifds::s_FldProp_MarketMail )
, SupConf_( ifds::SupConf, &ifds::s_FldProp_SupConf )
, SupEmpConf_( ifds::SupEmpConf, &ifds::s_FldProp_SupEmpConf )
, InTrustFor_( ifds::InTrustFor, &ifds::s_FldProp_InTrustFor )
, Escrow_( ifds::Escrow, &ifds::s_FldProp_Escrow )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, AcctGroup_( ifds::AcctGroup, &ifds::s_FldProp_AcctGroup )
, ShrNum_( ifds::ShrNum, &ifds::s_FldProp_ShrNum )
, AcctMstrVer_( ifds::AcctMstrVer, &ifds::s_FldProp_AcctMstrVer )
, AcctMstrRid_( ifds::AcctMstrRid, &ifds::s_FldProp_AcctMstrRid )
, Employee_( ifds::Employee, &ifds::s_FldProp_Employee )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, ProdCode_( ifds::ProdCode, &ifds::s_FldProp_ProdCode )
{
   cFields_ = 36;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0198_VWRepeat_Record::~dsi_DSTC0198_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0198_VWRepeat_Record::clone()
{
   dsi_DSTC0198_VWRepeat_Record* p = new dsi_DSTC0198_VWRepeat_Record;
   p->AccountNum_ = AccountNum_;
   p->TaxType_ = TaxType_;
   p->AcctType_ = AcctType_;
   p->SocialCode_ = SocialCode_;
   p->AcctDesignation_ = AcctDesignation_;
   p->AltAccount_ = AltAccount_;
   p->Currency_ = Currency_;
   p->BrokerCode_ = BrokerCode_;
   p->BranchCode_ = BranchCode_;
   p->SlsrepCode_ = SlsrepCode_;
   p->InterAccount_ = InterAccount_;
   p->DateOfReg_ = DateOfReg_;
   p->RRSPFee_ = RRSPFee_;
   p->AMSCode_ = AMSCode_;
   p->PensionJuris_ = PensionJuris_;
   p->StopPurchase_ = StopPurchase_;
   p->StopXferIn_ = StopXferIn_;
   p->StopXferOut_ = StopXferOut_;
   p->StopRed_ = StopRed_;
   p->FeeWaived_ = FeeWaived_;
   p->Unseizable_ = Unseizable_;
   p->MarketMail_ = MarketMail_;
   p->SupConf_ = SupConf_;
   p->SupEmpConf_ = SupEmpConf_;
   p->InTrustFor_ = InTrustFor_;
   p->Escrow_ = Escrow_;
   p->ProcessDate_ = ProcessDate_;
   p->ModUser_ = ModUser_;
   p->Username_ = Username_;
   p->AcctGroup_ = AcctGroup_;
   p->ShrNum_ = ShrNum_;
   p->AcctMstrVer_ = AcctMstrVer_;
   p->AcctMstrRid_ = AcctMstrRid_;
   p->Employee_ = Employee_;
   p->EffectiveDate_ = EffectiveDate_;
   p->ProdCode_ = ProdCode_;
   return(p);
}

BFDataField* dsi_DSTC0198_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40000134: return ( &TaxType_ ); break; // TaxType
      case 40000174: return ( &AcctType_ ); break; // AcctType
      case 40002187: return ( &SocialCode_ ); break; // SocialCode
      case 40000178: return ( &AcctDesignation_ ); break; // AcctDesignation
      case 40000173: return ( &AltAccount_ ); break; // AltAccount
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000045: return ( &BranchCode_ ); break; // BranchCode
      case 40000656: return ( &SlsrepCode_ ); break; // SlsrepCode
      case 40000187: return ( &InterAccount_ ); break; // InterAccount
      case 40000190: return ( &DateOfReg_ ); break; // DateOfReg
      case 40000191: return ( &RRSPFee_ ); break; // RRSPFee
      case 40000193: return ( &AMSCode_ ); break; // AMSCode
      case 40000194: return ( &PensionJuris_ ); break; // PensionJuris
      case 40000699: return ( &StopPurchase_ ); break; // StopPurchase
      case 40000197: return ( &StopXferIn_ ); break; // StopXferIn
      case 40000198: return ( &StopXferOut_ ); break; // StopXferOut
      case 40000593: return ( &StopRed_ ); break; // StopRed
      case 40000200: return ( &FeeWaived_ ); break; // FeeWaived
      case 40000202: return ( &Unseizable_ ); break; // Unseizable
      case 40000201: return ( &MarketMail_ ); break; // MarketMail
      case 40000204: return ( &SupConf_ ); break; // SupConf
      case 40000205: return ( &SupEmpConf_ ); break; // SupEmpConf
      case 40000206: return ( &InTrustFor_ ); break; // InTrustFor
      case 40000207: return ( &Escrow_ ); break; // Escrow
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40000117: return ( &Username_ ); break; // Username
      case 40000208: return ( &AcctGroup_ ); break; // AcctGroup
      case 40000114: return ( &ShrNum_ ); break; // ShrNum
      case 40000909: return ( &AcctMstrVer_ ); break; // AcctMstrVer
      case 40000910: return ( &AcctMstrRid_ ); break; // AcctMstrRid
      case 40001117: return ( &Employee_ ); break; // Employee
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40002782: return ( &ProdCode_ ); break; // ProdCode
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0198_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0198_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0198_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 36 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AccountNum_; break;
            case 1: aFlds_[1] = &TaxType_; break;
            case 2: aFlds_[2] = &AcctType_; break;
            case 3: aFlds_[3] = &SocialCode_; break;
            case 4: aFlds_[4] = &AcctDesignation_; break;
            case 5: aFlds_[5] = &AltAccount_; break;
            case 6: aFlds_[6] = &Currency_; break;
            case 7: aFlds_[7] = &BrokerCode_; break;
            case 8: aFlds_[8] = &BranchCode_; break;
            case 9: aFlds_[9] = &SlsrepCode_; break;
            case 10: aFlds_[10] = &InterAccount_; break;
            case 11: aFlds_[11] = &DateOfReg_; break;
            case 12: aFlds_[12] = &RRSPFee_; break;
            case 13: aFlds_[13] = &AMSCode_; break;
            case 14: aFlds_[14] = &PensionJuris_; break;
            case 15: aFlds_[15] = &StopPurchase_; break;
            case 16: aFlds_[16] = &StopXferIn_; break;
            case 17: aFlds_[17] = &StopXferOut_; break;
            case 18: aFlds_[18] = &StopRed_; break;
            case 19: aFlds_[19] = &FeeWaived_; break;
            case 20: aFlds_[20] = &Unseizable_; break;
            case 21: aFlds_[21] = &MarketMail_; break;
            case 22: aFlds_[22] = &SupConf_; break;
            case 23: aFlds_[23] = &SupEmpConf_; break;
            case 24: aFlds_[24] = &InTrustFor_; break;
            case 25: aFlds_[25] = &Escrow_; break;
            case 26: aFlds_[26] = &ProcessDate_; break;
            case 27: aFlds_[27] = &ModUser_; break;
            case 28: aFlds_[28] = &Username_; break;
            case 29: aFlds_[29] = &AcctGroup_; break;
            case 30: aFlds_[30] = &ShrNum_; break;
            case 31: aFlds_[31] = &AcctMstrVer_; break;
            case 32: aFlds_[32] = &AcctMstrRid_; break;
            case 33: aFlds_[33] = &Employee_; break;
            case 34: aFlds_[34] = &EffectiveDate_; break;
            case 35: aFlds_[35] = &ProdCode_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0198_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0198_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0198_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0198_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 1267 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0198_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0198_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0198_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000040: return( true );
      case 40000134: return( true );
      case 40000174: return( true );
      case 40002187: return( true );
      case 40000178: return( true );
      case 40000173: return( true );
      case 40000180: return( true );
      case 40000044: return( true );
      case 40000045: return( true );
      case 40000656: return( true );
      case 40000187: return( true );
      case 40000190: return( true );
      case 40000191: return( true );
      case 40000193: return( true );
      case 40000194: return( true );
      case 40000699: return( true );
      case 40000197: return( true );
      case 40000198: return( true );
      case 40000593: return( true );
      case 40000200: return( true );
      case 40000202: return( true );
      case 40000201: return( true );
      case 40000204: return( true );
      case 40000205: return( true );
      case 40000206: return( true );
      case 40000207: return( true );
      case 40000216: return( true );
      case 40000218: return( true );
      case 40000117: return( true );
      case 40000208: return( true );
      case 40000114: return( true );
      case 40000909: return( true );
      case 40000910: return( true );
      case 40001117: return( true );
      case 40000327: return( true );
      case 40002782: return( true );
   }
   return false;
}

