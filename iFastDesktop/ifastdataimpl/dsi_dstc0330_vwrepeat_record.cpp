// BFDataImpl implementation file for DataSet DSTC0330.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0330_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0330_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0330_VWRepeat_Record() { return new dsi_DSTC0330_VWRepeat_Record; }

dsi_DSTC0330_VWRepeat_Record::dsi_DSTC0330_VWRepeat_Record()
: BFDataImpl( 40005069 )
, DecimalType_( ifds::DecimalType, &ifds::s_FldProp_DecimalType )
, DecimalTypeDesc_( ifds::DecimalTypeDesc, &ifds::s_FldProp_DecimalTypeDesc )
, DecimalValue_( ifds::DecimalValue, &ifds::s_FldProp_DecimalValue )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
{
   cFields_ = 4;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0330_VWRepeat_Record::~dsi_DSTC0330_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0330_VWRepeat_Record::clone()
{
   dsi_DSTC0330_VWRepeat_Record* p = new dsi_DSTC0330_VWRepeat_Record;
   p->DecimalType_ = DecimalType_;
   p->DecimalTypeDesc_ = DecimalTypeDesc_;
   p->DecimalValue_ = DecimalValue_;
   p->Currency_ = Currency_;
   return(p);
}

BFDataField* dsi_DSTC0330_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40005070: return ( &DecimalType_ ); break; // DecimalType
      case 40005072: return ( &DecimalTypeDesc_ ); break; // DecimalTypeDesc
      case 40005073: return ( &DecimalValue_ ); break; // DecimalValue
      case 40000180: return ( &Currency_ ); break; // Currency
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0330_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0330_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0330_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 4 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &DecimalType_; break;
            case 1: aFlds_[1] = &DecimalTypeDesc_; break;
            case 2: aFlds_[2] = &DecimalValue_; break;
            case 3: aFlds_[3] = &Currency_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0330_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0330_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0330_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0330_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 290 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0330_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0330_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0330_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40005070: return( true );
      case 40005072: return( true );
      case 40005073: return( true );
      case 40000180: return( true );
   }
   return false;
}

