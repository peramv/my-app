// BFDataImpl implementation file for DataSet DSTC0111.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0111_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0111_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0111_VWRepeat_Record() { return new dsi_DSTC0111_VWRepeat_Record; }

dsi_DSTC0111_VWRepeat_Record::dsi_DSTC0111_VWRepeat_Record()
: BFDataImpl( 40001507 )
, BeneName_( ifds::BeneName, &ifds::s_FldProp_BeneName )
, DepositType_( ifds::DepositType, &ifds::s_FldProp_DepositType )
, DepositTypeDesc_( ifds::DepositTypeDesc, &ifds::s_FldProp_DepositTypeDesc )
, RedCode_( ifds::RedCode, &ifds::s_FldProp_RedCode )
, RedCodeDesc_( ifds::RedCodeDesc, &ifds::s_FldProp_RedCodeDesc )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, GrossAmt_( ifds::GrossAmt, &ifds::s_FldProp_GrossAmt )
, HRDCTransId_( ifds::HRDCTransId, &ifds::s_FldProp_HRDCTransId )
, SettleDate_( ifds::SettleDate, &ifds::s_FldProp_SettleDate )
, ACAmt_( ifds::ACAmt, &ifds::s_FldProp_ACAmt )
, TerminateDate_( ifds::TerminateDate, &ifds::s_FldProp_TerminateDate )
, GrantAmount_( ifds::GrantAmount, &ifds::s_FldProp_GrantAmount )
, LifeContr_( ifds::LifeContr, &ifds::s_FldProp_LifeContr )
, GrantTransCode_( ifds::GrantTransCode, &ifds::s_FldProp_GrantTransCode )
, GrantTransLabel_( ifds::GrantTransLabel, &ifds::s_FldProp_GrantTransLabel )
, GrantTransId_( ifds::GrantTransId, &ifds::s_FldProp_GrantTransId )
, RedLifeContr_( ifds::RedLifeContr, &ifds::s_FldProp_RedLifeContr )
, UCAmt_( ifds::UCAmt, &ifds::s_FldProp_UCAmt )
, UCReason_( ifds::UCReason, &ifds::s_FldProp_UCReason )
, OldContractId_( ifds::OldContractId, &ifds::s_FldProp_OldContractId )
, OldPlanId_( ifds::OldPlanId, &ifds::s_FldProp_OldPlanId )
, RESPLetter_( ifds::RESPLetter, &ifds::s_FldProp_RESPLetter )
, HRDCReported_( ifds::HRDCReported, &ifds::s_FldProp_HRDCReported )
, RESPTransStat_( ifds::RESPTransStat, &ifds::s_FldProp_RESPTransStat )
, GrantRepayable_( ifds::GrantRepayable, &ifds::s_FldProp_GrantRepayable )
, YTDContr_( ifds::YTDContr, &ifds::s_FldProp_YTDContr )
, AddlCESGRsnCode_( ifds::AddlCESGRsnCode, &ifds::s_FldProp_AddlCESGRsnCode )
, AddlCESGRsnDesc_( ifds::AddlCESGRsnDesc, &ifds::s_FldProp_AddlCESGRsnDesc )
, CESGAmount_( ifds::CESGAmount, &ifds::s_FldProp_CESGAmount )
, NeedRepHRDC_( ifds::NeedRepHRDC, &ifds::s_FldProp_NeedRepHRDC )
, CESGInDetlErrorDesc_( ifds::CESGInDetlErrorDesc, &ifds::s_FldProp_CESGInDetlErrorDesc )
, Tainted_( ifds::Tainted, &ifds::s_FldProp_Tainted )
, OCRdmYear_( ifds::OCRdmYear, &ifds::s_FldProp_OCRdmYear )
, GratRepayReasonAll_( ifds::GratRepayReasonAll, &ifds::s_FldProp_GratRepayReasonAll )
, UCReasonDesc_( ifds::UCReasonDesc, &ifds::s_FldProp_UCReasonDesc )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, AmountType_( ifds::AmountType, &ifds::s_FldProp_AmountType )
, Cancelled_( ifds::Cancelled, &ifds::s_FldProp_Cancelled )
, Reversal_( ifds::Reversal, &ifds::s_FldProp_Reversal )
, HRDCPending_( ifds::HRDCPending, &ifds::s_FldProp_HRDCPending )
, GrossNet_( ifds::GrossNet, &ifds::s_FldProp_GrossNet )
, TradeGrossAmt_( ifds::TradeGrossAmt, &ifds::s_FldProp_TradeGrossAmt )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, RESPContrDetlTaxYear_( ifds::RESPContrDetlTaxYear, &ifds::s_FldProp_RESPContrDetlTaxYear )
, PurAdd_( ifds::PurAdd, &ifds::s_FldProp_PurAdd )
, PurCLB_( ifds::PurCLB, &ifds::s_FldProp_PurCLB )
, PurPGrant_( ifds::PurPGrant, &ifds::s_FldProp_PurPGrant )
, PurQESI_( ifds::PurQESI, &ifds::s_FldProp_PurQESI )
, RedIncome_( ifds::RedIncome, &ifds::s_FldProp_RedIncome )
, RedCESG_( ifds::RedCESG, &ifds::s_FldProp_RedCESG )
, RedCLB_( ifds::RedCLB, &ifds::s_FldProp_RedCLB )
, RedPGrant_( ifds::RedPGrant, &ifds::s_FldProp_RedPGrant )
, RedQESI_( ifds::RedQESI, &ifds::s_FldProp_RedQESI )
, AddtlQESI_( ifds::AddtlQESI, &ifds::s_FldProp_AddtlQESI )
, AccountTo_( ifds::AccountTo, &ifds::s_FldProp_AccountTo )
, AIPAcctName_( ifds::AIPAcctName, &ifds::s_FldProp_AIPAcctName )
, HistNonTrustYear_( ifds::HistNonTrustYear, &ifds::s_FldProp_HistNonTrustYear )
, IsResidualCESG_( ifds::IsResidualCESG, &ifds::s_FldProp_IsResidualCESG )
, SAGESPurAmt_( ifds::SAGESPurAmt, &ifds::s_FldProp_SAGESPurAmt )
, SAGESRedAmt_( ifds::SAGESRedAmt, &ifds::s_FldProp_SAGESRedAmt )
, SAGESTransID_( ifds::SAGESTransID, &ifds::s_FldProp_SAGESTransID )
, SAGESTransOrigCode_( ifds::SAGESTransOrigCode, &ifds::s_FldProp_SAGESTransOrigCode )
, SAGESUCDesc_( ifds::SAGESUCDesc, &ifds::s_FldProp_SAGESUCDesc )
, SAGESRejDesc_( ifds::SAGESRejDesc, &ifds::s_FldProp_SAGESRejDesc )
, SAGESReported_( ifds::SAGESReported, &ifds::s_FldProp_SAGESReported )
, SAGESUCAmt_( ifds::SAGESUCAmt, &ifds::s_FldProp_SAGESUCAmt )
, SAGESACAmt_( ifds::SAGESACAmt, &ifds::s_FldProp_SAGESACAmt )
, BCTESGGrant_( ifds::BCTESGGrant, &ifds::s_FldProp_BCTESGGrant )
{
   cFields_ = 69;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0111_VWRepeat_Record::~dsi_DSTC0111_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0111_VWRepeat_Record::clone()
{
   dsi_DSTC0111_VWRepeat_Record* p = new dsi_DSTC0111_VWRepeat_Record;
   p->BeneName_ = BeneName_;
   p->DepositType_ = DepositType_;
   p->DepositTypeDesc_ = DepositTypeDesc_;
   p->RedCode_ = RedCode_;
   p->RedCodeDesc_ = RedCodeDesc_;
   p->TransId_ = TransId_;
   p->EffectiveDate_ = EffectiveDate_;
   p->GrossAmt_ = GrossAmt_;
   p->HRDCTransId_ = HRDCTransId_;
   p->SettleDate_ = SettleDate_;
   p->ACAmt_ = ACAmt_;
   p->TerminateDate_ = TerminateDate_;
   p->GrantAmount_ = GrantAmount_;
   p->LifeContr_ = LifeContr_;
   p->GrantTransCode_ = GrantTransCode_;
   p->GrantTransLabel_ = GrantTransLabel_;
   p->GrantTransId_ = GrantTransId_;
   p->RedLifeContr_ = RedLifeContr_;
   p->UCAmt_ = UCAmt_;
   p->UCReason_ = UCReason_;
   p->OldContractId_ = OldContractId_;
   p->OldPlanId_ = OldPlanId_;
   p->RESPLetter_ = RESPLetter_;
   p->HRDCReported_ = HRDCReported_;
   p->RESPTransStat_ = RESPTransStat_;
   p->GrantRepayable_ = GrantRepayable_;
   p->YTDContr_ = YTDContr_;
   p->AddlCESGRsnCode_ = AddlCESGRsnCode_;
   p->AddlCESGRsnDesc_ = AddlCESGRsnDesc_;
   p->CESGAmount_ = CESGAmount_;
   p->NeedRepHRDC_ = NeedRepHRDC_;
   p->CESGInDetlErrorDesc_ = CESGInDetlErrorDesc_;
   p->Tainted_ = Tainted_;
   p->OCRdmYear_ = OCRdmYear_;
   p->GratRepayReasonAll_ = GratRepayReasonAll_;
   p->UCReasonDesc_ = UCReasonDesc_;
   p->TransType_ = TransType_;
   p->AmountType_ = AmountType_;
   p->Cancelled_ = Cancelled_;
   p->Reversal_ = Reversal_;
   p->HRDCPending_ = HRDCPending_;
   p->GrossNet_ = GrossNet_;
   p->TradeGrossAmt_ = TradeGrossAmt_;
   p->TransNum_ = TransNum_;
   p->RESPContrDetlTaxYear_ = RESPContrDetlTaxYear_;
   p->PurAdd_ = PurAdd_;
   p->PurCLB_ = PurCLB_;
   p->PurPGrant_ = PurPGrant_;
   p->PurQESI_ = PurQESI_;
   p->RedIncome_ = RedIncome_;
   p->RedCESG_ = RedCESG_;
   p->RedCLB_ = RedCLB_;
   p->RedPGrant_ = RedPGrant_;
   p->RedQESI_ = RedQESI_;
   p->AddtlQESI_ = AddtlQESI_;
   p->AccountTo_ = AccountTo_;
   p->AIPAcctName_ = AIPAcctName_;
   p->HistNonTrustYear_ = HistNonTrustYear_;
   p->IsResidualCESG_ = IsResidualCESG_;
   p->SAGESPurAmt_ = SAGESPurAmt_;
   p->SAGESRedAmt_ = SAGESRedAmt_;
   p->SAGESTransID_ = SAGESTransID_;
   p->SAGESTransOrigCode_ = SAGESTransOrigCode_;
   p->SAGESUCDesc_ = SAGESUCDesc_;
   p->SAGESRejDesc_ = SAGESRejDesc_;
   p->SAGESReported_ = SAGESReported_;
   p->SAGESUCAmt_ = SAGESUCAmt_;
   p->SAGESACAmt_ = SAGESACAmt_;
   p->BCTESGGrant_ = BCTESGGrant_;
   return(p);
}

BFDataField* dsi_DSTC0111_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000786: return ( &BeneName_ ); break; // BeneName
      case 40000433: return ( &DepositType_ ); break; // DepositType
      case 40000434: return ( &DepositTypeDesc_ ); break; // DepositTypeDesc
      case 40000435: return ( &RedCode_ ); break; // RedCode
      case 40000436: return ( &RedCodeDesc_ ); break; // RedCodeDesc
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000350: return ( &GrossAmt_ ); break; // GrossAmt
      case 40001509: return ( &HRDCTransId_ ); break; // HRDCTransId
      case 40000348: return ( &SettleDate_ ); break; // SettleDate
      case 40001510: return ( &ACAmt_ ); break; // ACAmt
      case 40000766: return ( &TerminateDate_ ); break; // TerminateDate
      case 40001511: return ( &GrantAmount_ ); break; // GrantAmount
      case 40000788: return ( &LifeContr_ ); break; // LifeContr
      case 40001512: return ( &GrantTransCode_ ); break; // GrantTransCode
      case 40001513: return ( &GrantTransLabel_ ); break; // GrantTransLabel
      case 40001514: return ( &GrantTransId_ ); break; // GrantTransId
      case 40000776: return ( &RedLifeContr_ ); break; // RedLifeContr
      case 40001515: return ( &UCAmt_ ); break; // UCAmt
      case 40001516: return ( &UCReason_ ); break; // UCReason
      case 40001517: return ( &OldContractId_ ); break; // OldContractId
      case 40001518: return ( &OldPlanId_ ); break; // OldPlanId
      case 40001519: return ( &RESPLetter_ ); break; // RESPLetter
      case 40001520: return ( &HRDCReported_ ); break; // HRDCReported
      case 40001521: return ( &RESPTransStat_ ); break; // RESPTransStat
      case 40000769: return ( &GrantRepayable_ ); break; // GrantRepayable
      case 40000787: return ( &YTDContr_ ); break; // YTDContr
      case 40006137: return ( &AddlCESGRsnCode_ ); break; // AddlCESGRsnCode
      case 40006138: return ( &AddlCESGRsnDesc_ ); break; // AddlCESGRsnDesc
      case 40006139: return ( &CESGAmount_ ); break; // CESGAmount
      case 40006140: return ( &NeedRepHRDC_ ); break; // NeedRepHRDC
      case 40006141: return ( &CESGInDetlErrorDesc_ ); break; // CESGInDetlErrorDesc
      case 40006085: return ( &Tainted_ ); break; // Tainted
      case 40006142: return ( &OCRdmYear_ ); break; // OCRdmYear
      case 40006267: return ( &GratRepayReasonAll_ ); break; // GratRepayReasonAll
      case 40006144: return ( &UCReasonDesc_ ); break; // UCReasonDesc
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40000232: return ( &AmountType_ ); break; // AmountType
      case 40000354: return ( &Cancelled_ ); break; // Cancelled
      case 40000355: return ( &Reversal_ ); break; // Reversal
      case 40006145: return ( &HRDCPending_ ); break; // HRDCPending
      case 40002214: return ( &GrossNet_ ); break; // GrossNet
      case 40006152: return ( &TradeGrossAmt_ ); break; // TradeGrossAmt
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40006254: return ( &RESPContrDetlTaxYear_ ); break; // RESPContrDetlTaxYear
      case 40006260: return ( &PurAdd_ ); break; // PurAdd
      case 40006261: return ( &PurCLB_ ); break; // PurCLB
      case 40006262: return ( &PurPGrant_ ); break; // PurPGrant
      case 40006263: return ( &PurQESI_ ); break; // PurQESI
      case 40006264: return ( &RedIncome_ ); break; // RedIncome
      case 40006207: return ( &RedCESG_ ); break; // RedCESG
      case 40006208: return ( &RedCLB_ ); break; // RedCLB
      case 40006209: return ( &RedPGrant_ ); break; // RedPGrant
      case 40006265: return ( &RedQESI_ ); break; // RedQESI
      case 40006266: return ( &AddtlQESI_ ); break; // AddtlQESI
      case 40000646: return ( &AccountTo_ ); break; // AccountTo
      case 40006314: return ( &AIPAcctName_ ); break; // AIPAcctName
      case 40006368: return ( &HistNonTrustYear_ ); break; // HistNonTrustYear
      case 40007191: return ( &IsResidualCESG_ ); break; // IsResidualCESG
      case 40007359: return ( &SAGESPurAmt_ ); break; // SAGESPurAmt
      case 40007360: return ( &SAGESRedAmt_ ); break; // SAGESRedAmt
      case 40007361: return ( &SAGESTransID_ ); break; // SAGESTransID
      case 40007365: return ( &SAGESTransOrigCode_ ); break; // SAGESTransOrigCode
      case 40007362: return ( &SAGESUCDesc_ ); break; // SAGESUCDesc
      case 40007363: return ( &SAGESRejDesc_ ); break; // SAGESRejDesc
      case 40007364: return ( &SAGESReported_ ); break; // SAGESReported
      case 40007398: return ( &SAGESUCAmt_ ); break; // SAGESUCAmt
      case 40007399: return ( &SAGESACAmt_ ); break; // SAGESACAmt
      case 40007538: return ( &BCTESGGrant_ ); break; // BCTESGGrant
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0111_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0111_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0111_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 69 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &BeneName_; break;
            case 1: aFlds_[1] = &DepositType_; break;
            case 2: aFlds_[2] = &DepositTypeDesc_; break;
            case 3: aFlds_[3] = &RedCode_; break;
            case 4: aFlds_[4] = &RedCodeDesc_; break;
            case 5: aFlds_[5] = &TransId_; break;
            case 6: aFlds_[6] = &EffectiveDate_; break;
            case 7: aFlds_[7] = &GrossAmt_; break;
            case 8: aFlds_[8] = &HRDCTransId_; break;
            case 9: aFlds_[9] = &SettleDate_; break;
            case 10: aFlds_[10] = &ACAmt_; break;
            case 11: aFlds_[11] = &TerminateDate_; break;
            case 12: aFlds_[12] = &GrantAmount_; break;
            case 13: aFlds_[13] = &LifeContr_; break;
            case 14: aFlds_[14] = &GrantTransCode_; break;
            case 15: aFlds_[15] = &GrantTransLabel_; break;
            case 16: aFlds_[16] = &GrantTransId_; break;
            case 17: aFlds_[17] = &RedLifeContr_; break;
            case 18: aFlds_[18] = &UCAmt_; break;
            case 19: aFlds_[19] = &UCReason_; break;
            case 20: aFlds_[20] = &OldContractId_; break;
            case 21: aFlds_[21] = &OldPlanId_; break;
            case 22: aFlds_[22] = &RESPLetter_; break;
            case 23: aFlds_[23] = &HRDCReported_; break;
            case 24: aFlds_[24] = &RESPTransStat_; break;
            case 25: aFlds_[25] = &GrantRepayable_; break;
            case 26: aFlds_[26] = &YTDContr_; break;
            case 27: aFlds_[27] = &AddlCESGRsnCode_; break;
            case 28: aFlds_[28] = &AddlCESGRsnDesc_; break;
            case 29: aFlds_[29] = &CESGAmount_; break;
            case 30: aFlds_[30] = &NeedRepHRDC_; break;
            case 31: aFlds_[31] = &CESGInDetlErrorDesc_; break;
            case 32: aFlds_[32] = &Tainted_; break;
            case 33: aFlds_[33] = &OCRdmYear_; break;
            case 34: aFlds_[34] = &GratRepayReasonAll_; break;
            case 35: aFlds_[35] = &UCReasonDesc_; break;
            case 36: aFlds_[36] = &TransType_; break;
            case 37: aFlds_[37] = &AmountType_; break;
            case 38: aFlds_[38] = &Cancelled_; break;
            case 39: aFlds_[39] = &Reversal_; break;
            case 40: aFlds_[40] = &HRDCPending_; break;
            case 41: aFlds_[41] = &GrossNet_; break;
            case 42: aFlds_[42] = &TradeGrossAmt_; break;
            case 43: aFlds_[43] = &TransNum_; break;
            case 44: aFlds_[44] = &RESPContrDetlTaxYear_; break;
            case 45: aFlds_[45] = &PurAdd_; break;
            case 46: aFlds_[46] = &PurCLB_; break;
            case 47: aFlds_[47] = &PurPGrant_; break;
            case 48: aFlds_[48] = &PurQESI_; break;
            case 49: aFlds_[49] = &RedIncome_; break;
            case 50: aFlds_[50] = &RedCESG_; break;
            case 51: aFlds_[51] = &RedCLB_; break;
            case 52: aFlds_[52] = &RedPGrant_; break;
            case 53: aFlds_[53] = &RedQESI_; break;
            case 54: aFlds_[54] = &AddtlQESI_; break;
            case 55: aFlds_[55] = &AccountTo_; break;
            case 56: aFlds_[56] = &AIPAcctName_; break;
            case 57: aFlds_[57] = &HistNonTrustYear_; break;
            case 58: aFlds_[58] = &IsResidualCESG_; break;
            case 59: aFlds_[59] = &SAGESPurAmt_; break;
            case 60: aFlds_[60] = &SAGESRedAmt_; break;
            case 61: aFlds_[61] = &SAGESTransID_; break;
            case 62: aFlds_[62] = &SAGESTransOrigCode_; break;
            case 63: aFlds_[63] = &SAGESUCDesc_; break;
            case 64: aFlds_[64] = &SAGESRejDesc_; break;
            case 65: aFlds_[65] = &SAGESReported_; break;
            case 66: aFlds_[66] = &SAGESUCAmt_; break;
            case 67: aFlds_[67] = &SAGESACAmt_; break;
            case 68: aFlds_[68] = &BCTESGGrant_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0111_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0111_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0111_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0111_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 2662 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0111_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0111_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0111_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000786: return( true );
      case 40000433: return( true );
      case 40000434: return( true );
      case 40000435: return( true );
      case 40000436: return( true );
      case 40000063: return( true );
      case 40000327: return( true );
      case 40000350: return( true );
      case 40001509: return( true );
      case 40000348: return( true );
      case 40001510: return( true );
      case 40000766: return( true );
      case 40001511: return( true );
      case 40000788: return( true );
      case 40001512: return( true );
      case 40001513: return( true );
      case 40001514: return( true );
      case 40000776: return( true );
      case 40001515: return( true );
      case 40001516: return( true );
      case 40001517: return( true );
      case 40001518: return( true );
      case 40001519: return( true );
      case 40001520: return( true );
      case 40001521: return( true );
      case 40000769: return( true );
      case 40000787: return( true );
      case 40006137: return( true );
      case 40006138: return( true );
      case 40006139: return( true );
      case 40006140: return( true );
      case 40006141: return( true );
      case 40006085: return( true );
      case 40006142: return( true );
      case 40006267: return( true );
      case 40006144: return( true );
      case 40000095: return( true );
      case 40000232: return( true );
      case 40000354: return( true );
      case 40000355: return( true );
      case 40006145: return( true );
      case 40002214: return( true );
      case 40006152: return( true );
      case 40000096: return( true );
      case 40006254: return( true );
      case 40006260: return( true );
      case 40006261: return( true );
      case 40006262: return( true );
      case 40006263: return( true );
      case 40006264: return( true );
      case 40006207: return( true );
      case 40006208: return( true );
      case 40006209: return( true );
      case 40006265: return( true );
      case 40006266: return( true );
      case 40000646: return( true );
      case 40006314: return( true );
      case 40006368: return( true );
      case 40007191: return( true );
      case 40007359: return( true );
      case 40007360: return( true );
      case 40007361: return( true );
      case 40007365: return( true );
      case 40007362: return( true );
      case 40007363: return( true );
      case 40007364: return( true );
      case 40007398: return( true );
      case 40007399: return( true );
      case 40007538: return( true );
   }
   return false;
}

