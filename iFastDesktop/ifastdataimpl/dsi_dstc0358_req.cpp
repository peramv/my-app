// BFDataImpl implementation file for DataSet DSTC0358.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0358_req.h"


// This function creates an instance of dsi_DSTC0358_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0358_REQ() { return new dsi_DSTC0358_REQ; }

dsi_DSTC0358_REQ::dsi_DSTC0358_REQ()
: BFDataImpl( 40005372 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyCode_( ifds::CompanyCode, &ifds::s_FldProp_CompanyCode )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, Cost_( ifds::Cost, &ifds::s_FldProp_Cost )
, TIS_( ifds::TIS, &ifds::s_FldProp_TIS )
, EUSDOverrideVersion_( ifds::EUSDOverrideVersion, &ifds::s_FldProp_EUSDOverrideVersion )
, CostType_( ifds::CostType, &ifds::s_FldProp_CostType )
, TISType_( ifds::TISType, &ifds::s_FldProp_TISType )
{
   cFields_ = 12;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0358_REQ::~dsi_DSTC0358_REQ()
{
}

BFDataImpl* dsi_DSTC0358_REQ::clone()
{
   dsi_DSTC0358_REQ* p = new dsi_DSTC0358_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyCode_ = CompanyCode_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->TransId_ = TransId_;
   p->Cost_ = Cost_;
   p->TIS_ = TIS_;
   p->EUSDOverrideVersion_ = EUSDOverrideVersion_;
   p->CostType_ = CostType_;
   p->TISType_ = TISType_;
   return(p);
}

BFDataField* dsi_DSTC0358_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40002245: return ( &CompanyCode_ ); break; // CompanyCode
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40005235: return ( &Cost_ ); break; // Cost
      case 40005234: return ( &TIS_ ); break; // TIS
      case 40005367: return ( &EUSDOverrideVersion_ ); break; // EUSDOverrideVersion
      case 40005366: return ( &CostType_ ); break; // CostType
      case 40005365: return ( &TISType_ ); break; // TISType
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0358_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0358_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0358_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 12 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyCode_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &TransId_; break;
            case 7: aFlds_[7] = &Cost_; break;
            case 8: aFlds_[8] = &TIS_; break;
            case 9: aFlds_[9] = &EUSDOverrideVersion_; break;
            case 10: aFlds_[10] = &CostType_; break;
            case 11: aFlds_[11] = &TISType_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0358_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0358_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0358_REQ::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0358_REQ::getDefinedByteLength( void ) const
{
   return( 507 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0358_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0358_REQ::fieldExists( id );
}

bool dsi_DSTC0358_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40002245: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40000063: return( true );
      case 40005235: return( true );
      case 40005234: return( true );
      case 40005367: return( true );
      case 40005366: return( true );
      case 40005365: return( true );
   }
   return false;
}

