// BFDataImpl implementation file for DataSet DSTC0208.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0208_req.h"


// This function creates an instance of dsi_DSTC0208_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0208_REQ() { return new dsi_DSTC0208_REQ; }

dsi_DSTC0208_REQ::dsi_DSTC0208_REQ()
: BFDataImpl( 40003188, 40003189 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, BatchName_( ifds::BatchName, &ifds::s_FldProp_BatchName )
, BatchTrace_( ifds::BatchTrace, &ifds::s_FldProp_BatchTrace )
, SearchType_( ifds::SearchType, &ifds::s_FldProp_SearchType )
, SettleAll_( ifds::SettleAll, &ifds::s_FldProp_SettleAll )
, WireOrdNum_( ifds::WireOrdNum, &ifds::s_FldProp_WireOrdNum )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, CompanyCode_( ifds::CompanyCode, &ifds::s_FldProp_CompanyCode )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, InterCode_( ifds::InterCode, &ifds::s_FldProp_InterCode )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, SettleCurrency_( ifds::SettleCurrency, &ifds::s_FldProp_SettleCurrency )
, TradeDate_( ifds::TradeDate, &ifds::s_FldProp_TradeDate )
, SettleDate_( ifds::SettleDate, &ifds::s_FldProp_SettleDate )
, StartDate_( ifds::StartDate, &ifds::s_FldProp_StartDate )
, EndDate_( ifds::EndDate, &ifds::s_FldProp_EndDate )
, VolSettleType_( ifds::VolSettleType, &ifds::s_FldProp_VolSettleType )
, SettleMethod_( ifds::SettleMethod, &ifds::s_FldProp_SettleMethod )
, NetSettlement_( ifds::NetSettlement, &ifds::s_FldProp_NetSettlement )
, ExternalIdType_( ifds::ExternalIdType, &ifds::s_FldProp_ExternalIdType )
, ExternalId_( ifds::ExternalId, &ifds::s_FldProp_ExternalId )
, RegAgentCode_( ifds::RegAgentCode, &ifds::s_FldProp_RegAgentCode )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
, ExcludeStopSettle_( ifds::ExcludeStopSettle, &ifds::s_FldProp_ExcludeStopSettle )
{
   cFields_ = 31;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0208_REQ::~dsi_DSTC0208_REQ()
{
}

BFDataImpl* dsi_DSTC0208_REQ::clone()
{
   dsi_DSTC0208_REQ* p = new dsi_DSTC0208_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->BatchName_ = BatchName_;
   p->BatchTrace_ = BatchTrace_;
   p->SearchType_ = SearchType_;
   p->SettleAll_ = SettleAll_;
   p->WireOrdNum_ = WireOrdNum_;
   p->TransNum_ = TransNum_;
   p->AccountNum_ = AccountNum_;
   p->TransType_ = TransType_;
   p->CompanyCode_ = CompanyCode_;
   p->BrokerCode_ = BrokerCode_;
   p->InterCode_ = InterCode_;
   p->FundCode_ = FundCode_;
   p->SettleCurrency_ = SettleCurrency_;
   p->TradeDate_ = TradeDate_;
   p->SettleDate_ = SettleDate_;
   p->StartDate_ = StartDate_;
   p->EndDate_ = EndDate_;
   p->VolSettleType_ = VolSettleType_;
   p->SettleMethod_ = SettleMethod_;
   p->NetSettlement_ = NetSettlement_;
   p->ExternalIdType_ = ExternalIdType_;
   p->ExternalId_ = ExternalId_;
   p->RegAgentCode_ = RegAgentCode_;
   p->RepeatCount_ = RepeatCount_;
   p->ExcludeStopSettle_ = ExcludeStopSettle_;
   return(p);
}

BFDataField* dsi_DSTC0208_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40000653: return ( &BatchName_ ); break; // BatchName
      case 40000654: return ( &BatchTrace_ ); break; // BatchTrace
      case 40002438: return ( &SearchType_ ); break; // SearchType
      case 40003108: return ( &SettleAll_ ); break; // SettleAll
      case 40000432: return ( &WireOrdNum_ ); break; // WireOrdNum
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40002245: return ( &CompanyCode_ ); break; // CompanyCode
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000186: return ( &InterCode_ ); break; // InterCode
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000455: return ( &SettleCurrency_ ); break; // SettleCurrency
      case 40000097: return ( &TradeDate_ ); break; // TradeDate
      case 40000348: return ( &SettleDate_ ); break; // SettleDate
      case 40000107: return ( &StartDate_ ); break; // StartDate
      case 40000108: return ( &EndDate_ ); break; // EndDate
      case 40001986: return ( &VolSettleType_ ); break; // VolSettleType
      case 40003109: return ( &SettleMethod_ ); break; // SettleMethod
      case 40003191: return ( &NetSettlement_ ); break; // NetSettlement
      case 40004662: return ( &ExternalIdType_ ); break; // ExternalIdType
      case 40002077: return ( &ExternalId_ ); break; // ExternalId
      case 40006872: return ( &RegAgentCode_ ); break; // RegAgentCode
      case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
      case 40007187: return ( &ExcludeStopSettle_ ); break; // ExcludeStopSettle
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0208_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0208_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0208_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 31 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &BatchName_; break;
            case 7: aFlds_[7] = &BatchTrace_; break;
            case 8: aFlds_[8] = &SearchType_; break;
            case 9: aFlds_[9] = &SettleAll_; break;
            case 10: aFlds_[10] = &WireOrdNum_; break;
            case 11: aFlds_[11] = &TransNum_; break;
            case 12: aFlds_[12] = &AccountNum_; break;
            case 13: aFlds_[13] = &TransType_; break;
            case 14: aFlds_[14] = &CompanyCode_; break;
            case 15: aFlds_[15] = &BrokerCode_; break;
            case 16: aFlds_[16] = &InterCode_; break;
            case 17: aFlds_[17] = &FundCode_; break;
            case 18: aFlds_[18] = &SettleCurrency_; break;
            case 19: aFlds_[19] = &TradeDate_; break;
            case 20: aFlds_[20] = &SettleDate_; break;
            case 21: aFlds_[21] = &StartDate_; break;
            case 22: aFlds_[22] = &EndDate_; break;
            case 23: aFlds_[23] = &VolSettleType_; break;
            case 24: aFlds_[24] = &SettleMethod_; break;
            case 25: aFlds_[25] = &NetSettlement_; break;
            case 26: aFlds_[26] = &ExternalIdType_; break;
            case 27: aFlds_[27] = &ExternalId_; break;
            case 28: aFlds_[28] = &RegAgentCode_; break;
            case 29: aFlds_[29] = &RepeatCount_; break;
            case 30: aFlds_[30] = &ExcludeStopSettle_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0208_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0208_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0208_REQ::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0208_REQ::getDefinedByteLength( void ) const
{
   return( 1385 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0208_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0208_REQ::fieldExists( id );
}

bool dsi_DSTC0208_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40000653: return( true );
      case 40000654: return( true );
      case 40002438: return( true );
      case 40003108: return( true );
      case 40000432: return( true );
      case 40000096: return( true );
      case 40000040: return( true );
      case 40000095: return( true );
      case 40002245: return( true );
      case 40000044: return( true );
      case 40000186: return( true );
      case 40000049: return( true );
      case 40000455: return( true );
      case 40000097: return( true );
      case 40000348: return( true );
      case 40000107: return( true );
      case 40000108: return( true );
      case 40001986: return( true );
      case 40003109: return( true );
      case 40003191: return( true );
      case 40004662: return( true );
      case 40002077: return( true );
      case 40006872: return( true );
      case 40000120: return( true );
      case 40007187: return ( true );
   }
   return false;
}

