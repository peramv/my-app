// BFDataImpl implementation file for DataSet DSTC0423.REQ
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Wednesday, November 18, 2015 05:00:04


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0423_req.h"


// This function creates an instance of dsi_DSTC0423_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0423_REQ() { return new dsi_DSTC0423_REQ; }

dsi_DSTC0423_REQ::dsi_DSTC0423_REQ()
: BFDataImpl( 40006457 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, InvHisInvestId_( ifds::InvHisInvestId, &ifds::s_FldProp_InvHisInvestId )
, Inquiry_( ifds::Inquiry, &ifds::s_FldProp_Inquiry )
, InputAcctNum_( ifds::InputAcctNum, &ifds::s_FldProp_InputAcctNum )
, InvestmentHistoryFund_( ifds::InvestmentHistoryFund, &ifds::s_FldProp_InvestmentHistoryFund )
, InvestmentHistoryClass_( ifds::InvestmentHistoryClass, &ifds::s_FldProp_InvestmentHistoryClass )
, InvHisIntRateType_( ifds::InvHisIntRateType, &ifds::s_FldProp_InvHisIntRateType )
, InvHisIntCalcMthd_( ifds::InvHisIntCalcMthd, &ifds::s_FldProp_InvHisIntCalcMthd )
, InvHisTerm_( ifds::InvHisTerm, &ifds::s_FldProp_InvHisTerm )
, InvHisIntDate_( ifds::InvHisIntDate, &ifds::s_FldProp_InvHisIntDate )
, InvHisTradeAmt_( ifds::InvHisTradeAmt, &ifds::s_FldProp_InvHisTradeAmt )
, InvHisAddlAmt_( ifds::InvHisAddlAmt, &ifds::s_FldProp_InvHisAddlAmt )
, CommRedRate_( ifds::CommRedRate, &ifds::s_FldProp_CommRedRate )
, ForcedRate_( ifds::ForcedRate, &ifds::s_FldProp_ForcedRate )
, ForcedRateAmt_( ifds::ForcedRateAmt, &ifds::s_FldProp_ForcedRateAmt )
{
    cFields_ = 21;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0423_REQ::~dsi_DSTC0423_REQ()
{
}

BFDataImpl* dsi_DSTC0423_REQ::clone()
{
    dsi_DSTC0423_REQ* p = new dsi_DSTC0423_REQ;
    p->SessionId_ = SessionId_;
    p->User_Id_ = User_Id_;
    p->LanguageCode_ = LanguageCode_;
    p->CompanyId_ = CompanyId_;
    p->Track_ = Track_;
    p->Activity_ = Activity_;
    p->NextKey_ = NextKey_;
    p->InvHisInvestId_ = InvHisInvestId_;
    p->Inquiry_ = Inquiry_;
    p->InputAcctNum_ = InputAcctNum_;
    p->InvestmentHistoryFund_ = InvestmentHistoryFund_;
    p->InvestmentHistoryClass_ = InvestmentHistoryClass_;
    p->InvHisIntRateType_ = InvHisIntRateType_;
    p->InvHisIntCalcMthd_ = InvHisIntCalcMthd_;
    p->InvHisTerm_ = InvHisTerm_;
    p->InvHisIntDate_ = InvHisIntDate_;
    p->InvHisTradeAmt_ = InvHisTradeAmt_;
    p->InvHisAddlAmt_ = InvHisAddlAmt_;
    p->CommRedRate_ = CommRedRate_;
    p->ForcedRate_ = ForcedRate_;
    p->ForcedRateAmt_ = ForcedRateAmt_;
    return(p);
}

BFDataField* dsi_DSTC0423_REQ::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000005: return ( &SessionId_ ); break; // SessionId
        case 40000002: return ( &User_Id_ ); break; // User_Id
        case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
        case 40000031: return ( &CompanyId_ ); break; // CompanyId
        case 40002065: return ( &Track_ ); break; // Track
        case 40002066: return ( &Activity_ ); break; // Activity
        case 40000029: return ( &NextKey_ ); break; // NextKey
        case 40006534: return ( &InvHisInvestId_ ); break; // InvHisInvestId
        case 40002082: return ( &Inquiry_ ); break; // Inquiry
        case 40000034: return ( &InputAcctNum_ ); break; // InputAcctNum
        case 40006446: return ( &InvestmentHistoryFund_ ); break; // InvestmentHistoryFund
        case 40006447: return ( &InvestmentHistoryClass_ ); break; // InvestmentHistoryClass
        case 40006472: return ( &InvHisIntRateType_ ); break; // InvHisIntRateType
        case 40006471: return ( &InvHisIntCalcMthd_ ); break; // InvHisIntCalcMthd
        case 40006473: return ( &InvHisTerm_ ); break; // InvHisTerm
        case 40006489: return ( &InvHisIntDate_ ); break; // InvHisIntDate
        case 40006535: return ( &InvHisTradeAmt_ ); break; // InvHisTradeAmt
        case 40006536: return ( &InvHisAddlAmt_ ); break; // InvHisAddlAmt
        case 40006507: return ( &CommRedRate_ ); break; // CommRedRate
        case 40006434: return ( &ForcedRate_ ); break; // ForcedRate
        case 40006538: return ( &ForcedRateAmt_ ); break; // ForcedRateAmt
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0423_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0423_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0423_REQ::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 21 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &SessionId_; break;
                case 1: aFlds_[1] = &User_Id_; break;
                case 2: aFlds_[2] = &LanguageCode_; break;
                case 3: aFlds_[3] = &CompanyId_; break;
                case 4: aFlds_[4] = &Track_; break;
                case 5: aFlds_[5] = &Activity_; break;
                case 6: aFlds_[6] = &NextKey_; break;
                case 7: aFlds_[7] = &InvHisInvestId_; break;
                case 8: aFlds_[8] = &Inquiry_; break;
                case 9: aFlds_[9] = &InputAcctNum_; break;
                case 10: aFlds_[10] = &InvestmentHistoryFund_; break;
                case 11: aFlds_[11] = &InvestmentHistoryClass_; break;
                case 12: aFlds_[12] = &InvHisIntRateType_; break;
                case 13: aFlds_[13] = &InvHisIntCalcMthd_; break;
                case 14: aFlds_[14] = &InvHisTerm_; break;
                case 15: aFlds_[15] = &InvHisIntDate_; break;
                case 16: aFlds_[16] = &InvHisTradeAmt_; break;
                case 17: aFlds_[17] = &InvHisAddlAmt_; break;
                case 18: aFlds_[18] = &CommRedRate_; break;
                case 19: aFlds_[19] = &ForcedRate_; break;
                case 20: aFlds_[20] = &ForcedRateAmt_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0423_REQ::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0423_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0423_REQ::getLargestDefinedField( void ) const
{
    return( 100 );
}

unsigned long dsi_DSTC0423_REQ::getDefinedByteLength( void ) const
{
    return( 683 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0423_REQ::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0423_REQ::fieldExists( id );
}

bool dsi_DSTC0423_REQ::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000005: return ( true );
        case 40000002: return ( true );
        case 40000030: return ( true );
        case 40000031: return ( true );
        case 40002065: return ( true );
        case 40002066: return ( true );
        case 40000029: return ( true );
        case 40006534: return ( true );
        case 40002082: return ( true );
        case 40000034: return ( true );
        case 40006446: return ( true );
        case 40006447: return ( true );
        case 40006472: return ( true );
        case 40006471: return ( true );
        case 40006473: return ( true );
        case 40006489: return ( true );
        case 40006535: return ( true );
        case 40006536: return ( true );
        case 40006507: return ( true );
        case 40006434: return ( true );
        case 40006538: return ( true );
    }
    return false;
}

