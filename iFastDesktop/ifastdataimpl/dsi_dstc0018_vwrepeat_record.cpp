// BFDataImpl implementation file for DataSet DSTC0018.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:58 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0018_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0018_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0018_VWRepeat_Record() { return new dsi_DSTC0018_VWRepeat_Record; }

dsi_DSTC0018_VWRepeat_Record::dsi_DSTC0018_VWRepeat_Record()
: BFDataImpl( 40000370 )
, rxAcctNum_( ifds::rxAcctNum, &ifds::s_FldProp_rxAcctNum )
, rxFundCode_( ifds::rxFundCode, &ifds::s_FldProp_rxFundCode )
, rxClassCode_( ifds::rxClassCode, &ifds::s_FldProp_rxClassCode )
, CertNumber_( ifds::CertNumber, &ifds::s_FldProp_CertNumber )
, XrefNumber_( ifds::XrefNumber, &ifds::s_FldProp_XrefNumber )
, StatusCode_( ifds::StatusCode, &ifds::s_FldProp_StatusCode )
, StatusDesc_( ifds::StatusDesc, &ifds::s_FldProp_StatusDesc )
, Units_( ifds::Units, &ifds::s_FldProp_Units )
, Issued_( ifds::Issued, &ifds::s_FldProp_Issued )
, IssueDate_( ifds::IssueDate, &ifds::s_FldProp_IssueDate )
, AcctUnits_( ifds::AcctUnits, &ifds::s_FldProp_AcctUnits )
, IssuedUnits_( ifds::IssuedUnits, &ifds::s_FldProp_IssuedUnits )
, UnIssuedUnits_( ifds::UnIssuedUnits, &ifds::s_FldProp_UnIssuedUnits )
, LastStatusCode_( ifds::LastStatusCode, &ifds::s_FldProp_LastStatusCode )
, LastStatusDesc_( ifds::LastStatusDesc, &ifds::s_FldProp_LastStatusDesc )
, Reported_( ifds::Reported, &ifds::s_FldProp_Reported )
, LastRptDate_( ifds::LastRptDate, &ifds::s_FldProp_LastRptDate )
, AddrCode_( ifds::AddrCode, &ifds::s_FldProp_AddrCode )
, AddrLine1_( ifds::AddrLine1, &ifds::s_FldProp_AddrLine1 )
, AddrLine2_( ifds::AddrLine2, &ifds::s_FldProp_AddrLine2 )
, AddrLine3_( ifds::AddrLine3, &ifds::s_FldProp_AddrLine3 )
, AddrLine4_( ifds::AddrLine4, &ifds::s_FldProp_AddrLine4 )
, AddrLine5_( ifds::AddrLine5, &ifds::s_FldProp_AddrLine5 )
, PostalCode_( ifds::PostalCode, &ifds::s_FldProp_PostalCode )
, Comments_( ifds::Comments, &ifds::s_FldProp_Comments )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, CountryCode_( ifds::CountryCode, &ifds::s_FldProp_CountryCode )
, CountryName_( ifds::CountryName, &ifds::s_FldProp_CountryName )
{
   cFields_ = 31;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0018_VWRepeat_Record::~dsi_DSTC0018_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0018_VWRepeat_Record::clone()
{
   dsi_DSTC0018_VWRepeat_Record* p = new dsi_DSTC0018_VWRepeat_Record;
   p->rxAcctNum_ = rxAcctNum_;
   p->rxFundCode_ = rxFundCode_;
   p->rxClassCode_ = rxClassCode_;
   p->CertNumber_ = CertNumber_;
   p->XrefNumber_ = XrefNumber_;
   p->StatusCode_ = StatusCode_;
   p->StatusDesc_ = StatusDesc_;
   p->Units_ = Units_;
   p->Issued_ = Issued_;
   p->IssueDate_ = IssueDate_;
   p->AcctUnits_ = AcctUnits_;
   p->IssuedUnits_ = IssuedUnits_;
   p->UnIssuedUnits_ = UnIssuedUnits_;
   p->LastStatusCode_ = LastStatusCode_;
   p->LastStatusDesc_ = LastStatusDesc_;
   p->Reported_ = Reported_;
   p->LastRptDate_ = LastRptDate_;
   p->AddrCode_ = AddrCode_;
   p->AddrLine1_ = AddrLine1_;
   p->AddrLine2_ = AddrLine2_;
   p->AddrLine3_ = AddrLine3_;
   p->AddrLine4_ = AddrLine4_;
   p->AddrLine5_ = AddrLine5_;
   p->PostalCode_ = PostalCode_;
   p->Comments_ = Comments_;
   p->Username_ = Username_;
   p->ProcessDate_ = ProcessDate_;
   p->ModUser_ = ModUser_;
   p->ModDate_ = ModDate_;
   p->CountryCode_ = CountryCode_;
   p->CountryName_ = CountryName_;
   return(p);
}

BFDataField* dsi_DSTC0018_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000371: return ( &rxAcctNum_ ); break; // rxAcctNum
      case 40000286: return ( &rxFundCode_ ); break; // rxFundCode
      case 40000287: return ( &rxClassCode_ ); break; // rxClassCode
      case 40000372: return ( &CertNumber_ ); break; // CertNumber
      case 40000373: return ( &XrefNumber_ ); break; // XrefNumber
      case 40000278: return ( &StatusCode_ ); break; // StatusCode
      case 40000374: return ( &StatusDesc_ ); break; // StatusDesc
      case 40000332: return ( &Units_ ); break; // Units
      case 40000375: return ( &Issued_ ); break; // Issued
      case 40000376: return ( &IssueDate_ ); break; // IssueDate
      case 40000377: return ( &AcctUnits_ ); break; // AcctUnits
      case 40000378: return ( &IssuedUnits_ ); break; // IssuedUnits
      case 40000379: return ( &UnIssuedUnits_ ); break; // UnIssuedUnits
      case 40000380: return ( &LastStatusCode_ ); break; // LastStatusCode
      case 40000381: return ( &LastStatusDesc_ ); break; // LastStatusDesc
      case 40000382: return ( &Reported_ ); break; // Reported
      case 40000383: return ( &LastRptDate_ ); break; // LastRptDate
      case 40000277: return ( &AddrCode_ ); break; // AddrCode
      case 40000280: return ( &AddrLine1_ ); break; // AddrLine1
      case 40000281: return ( &AddrLine2_ ); break; // AddrLine2
      case 40000282: return ( &AddrLine3_ ); break; // AddrLine3
      case 40000283: return ( &AddrLine4_ ); break; // AddrLine4
      case 40000284: return ( &AddrLine5_ ); break; // AddrLine5
      case 40000143: return ( &PostalCode_ ); break; // PostalCode
      case 40000384: return ( &Comments_ ); break; // Comments
      case 40000117: return ( &Username_ ); break; // Username
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000344: return ( &CountryCode_ ); break; // CountryCode
      case 40000544: return ( &CountryName_ ); break; // CountryName
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0018_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0018_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0018_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 31 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &rxAcctNum_; break;
            case 1: aFlds_[1] = &rxFundCode_; break;
            case 2: aFlds_[2] = &rxClassCode_; break;
            case 3: aFlds_[3] = &CertNumber_; break;
            case 4: aFlds_[4] = &XrefNumber_; break;
            case 5: aFlds_[5] = &StatusCode_; break;
            case 6: aFlds_[6] = &StatusDesc_; break;
            case 7: aFlds_[7] = &Units_; break;
            case 8: aFlds_[8] = &Issued_; break;
            case 9: aFlds_[9] = &IssueDate_; break;
            case 10: aFlds_[10] = &AcctUnits_; break;
            case 11: aFlds_[11] = &IssuedUnits_; break;
            case 12: aFlds_[12] = &UnIssuedUnits_; break;
            case 13: aFlds_[13] = &LastStatusCode_; break;
            case 14: aFlds_[14] = &LastStatusDesc_; break;
            case 15: aFlds_[15] = &Reported_; break;
            case 16: aFlds_[16] = &LastRptDate_; break;
            case 17: aFlds_[17] = &AddrCode_; break;
            case 18: aFlds_[18] = &AddrLine1_; break;
            case 19: aFlds_[19] = &AddrLine2_; break;
            case 20: aFlds_[20] = &AddrLine3_; break;
            case 21: aFlds_[21] = &AddrLine4_; break;
            case 22: aFlds_[22] = &AddrLine5_; break;
            case 23: aFlds_[23] = &PostalCode_; break;
            case 24: aFlds_[24] = &Comments_; break;
            case 25: aFlds_[25] = &Username_; break;
            case 26: aFlds_[26] = &ProcessDate_; break;
            case 27: aFlds_[27] = &ModUser_; break;
            case 28: aFlds_[28] = &ModDate_; break;
            case 29: aFlds_[29] = &CountryCode_; break;
            case 30: aFlds_[30] = &CountryName_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0018_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0018_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0018_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0018_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 1241 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0018_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0018_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0018_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000371: return( true );
      case 40000286: return( true );
      case 40000287: return( true );
      case 40000372: return( true );
      case 40000373: return( true );
      case 40000278: return( true );
      case 40000374: return( true );
      case 40000332: return( true );
      case 40000375: return( true );
      case 40000376: return( true );
      case 40000377: return( true );
      case 40000378: return( true );
      case 40000379: return( true );
      case 40000380: return( true );
      case 40000381: return( true );
      case 40000382: return( true );
      case 40000383: return( true );
      case 40000277: return( true );
      case 40000280: return( true );
      case 40000281: return( true );
      case 40000282: return( true );
      case 40000283: return( true );
      case 40000284: return( true );
      case 40000143: return( true );
      case 40000384: return( true );
      case 40000117: return( true );
      case 40000216: return( true );
      case 40000218: return( true );
      case 40000217: return( true );
      case 40000344: return( true );
      case 40000544: return( true );
   }
   return false;
}

