// BFDataImpl implementation file for DataSet DSTC0171.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0171_vw.h"


// This function creates an instance of dsi_DSTC0171_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0171_VW() { return new dsi_DSTC0171_VW; }

dsi_DSTC0171_VW::dsi_DSTC0171_VW()
: BFDataImpl( 40002761 )
, StartDate_( ifds::StartDate, &ifds::s_FldProp_StartDate )
, EndDate_( ifds::EndDate, &ifds::s_FldProp_EndDate )
, ASStatus_( ifds::ASStatus, &ifds::s_FldProp_ASStatus )
, MaturDate_( ifds::MaturDate, &ifds::s_FldProp_MaturDate )
, ASStatusDesc_( ifds::ASStatusDesc, &ifds::s_FldProp_ASStatusDesc )
{
   cFields_ = 5;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0171_VW::~dsi_DSTC0171_VW()
{
}

BFDataImpl* dsi_DSTC0171_VW::clone()
{
   dsi_DSTC0171_VW* p = new dsi_DSTC0171_VW;
   p->StartDate_ = StartDate_;
   p->EndDate_ = EndDate_;
   p->ASStatus_ = ASStatus_;
   p->MaturDate_ = MaturDate_;
   p->ASStatusDesc_ = ASStatusDesc_;
   return(p);
}

BFDataField* dsi_DSTC0171_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000107: return ( &StartDate_ ); break; // StartDate
      case 40000108: return ( &EndDate_ ); break; // EndDate
      case 40002755: return ( &ASStatus_ ); break; // ASStatus
      case 40002689: return ( &MaturDate_ ); break; // MaturDate
      case 40002756: return ( &ASStatusDesc_ ); break; // ASStatusDesc
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0171_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0171_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0171_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 5 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &StartDate_; break;
            case 1: aFlds_[1] = &EndDate_; break;
            case 2: aFlds_[2] = &ASStatus_; break;
            case 3: aFlds_[3] = &MaturDate_; break;
            case 4: aFlds_[4] = &ASStatusDesc_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0171_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0171_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0171_VW::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0171_VW::getDefinedByteLength( void ) const
{
   return( 150 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0171_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0171_VW::fieldExists( id );
}

bool dsi_DSTC0171_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000107: return( true );
      case 40000108: return( true );
      case 40002755: return( true );
      case 40002689: return( true );
      case 40002756: return( true );
   }
   return false;
}

