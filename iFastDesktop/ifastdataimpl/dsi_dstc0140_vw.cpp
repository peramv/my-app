// BFDataImpl implementation file for DataSet DSTC0140.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0140_vw.h"


// This function creates an instance of dsi_DSTC0140_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0140_VW() { return new dsi_DSTC0140_VW; }

dsi_DSTC0140_VW::dsi_DSTC0140_VW()
: BFDataImpl( 40001893, 40005184 )
, ContractType_( ifds::ContractType, &ifds::s_FldProp_ContractType )
, FutureContract_( ifds::FutureContract, &ifds::s_FldProp_FutureContract )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, CreateContract_( ifds::CreateContract, &ifds::s_FldProp_CreateContract )
, DepAllowed_( ifds::DepAllowed, &ifds::s_FldProp_DepAllowed )
, ResetExist_( ifds::ResetExist, &ifds::s_FldProp_ResetExist )
, TradeAllow_( ifds::TradeAllow, &ifds::s_FldProp_TradeAllow )
, BackdatedAllowed_( ifds::BackdatedAllowed, &ifds::s_FldProp_BackdatedAllowed )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
   cFields_ = 9;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0140_VW::~dsi_DSTC0140_VW()
{
}

BFDataImpl* dsi_DSTC0140_VW::clone()
{
   dsi_DSTC0140_VW* p = new dsi_DSTC0140_VW;
   p->ContractType_ = ContractType_;
   p->FutureContract_ = FutureContract_;
   p->EffectiveDate_ = EffectiveDate_;
   p->CreateContract_ = CreateContract_;
   p->DepAllowed_ = DepAllowed_;
   p->ResetExist_ = ResetExist_;
   p->TradeAllow_ = TradeAllow_;
   p->BackdatedAllowed_ = BackdatedAllowed_;
   p->RepeatCount_ = RepeatCount_;
   return(p);
}

BFDataField* dsi_DSTC0140_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40001385: return ( &ContractType_ ); break; // ContractType
      case 40001894: return ( &FutureContract_ ); break; // FutureContract
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40001895: return ( &CreateContract_ ); break; // CreateContract
      case 40001896: return ( &DepAllowed_ ); break; // DepAllowed
      case 40001897: return ( &ResetExist_ ); break; // ResetExist
      case 40005113: return ( &TradeAllow_ ); break; // TradeAllow
      case 40005452: return ( &BackdatedAllowed_ ); break; // BackdatedAllowed
      case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0140_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0140_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0140_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 9 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &ContractType_; break;
            case 1: aFlds_[1] = &FutureContract_; break;
            case 2: aFlds_[2] = &EffectiveDate_; break;
            case 3: aFlds_[3] = &CreateContract_; break;
            case 4: aFlds_[4] = &DepAllowed_; break;
            case 5: aFlds_[5] = &ResetExist_; break;
            case 6: aFlds_[6] = &TradeAllow_; break;
            case 7: aFlds_[7] = &BackdatedAllowed_; break;
            case 8: aFlds_[8] = &RepeatCount_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0140_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0140_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0140_VW::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0140_VW::getDefinedByteLength( void ) const
{
   return( 92 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0140_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0140_VW::fieldExists( id );
}

bool dsi_DSTC0140_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40001385: return( true );
      case 40001894: return( true );
      case 40000327: return( true );
      case 40001895: return( true );
      case 40001896: return( true );
      case 40001897: return( true );
      case 40005113: return( true );
      case 40005452: return( true );
      case 40000120: return( true );
   }
   return false;
}

