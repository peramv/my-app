// BFDataImpl implementation file for DataSet DSTC0127.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0127_vw.h"


// This function creates an instance of dsi_DSTC0127_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0127_VW() { return new dsi_DSTC0127_VW; }

dsi_DSTC0127_VW::dsi_DSTC0127_VW()
: BFDataImpl( 40001481 )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, DealTime_( ifds::DealTime, &ifds::s_FldProp_DealTime )
, CurrBusDate_( ifds::CurrBusDate, &ifds::s_FldProp_CurrBusDate )
, DealDate_( ifds::DealDate, &ifds::s_FldProp_DealDate )
, rxBatchName_( ifds::rxBatchName, &ifds::s_FldProp_rxBatchName )
, SameBatchName_( ifds::SameBatchName, &ifds::s_FldProp_SameBatchName )
, BatchOrdType_( ifds::BatchOrdType, &ifds::s_FldProp_BatchOrdType )
, BatchTrace_( ifds::BatchTrace, &ifds::s_FldProp_BatchTrace )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, PayType_( ifds::PayType, &ifds::s_FldProp_PayType )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, TradeDate_( ifds::TradeDate, &ifds::s_FldProp_TradeDate )
, SettleDate_( ifds::SettleDate, &ifds::s_FldProp_SettleDate )
, SuggestSettleInDate_( ifds::SuggestSettleInDate, &ifds::s_FldProp_SuggestSettleInDate )
{
   cFields_ = 14;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0127_VW::~dsi_DSTC0127_VW()
{
}

BFDataImpl* dsi_DSTC0127_VW::clone()
{
   dsi_DSTC0127_VW* p = new dsi_DSTC0127_VW;
   p->TransNum_ = TransNum_;
   p->DealTime_ = DealTime_;
   p->CurrBusDate_ = CurrBusDate_;
   p->DealDate_ = DealDate_;
   p->rxBatchName_ = rxBatchName_;
   p->SameBatchName_ = SameBatchName_;
   p->BatchOrdType_ = BatchOrdType_;
   p->BatchTrace_ = BatchTrace_;
   p->EffectiveDate_ = EffectiveDate_;
   p->PayType_ = PayType_;
   p->TransType_ = TransType_;
   p->TradeDate_ = TradeDate_;
   p->SettleDate_ = SettleDate_;
   p->SuggestSettleInDate_ = SuggestSettleInDate_;
   return(p);
}

BFDataField* dsi_DSTC0127_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40000452: return ( &DealTime_ ); break; // DealTime
      case 40000896: return ( &CurrBusDate_ ); break; // CurrBusDate
      case 40000451: return ( &DealDate_ ); break; // DealDate
      case 40001800: return ( &rxBatchName_ ); break; // rxBatchName
      case 40001801: return ( &SameBatchName_ ); break; // SameBatchName
      case 40002634: return ( &BatchOrdType_ ); break; // BatchOrdType
      case 40000654: return ( &BatchTrace_ ); break; // BatchTrace
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000242: return ( &PayType_ ); break; // PayType
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40000097: return ( &TradeDate_ ); break; // TradeDate
      case 40000348: return ( &SettleDate_ ); break; // SettleDate
      case 40005573: return ( &SuggestSettleInDate_ ); break; // SuggestSettleInDate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0127_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0127_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0127_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 14 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TransNum_; break;
            case 1: aFlds_[1] = &DealTime_; break;
            case 2: aFlds_[2] = &CurrBusDate_; break;
            case 3: aFlds_[3] = &DealDate_; break;
            case 4: aFlds_[4] = &rxBatchName_; break;
            case 5: aFlds_[5] = &SameBatchName_; break;
            case 6: aFlds_[6] = &BatchOrdType_; break;
            case 7: aFlds_[7] = &BatchTrace_; break;
            case 8: aFlds_[8] = &EffectiveDate_; break;
            case 9: aFlds_[9] = &PayType_; break;
            case 10: aFlds_[10] = &TransType_; break;
            case 11: aFlds_[11] = &TradeDate_; break;
            case 12: aFlds_[12] = &SettleDate_; break;
            case 13: aFlds_[13] = &SuggestSettleInDate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0127_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0127_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0127_VW::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0127_VW::getDefinedByteLength( void ) const
{
   return( 397 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0127_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0127_VW::fieldExists( id );
}

bool dsi_DSTC0127_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000096: return( true );
      case 40000452: return( true );
      case 40000896: return( true );
      case 40000451: return( true );
      case 40001800: return( true );
      case 40001801: return( true );
      case 40002634: return( true );
      case 40000654: return( true );
      case 40000327: return( true );
      case 40000242: return( true );
      case 40000095: return( true );
      case 40000097: return( true );
      case 40000348: return( true );
      case 40005573: return( true );
   }
   return false;
}

