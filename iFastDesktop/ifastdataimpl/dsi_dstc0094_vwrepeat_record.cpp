// BFDataImpl implementation file for DataSet DSTC0094.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0094_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0094_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0094_VWRepeat_Record() { return new dsi_DSTC0094_VWRepeat_Record; }

dsi_DSTC0094_VWRepeat_Record::dsi_DSTC0094_VWRepeat_Record()
: BFDataImpl( 40001608 )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, FundPercent_( ifds::FundPercent, &ifds::s_FldProp_FundPercent )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, UnitValue_( ifds::UnitValue, &ifds::s_FldProp_UnitValue )
, FundUnits_( ifds::FundUnits, &ifds::s_FldProp_FundUnits )
, FundAmt_( ifds::FundAmt, &ifds::s_FldProp_FundAmt )
, TaxTypeDesc_( ifds::TaxTypeDesc, &ifds::s_FldProp_TaxTypeDesc )
, FundProdPercent_( ifds::FundProdPercent, &ifds::s_FldProp_FundProdPercent )
, FundProdUnits_( ifds::FundProdUnits, &ifds::s_FldProp_FundProdUnits )
, FundProdAmt_( ifds::FundProdAmt, &ifds::s_FldProp_FundProdAmt )
, ValueAsAt_( ifds::ValueAsAt, &ifds::s_FldProp_ValueAsAt )
, TaxType_( ifds::TaxType, &ifds::s_FldProp_TaxType )
, CurrTotal_( ifds::CurrTotal, &ifds::s_FldProp_CurrTotal )
, FundGroup_( ifds::FundGroup, &ifds::s_FldProp_FundGroup )
, FundUnsettUnits_( ifds::FundUnsettUnits, &ifds::s_FldProp_FundUnsettUnits )
, FundUnsettAmt_( ifds::FundUnsettAmt, &ifds::s_FldProp_FundUnsettAmt )
, FundProdUnsettUnits_( ifds::FundProdUnsettUnits, &ifds::s_FldProp_FundProdUnsettUnits )
, FundProdUnsettAmt_( ifds::FundProdUnsettAmt, &ifds::s_FldProp_FundProdUnsettAmt )
, FundTotalUnits_( ifds::FundTotalUnits, &ifds::s_FldProp_FundTotalUnits )
, FundTotalAmt_( ifds::FundTotalAmt, &ifds::s_FldProp_FundTotalAmt )
, FundProdTotalUnits_( ifds::FundProdTotalUnits, &ifds::s_FldProp_FundProdTotalUnits )
, FundProdTotalAmt_( ifds::FundProdTotalAmt, &ifds::s_FldProp_FundProdTotalAmt )
, CurrSettValue_( ifds::CurrSettValue, &ifds::s_FldProp_CurrSettValue )
, CurrUnsettValue_( ifds::CurrUnsettValue, &ifds::s_FldProp_CurrUnsettValue )
, LastNR_( ifds::LastNR, &ifds::s_FldProp_LastNR )
, NextNR_( ifds::NextNR, &ifds::s_FldProp_NextNR )
, PendingTradeTotal_( ifds::PendingTradeTotal, &ifds::s_FldProp_PendingTradeTotal )
{
   cFields_ = 28;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0094_VWRepeat_Record::~dsi_DSTC0094_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0094_VWRepeat_Record::clone()
{
   dsi_DSTC0094_VWRepeat_Record* p = new dsi_DSTC0094_VWRepeat_Record;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->FundPercent_ = FundPercent_;
   p->Currency_ = Currency_;
   p->UnitValue_ = UnitValue_;
   p->FundUnits_ = FundUnits_;
   p->FundAmt_ = FundAmt_;
   p->TaxTypeDesc_ = TaxTypeDesc_;
   p->FundProdPercent_ = FundProdPercent_;
   p->FundProdUnits_ = FundProdUnits_;
   p->FundProdAmt_ = FundProdAmt_;
   p->ValueAsAt_ = ValueAsAt_;
   p->TaxType_ = TaxType_;
   p->CurrTotal_ = CurrTotal_;
   p->FundGroup_ = FundGroup_;
   p->FundUnsettUnits_ = FundUnsettUnits_;
   p->FundUnsettAmt_ = FundUnsettAmt_;
   p->FundProdUnsettUnits_ = FundProdUnsettUnits_;
   p->FundProdUnsettAmt_ = FundProdUnsettAmt_;
   p->FundTotalUnits_ = FundTotalUnits_;
   p->FundTotalAmt_ = FundTotalAmt_;
   p->FundProdTotalUnits_ = FundProdTotalUnits_;
   p->FundProdTotalAmt_ = FundProdTotalAmt_;
   p->CurrSettValue_ = CurrSettValue_;
   p->CurrUnsettValue_ = CurrUnsettValue_;
   p->LastNR_ = LastNR_;
   p->NextNR_ = NextNR_;
   p->PendingTradeTotal_ = PendingTradeTotal_;
   return(p);
}

BFDataField* dsi_DSTC0094_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40001610: return ( &FundPercent_ ); break; // FundPercent
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40000492: return ( &UnitValue_ ); break; // UnitValue
      case 40001611: return ( &FundUnits_ ); break; // FundUnits
      case 40001612: return ( &FundAmt_ ); break; // FundAmt
      case 40000135: return ( &TaxTypeDesc_ ); break; // TaxTypeDesc
      case 40001613: return ( &FundProdPercent_ ); break; // FundProdPercent
      case 40001614: return ( &FundProdUnits_ ); break; // FundProdUnits
      case 40001615: return ( &FundProdAmt_ ); break; // FundProdAmt
      case 40000489: return ( &ValueAsAt_ ); break; // ValueAsAt
      case 40000134: return ( &TaxType_ ); break; // TaxType
      case 40001815: return ( &CurrTotal_ ); break; // CurrTotal
      case 40002031: return ( &FundGroup_ ); break; // FundGroup
      case 40005145: return ( &FundUnsettUnits_ ); break; // FundUnsettUnits
      case 40005146: return ( &FundUnsettAmt_ ); break; // FundUnsettAmt
      case 40005147: return ( &FundProdUnsettUnits_ ); break; // FundProdUnsettUnits
      case 40005148: return ( &FundProdUnsettAmt_ ); break; // FundProdUnsettAmt
      case 40005149: return ( &FundTotalUnits_ ); break; // FundTotalUnits
      case 40005150: return ( &FundTotalAmt_ ); break; // FundTotalAmt
      case 40005152: return ( &FundProdTotalUnits_ ); break; // FundProdTotalUnits
      case 40005153: return ( &FundProdTotalAmt_ ); break; // FundProdTotalAmt
      case 40005154: return ( &CurrSettValue_ ); break; // CurrSettValue
      case 40005155: return ( &CurrUnsettValue_ ); break; // CurrUnsettValue
      case 40005157: return ( &LastNR_ ); break; // LastNR
      case 40005159: return ( &NextNR_ ); break; // NextNR
      case 40005160: return ( &PendingTradeTotal_ ); break; // PendingTradeTotal
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0094_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0094_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0094_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 28 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FundCode_; break;
            case 1: aFlds_[1] = &ClassCode_; break;
            case 2: aFlds_[2] = &FundPercent_; break;
            case 3: aFlds_[3] = &Currency_; break;
            case 4: aFlds_[4] = &UnitValue_; break;
            case 5: aFlds_[5] = &FundUnits_; break;
            case 6: aFlds_[6] = &FundAmt_; break;
            case 7: aFlds_[7] = &TaxTypeDesc_; break;
            case 8: aFlds_[8] = &FundProdPercent_; break;
            case 9: aFlds_[9] = &FundProdUnits_; break;
            case 10: aFlds_[10] = &FundProdAmt_; break;
            case 11: aFlds_[11] = &ValueAsAt_; break;
            case 12: aFlds_[12] = &TaxType_; break;
            case 13: aFlds_[13] = &CurrTotal_; break;
            case 14: aFlds_[14] = &FundGroup_; break;
            case 15: aFlds_[15] = &FundUnsettUnits_; break;
            case 16: aFlds_[16] = &FundUnsettAmt_; break;
            case 17: aFlds_[17] = &FundProdUnsettUnits_; break;
            case 18: aFlds_[18] = &FundProdUnsettAmt_; break;
            case 19: aFlds_[19] = &FundTotalUnits_; break;
            case 20: aFlds_[20] = &FundTotalAmt_; break;
            case 21: aFlds_[21] = &FundProdTotalUnits_; break;
            case 22: aFlds_[22] = &FundProdTotalAmt_; break;
            case 23: aFlds_[23] = &CurrSettValue_; break;
            case 24: aFlds_[24] = &CurrUnsettValue_; break;
            case 25: aFlds_[25] = &LastNR_; break;
            case 26: aFlds_[26] = &NextNR_; break;
            case 27: aFlds_[27] = &PendingTradeTotal_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0094_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0094_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0094_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0094_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 1401 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0094_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0094_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0094_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000049: return( true );
      case 40000050: return( true );
      case 40001610: return( true );
      case 40000180: return( true );
      case 40000492: return( true );
      case 40001611: return( true );
      case 40001612: return( true );
      case 40000135: return( true );
      case 40001613: return( true );
      case 40001614: return( true );
      case 40001615: return( true );
      case 40000489: return( true );
      case 40000134: return( true );
      case 40001815: return( true );
      case 40002031: return( true );
      case 40005145: return( true );
      case 40005146: return( true );
      case 40005147: return( true );
      case 40005148: return( true );
      case 40005149: return( true );
      case 40005150: return( true );
      case 40005152: return( true );
      case 40005153: return( true );
      case 40005154: return( true );
      case 40005155: return( true );
      case 40005157: return( true );
      case 40005159: return( true );
      case 40005160: return( true );
   }
   return false;
}

