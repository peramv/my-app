// BFDataImpl implementation file for DataSet DSTC0084.REQ
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Monday, August 08, 2016 02:18:53


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0084_req.h"


// This function creates an instance of dsi_DSTC0084_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0084_REQ() { return new dsi_DSTC0084_REQ; }

dsi_DSTC0084_REQ::dsi_DSTC0084_REQ()
: BFDataImpl( 40001030, 40001031 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, PACSWPId_( ifds::PACSWPId, &ifds::s_FldProp_PACSWPId )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, SalesRepCode_( ifds::SalesRepCode, &ifds::s_FldProp_SalesRepCode )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, AmountType_( ifds::AmountType, &ifds::s_FldProp_AmountType )
, GrossOrNet_( ifds::GrossOrNet, &ifds::s_FldProp_GrossOrNet )
, Fee_( ifds::Fee, &ifds::s_FldProp_Fee )
, FlatPercent_( ifds::FlatPercent, &ifds::s_FldProp_FlatPercent )
, FeeCurrency_( ifds::FeeCurrency, &ifds::s_FldProp_FeeCurrency )
, AdminFeeAmt_( ifds::AdminFeeAmt, &ifds::s_FldProp_AdminFeeAmt )
, AdminFeeCurr_( ifds::AdminFeeCurr, &ifds::s_FldProp_AdminFeeCurr )
, LastBankType_( ifds::LastBankType, &ifds::s_FldProp_LastBankType )
, BankIdValue_( ifds::BankIdValue, &ifds::s_FldProp_BankIdValue )
, SwiftCode_( ifds::SwiftCode, &ifds::s_FldProp_SwiftCode )
, RefNumber_( ifds::RefNumber, &ifds::s_FldProp_RefNumber )
, TransitNo_( ifds::TransitNo, &ifds::s_FldProp_TransitNo )
, BankAcctNum_( ifds::BankAcctNum, &ifds::s_FldProp_BankAcctNum )
, BankAcctName_( ifds::BankAcctName, &ifds::s_FldProp_BankAcctName )
, SourceOfBankAcct_( ifds::SourceOfBankAcct, &ifds::s_FldProp_SourceOfBankAcct )
, BankAcctCurrency_( ifds::BankAcctCurrency, &ifds::s_FldProp_BankAcctCurrency )
, BankAcctType_( ifds::BankAcctType, &ifds::s_FldProp_BankAcctType )
, SrcOfFund_( ifds::SrcOfFund, &ifds::s_FldProp_SrcOfFund )
, January_( ifds::January, &ifds::s_FldProp_January )
, February_( ifds::February, &ifds::s_FldProp_February )
, March_( ifds::March, &ifds::s_FldProp_March )
, April_( ifds::April, &ifds::s_FldProp_April )
, May_( ifds::May, &ifds::s_FldProp_May )
, June_( ifds::June, &ifds::s_FldProp_June )
, July_( ifds::July, &ifds::s_FldProp_July )
, August_( ifds::August, &ifds::s_FldProp_August )
, September_( ifds::September, &ifds::s_FldProp_September )
, October_( ifds::October, &ifds::s_FldProp_October )
, November_( ifds::November, &ifds::s_FldProp_November )
, December_( ifds::December, &ifds::s_FldProp_December )
, EndOfMonth_( ifds::EndOfMonth, &ifds::s_FldProp_EndOfMonth )
, DayOfWeek_( ifds::DayOfWeek, &ifds::s_FldProp_DayOfWeek )
, AddrCode_( ifds::AddrCode, &ifds::s_FldProp_AddrCode )
, StatusCode_( ifds::StatusCode, &ifds::s_FldProp_StatusCode )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, SetAsDefault_( ifds::SetAsDefault, &ifds::s_FldProp_SetAsDefault )
, BankDetlVer_( ifds::BankDetlVer, &ifds::s_FldProp_BankDetlVer )
, InitFactor_( ifds::InitFactor, &ifds::s_FldProp_InitFactor )
, PlanTerm_( ifds::PlanTerm, &ifds::s_FldProp_PlanTerm )
, PaymentAmt_( ifds::PaymentAmt, &ifds::s_FldProp_PaymentAmt )
, LastPayment_( ifds::LastPayment, &ifds::s_FldProp_LastPayment )
, Commission_( ifds::Commission, &ifds::s_FldProp_Commission )
, AdminFeeAmtClan_( ifds::AdminFeeAmtClan, &ifds::s_FldProp_AdminFeeAmtClan )
, AccountTo_( ifds::AccountTo, &ifds::s_FldProp_AccountTo )
, FundToCode_( ifds::FundToCode, &ifds::s_FldProp_FundToCode )
, ClassToCode_( ifds::ClassToCode, &ifds::s_FldProp_ClassToCode )
, BELFee_( ifds::BELFee, &ifds::s_FldProp_BELFee )
, Frequency_( ifds::Frequency, &ifds::s_FldProp_Frequency )
, TransferType_( ifds::TransferType, &ifds::s_FldProp_TransferType )
, PayReason1_( ifds::PayReason1, &ifds::s_FldProp_PayReason1 )
, EntityType_( ifds::EntityType, &ifds::s_FldProp_EntityType )
, EntityTypeSeq_( ifds::EntityTypeSeq, &ifds::s_FldProp_EntityTypeSeq )
, BatchName_( ifds::BatchName, &ifds::s_FldProp_BatchName )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, BankIdType_( ifds::BankIdType, &ifds::s_FldProp_BankIdType )
, ACHProcessor_( ifds::ACHProcessor, &ifds::s_FldProp_ACHProcessor )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, BankId_( ifds::BankId, &ifds::s_FldProp_BankId )
, PayType_( ifds::PayType, &ifds::s_FldProp_PayType )
, AutoSplitComm_( ifds::AutoSplitComm, &ifds::s_FldProp_AutoSplitComm )
, FFC_( ifds::FFC, &ifds::s_FldProp_FFC )
, FFC1_( ifds::FFC1, &ifds::s_FldProp_FFC1 )
, BankAddr1_( ifds::BankAddr1, &ifds::s_FldProp_BankAddr1 )
, BankAddr2_( ifds::BankAddr2, &ifds::s_FldProp_BankAddr2 )
, BankAddr3_( ifds::BankAddr3, &ifds::s_FldProp_BankAddr3 )
, BankAddr4_( ifds::BankAddr4, &ifds::s_FldProp_BankAddr4 )
, BankAddr5_( ifds::BankAddr5, &ifds::s_FldProp_BankAddr5 )
, BankContact_( ifds::BankContact, &ifds::s_FldProp_BankContact )
, BankCountry_( ifds::BankCountry, &ifds::s_FldProp_BankCountry )
, BankPostal_( ifds::BankPostal, &ifds::s_FldProp_BankPostal )
, InstName_( ifds::InstName, &ifds::s_FldProp_InstName )
, VUBPayOption_( ifds::VUBPayOption, &ifds::s_FldProp_VUBPayOption )
, PlanCode_( ifds::PlanCode, &ifds::s_FldProp_PlanCode )
, ExchInFee_( ifds::ExchInFee, &ifds::s_FldProp_ExchInFee )
, ExchInFlatPercent_( ifds::ExchInFlatPercent, &ifds::s_FldProp_ExchInFlatPercent )
, AnnualFeeDate_( ifds::AnnualFeeDate, &ifds::s_FldProp_AnnualFeeDate )
, AnnualMaint_( ifds::AnnualMaint, &ifds::s_FldProp_AnnualMaint )
, InitialAmt_( ifds::InitialAmt, &ifds::s_FldProp_InitialAmt )
, VUBExpectedAmt_( ifds::VUBExpectedAmt, &ifds::s_FldProp_VUBExpectedAmt )
, ExchOutFee_( ifds::ExchOutFee, &ifds::s_FldProp_ExchOutFee )
, ExchOutFlatPrcnt_( ifds::ExchOutFlatPrcnt, &ifds::s_FldProp_ExchOutFlatPrcnt )
, PayMethod_( ifds::PayMethod, &ifds::s_FldProp_PayMethod )
, FedTaxPUDOverride_( ifds::FedTaxPUDOverride, &ifds::s_FldProp_FedTaxPUDOverride )
, FedRate_( ifds::FedRate, &ifds::s_FldProp_FedRate )
, ProvTaxPUDOverride_( ifds::ProvTaxPUDOverride, &ifds::s_FldProp_ProvTaxPUDOverride )
, ProvRate_( ifds::ProvRate, &ifds::s_FldProp_ProvRate )
, PayReason2_( ifds::PayReason2, &ifds::s_FldProp_PayReason2 )
, BusinessArea_( ifds::BusinessArea, &ifds::s_FldProp_BusinessArea )
, WorkType_( ifds::WorkType, &ifds::s_FldProp_WorkType )
, AWDObjectId_( ifds::AWDObjectId, &ifds::s_FldProp_AWDObjectId )
, AWDCrda_( ifds::AWDCrda, &ifds::s_FldProp_AWDCrda )
, VerifyStat_( ifds::VerifyStat, &ifds::s_FldProp_VerifyStat )
, StopReasonPAC_( ifds::StopReasonPAC, &ifds::s_FldProp_StopReasonPAC )
, NonFinConfirms_( ifds::NonFinConfirms, &ifds::s_FldProp_NonFinConfirms )
, RDRAdvice_( ifds::RDRAdvice, &ifds::s_FldProp_RDRAdvice )
, EventReceiptDate_( ifds::EventReceiptDate, &ifds::s_FldProp_EventReceiptDate )
, EventReceiptTime_( ifds::EventReceiptTime, &ifds::s_FldProp_EventReceiptTime )
, SourceOfTrade_( ifds::SourceOfTrade, &ifds::s_FldProp_SourceOfTrade )
, ChannelOfTrade_( ifds::ChannelOfTrade, &ifds::s_FldProp_ChannelOfTrade )
, Platform_( ifds::Platform, &ifds::s_FldProp_Platform )
, PSDAdvice_( ifds::PSDAdvice, &ifds::s_FldProp_PSDAdvice )
, SignatureDate_( ifds::SignatureDate, &ifds::s_FldProp_SignatureDate )
, AmtTypeOvrd_( ifds::AmtTypeOvrd, &ifds::s_FldProp_AmtTypeOvrd )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
    cFields_ = 120;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0084_REQ::~dsi_DSTC0084_REQ()
{
}

BFDataImpl* dsi_DSTC0084_REQ::clone()
{
    dsi_DSTC0084_REQ* p = new dsi_DSTC0084_REQ;
    p->SessionId_ = SessionId_;
    p->User_Id_ = User_Id_;
    p->LanguageCode_ = LanguageCode_;
    p->CompanyId_ = CompanyId_;
    p->RunMode_ = RunMode_;
    p->AccountNum_ = AccountNum_;
    p->TransType_ = TransType_;
    p->PACSWPId_ = PACSWPId_;
    p->BrokerCode_ = BrokerCode_;
    p->BranchCode_ = BranchCode_;
    p->SalesRepCode_ = SalesRepCode_;
    p->Amount_ = Amount_;
    p->AmountType_ = AmountType_;
    p->GrossOrNet_ = GrossOrNet_;
    p->Fee_ = Fee_;
    p->FlatPercent_ = FlatPercent_;
    p->FeeCurrency_ = FeeCurrency_;
    p->AdminFeeAmt_ = AdminFeeAmt_;
    p->AdminFeeCurr_ = AdminFeeCurr_;
    p->LastBankType_ = LastBankType_;
    p->BankIdValue_ = BankIdValue_;
    p->SwiftCode_ = SwiftCode_;
    p->RefNumber_ = RefNumber_;
    p->TransitNo_ = TransitNo_;
    p->BankAcctNum_ = BankAcctNum_;
    p->BankAcctName_ = BankAcctName_;
    p->SourceOfBankAcct_ = SourceOfBankAcct_;
    p->BankAcctCurrency_ = BankAcctCurrency_;
    p->BankAcctType_ = BankAcctType_;
    p->SrcOfFund_ = SrcOfFund_;
    p->January_ = January_;
    p->February_ = February_;
    p->March_ = March_;
    p->April_ = April_;
    p->May_ = May_;
    p->June_ = June_;
    p->July_ = July_;
    p->August_ = August_;
    p->September_ = September_;
    p->October_ = October_;
    p->November_ = November_;
    p->December_ = December_;
    p->EndOfMonth_ = EndOfMonth_;
    p->DayOfWeek_ = DayOfWeek_;
    p->AddrCode_ = AddrCode_;
    p->StatusCode_ = StatusCode_;
    p->EffectiveDate_ = EffectiveDate_;
    p->StopDate_ = StopDate_;
    p->FundCode_ = FundCode_;
    p->ClassCode_ = ClassCode_;
    p->SetAsDefault_ = SetAsDefault_;
    p->BankDetlVer_ = BankDetlVer_;
    p->InitFactor_ = InitFactor_;
    p->PlanTerm_ = PlanTerm_;
    p->PaymentAmt_ = PaymentAmt_;
    p->LastPayment_ = LastPayment_;
    p->Commission_ = Commission_;
    p->AdminFeeAmtClan_ = AdminFeeAmtClan_;
    p->AccountTo_ = AccountTo_;
    p->FundToCode_ = FundToCode_;
    p->ClassToCode_ = ClassToCode_;
    p->BELFee_ = BELFee_;
    p->Frequency_ = Frequency_;
    p->TransferType_ = TransferType_;
    p->PayReason1_ = PayReason1_;
    p->EntityType_ = EntityType_;
    p->EntityTypeSeq_ = EntityTypeSeq_;
    p->BatchName_ = BatchName_;
    p->Track_ = Track_;
    p->Activity_ = Activity_;
    p->BankIdType_ = BankIdType_;
    p->ACHProcessor_ = ACHProcessor_;
    p->TransNum_ = TransNum_;
    p->BankId_ = BankId_;
    p->PayType_ = PayType_;
    p->AutoSplitComm_ = AutoSplitComm_;
    p->FFC_ = FFC_;
    p->FFC1_ = FFC1_;
    p->BankAddr1_ = BankAddr1_;
    p->BankAddr2_ = BankAddr2_;
    p->BankAddr3_ = BankAddr3_;
    p->BankAddr4_ = BankAddr4_;
    p->BankAddr5_ = BankAddr5_;
    p->BankContact_ = BankContact_;
    p->BankCountry_ = BankCountry_;
    p->BankPostal_ = BankPostal_;
    p->InstName_ = InstName_;
    p->VUBPayOption_ = VUBPayOption_;
    p->PlanCode_ = PlanCode_;
    p->ExchInFee_ = ExchInFee_;
    p->ExchInFlatPercent_ = ExchInFlatPercent_;
    p->AnnualFeeDate_ = AnnualFeeDate_;
    p->AnnualMaint_ = AnnualMaint_;
    p->InitialAmt_ = InitialAmt_;
    p->VUBExpectedAmt_ = VUBExpectedAmt_;
    p->ExchOutFee_ = ExchOutFee_;
    p->ExchOutFlatPrcnt_ = ExchOutFlatPrcnt_;
    p->PayMethod_ = PayMethod_;
    p->FedTaxPUDOverride_ = FedTaxPUDOverride_;
    p->FedRate_ = FedRate_;
    p->ProvTaxPUDOverride_ = ProvTaxPUDOverride_;
    p->ProvRate_ = ProvRate_;
    p->PayReason2_ = PayReason2_;
    p->BusinessArea_ = BusinessArea_;
    p->WorkType_ = WorkType_;
    p->AWDObjectId_ = AWDObjectId_;
    p->AWDCrda_ = AWDCrda_;
    p->VerifyStat_ = VerifyStat_;
    p->StopReasonPAC_ = StopReasonPAC_;
    p->NonFinConfirms_ = NonFinConfirms_;
    p->RDRAdvice_ = RDRAdvice_;
    p->EventReceiptDate_ = EventReceiptDate_;
    p->EventReceiptTime_ = EventReceiptTime_;
    p->SourceOfTrade_ = SourceOfTrade_;
    p->ChannelOfTrade_ = ChannelOfTrade_;
    p->Platform_ = Platform_;
    p->PSDAdvice_ = PSDAdvice_;
    p->SignatureDate_ = SignatureDate_;
    p->AmtTypeOvrd_ = AmtTypeOvrd_;
    p->RepeatCount_ = RepeatCount_;
    return(p);
}

BFDataField* dsi_DSTC0084_REQ::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000005: return ( &SessionId_ ); break; // SessionId
        case 40000002: return ( &User_Id_ ); break; // User_Id
        case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
        case 40000031: return ( &CompanyId_ ); break; // CompanyId
        case 40000990: return ( &RunMode_ ); break; // RunMode
        case 40000040: return ( &AccountNum_ ); break; // AccountNum
        case 40000095: return ( &TransType_ ); break; // TransType
        case 40000290: return ( &PACSWPId_ ); break; // PACSWPId
        case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
        case 40000045: return ( &BranchCode_ ); break; // BranchCode
        case 40000046: return ( &SalesRepCode_ ); break; // SalesRepCode
        case 40000231: return ( &Amount_ ); break; // Amount
        case 40000232: return ( &AmountType_ ); break; // AmountType
        case 40000234: return ( &GrossOrNet_ ); break; // GrossOrNet
        case 40000235: return ( &Fee_ ); break; // Fee
        case 40000658: return ( &FlatPercent_ ); break; // FlatPercent
        case 40000237: return ( &FeeCurrency_ ); break; // FeeCurrency
        case 40000239: return ( &AdminFeeAmt_ ); break; // AdminFeeAmt
        case 40000240: return ( &AdminFeeCurr_ ); break; // AdminFeeCurr
        case 40002188: return ( &LastBankType_ ); break; // LastBankType
        case 40002123: return ( &BankIdValue_ ); break; // BankIdValue
        case 40000245: return ( &SwiftCode_ ); break; // SwiftCode
        case 40000246: return ( &RefNumber_ ); break; // RefNumber
        case 40000247: return ( &TransitNo_ ); break; // TransitNo
        case 40000248: return ( &BankAcctNum_ ); break; // BankAcctNum
        case 40000249: return ( &BankAcctName_ ); break; // BankAcctName
        case 40000250: return ( &SourceOfBankAcct_ ); break; // SourceOfBankAcct
        case 40000251: return ( &BankAcctCurrency_ ); break; // BankAcctCurrency
        case 40000253: return ( &BankAcctType_ ); break; // BankAcctType
        case 40000255: return ( &SrcOfFund_ ); break; // SrcOfFund
        case 40000257: return ( &January_ ); break; // January
        case 40000258: return ( &February_ ); break; // February
        case 40000259: return ( &March_ ); break; // March
        case 40000260: return ( &April_ ); break; // April
        case 40000261: return ( &May_ ); break; // May
        case 40000262: return ( &June_ ); break; // June
        case 40000263: return ( &July_ ); break; // July
        case 40000264: return ( &August_ ); break; // August
        case 40000265: return ( &September_ ); break; // September
        case 40000266: return ( &October_ ); break; // October
        case 40000267: return ( &November_ ); break; // November
        case 40000268: return ( &December_ ); break; // December
        case 40000272: return ( &EndOfMonth_ ); break; // EndOfMonth
        case 40000275: return ( &DayOfWeek_ ); break; // DayOfWeek
        case 40000277: return ( &AddrCode_ ); break; // AddrCode
        case 40000278: return ( &StatusCode_ ); break; // StatusCode
        case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
        case 40000279: return ( &StopDate_ ); break; // StopDate
        case 40000049: return ( &FundCode_ ); break; // FundCode
        case 40000050: return ( &ClassCode_ ); break; // ClassCode
        case 40001036: return ( &SetAsDefault_ ); break; // SetAsDefault
        case 40000913: return ( &BankDetlVer_ ); break; // BankDetlVer
        case 40001037: return ( &InitFactor_ ); break; // InitFactor
        case 40001038: return ( &PlanTerm_ ); break; // PlanTerm
        case 40001039: return ( &PaymentAmt_ ); break; // PaymentAmt
        case 40001040: return ( &LastPayment_ ); break; // LastPayment
        case 40000441: return ( &Commission_ ); break; // Commission
        case 40001041: return ( &AdminFeeAmtClan_ ); break; // AdminFeeAmtClan
        case 40000646: return ( &AccountTo_ ); break; // AccountTo
        case 40000340: return ( &FundToCode_ ); break; // FundToCode
        case 40000341: return ( &ClassToCode_ ); break; // ClassToCode
        case 40000659: return ( &BELFee_ ); break; // BELFee
        case 40000730: return ( &Frequency_ ); break; // Frequency
        case 40000832: return ( &TransferType_ ); break; // TransferType
        case 40000642: return ( &PayReason1_ ); break; // PayReason1
        case 40000604: return ( &EntityType_ ); break; // EntityType
        case 40001103: return ( &EntityTypeSeq_ ); break; // EntityTypeSeq
        case 40000653: return ( &BatchName_ ); break; // BatchName
        case 40002065: return ( &Track_ ); break; // Track
        case 40002066: return ( &Activity_ ); break; // Activity
        case 40002119: return ( &BankIdType_ ); break; // BankIdType
        case 40002150: return ( &ACHProcessor_ ); break; // ACHProcessor
        case 40000096: return ( &TransNum_ ); break; // TransNum
        case 40002283: return ( &BankId_ ); break; // BankId
        case 40000242: return ( &PayType_ ); break; // PayType
        case 40002509: return ( &AutoSplitComm_ ); break; // AutoSplitComm
        case 40002148: return ( &FFC_ ); break; // FFC
        case 40002166: return ( &FFC1_ ); break; // FFC1
        case 40002167: return ( &BankAddr1_ ); break; // BankAddr1
        case 40002168: return ( &BankAddr2_ ); break; // BankAddr2
        case 40002169: return ( &BankAddr3_ ); break; // BankAddr3
        case 40002170: return ( &BankAddr4_ ); break; // BankAddr4
        case 40002171: return ( &BankAddr5_ ); break; // BankAddr5
        case 40002146: return ( &BankContact_ ); break; // BankContact
        case 40002144: return ( &BankCountry_ ); break; // BankCountry
        case 40002142: return ( &BankPostal_ ); break; // BankPostal
        case 40000285: return ( &InstName_ ); break; // InstName
        case 40002587: return ( &VUBPayOption_ ); break; // VUBPayOption
        case 40002544: return ( &PlanCode_ ); break; // PlanCode
        case 40002585: return ( &ExchInFee_ ); break; // ExchInFee
        case 40002586: return ( &ExchInFlatPercent_ ); break; // ExchInFlatPercent
        case 40002597: return ( &AnnualFeeDate_ ); break; // AnnualFeeDate
        case 40002596: return ( &AnnualMaint_ ); break; // AnnualMaint
        case 40002536: return ( &InitialAmt_ ); break; // InitialAmt
        case 40002539: return ( &VUBExpectedAmt_ ); break; // VUBExpectedAmt
        case 40003788: return ( &ExchOutFee_ ); break; // ExchOutFee
        case 40003789: return ( &ExchOutFlatPrcnt_ ); break; // ExchOutFlatPrcnt
        case 40003095: return ( &PayMethod_ ); break; // PayMethod
        case 40004753: return ( &FedTaxPUDOverride_ ); break; // FedTaxPUDOverride
        case 40000844: return ( &FedRate_ ); break; // FedRate
        case 40004754: return ( &ProvTaxPUDOverride_ ); break; // ProvTaxPUDOverride
        case 40000846: return ( &ProvRate_ ); break; // ProvRate
        case 40000643: return ( &PayReason2_ ); break; // PayReason2
        case 40001211: return ( &BusinessArea_ ); break; // BusinessArea
        case 40001212: return ( &WorkType_ ); break; // WorkType
        case 40005715: return ( &AWDObjectId_ ); break; // AWDObjectId
        case 40005718: return ( &AWDCrda_ ); break; // AWDCrda
        case 40006046: return ( &VerifyStat_ ); break; // VerifyStat
        case 40006921: return ( &StopReasonPAC_ ); break; // StopReasonPAC
        case 40006909: return ( &NonFinConfirms_ ); break; // NonFinConfirms
        case 40006963: return ( &RDRAdvice_ ); break; // RDRAdvice
        case 40007029: return ( &EventReceiptDate_ ); break; // EventReceiptDate
        case 40007030: return ( &EventReceiptTime_ ); break; // EventReceiptTime
        case 40007194: return ( &SourceOfTrade_ ); break; // SourceOfTrade
        case 40007195: return ( &ChannelOfTrade_ ); break; // ChannelOfTrade
        case 40007196: return ( &Platform_ ); break; // Platform
        case 40007020: return ( &PSDAdvice_ ); break; // PSDAdvice
        case 40007230: return ( &SignatureDate_ ); break; // SignatureDate
        case 40007646: return ( &AmtTypeOvrd_ ); break; // AmtTypeOvrd
        case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0084_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0084_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0084_REQ::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 120 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &SessionId_; break;
                case 1: aFlds_[1] = &User_Id_; break;
                case 2: aFlds_[2] = &LanguageCode_; break;
                case 3: aFlds_[3] = &CompanyId_; break;
                case 4: aFlds_[4] = &RunMode_; break;
                case 5: aFlds_[5] = &AccountNum_; break;
                case 6: aFlds_[6] = &TransType_; break;
                case 7: aFlds_[7] = &PACSWPId_; break;
                case 8: aFlds_[8] = &BrokerCode_; break;
                case 9: aFlds_[9] = &BranchCode_; break;
                case 10: aFlds_[10] = &SalesRepCode_; break;
                case 11: aFlds_[11] = &Amount_; break;
                case 12: aFlds_[12] = &AmountType_; break;
                case 13: aFlds_[13] = &GrossOrNet_; break;
                case 14: aFlds_[14] = &Fee_; break;
                case 15: aFlds_[15] = &FlatPercent_; break;
                case 16: aFlds_[16] = &FeeCurrency_; break;
                case 17: aFlds_[17] = &AdminFeeAmt_; break;
                case 18: aFlds_[18] = &AdminFeeCurr_; break;
                case 19: aFlds_[19] = &LastBankType_; break;
                case 20: aFlds_[20] = &BankIdValue_; break;
                case 21: aFlds_[21] = &SwiftCode_; break;
                case 22: aFlds_[22] = &RefNumber_; break;
                case 23: aFlds_[23] = &TransitNo_; break;
                case 24: aFlds_[24] = &BankAcctNum_; break;
                case 25: aFlds_[25] = &BankAcctName_; break;
                case 26: aFlds_[26] = &SourceOfBankAcct_; break;
                case 27: aFlds_[27] = &BankAcctCurrency_; break;
                case 28: aFlds_[28] = &BankAcctType_; break;
                case 29: aFlds_[29] = &SrcOfFund_; break;
                case 30: aFlds_[30] = &January_; break;
                case 31: aFlds_[31] = &February_; break;
                case 32: aFlds_[32] = &March_; break;
                case 33: aFlds_[33] = &April_; break;
                case 34: aFlds_[34] = &May_; break;
                case 35: aFlds_[35] = &June_; break;
                case 36: aFlds_[36] = &July_; break;
                case 37: aFlds_[37] = &August_; break;
                case 38: aFlds_[38] = &September_; break;
                case 39: aFlds_[39] = &October_; break;
                case 40: aFlds_[40] = &November_; break;
                case 41: aFlds_[41] = &December_; break;
                case 42: aFlds_[42] = &EndOfMonth_; break;
                case 43: aFlds_[43] = &DayOfWeek_; break;
                case 44: aFlds_[44] = &AddrCode_; break;
                case 45: aFlds_[45] = &StatusCode_; break;
                case 46: aFlds_[46] = &EffectiveDate_; break;
                case 47: aFlds_[47] = &StopDate_; break;
                case 48: aFlds_[48] = &FundCode_; break;
                case 49: aFlds_[49] = &ClassCode_; break;
                case 50: aFlds_[50] = &SetAsDefault_; break;
                case 51: aFlds_[51] = &BankDetlVer_; break;
                case 52: aFlds_[52] = &InitFactor_; break;
                case 53: aFlds_[53] = &PlanTerm_; break;
                case 54: aFlds_[54] = &PaymentAmt_; break;
                case 55: aFlds_[55] = &LastPayment_; break;
                case 56: aFlds_[56] = &Commission_; break;
                case 57: aFlds_[57] = &AdminFeeAmtClan_; break;
                case 58: aFlds_[58] = &AccountTo_; break;
                case 59: aFlds_[59] = &FundToCode_; break;
                case 60: aFlds_[60] = &ClassToCode_; break;
                case 61: aFlds_[61] = &BELFee_; break;
                case 62: aFlds_[62] = &Frequency_; break;
                case 63: aFlds_[63] = &TransferType_; break;
                case 64: aFlds_[64] = &PayReason1_; break;
                case 65: aFlds_[65] = &EntityType_; break;
                case 66: aFlds_[66] = &EntityTypeSeq_; break;
                case 67: aFlds_[67] = &BatchName_; break;
                case 68: aFlds_[68] = &Track_; break;
                case 69: aFlds_[69] = &Activity_; break;
                case 70: aFlds_[70] = &BankIdType_; break;
                case 71: aFlds_[71] = &ACHProcessor_; break;
                case 72: aFlds_[72] = &TransNum_; break;
                case 73: aFlds_[73] = &BankId_; break;
                case 74: aFlds_[74] = &PayType_; break;
                case 75: aFlds_[75] = &AutoSplitComm_; break;
                case 76: aFlds_[76] = &FFC_; break;
                case 77: aFlds_[77] = &FFC1_; break;
                case 78: aFlds_[78] = &BankAddr1_; break;
                case 79: aFlds_[79] = &BankAddr2_; break;
                case 80: aFlds_[80] = &BankAddr3_; break;
                case 81: aFlds_[81] = &BankAddr4_; break;
                case 82: aFlds_[82] = &BankAddr5_; break;
                case 83: aFlds_[83] = &BankContact_; break;
                case 84: aFlds_[84] = &BankCountry_; break;
                case 85: aFlds_[85] = &BankPostal_; break;
                case 86: aFlds_[86] = &InstName_; break;
                case 87: aFlds_[87] = &VUBPayOption_; break;
                case 88: aFlds_[88] = &PlanCode_; break;
                case 89: aFlds_[89] = &ExchInFee_; break;
                case 90: aFlds_[90] = &ExchInFlatPercent_; break;
                case 91: aFlds_[91] = &AnnualFeeDate_; break;
                case 92: aFlds_[92] = &AnnualMaint_; break;
                case 93: aFlds_[93] = &InitialAmt_; break;
                case 94: aFlds_[94] = &VUBExpectedAmt_; break;
                case 95: aFlds_[95] = &ExchOutFee_; break;
                case 96: aFlds_[96] = &ExchOutFlatPrcnt_; break;
                case 97: aFlds_[97] = &PayMethod_; break;
                case 98: aFlds_[98] = &FedTaxPUDOverride_; break;
                case 99: aFlds_[99] = &FedRate_; break;
                case 100: aFlds_[100] = &ProvTaxPUDOverride_; break;
                case 101: aFlds_[101] = &ProvRate_; break;
                case 102: aFlds_[102] = &PayReason2_; break;
                case 103: aFlds_[103] = &BusinessArea_; break;
                case 104: aFlds_[104] = &WorkType_; break;
                case 105: aFlds_[105] = &AWDObjectId_; break;
                case 106: aFlds_[106] = &AWDCrda_; break;
                case 107: aFlds_[107] = &VerifyStat_; break;
                case 108: aFlds_[108] = &StopReasonPAC_; break;
                case 109: aFlds_[109] = &NonFinConfirms_; break;
                case 110: aFlds_[110] = &RDRAdvice_; break;
                case 111: aFlds_[111] = &EventReceiptDate_; break;
                case 112: aFlds_[112] = &EventReceiptTime_; break;
                case 113: aFlds_[113] = &SourceOfTrade_; break;
                case 114: aFlds_[114] = &ChannelOfTrade_; break;
                case 115: aFlds_[115] = &Platform_; break;
                case 116: aFlds_[116] = &PSDAdvice_; break;
                case 117: aFlds_[117] = &SignatureDate_; break;
                case 118: aFlds_[118] = &AmtTypeOvrd_; break;
                case 119: aFlds_[119] = &RepeatCount_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0084_REQ::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0084_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0084_REQ::getLargestDefinedField( void ) const
{
    return( 200 );
}

unsigned long dsi_DSTC0084_REQ::getDefinedByteLength( void ) const
{
    return( 4097 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0084_REQ::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0084_REQ::fieldExists( id );
}

bool dsi_DSTC0084_REQ::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000005: return ( true );
        case 40000002: return ( true );
        case 40000030: return ( true );
        case 40000031: return ( true );
        case 40000990: return ( true );
        case 40000040: return ( true );
        case 40000095: return ( true );
        case 40000290: return ( true );
        case 40000044: return ( true );
        case 40000045: return ( true );
        case 40000046: return ( true );
        case 40000231: return ( true );
        case 40000232: return ( true );
        case 40000234: return ( true );
        case 40000235: return ( true );
        case 40000658: return ( true );
        case 40000237: return ( true );
        case 40000239: return ( true );
        case 40000240: return ( true );
        case 40002188: return ( true );
        case 40002123: return ( true );
        case 40000245: return ( true );
        case 40000246: return ( true );
        case 40000247: return ( true );
        case 40000248: return ( true );
        case 40000249: return ( true );
        case 40000250: return ( true );
        case 40000251: return ( true );
        case 40000253: return ( true );
        case 40000255: return ( true );
        case 40000257: return ( true );
        case 40000258: return ( true );
        case 40000259: return ( true );
        case 40000260: return ( true );
        case 40000261: return ( true );
        case 40000262: return ( true );
        case 40000263: return ( true );
        case 40000264: return ( true );
        case 40000265: return ( true );
        case 40000266: return ( true );
        case 40000267: return ( true );
        case 40000268: return ( true );
        case 40000272: return ( true );
        case 40000275: return ( true );
        case 40000277: return ( true );
        case 40000278: return ( true );
        case 40000327: return ( true );
        case 40000279: return ( true );
        case 40000049: return ( true );
        case 40000050: return ( true );
        case 40001036: return ( true );
        case 40000913: return ( true );
        case 40001037: return ( true );
        case 40001038: return ( true );
        case 40001039: return ( true );
        case 40001040: return ( true );
        case 40000441: return ( true );
        case 40001041: return ( true );
        case 40000646: return ( true );
        case 40000340: return ( true );
        case 40000341: return ( true );
        case 40000659: return ( true );
        case 40000730: return ( true );
        case 40000832: return ( true );
        case 40000642: return ( true );
        case 40000604: return ( true );
        case 40001103: return ( true );
        case 40000653: return ( true );
        case 40002065: return ( true );
        case 40002066: return ( true );
        case 40002119: return ( true );
        case 40002150: return ( true );
        case 40000096: return ( true );
        case 40002283: return ( true );
        case 40000242: return ( true );
        case 40002509: return ( true );
        case 40002148: return ( true );
        case 40002166: return ( true );
        case 40002167: return ( true );
        case 40002168: return ( true );
        case 40002169: return ( true );
        case 40002170: return ( true );
        case 40002171: return ( true );
        case 40002146: return ( true );
        case 40002144: return ( true );
        case 40002142: return ( true );
        case 40000285: return ( true );
        case 40002587: return ( true );
        case 40002544: return ( true );
        case 40002585: return ( true );
        case 40002586: return ( true );
        case 40002597: return ( true );
        case 40002596: return ( true );
        case 40002536: return ( true );
        case 40002539: return ( true );
        case 40003788: return ( true );
        case 40003789: return ( true );
        case 40003095: return ( true );
        case 40004753: return ( true );
        case 40000844: return ( true );
        case 40004754: return ( true );
        case 40000846: return ( true );
        case 40000643: return ( true );
        case 40001211: return ( true );
        case 40001212: return ( true );
        case 40005715: return ( true );
        case 40005718: return ( true );
        case 40006046: return ( true );
        case 40006921: return ( true );
        case 40006909: return ( true );
        case 40006963: return ( true );
        case 40007029: return ( true );
        case 40007030: return ( true );
        case 40007194: return ( true );
        case 40007195: return ( true );
        case 40007196: return ( true );
        case 40007020: return ( true );
        case 40007230: return ( true );
        case 40007646: return ( true );
        case 40000120: return ( true );
    }
    return false;
}

