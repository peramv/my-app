// BFDataImpl implementation file for DataSet DSTC0406.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0406_vw.h"


// This function creates an instance of dsi_DSTC0406_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0406_VW() { return new dsi_DSTC0406_VW; }

dsi_DSTC0406_VW::dsi_DSTC0406_VW()
: BFDataImpl( 40006231, 40006232 )
, MoreAvailable_( ifds::MoreAvailable, &ifds::s_FldProp_MoreAvailable )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, FromPlanNum_( ifds::FromPlanNum, &ifds::s_FldProp_FromPlanNum )
, FromContractId_( ifds::FromContractId, &ifds::s_FldProp_FromContractId )
, ToPlanNum_( ifds::ToPlanNum, &ifds::s_FldProp_ToPlanNum )
, ToContractId_( ifds::ToContractId, &ifds::s_FldProp_ToContractId )
, InceptionDate_( ifds::InceptionDate, &ifds::s_FldProp_InceptionDate )
, TerminationDate_( ifds::TerminationDate, &ifds::s_FldProp_TerminationDate )
, NEQ1_( ifds::NEQ1, &ifds::s_FldProp_NEQ1 )
, NEQ2_( ifds::NEQ2, &ifds::s_FldProp_NEQ2 )
, AcctLvlOverride_( ifds::AcctLvlOverride, &ifds::s_FldProp_AcctLvlOverride )
, RESPLetter_( ifds::RESPLetter, &ifds::s_FldProp_RESPLetter )
, RESPTransStat_( ifds::RESPTransStat, &ifds::s_FldProp_RESPTransStat )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
   cFields_ = 14;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0406_VW::~dsi_DSTC0406_VW()
{
}

BFDataImpl* dsi_DSTC0406_VW::clone()
{
   dsi_DSTC0406_VW* p = new dsi_DSTC0406_VW;
   p->MoreAvailable_ = MoreAvailable_;
   p->NextKey_ = NextKey_;
   p->FromPlanNum_ = FromPlanNum_;
   p->FromContractId_ = FromContractId_;
   p->ToPlanNum_ = ToPlanNum_;
   p->ToContractId_ = ToContractId_;
   p->InceptionDate_ = InceptionDate_;
   p->TerminationDate_ = TerminationDate_;
   p->NEQ1_ = NEQ1_;
   p->NEQ2_ = NEQ2_;
   p->AcctLvlOverride_ = AcctLvlOverride_;
   p->RESPLetter_ = RESPLetter_;
   p->RESPTransStat_ = RESPTransStat_;
   p->RepeatCount_ = RepeatCount_;
   return(p);
}

BFDataField* dsi_DSTC0406_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000126: return ( &MoreAvailable_ ); break; // MoreAvailable
      case 40000029: return ( &NextKey_ ); break; // NextKey
      case 40006181: return ( &FromPlanNum_ ); break; // FromPlanNum
      case 40006183: return ( &FromContractId_ ); break; // FromContractId
      case 40006182: return ( &ToPlanNum_ ); break; // ToPlanNum
      case 40006184: return ( &ToContractId_ ); break; // ToContractId
      case 40006185: return ( &InceptionDate_ ); break; // InceptionDate
      case 40006186: return ( &TerminationDate_ ); break; // TerminationDate
      case 40006187: return ( &NEQ1_ ); break; // NEQ1
      case 40006188: return ( &NEQ2_ ); break; // NEQ2
      case 40006215: return ( &AcctLvlOverride_ ); break; // AcctLvlOverride
      case 40001519: return ( &RESPLetter_ ); break; // RESPLetter
      case 40001521: return ( &RESPTransStat_ ); break; // RESPTransStat
      case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0406_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0406_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0406_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 14 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &MoreAvailable_; break;
            case 1: aFlds_[1] = &NextKey_; break;
            case 2: aFlds_[2] = &FromPlanNum_; break;
            case 3: aFlds_[3] = &FromContractId_; break;
            case 4: aFlds_[4] = &ToPlanNum_; break;
            case 5: aFlds_[5] = &ToContractId_; break;
            case 6: aFlds_[6] = &InceptionDate_; break;
            case 7: aFlds_[7] = &TerminationDate_; break;
            case 8: aFlds_[8] = &NEQ1_; break;
            case 9: aFlds_[9] = &NEQ2_; break;
            case 10: aFlds_[10] = &AcctLvlOverride_; break;
            case 11: aFlds_[11] = &RESPLetter_; break;
            case 12: aFlds_[12] = &RESPTransStat_; break;
            case 13: aFlds_[13] = &RepeatCount_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0406_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0406_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0406_VW::getLargestDefinedField( void ) const
{
   return( 100 );
}

unsigned long dsi_DSTC0406_VW::getDefinedByteLength( void ) const
{
   return( 499 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0406_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0406_VW::fieldExists( id );
}

bool dsi_DSTC0406_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000126: return( true );
      case 40000029: return( true );
      case 40006181: return( true );
      case 40006183: return( true );
      case 40006182: return( true );
      case 40006184: return( true );
      case 40006185: return( true );
      case 40006186: return( true );
      case 40006187: return( true );
      case 40006188: return( true );
      case 40006215: return( true );
      case 40001519: return( true );
      case 40001521: return( true );
      case 40000120: return( true );
   }
   return false;
}

