// BFDataImpl implementation file for DataSet DSTC0273.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0273_req.h"


// This function creates an instance of dsi_DSTC0273_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0273_REQ() { return new dsi_DSTC0273_REQ; }

dsi_DSTC0273_REQ::dsi_DSTC0273_REQ()
: BFDataImpl( 40004250, 40004251 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyCode_( ifds::CompanyCode, &ifds::s_FldProp_CompanyCode )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, ExtTransferType_( ifds::ExtTransferType, &ifds::s_FldProp_ExtTransferType )
, BankIdType_( ifds::BankIdType, &ifds::s_FldProp_BankIdType )
, ExtInstCode_( ifds::ExtInstCode, &ifds::s_FldProp_ExtInstCode )
, ExtTransitCode_( ifds::ExtTransitCode, &ifds::s_FldProp_ExtTransitCode )
, PlanNumber_( ifds::PlanNumber, &ifds::s_FldProp_PlanNumber )
, Version_( ifds::Version, &ifds::s_FldProp_Version )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, AcctExtXferRId_( ifds::AcctExtXferRId, &ifds::s_FldProp_AcctExtXferRId )
, InstCategory_( ifds::InstCategory, &ifds::s_FldProp_InstCategory )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
   cFields_ = 17;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0273_REQ::~dsi_DSTC0273_REQ()
{
}

BFDataImpl* dsi_DSTC0273_REQ::clone()
{
   dsi_DSTC0273_REQ* p = new dsi_DSTC0273_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyCode_ = CompanyCode_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->AccountNum_ = AccountNum_;
   p->ExtTransferType_ = ExtTransferType_;
   p->BankIdType_ = BankIdType_;
   p->ExtInstCode_ = ExtInstCode_;
   p->ExtTransitCode_ = ExtTransitCode_;
   p->PlanNumber_ = PlanNumber_;
   p->Version_ = Version_;
   p->RunMode_ = RunMode_;
   p->AcctExtXferRId_ = AcctExtXferRId_;
   p->InstCategory_ = InstCategory_;
   p->RepeatCount_ = RepeatCount_;
   return(p);
}

BFDataField* dsi_DSTC0273_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40002245: return ( &CompanyCode_ ); break; // CompanyCode
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40004186: return ( &ExtTransferType_ ); break; // ExtTransferType
      case 40002119: return ( &BankIdType_ ); break; // BankIdType
      case 40004233: return ( &ExtInstCode_ ); break; // ExtInstCode
      case 40004234: return ( &ExtTransitCode_ ); break; // ExtTransitCode
      case 40004232: return ( &PlanNumber_ ); break; // PlanNumber
      case 40003739: return ( &Version_ ); break; // Version
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40004235: return ( &AcctExtXferRId_ ); break; // AcctExtXferRId
      case 40004213: return ( &InstCategory_ ); break; // InstCategory
      case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0273_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0273_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0273_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 17 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyCode_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &AccountNum_; break;
            case 7: aFlds_[7] = &ExtTransferType_; break;
            case 8: aFlds_[8] = &BankIdType_; break;
            case 9: aFlds_[9] = &ExtInstCode_; break;
            case 10: aFlds_[10] = &ExtTransitCode_; break;
            case 11: aFlds_[11] = &PlanNumber_; break;
            case 12: aFlds_[12] = &Version_; break;
            case 13: aFlds_[13] = &RunMode_; break;
            case 14: aFlds_[14] = &AcctExtXferRId_; break;
            case 15: aFlds_[15] = &InstCategory_; break;
            case 16: aFlds_[16] = &RepeatCount_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0273_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0273_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0273_REQ::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0273_REQ::getDefinedByteLength( void ) const
{
   return( 778 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0273_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0273_REQ::fieldExists( id );
}

bool dsi_DSTC0273_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40002245: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40000040: return( true );
      case 40004186: return( true );
      case 40002119: return( true );
      case 40004233: return( true );
      case 40004234: return( true );
      case 40004232: return( true );
      case 40003739: return( true );
      case 40000990: return( true );
      case 40004235: return( true );
      case 40004213: return( true );
      case 40000120: return( true );
   }
   return false;
}

