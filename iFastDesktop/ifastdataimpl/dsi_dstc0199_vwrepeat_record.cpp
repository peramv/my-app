// BFDataImpl implementation file for DataSet DSTC0199.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0199_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0199_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0199_VWRepeat_Record() { return new dsi_DSTC0199_VWRepeat_Record; }

dsi_DSTC0199_VWRepeat_Record::dsi_DSTC0199_VWRepeat_Record()
: BFDataImpl( 40002980 )
, RecType_( ifds::RecType, &ifds::s_FldProp_RecType )
, rxFundCode_( ifds::rxFundCode, &ifds::s_FldProp_rxFundCode )
, rxClassCode_( ifds::rxClassCode, &ifds::s_FldProp_rxClassCode )
, AsofDate_( ifds::AsofDate, &ifds::s_FldProp_AsofDate )
, EligUnits_( ifds::EligUnits, &ifds::s_FldProp_EligUnits )
, Rate_( ifds::Rate, &ifds::s_FldProp_Rate )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, AmtPaid_( ifds::AmtPaid, &ifds::s_FldProp_AmtPaid )
, AccumTotal_( ifds::AccumTotal, &ifds::s_FldProp_AccumTotal )
, GSTAmt_( ifds::GSTAmt, &ifds::s_FldProp_GSTAmt )
, NRTaxAmt_( ifds::NRTaxAmt, &ifds::s_FldProp_NRTaxAmt )
, OtherTaxAmt_( ifds::OtherTaxAmt, &ifds::s_FldProp_OtherTaxAmt )
, PaidInclude_( ifds::PaidInclude, &ifds::s_FldProp_PaidInclude )
, GSTPaid_( ifds::GSTPaid, &ifds::s_FldProp_GSTPaid )
, GSTOutstanding_( ifds::GSTOutstanding, &ifds::s_FldProp_GSTOutstanding )
, NRPaid_( ifds::NRPaid, &ifds::s_FldProp_NRPaid )
, NROutstanding_( ifds::NROutstanding, &ifds::s_FldProp_NROutstanding )
{
   cFields_ = 17;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0199_VWRepeat_Record::~dsi_DSTC0199_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0199_VWRepeat_Record::clone()
{
   dsi_DSTC0199_VWRepeat_Record* p = new dsi_DSTC0199_VWRepeat_Record;
   p->RecType_ = RecType_;
   p->rxFundCode_ = rxFundCode_;
   p->rxClassCode_ = rxClassCode_;
   p->AsofDate_ = AsofDate_;
   p->EligUnits_ = EligUnits_;
   p->Rate_ = Rate_;
   p->Amount_ = Amount_;
   p->AmtPaid_ = AmtPaid_;
   p->AccumTotal_ = AccumTotal_;
   p->GSTAmt_ = GSTAmt_;
   p->NRTaxAmt_ = NRTaxAmt_;
   p->OtherTaxAmt_ = OtherTaxAmt_;
   p->PaidInclude_ = PaidInclude_;
   p->GSTPaid_ = GSTPaid_;
   p->GSTOutstanding_ = GSTOutstanding_;
   p->NRPaid_ = NRPaid_;
   p->NROutstanding_ = NROutstanding_;
   return(p);
}

BFDataField* dsi_DSTC0199_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000411: return ( &RecType_ ); break; // RecType
      case 40000286: return ( &rxFundCode_ ); break; // rxFundCode
      case 40000287: return ( &rxClassCode_ ); break; // rxClassCode
      case 40000061: return ( &AsofDate_ ); break; // AsofDate
      case 40000740: return ( &EligUnits_ ); break; // EligUnits
      case 40002919: return ( &Rate_ ); break; // Rate
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40002981: return ( &AmtPaid_ ); break; // AmtPaid
      case 40000744: return ( &AccumTotal_ ); break; // AccumTotal
      case 40002983: return ( &GSTAmt_ ); break; // GSTAmt
      case 40002984: return ( &NRTaxAmt_ ); break; // NRTaxAmt
      case 40002998: return ( &OtherTaxAmt_ ); break; // OtherTaxAmt
      case 40003019: return ( &PaidInclude_ ); break; // PaidInclude
      case 40003020: return ( &GSTPaid_ ); break; // GSTPaid
      case 40003021: return ( &GSTOutstanding_ ); break; // GSTOutstanding
      case 40003022: return ( &NRPaid_ ); break; // NRPaid
      case 40003023: return ( &NROutstanding_ ); break; // NROutstanding
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0199_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0199_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0199_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 17 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RecType_; break;
            case 1: aFlds_[1] = &rxFundCode_; break;
            case 2: aFlds_[2] = &rxClassCode_; break;
            case 3: aFlds_[3] = &AsofDate_; break;
            case 4: aFlds_[4] = &EligUnits_; break;
            case 5: aFlds_[5] = &Rate_; break;
            case 6: aFlds_[6] = &Amount_; break;
            case 7: aFlds_[7] = &AmtPaid_; break;
            case 8: aFlds_[8] = &AccumTotal_; break;
            case 9: aFlds_[9] = &GSTAmt_; break;
            case 10: aFlds_[10] = &NRTaxAmt_; break;
            case 11: aFlds_[11] = &OtherTaxAmt_; break;
            case 12: aFlds_[12] = &PaidInclude_; break;
            case 13: aFlds_[13] = &GSTPaid_; break;
            case 14: aFlds_[14] = &GSTOutstanding_; break;
            case 15: aFlds_[15] = &NRPaid_; break;
            case 16: aFlds_[16] = &NROutstanding_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0199_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0199_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0199_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0199_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 566 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0199_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0199_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0199_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000411: return( true );
      case 40000286: return( true );
      case 40000287: return( true );
      case 40000061: return( true );
      case 40000740: return( true );
      case 40002919: return( true );
      case 40000231: return( true );
      case 40002981: return( true );
      case 40000744: return( true );
      case 40002983: return( true );
      case 40002984: return( true );
      case 40002998: return( true );
      case 40003019: return( true );
      case 40003020: return( true );
      case 40003021: return( true );
      case 40003022: return( true );
      case 40003023: return( true );
   }
   return false;
}

