// BFDataImpl implementation file for DataSet DSTC0338.REQ
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Tuesday, January 16, 2018 20:33:15


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0338_req.h"


// This function creates an instance of dsi_DSTC0338_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0338_REQ() { return new dsi_DSTC0338_REQ; }

dsi_DSTC0338_REQ::dsi_DSTC0338_REQ()
: BFDataImpl( 40005091, 40005089 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, RvCode_( ifds::RvCode, &ifds::s_FldProp_RvCode )
, OnStmt_( ifds::OnStmt, &ifds::s_FldProp_OnStmt )
, Accountable_( ifds::Accountable, &ifds::s_FldProp_Accountable )
, ConfirmRequired_( ifds::ConfirmRequired, &ifds::s_FldProp_ConfirmRequired )
, CancelCheque_( ifds::CancelCheque, &ifds::s_FldProp_CancelCheque )
, Remarks1_( ifds::Remarks1, &ifds::s_FldProp_Remarks1 )
, Remarks2_( ifds::Remarks2, &ifds::s_FldProp_Remarks2 )
, Remarks3_( ifds::Remarks3, &ifds::s_FldProp_Remarks3 )
, Batch_( ifds::Batch, &ifds::s_FldProp_Batch )
, Trace_( ifds::Trace, &ifds::s_FldProp_Trace )
, TranStatus_( ifds::TranStatus, &ifds::s_FldProp_TranStatus )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, Version_( ifds::Version, &ifds::s_FldProp_Version )
, MCHFileIndicator_( ifds::MCHFileIndicator, &ifds::s_FldProp_MCHFileIndicator )
, SecRecFileIndicator_( ifds::SecRecFileIndicator, &ifds::s_FldProp_SecRecFileIndicator )
, ESGSettle_( ifds::ESGSettle, &ifds::s_FldProp_ESGSettle )
, CancelContribRcpt_( ifds::CancelContribRcpt, &ifds::s_FldProp_CancelContribRcpt )
, ExcldRcptPrint_( ifds::ExcldRcptPrint, &ifds::s_FldProp_ExcldRcptPrint )
, RetRcptToSender_( ifds::RetRcptToSender, &ifds::s_FldProp_RetRcptToSender )
, CancelGrant_( ifds::CancelGrant, &ifds::s_FldProp_CancelGrant )
, RefundPayType_( ifds::RefundPayType, &ifds::s_FldProp_RefundPayType )
, RefundOption_( ifds::RefundOption, &ifds::s_FldProp_RefundOption )
, EventReceiptDate_( ifds::EventReceiptDate, &ifds::s_FldProp_EventReceiptDate )
, EventReceiptTime_( ifds::EventReceiptTime, &ifds::s_FldProp_EventReceiptTime )
, SettleNetwork_( ifds::SettleNetwork, &ifds::s_FldProp_SettleNetwork )
, DilutionLinkNum_( ifds::DilutionLinkNum, &ifds::s_FldProp_DilutionLinkNum )
, MatchingKey_( ifds::MatchingKey, &ifds::s_FldProp_MatchingKey )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
    cFields_ = 36;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0338_REQ::~dsi_DSTC0338_REQ()
{
}

BFDataImpl* dsi_DSTC0338_REQ::clone()
{
    dsi_DSTC0338_REQ* p = new dsi_DSTC0338_REQ;
    p->SessionId_ = SessionId_;
    p->User_Id_ = User_Id_;
    p->LanguageCode_ = LanguageCode_;
    p->CompanyId_ = CompanyId_;
    p->Track_ = Track_;
    p->Activity_ = Activity_;
    p->RunMode_ = RunMode_;
    p->TransNum_ = TransNum_;
    p->RvCode_ = RvCode_;
    p->OnStmt_ = OnStmt_;
    p->Accountable_ = Accountable_;
    p->ConfirmRequired_ = ConfirmRequired_;
    p->CancelCheque_ = CancelCheque_;
    p->Remarks1_ = Remarks1_;
    p->Remarks2_ = Remarks2_;
    p->Remarks3_ = Remarks3_;
    p->Batch_ = Batch_;
    p->Trace_ = Trace_;
    p->TranStatus_ = TranStatus_;
    p->TransType_ = TransType_;
    p->Version_ = Version_;
    p->MCHFileIndicator_ = MCHFileIndicator_;
    p->SecRecFileIndicator_ = SecRecFileIndicator_;
    p->ESGSettle_ = ESGSettle_;
    p->CancelContribRcpt_ = CancelContribRcpt_;
    p->ExcldRcptPrint_ = ExcldRcptPrint_;
    p->RetRcptToSender_ = RetRcptToSender_;
    p->CancelGrant_ = CancelGrant_;
    p->RefundPayType_ = RefundPayType_;
    p->RefundOption_ = RefundOption_;
    p->EventReceiptDate_ = EventReceiptDate_;
    p->EventReceiptTime_ = EventReceiptTime_;
    p->SettleNetwork_ = SettleNetwork_;
    p->DilutionLinkNum_ = DilutionLinkNum_;
    p->MatchingKey_ = MatchingKey_;
    p->RepeatCount_ = RepeatCount_;
    return(p);
}

BFDataField* dsi_DSTC0338_REQ::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000005: return ( &SessionId_ ); break; // SessionId
        case 40000002: return ( &User_Id_ ); break; // User_Id
        case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
        case 40000031: return ( &CompanyId_ ); break; // CompanyId
        case 40002065: return ( &Track_ ); break; // Track
        case 40002066: return ( &Activity_ ); break; // Activity
        case 40000990: return ( &RunMode_ ); break; // RunMode
        case 40000096: return ( &TransNum_ ); break; // TransNum
        case 40000437: return ( &RvCode_ ); break; // RvCode
        case 40000473: return ( &OnStmt_ ); break; // OnStmt
        case 40000476: return ( &Accountable_ ); break; // Accountable
        case 40004778: return ( &ConfirmRequired_ ); break; // ConfirmRequired
        case 40005076: return ( &CancelCheque_ ); break; // CancelCheque
        case 40000478: return ( &Remarks1_ ); break; // Remarks1
        case 40000479: return ( &Remarks2_ ); break; // Remarks2
        case 40000480: return ( &Remarks3_ ); break; // Remarks3
        case 40000830: return ( &Batch_ ); break; // Batch
        case 40001355: return ( &Trace_ ); break; // Trace
        case 40002273: return ( &TranStatus_ ); break; // TranStatus
        case 40000095: return ( &TransType_ ); break; // TransType
        case 40003739: return ( &Version_ ); break; // Version
        case 40005380: return ( &MCHFileIndicator_ ); break; // MCHFileIndicator
        case 40005381: return ( &SecRecFileIndicator_ ); break; // SecRecFileIndicator
        case 40005415: return ( &ESGSettle_ ); break; // ESGSettle
        case 40005732: return ( &CancelContribRcpt_ ); break; // CancelContribRcpt
        case 40005733: return ( &ExcldRcptPrint_ ); break; // ExcldRcptPrint
        case 40005734: return ( &RetRcptToSender_ ); break; // RetRcptToSender
        case 40006161: return ( &CancelGrant_ ); break; // CancelGrant
        case 40006866: return ( &RefundPayType_ ); break; // RefundPayType
        case 40006867: return ( &RefundOption_ ); break; // RefundOption
        case 40007029: return ( &EventReceiptDate_ ); break; // EventReceiptDate
        case 40007030: return ( &EventReceiptTime_ ); break; // EventReceiptTime
        case 40007321: return ( &SettleNetwork_ ); break; // SettleNetwork
        case 40007850: return ( &DilutionLinkNum_ ); break; // DilutionLinkNum
        case 40007932: return ( &MatchingKey_ ); break; // MatchingKey
        case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0338_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0338_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0338_REQ::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 36 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &SessionId_; break;
                case 1: aFlds_[1] = &User_Id_; break;
                case 2: aFlds_[2] = &LanguageCode_; break;
                case 3: aFlds_[3] = &CompanyId_; break;
                case 4: aFlds_[4] = &Track_; break;
                case 5: aFlds_[5] = &Activity_; break;
                case 6: aFlds_[6] = &RunMode_; break;
                case 7: aFlds_[7] = &TransNum_; break;
                case 8: aFlds_[8] = &RvCode_; break;
                case 9: aFlds_[9] = &OnStmt_; break;
                case 10: aFlds_[10] = &Accountable_; break;
                case 11: aFlds_[11] = &ConfirmRequired_; break;
                case 12: aFlds_[12] = &CancelCheque_; break;
                case 13: aFlds_[13] = &Remarks1_; break;
                case 14: aFlds_[14] = &Remarks2_; break;
                case 15: aFlds_[15] = &Remarks3_; break;
                case 16: aFlds_[16] = &Batch_; break;
                case 17: aFlds_[17] = &Trace_; break;
                case 18: aFlds_[18] = &TranStatus_; break;
                case 19: aFlds_[19] = &TransType_; break;
                case 20: aFlds_[20] = &Version_; break;
                case 21: aFlds_[21] = &MCHFileIndicator_; break;
                case 22: aFlds_[22] = &SecRecFileIndicator_; break;
                case 23: aFlds_[23] = &ESGSettle_; break;
                case 24: aFlds_[24] = &CancelContribRcpt_; break;
                case 25: aFlds_[25] = &ExcldRcptPrint_; break;
                case 26: aFlds_[26] = &RetRcptToSender_; break;
                case 27: aFlds_[27] = &CancelGrant_; break;
                case 28: aFlds_[28] = &RefundPayType_; break;
                case 29: aFlds_[29] = &RefundOption_; break;
                case 30: aFlds_[30] = &EventReceiptDate_; break;
                case 31: aFlds_[31] = &EventReceiptTime_; break;
                case 32: aFlds_[32] = &SettleNetwork_; break;
                case 33: aFlds_[33] = &DilutionLinkNum_; break;
                case 34: aFlds_[34] = &MatchingKey_; break;
                case 35: aFlds_[35] = &RepeatCount_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0338_REQ::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0338_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0338_REQ::getLargestDefinedField( void ) const
{
    return( 60 );
}

unsigned long dsi_DSTC0338_REQ::getDefinedByteLength( void ) const
{
    return( 1242 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0338_REQ::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0338_REQ::fieldExists( id );
}

bool dsi_DSTC0338_REQ::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000005: return ( true );
        case 40000002: return ( true );
        case 40000030: return ( true );
        case 40000031: return ( true );
        case 40002065: return ( true );
        case 40002066: return ( true );
        case 40000990: return ( true );
        case 40000096: return ( true );
        case 40000437: return ( true );
        case 40000473: return ( true );
        case 40000476: return ( true );
        case 40004778: return ( true );
        case 40005076: return ( true );
        case 40000478: return ( true );
        case 40000479: return ( true );
        case 40000480: return ( true );
        case 40000830: return ( true );
        case 40001355: return ( true );
        case 40002273: return ( true );
        case 40000095: return ( true );
        case 40003739: return ( true );
        case 40005380: return ( true );
        case 40005381: return ( true );
        case 40005415: return ( true );
        case 40005732: return ( true );
        case 40005733: return ( true );
        case 40005734: return ( true );
        case 40006161: return ( true );
        case 40006866: return ( true );
        case 40006867: return ( true );
        case 40007029: return ( true );
        case 40007030: return ( true );
        case 40007321: return ( true );
        case 40007850: return ( true );
        case 40007932: return ( true );
        case 40000120: return ( true );
    }
    return false;
}

