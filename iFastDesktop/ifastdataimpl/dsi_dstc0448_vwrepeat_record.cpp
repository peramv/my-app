// BFDataImpl implementation file for DataSet DSTC0448.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0448_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0448_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0448_VWRepeat_Record() { return new dsi_DSTC0448_VWRepeat_Record; }

dsi_DSTC0448_VWRepeat_Record::dsi_DSTC0448_VWRepeat_Record()
: BFDataImpl( 40007088 )
, EntityId_( ifds::EntityId, &ifds::s_FldProp_EntityId )
, WhereUseKey_( ifds::WhereUseKey, &ifds::s_FldProp_WhereUseKey )
, HoldingCompName_( ifds::HoldingCompName, &ifds::s_FldProp_HoldingCompName )
, Deff_( ifds::Deff, &ifds::s_FldProp_Deff )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, AggregationMethod_( ifds::AggregationMethod, &ifds::s_FldProp_AggregationMethod )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, GBCD_( ifds::GBCD, &ifds::s_FldProp_GBCD )
, CompanyUsage_( ifds::CompanyUsage, &ifds::s_FldProp_CompanyUsage )
, Language_( ifds::Language, &ifds::s_FldProp_Language )
, EntityWhereUseRid_( ifds::EntityWhereUseRid, &ifds::s_FldProp_EntityWhereUseRid )
, EntityWhereUseVer_( ifds::EntityWhereUseVer, &ifds::s_FldProp_EntityWhereUseVer )
, FeeModelExist_( ifds::FeeModelExist, &ifds::s_FldProp_FeeModelExist )
, FeeAggregationExist_( ifds::FeeAggregationExist, &ifds::s_FldProp_FeeAggregationExist )
, BillingInstrExist_( ifds::BillingInstrExist, &ifds::s_FldProp_BillingInstrExist )
, ReportGroupExist_( ifds::ReportGroupExist, &ifds::s_FldProp_ReportGroupExist )
, FirstChildRecDeff_( ifds::FirstChildRecDeff, &ifds::s_FldProp_FirstChildRecDeff )
, ShrAcctLastProcDate_( ifds::ShrAcctLastProcDate, &ifds::s_FldProp_ShrAcctLastProcDate )
{
   cFields_ = 21;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0448_VWRepeat_Record::~dsi_DSTC0448_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0448_VWRepeat_Record::clone()
{
   dsi_DSTC0448_VWRepeat_Record* p = new dsi_DSTC0448_VWRepeat_Record;
   p->EntityId_ = EntityId_;
   p->WhereUseKey_ = WhereUseKey_;
   p->HoldingCompName_ = HoldingCompName_;
   p->Deff_ = Deff_;
   p->StopDate_ = StopDate_;
   p->AggregationMethod_ = AggregationMethod_;
   p->ProcessDate_ = ProcessDate_;
   p->Username_ = Username_;
   p->ModDate_ = ModDate_;
   p->ModUser_ = ModUser_;
   p->GBCD_ = GBCD_;
   p->CompanyUsage_ = CompanyUsage_;
   p->Language_ = Language_;
   p->EntityWhereUseRid_ = EntityWhereUseRid_;
   p->EntityWhereUseVer_ = EntityWhereUseVer_;
   p->FeeModelExist_ = FeeModelExist_;
   p->FeeAggregationExist_ = FeeAggregationExist_;
   p->BillingInstrExist_ = BillingInstrExist_;
   p->ReportGroupExist_ = ReportGroupExist_;
   p->FirstChildRecDeff_ = FirstChildRecDeff_;
   p->ShrAcctLastProcDate_ = ShrAcctLastProcDate_;
   return(p);
}

BFDataField* dsi_DSTC0448_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000033: return ( &EntityId_ ); break; // EntityId
      case 40005065: return ( &WhereUseKey_ ); break; // WhereUseKey
      case 40007043: return ( &HoldingCompName_ ); break; // HoldingCompName
      case 40000215: return ( &Deff_ ); break; // Deff
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40007048: return ( &AggregationMethod_ ); break; // AggregationMethod
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40001901: return ( &GBCD_ ); break; // GBCD
      case 40007049: return ( &CompanyUsage_ ); break; // CompanyUsage
      case 40000624: return ( &Language_ ); break; // Language
      case 40005352: return ( &EntityWhereUseRid_ ); break; // EntityWhereUseRid
      case 40007050: return ( &EntityWhereUseVer_ ); break; // EntityWhereUseVer
      case 40007051: return ( &FeeModelExist_ ); break; // FeeModelExist
      case 40007052: return ( &FeeAggregationExist_ ); break; // FeeAggregationExist
      case 40007053: return ( &BillingInstrExist_ ); break; // BillingInstrExist
      case 40007054: return ( &ReportGroupExist_ ); break; // ReportGroupExist
      case 40007055: return ( &FirstChildRecDeff_ ); break; // FirstChildRecDeff
      case 40007056: return ( &ShrAcctLastProcDate_ ); break; // ShrAcctLastProcDate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0448_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0448_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0448_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 21 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &EntityId_; break;
            case 1: aFlds_[1] = &WhereUseKey_; break;
            case 2: aFlds_[2] = &HoldingCompName_; break;
            case 3: aFlds_[3] = &Deff_; break;
            case 4: aFlds_[4] = &StopDate_; break;
            case 5: aFlds_[5] = &AggregationMethod_; break;
            case 6: aFlds_[6] = &ProcessDate_; break;
            case 7: aFlds_[7] = &Username_; break;
            case 8: aFlds_[8] = &ModDate_; break;
            case 9: aFlds_[9] = &ModUser_; break;
            case 10: aFlds_[10] = &GBCD_; break;
            case 11: aFlds_[11] = &CompanyUsage_; break;
            case 12: aFlds_[12] = &Language_; break;
            case 13: aFlds_[13] = &EntityWhereUseRid_; break;
            case 14: aFlds_[14] = &EntityWhereUseVer_; break;
            case 15: aFlds_[15] = &FeeModelExist_; break;
            case 16: aFlds_[16] = &FeeAggregationExist_; break;
            case 17: aFlds_[17] = &BillingInstrExist_; break;
            case 18: aFlds_[18] = &ReportGroupExist_; break;
            case 19: aFlds_[19] = &FirstChildRecDeff_; break;
            case 20: aFlds_[20] = &ShrAcctLastProcDate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0448_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0448_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0448_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 80 );
}

unsigned long dsi_DSTC0448_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 447 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0448_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0448_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0448_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000033: return( true );
      case 40005065: return( true );
      case 40007043: return( true );
      case 40000215: return( true );
      case 40000279: return( true );
      case 40007048: return( true );
      case 40000216: return( true );
      case 40000117: return( true );
      case 40000217: return( true );
      case 40000218: return( true );
      case 40001901: return( true );
      case 40007049: return( true );
      case 40000624: return( true );
      case 40005352: return( true );
      case 40007050: return( true );
      case 40007051: return( true );
      case 40007052: return( true );
      case 40007053: return( true );
      case 40007054: return( true );
      case 40007055: return( true );
      case 40007056: return( true );
   }
   return false;
}

