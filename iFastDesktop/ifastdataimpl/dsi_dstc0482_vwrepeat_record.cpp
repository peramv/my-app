// BFDataImpl implementation file for DataSet DSTC0482.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Friday, June 09, 2017 10:10:53


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0482_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0482_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0482_VWRepeat_Record() { return new dsi_DSTC0482_VWRepeat_Record; }

dsi_DSTC0482_VWRepeat_Record::dsi_DSTC0482_VWRepeat_Record()
: BFDataImpl( 40007758 )
, RESPRuleType_( ifds::RESPRuleType, &ifds::s_FldProp_RESPRuleType )
, RESPNotlType_( ifds::RESPNotlType, &ifds::s_FldProp_RESPNotlType )
, RESPRuleValue_( ifds::RESPRuleValue, &ifds::s_FldProp_RESPRuleValue )
, StartDate_( ifds::StartDate, &ifds::s_FldProp_StartDate )
, EndDate_( ifds::EndDate, &ifds::s_FldProp_EndDate )
, BeneBornOnAfterYr_( ifds::BeneBornOnAfterYr, &ifds::s_FldProp_BeneBornOnAfterYr )
, GBCD_( ifds::GBCD, &ifds::s_FldProp_GBCD )
{
    cFields_ = 7;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0482_VWRepeat_Record::~dsi_DSTC0482_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0482_VWRepeat_Record::clone()
{
    dsi_DSTC0482_VWRepeat_Record* p = new dsi_DSTC0482_VWRepeat_Record;
    p->RESPRuleType_ = RESPRuleType_;
    p->RESPNotlType_ = RESPNotlType_;
    p->RESPRuleValue_ = RESPRuleValue_;
    p->StartDate_ = StartDate_;
    p->EndDate_ = EndDate_;
    p->BeneBornOnAfterYr_ = BeneBornOnAfterYr_;
    p->GBCD_ = GBCD_;
    return(p);
}

BFDataField* dsi_DSTC0482_VWRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40007752: return ( &RESPRuleType_ ); break; // RESPRuleType
        case 40007543: return ( &RESPNotlType_ ); break; // RESPNotlType
        case 40007753: return ( &RESPRuleValue_ ); break; // RESPRuleValue
        case 40000107: return ( &StartDate_ ); break; // StartDate
        case 40000108: return ( &EndDate_ ); break; // EndDate
        case 40007754: return ( &BeneBornOnAfterYr_ ); break; // BeneBornOnAfterYr
        case 40001901: return ( &GBCD_ ); break; // GBCD
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0482_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0482_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0482_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 7 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &RESPRuleType_; break;
                case 1: aFlds_[1] = &RESPNotlType_; break;
                case 2: aFlds_[2] = &RESPRuleValue_; break;
                case 3: aFlds_[3] = &StartDate_; break;
                case 4: aFlds_[4] = &EndDate_; break;
                case 5: aFlds_[5] = &BeneBornOnAfterYr_; break;
                case 6: aFlds_[6] = &GBCD_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0482_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0482_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0482_VWRepeat_Record::getLargestDefinedField( void ) const
{
    return( 60 );
}

unsigned long dsi_DSTC0482_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 205 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0482_VWRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0482_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0482_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40007752: return ( true );
        case 40007543: return ( true );
        case 40007753: return ( true );
        case 40000107: return ( true );
        case 40000108: return ( true );
        case 40007754: return ( true );
        case 40001901: return ( true );
    }
    return false;
}

