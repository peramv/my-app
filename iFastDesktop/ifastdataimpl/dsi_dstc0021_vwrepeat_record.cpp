// BFDataImpl implementation file for DataSet DSTC0021.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:58 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0021_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0021_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0021_VWRepeat_Record() { return new dsi_DSTC0021_VWRepeat_Record; }

dsi_DSTC0021_VWRepeat_Record::dsi_DSTC0021_VWRepeat_Record()
: BFDataImpl( 40000410 )
, RecType_( ifds::RecType, &ifds::s_FldProp_RecType )
, CheqNum_( ifds::CheqNum, &ifds::s_FldProp_CheqNum )
, RefNumber_( ifds::RefNumber, &ifds::s_FldProp_RefNumber )
, Fee_( ifds::Fee, &ifds::s_FldProp_Fee )
, FedTax_( ifds::FedTax, &ifds::s_FldProp_FedTax )
, ProvTax_( ifds::ProvTax, &ifds::s_FldProp_ProvTax )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, Salutation_( ifds::Salutation, &ifds::s_FldProp_Salutation )
, PayeeName_( ifds::PayeeName, &ifds::s_FldProp_PayeeName )
, AddrLine1_( ifds::AddrLine1, &ifds::s_FldProp_AddrLine1 )
, AddrLine2_( ifds::AddrLine2, &ifds::s_FldProp_AddrLine2 )
, AddrLine3_( ifds::AddrLine3, &ifds::s_FldProp_AddrLine3 )
, AddrLine4_( ifds::AddrLine4, &ifds::s_FldProp_AddrLine4 )
, AddrLine5_( ifds::AddrLine5, &ifds::s_FldProp_AddrLine5 )
, PostalCode_( ifds::PostalCode, &ifds::s_FldProp_PostalCode )
, BrokerChq_( ifds::BrokerChq, &ifds::s_FldProp_BrokerChq )
, DeliveryCode_( ifds::DeliveryCode, &ifds::s_FldProp_DeliveryCode )
, DeliveryCodeDesc_( ifds::DeliveryCodeDesc, &ifds::s_FldProp_DeliveryCodeDesc )
, PrintDate_( ifds::PrintDate, &ifds::s_FldProp_PrintDate )
, ChequeAge_( ifds::ChequeAge, &ifds::s_FldProp_ChequeAge )
, BankAcctNum_( ifds::BankAcctNum, &ifds::s_FldProp_BankAcctNum )
, BankRecDate_( ifds::BankRecDate, &ifds::s_FldProp_BankRecDate )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, CanDate_( ifds::CanDate, &ifds::s_FldProp_CanDate )
, CancelUser_( ifds::CancelUser, &ifds::s_FldProp_CancelUser )
, ChqStatus_( ifds::ChqStatus, &ifds::s_FldProp_ChqStatus )
, ChqStatDesc_( ifds::ChqStatDesc, &ifds::s_FldProp_ChqStatDesc )
, rxAcctNum_( ifds::rxAcctNum, &ifds::s_FldProp_rxAcctNum )
, Memo1_( ifds::Memo1, &ifds::s_FldProp_Memo1 )
, Memo2_( ifds::Memo2, &ifds::s_FldProp_Memo2 )
, CountryCode_( ifds::CountryCode, &ifds::s_FldProp_CountryCode )
, CountryName_( ifds::CountryName, &ifds::s_FldProp_CountryName )
, CurrencyName_( ifds::CurrencyName, &ifds::s_FldProp_CurrencyName )
, PayType2_( ifds::PayType2, &ifds::s_FldProp_PayType2 )
, ClawBackTotal_( ifds::ClawBackTotal, &ifds::s_FldProp_ClawBackTotal )
, ChqId_( ifds::ChqId, &ifds::s_FldProp_ChqId )
, ChqStage_( ifds::ChqStage, &ifds::s_FldProp_ChqStage )
, StageStampDate_( ifds::StageStampDate, &ifds::s_FldProp_StageStampDate )
, RemittanceDate_( ifds::RemittanceDate, &ifds::s_FldProp_RemittanceDate )
, ChqComments_( ifds::ChqComments, &ifds::s_FldProp_ChqComments )
, VersionNum_( ifds::VersionNum, &ifds::s_FldProp_VersionNum )
, StageAssignBy_( ifds::StageAssignBy, &ifds::s_FldProp_StageAssignBy )
, GovtChqNo_( ifds::GovtChqNo, &ifds::s_FldProp_GovtChqNo )
, GovtChqIssueDate_( ifds::GovtChqIssueDate, &ifds::s_FldProp_GovtChqIssueDate )
, GovtChqCurrency_( ifds::GovtChqCurrency, &ifds::s_FldProp_GovtChqCurrency )
, GovtChqStatus_( ifds::GovtChqStatus, &ifds::s_FldProp_GovtChqStatus )
{
   cFields_ = 54;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0021_VWRepeat_Record::~dsi_DSTC0021_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0021_VWRepeat_Record::clone()
{
   dsi_DSTC0021_VWRepeat_Record* p = new dsi_DSTC0021_VWRepeat_Record;
   p->RecType_ = RecType_;
   p->CheqNum_ = CheqNum_;
   p->RefNumber_ = RefNumber_;
   p->Fee_ = Fee_;
   p->FedTax_ = FedTax_;
   p->ProvTax_ = ProvTax_;
   p->Amount_ = Amount_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->TransNum_ = TransNum_;
   p->TransType_ = TransType_;
   p->Currency_ = Currency_;
   p->Salutation_ = Salutation_;
   p->PayeeName_ = PayeeName_;
   p->AddrLine1_ = AddrLine1_;
   p->AddrLine2_ = AddrLine2_;
   p->AddrLine3_ = AddrLine3_;
   p->AddrLine4_ = AddrLine4_;
   p->AddrLine5_ = AddrLine5_;
   p->PostalCode_ = PostalCode_;
   p->BrokerChq_ = BrokerChq_;
   p->DeliveryCode_ = DeliveryCode_;
   p->DeliveryCodeDesc_ = DeliveryCodeDesc_;
   p->PrintDate_ = PrintDate_;
   p->ChequeAge_ = ChequeAge_;
   p->BankAcctNum_ = BankAcctNum_;
   p->BankRecDate_ = BankRecDate_;
   p->ProcessDate_ = ProcessDate_;
   p->Username_ = Username_;
   p->ModDate_ = ModDate_;
   p->ModUser_ = ModUser_;
   p->CanDate_ = CanDate_;
   p->CancelUser_ = CancelUser_;
   p->ChqStatus_ = ChqStatus_;
   p->ChqStatDesc_ = ChqStatDesc_;
   p->rxAcctNum_ = rxAcctNum_;
   p->Memo1_ = Memo1_;
   p->Memo2_ = Memo2_;
   p->CountryCode_ = CountryCode_;
   p->CountryName_ = CountryName_;
   p->CurrencyName_ = CurrencyName_;
   p->PayType2_ = PayType2_;
   p->ClawBackTotal_ = ClawBackTotal_;
   p->ChqId_ = ChqId_;
   p->ChqStage_ = ChqStage_;
   p->StageStampDate_ = StageStampDate_;
   p->RemittanceDate_ = RemittanceDate_;
   p->ChqComments_ = ChqComments_;
   p->VersionNum_ = VersionNum_;
   p->StageAssignBy_ = StageAssignBy_;
   p->GovtChqNo_ = GovtChqNo_;
   p->GovtChqIssueDate_ = GovtChqIssueDate_;
   p->GovtChqCurrency_ = GovtChqCurrency_;
   p->GovtChqStatus_ = GovtChqStatus_;
   return(p);
}

BFDataField* dsi_DSTC0021_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000411: return ( &RecType_ ); break; // RecType
      case 40000412: return ( &CheqNum_ ); break; // CheqNum
      case 40000246: return ( &RefNumber_ ); break; // RefNumber
      case 40000235: return ( &Fee_ ); break; // Fee
      case 40000414: return ( &FedTax_ ); break; // FedTax
      case 40000415: return ( &ProvTax_ ); break; // ProvTax
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40000416: return ( &Salutation_ ); break; // Salutation
      case 40000417: return ( &PayeeName_ ); break; // PayeeName
      case 40000280: return ( &AddrLine1_ ); break; // AddrLine1
      case 40000281: return ( &AddrLine2_ ); break; // AddrLine2
      case 40000282: return ( &AddrLine3_ ); break; // AddrLine3
      case 40000283: return ( &AddrLine4_ ); break; // AddrLine4
      case 40000284: return ( &AddrLine5_ ); break; // AddrLine5
      case 40000143: return ( &PostalCode_ ); break; // PostalCode
      case 40000418: return ( &BrokerChq_ ); break; // BrokerChq
      case 40000419: return ( &DeliveryCode_ ); break; // DeliveryCode
      case 40000420: return ( &DeliveryCodeDesc_ ); break; // DeliveryCodeDesc
      case 40000421: return ( &PrintDate_ ); break; // PrintDate
      case 40000422: return ( &ChequeAge_ ); break; // ChequeAge
      case 40000248: return ( &BankAcctNum_ ); break; // BankAcctNum
      case 40000423: return ( &BankRecDate_ ); break; // BankRecDate
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40000424: return ( &CanDate_ ); break; // CanDate
      case 40000361: return ( &CancelUser_ ); break; // CancelUser
      case 40000426: return ( &ChqStatus_ ); break; // ChqStatus
      case 40000427: return ( &ChqStatDesc_ ); break; // ChqStatDesc
      case 40000371: return ( &rxAcctNum_ ); break; // rxAcctNum
      case 40000428: return ( &Memo1_ ); break; // Memo1
      case 40000429: return ( &Memo2_ ); break; // Memo2
      case 40000344: return ( &CountryCode_ ); break; // CountryCode
      case 40000544: return ( &CountryName_ ); break; // CountryName
      case 40000181: return ( &CurrencyName_ ); break; // CurrencyName
      case 40002055: return ( &PayType2_ ); break; // PayType2
      case 40004505: return ( &ClawBackTotal_ ); break; // ClawBackTotal
      case 40005860: return ( &ChqId_ ); break; // ChqId
      case 40005861: return ( &ChqStage_ ); break; // ChqStage
      case 40005863: return ( &StageStampDate_ ); break; // StageStampDate
      case 40005864: return ( &RemittanceDate_ ); break; // RemittanceDate
      case 40005859: return ( &ChqComments_ ); break; // ChqComments
      case 40000228: return ( &VersionNum_ ); break; // VersionNum
      case 40005924: return ( &StageAssignBy_ ); break; // StageAssignBy
      case 40005927: return ( &GovtChqNo_ ); break; // GovtChqNo
      case 40005929: return ( &GovtChqIssueDate_ ); break; // GovtChqIssueDate
      case 40005930: return ( &GovtChqCurrency_ ); break; // GovtChqCurrency
      case 40005931: return ( &GovtChqStatus_ ); break; // GovtChqStatus
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0021_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0021_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0021_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 54 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RecType_; break;
            case 1: aFlds_[1] = &CheqNum_; break;
            case 2: aFlds_[2] = &RefNumber_; break;
            case 3: aFlds_[3] = &Fee_; break;
            case 4: aFlds_[4] = &FedTax_; break;
            case 5: aFlds_[5] = &ProvTax_; break;
            case 6: aFlds_[6] = &Amount_; break;
            case 7: aFlds_[7] = &FundCode_; break;
            case 8: aFlds_[8] = &ClassCode_; break;
            case 9: aFlds_[9] = &TransNum_; break;
            case 10: aFlds_[10] = &TransType_; break;
            case 11: aFlds_[11] = &Currency_; break;
            case 12: aFlds_[12] = &Salutation_; break;
            case 13: aFlds_[13] = &PayeeName_; break;
            case 14: aFlds_[14] = &AddrLine1_; break;
            case 15: aFlds_[15] = &AddrLine2_; break;
            case 16: aFlds_[16] = &AddrLine3_; break;
            case 17: aFlds_[17] = &AddrLine4_; break;
            case 18: aFlds_[18] = &AddrLine5_; break;
            case 19: aFlds_[19] = &PostalCode_; break;
            case 20: aFlds_[20] = &BrokerChq_; break;
            case 21: aFlds_[21] = &DeliveryCode_; break;
            case 22: aFlds_[22] = &DeliveryCodeDesc_; break;
            case 23: aFlds_[23] = &PrintDate_; break;
            case 24: aFlds_[24] = &ChequeAge_; break;
            case 25: aFlds_[25] = &BankAcctNum_; break;
            case 26: aFlds_[26] = &BankRecDate_; break;
            case 27: aFlds_[27] = &ProcessDate_; break;
            case 28: aFlds_[28] = &Username_; break;
            case 29: aFlds_[29] = &ModDate_; break;
            case 30: aFlds_[30] = &ModUser_; break;
            case 31: aFlds_[31] = &CanDate_; break;
            case 32: aFlds_[32] = &CancelUser_; break;
            case 33: aFlds_[33] = &ChqStatus_; break;
            case 34: aFlds_[34] = &ChqStatDesc_; break;
            case 35: aFlds_[35] = &rxAcctNum_; break;
            case 36: aFlds_[36] = &Memo1_; break;
            case 37: aFlds_[37] = &Memo2_; break;
            case 38: aFlds_[38] = &CountryCode_; break;
            case 39: aFlds_[39] = &CountryName_; break;
            case 40: aFlds_[40] = &CurrencyName_; break;
            case 41: aFlds_[41] = &PayType2_; break;
            case 42: aFlds_[42] = &ClawBackTotal_; break;
            case 43: aFlds_[43] = &ChqId_; break;
            case 44: aFlds_[44] = &ChqStage_; break;
            case 45: aFlds_[45] = &StageStampDate_; break;
            case 46: aFlds_[46] = &RemittanceDate_; break;
            case 47: aFlds_[47] = &ChqComments_; break;
            case 48: aFlds_[48] = &VersionNum_; break;
            case 49: aFlds_[49] = &StageAssignBy_; break;
            case 50: aFlds_[50] = &GovtChqNo_; break;
            case 51: aFlds_[51] = &GovtChqIssueDate_; break;
            case 52: aFlds_[52] = &GovtChqCurrency_; break;
            case 53: aFlds_[53] = &GovtChqStatus_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0021_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0021_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0021_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0021_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 2699 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0021_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0021_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0021_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000411: return( true );
      case 40000412: return( true );
      case 40000246: return( true );
      case 40000235: return( true );
      case 40000414: return( true );
      case 40000415: return( true );
      case 40000231: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000096: return( true );
      case 40000095: return( true );
      case 40000180: return( true );
      case 40000416: return( true );
      case 40000417: return( true );
      case 40000280: return( true );
      case 40000281: return( true );
      case 40000282: return( true );
      case 40000283: return( true );
      case 40000284: return( true );
      case 40000143: return( true );
      case 40000418: return( true );
      case 40000419: return( true );
      case 40000420: return( true );
      case 40000421: return( true );
      case 40000422: return( true );
      case 40000248: return( true );
      case 40000423: return( true );
      case 40000216: return( true );
      case 40000117: return( true );
      case 40000217: return( true );
      case 40000218: return( true );
      case 40000424: return( true );
      case 40000361: return( true );
      case 40000426: return( true );
      case 40000427: return( true );
      case 40000371: return( true );
      case 40000428: return( true );
      case 40000429: return( true );
      case 40000344: return( true );
      case 40000544: return( true );
      case 40000181: return( true );
      case 40002055: return( true );
      case 40004505: return( true );
      case 40005860: return( true );
      case 40005861: return( true );
      case 40005863: return( true );
      case 40005864: return( true );
      case 40005859: return( true );
      case 40000228: return( true );
      case 40005924: return( true );
      case 40005927: return( true );
      case 40005929: return( true );
      case 40005930: return( true );
      case 40005931: return( true );
   }
   return false;
}

