// BFDataImpl implementation file for DataSet DSTC0179.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Monday, March 05, 2018 23:18:37


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0179_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0179_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0179_VWRepeat_Record() { return new dsi_DSTC0179_VWRepeat_Record; }

dsi_DSTC0179_VWRepeat_Record::dsi_DSTC0179_VWRepeat_Record()
: BFDataImpl( 40002819 )
, AMSCode_( ifds::AMSCode, &ifds::s_FldProp_AMSCode )
, Percentage_( ifds::Percentage, &ifds::s_FldProp_Percentage )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, AMSCodeVer_( ifds::AMSCodeVer, &ifds::s_FldProp_AMSCodeVer )
, AMSCodeInUse_( ifds::AMSCodeInUse, &ifds::s_FldProp_AMSCodeInUse )
, Name_( ifds::Name, &ifds::s_FldProp_Name )
, AMSType_( ifds::AMSType, &ifds::s_FldProp_AMSType )
, DefaultAlloc_( ifds::DefaultAlloc, &ifds::s_FldProp_DefaultAlloc )
, FundAlloc_( ifds::FundAlloc, &ifds::s_FldProp_FundAlloc )
, EnglishShortName_( ifds::EnglishShortName, &ifds::s_FldProp_EnglishShortName )
, EnglishLongName_( ifds::EnglishLongName, &ifds::s_FldProp_EnglishLongName )
, EnglishName_( ifds::EnglishName, &ifds::s_FldProp_EnglishName )
, FrenchShortName_( ifds::FrenchShortName, &ifds::s_FldProp_FrenchShortName )
, FrenchLongName_( ifds::FrenchLongName, &ifds::s_FldProp_FrenchLongName )
, FrenchName_( ifds::FrenchName, &ifds::s_FldProp_FrenchName )
, ForeignRelFund_( ifds::ForeignRelFund, &ifds::s_FldProp_ForeignRelFund )
, ForeignRelClass_( ifds::ForeignRelClass, &ifds::s_FldProp_ForeignRelClass )
, RoundingFund_( ifds::RoundingFund, &ifds::s_FldProp_RoundingFund )
, RoundingClass_( ifds::RoundingClass, &ifds::s_FldProp_RoundingClass )
, GrandFatheredDate_( ifds::GrandFatheredDate, &ifds::s_FldProp_GrandFatheredDate )
, NextRebDate_( ifds::NextRebDate, &ifds::s_FldProp_NextRebDate )
, LastRebDate_( ifds::LastRebDate, &ifds::s_FldProp_LastRebDate )
, ThresholdAmt_( ifds::ThresholdAmt, &ifds::s_FldProp_ThresholdAmt )
, WireEleg_( ifds::WireEleg, &ifds::s_FldProp_WireEleg )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, DayOfWeek_( ifds::DayOfWeek, &ifds::s_FldProp_DayOfWeek )
, AMSRecId_( ifds::AMSRecId, &ifds::s_FldProp_AMSRecId )
, VerifyPrecreate_( ifds::VerifyPrecreate, &ifds::s_FldProp_VerifyPrecreate )
, LastEffectiveDate_( ifds::LastEffectiveDate, &ifds::s_FldProp_LastEffectiveDate )
, GrandFatherStamped_( ifds::GrandFatherStamped, &ifds::s_FldProp_GrandFatherStamped )
, AssocFund_( ifds::AssocFund, &ifds::s_FldProp_AssocFund )
, AssocClass_( ifds::AssocClass, &ifds::s_FldProp_AssocClass )
, SchedSetupFreqID_( ifds::SchedSetupFreqID, &ifds::s_FldProp_SchedSetupFreqID )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, ParentFndClsTrdg_( ifds::ParentFndClsTrdg, &ifds::s_FldProp_ParentFndClsTrdg )
, RebalReq_( ifds::RebalReq, &ifds::s_FldProp_RebalReq )
, TargetMixOption_( ifds::TargetMixOption, &ifds::s_FldProp_TargetMixOption )
, AMSDeltaRequestUUID_( ifds::AMSDeltaRequestUUID, &ifds::s_FldProp_AMSDeltaRequestUUID )
, LastAMSModDate_( ifds::LastAMSModDate, &ifds::s_FldProp_LastAMSModDate )
{
    cFields_ = 43;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0179_VWRepeat_Record::~dsi_DSTC0179_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0179_VWRepeat_Record::clone()
{
    dsi_DSTC0179_VWRepeat_Record* p = new dsi_DSTC0179_VWRepeat_Record;
    p->AMSCode_ = AMSCode_;
    p->Percentage_ = Percentage_;
    p->Currency_ = Currency_;
    p->EffectiveDate_ = EffectiveDate_;
    p->AMSCodeVer_ = AMSCodeVer_;
    p->AMSCodeInUse_ = AMSCodeInUse_;
    p->Name_ = Name_;
    p->AMSType_ = AMSType_;
    p->DefaultAlloc_ = DefaultAlloc_;
    p->FundAlloc_ = FundAlloc_;
    p->EnglishShortName_ = EnglishShortName_;
    p->EnglishLongName_ = EnglishLongName_;
    p->EnglishName_ = EnglishName_;
    p->FrenchShortName_ = FrenchShortName_;
    p->FrenchLongName_ = FrenchLongName_;
    p->FrenchName_ = FrenchName_;
    p->ForeignRelFund_ = ForeignRelFund_;
    p->ForeignRelClass_ = ForeignRelClass_;
    p->RoundingFund_ = RoundingFund_;
    p->RoundingClass_ = RoundingClass_;
    p->GrandFatheredDate_ = GrandFatheredDate_;
    p->NextRebDate_ = NextRebDate_;
    p->LastRebDate_ = LastRebDate_;
    p->ThresholdAmt_ = ThresholdAmt_;
    p->WireEleg_ = WireEleg_;
    p->ModUser_ = ModUser_;
    p->ProcessDate_ = ProcessDate_;
    p->ModDate_ = ModDate_;
    p->Username_ = Username_;
    p->DayOfWeek_ = DayOfWeek_;
    p->AMSRecId_ = AMSRecId_;
    p->VerifyPrecreate_ = VerifyPrecreate_;
    p->LastEffectiveDate_ = LastEffectiveDate_;
    p->GrandFatherStamped_ = GrandFatherStamped_;
    p->AssocFund_ = AssocFund_;
    p->AssocClass_ = AssocClass_;
    p->SchedSetupFreqID_ = SchedSetupFreqID_;
    p->Amount_ = Amount_;
    p->ParentFndClsTrdg_ = ParentFndClsTrdg_;
    p->RebalReq_ = RebalReq_;
    p->TargetMixOption_ = TargetMixOption_;
    p->AMSDeltaRequestUUID_ = AMSDeltaRequestUUID_;
    p->LastAMSModDate_ = LastAMSModDate_;
    return(p);
}

BFDataField* dsi_DSTC0179_VWRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000193: return ( &AMSCode_ ); break; // AMSCode
        case 40000291: return ( &Percentage_ ); break; // Percentage
        case 40000180: return ( &Currency_ ); break; // Currency
        case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
        case 40003431: return ( &AMSCodeVer_ ); break; // AMSCodeVer
        case 40003432: return ( &AMSCodeInUse_ ); break; // AMSCodeInUse
        case 40001090: return ( &Name_ ); break; // Name
        case 40003518: return ( &AMSType_ ); break; // AMSType
        case 40003515: return ( &DefaultAlloc_ ); break; // DefaultAlloc
        case 40003517: return ( &FundAlloc_ ); break; // FundAlloc
        case 40004028: return ( &EnglishShortName_ ); break; // EnglishShortName
        case 40004029: return ( &EnglishLongName_ ); break; // EnglishLongName
        case 40004030: return ( &EnglishName_ ); break; // EnglishName
        case 40004031: return ( &FrenchShortName_ ); break; // FrenchShortName
        case 40004032: return ( &FrenchLongName_ ); break; // FrenchLongName
        case 40004033: return ( &FrenchName_ ); break; // FrenchName
        case 40004034: return ( &ForeignRelFund_ ); break; // ForeignRelFund
        case 40004035: return ( &ForeignRelClass_ ); break; // ForeignRelClass
        case 40004036: return ( &RoundingFund_ ); break; // RoundingFund
        case 40004037: return ( &RoundingClass_ ); break; // RoundingClass
        case 40004038: return ( &GrandFatheredDate_ ); break; // GrandFatheredDate
        case 40004039: return ( &NextRebDate_ ); break; // NextRebDate
        case 40004040: return ( &LastRebDate_ ); break; // LastRebDate
        case 40004041: return ( &ThresholdAmt_ ); break; // ThresholdAmt
        case 40004043: return ( &WireEleg_ ); break; // WireEleg
        case 40000218: return ( &ModUser_ ); break; // ModUser
        case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
        case 40000217: return ( &ModDate_ ); break; // ModDate
        case 40000117: return ( &Username_ ); break; // Username
        case 40000275: return ( &DayOfWeek_ ); break; // DayOfWeek
        case 40004044: return ( &AMSRecId_ ); break; // AMSRecId
        case 40004046: return ( &VerifyPrecreate_ ); break; // VerifyPrecreate
        case 40004047: return ( &LastEffectiveDate_ ); break; // LastEffectiveDate
        case 40004064: return ( &GrandFatherStamped_ ); break; // GrandFatherStamped
        case 40005596: return ( &AssocFund_ ); break; // AssocFund
        case 40005597: return ( &AssocClass_ ); break; // AssocClass
        case 40005605: return ( &SchedSetupFreqID_ ); break; // SchedSetupFreqID
        case 40000231: return ( &Amount_ ); break; // Amount
        case 40007124: return ( &ParentFndClsTrdg_ ); break; // ParentFndClsTrdg
        case 40007773: return ( &RebalReq_ ); break; // RebalReq
        case 40007774: return ( &TargetMixOption_ ); break; // TargetMixOption
        case 40007849: return ( &AMSDeltaRequestUUID_ ); break; // AMSDeltaRequestUUID
        case 40007866: return ( &LastAMSModDate_ ); break; // LastAMSModDate
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0179_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0179_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0179_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 43 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &AMSCode_; break;
                case 1: aFlds_[1] = &Percentage_; break;
                case 2: aFlds_[2] = &Currency_; break;
                case 3: aFlds_[3] = &EffectiveDate_; break;
                case 4: aFlds_[4] = &AMSCodeVer_; break;
                case 5: aFlds_[5] = &AMSCodeInUse_; break;
                case 6: aFlds_[6] = &Name_; break;
                case 7: aFlds_[7] = &AMSType_; break;
                case 8: aFlds_[8] = &DefaultAlloc_; break;
                case 9: aFlds_[9] = &FundAlloc_; break;
                case 10: aFlds_[10] = &EnglishShortName_; break;
                case 11: aFlds_[11] = &EnglishLongName_; break;
                case 12: aFlds_[12] = &EnglishName_; break;
                case 13: aFlds_[13] = &FrenchShortName_; break;
                case 14: aFlds_[14] = &FrenchLongName_; break;
                case 15: aFlds_[15] = &FrenchName_; break;
                case 16: aFlds_[16] = &ForeignRelFund_; break;
                case 17: aFlds_[17] = &ForeignRelClass_; break;
                case 18: aFlds_[18] = &RoundingFund_; break;
                case 19: aFlds_[19] = &RoundingClass_; break;
                case 20: aFlds_[20] = &GrandFatheredDate_; break;
                case 21: aFlds_[21] = &NextRebDate_; break;
                case 22: aFlds_[22] = &LastRebDate_; break;
                case 23: aFlds_[23] = &ThresholdAmt_; break;
                case 24: aFlds_[24] = &WireEleg_; break;
                case 25: aFlds_[25] = &ModUser_; break;
                case 26: aFlds_[26] = &ProcessDate_; break;
                case 27: aFlds_[27] = &ModDate_; break;
                case 28: aFlds_[28] = &Username_; break;
                case 29: aFlds_[29] = &DayOfWeek_; break;
                case 30: aFlds_[30] = &AMSRecId_; break;
                case 31: aFlds_[31] = &VerifyPrecreate_; break;
                case 32: aFlds_[32] = &LastEffectiveDate_; break;
                case 33: aFlds_[33] = &GrandFatherStamped_; break;
                case 34: aFlds_[34] = &AssocFund_; break;
                case 35: aFlds_[35] = &AssocClass_; break;
                case 36: aFlds_[36] = &SchedSetupFreqID_; break;
                case 37: aFlds_[37] = &Amount_; break;
                case 38: aFlds_[38] = &ParentFndClsTrdg_; break;
                case 39: aFlds_[39] = &RebalReq_; break;
                case 40: aFlds_[40] = &TargetMixOption_; break;
                case 41: aFlds_[41] = &AMSDeltaRequestUUID_; break;
                case 42: aFlds_[42] = &LastAMSModDate_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0179_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0179_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0179_VWRepeat_Record::getLargestDefinedField( void ) const
{
    return( 200 );
}

unsigned long dsi_DSTC0179_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 1363 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0179_VWRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0179_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0179_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000193: return ( true );
        case 40000291: return ( true );
        case 40000180: return ( true );
        case 40000327: return ( true );
        case 40003431: return ( true );
        case 40003432: return ( true );
        case 40001090: return ( true );
        case 40003518: return ( true );
        case 40003515: return ( true );
        case 40003517: return ( true );
        case 40004028: return ( true );
        case 40004029: return ( true );
        case 40004030: return ( true );
        case 40004031: return ( true );
        case 40004032: return ( true );
        case 40004033: return ( true );
        case 40004034: return ( true );
        case 40004035: return ( true );
        case 40004036: return ( true );
        case 40004037: return ( true );
        case 40004038: return ( true );
        case 40004039: return ( true );
        case 40004040: return ( true );
        case 40004041: return ( true );
        case 40004043: return ( true );
        case 40000218: return ( true );
        case 40000216: return ( true );
        case 40000217: return ( true );
        case 40000117: return ( true );
        case 40000275: return ( true );
        case 40004044: return ( true );
        case 40004046: return ( true );
        case 40004047: return ( true );
        case 40004064: return ( true );
        case 40005596: return ( true );
        case 40005597: return ( true );
        case 40005605: return ( true );
        case 40000231: return ( true );
        case 40007124: return ( true );
        case 40007773: return ( true );
        case 40007774: return ( true );
        case 40007849: return ( true );
        case 40007866: return ( true );
    }
    return false;
}

