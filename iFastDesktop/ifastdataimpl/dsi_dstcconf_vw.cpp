// BFDataImpl implementation file for DataSet DSTCCONF.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstcconf_vw.h"


// This function creates an instance of dsi_DSTCCONF_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTCCONF_VW() { return new dsi_DSTCCONF_VW; }

dsi_DSTCCONF_VW::dsi_DSTCCONF_VW()
: BFDataImpl( 40001213 )
, Using_AWD_( ifds::Using_AWD, &ifds::s_FldProp_Using_AWD )
, BusinessArea_( ifds::BusinessArea, &ifds::s_FldProp_BusinessArea )
, WorkType_( ifds::WorkType, &ifds::s_FldProp_WorkType )
, StatusDesc_( ifds::StatusDesc, &ifds::s_FldProp_StatusDesc )
, Batch_( ifds::Batch, &ifds::s_FldProp_Batch )
, Remarks_( ifds::Remarks, &ifds::s_FldProp_Remarks )
, AWDComment_( ifds::AWDComment, &ifds::s_FldProp_AWDComment )
, Option_( ifds::Option, &ifds::s_FldProp_Option )
, UpdAllNonFin_( ifds::UpdAllNonFin, &ifds::s_FldProp_UpdAllNonFin )
, AWDObjectId_( ifds::AWDObjectId, &ifds::s_FldProp_AWDObjectId )
, AWDCrda_( ifds::AWDCrda, &ifds::s_FldProp_AWDCrda )
{
   cFields_ = 11;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTCCONF_VW::~dsi_DSTCCONF_VW()
{
}

BFDataImpl* dsi_DSTCCONF_VW::clone()
{
   dsi_DSTCCONF_VW* p = new dsi_DSTCCONF_VW;
   p->Using_AWD_ = Using_AWD_;
   p->BusinessArea_ = BusinessArea_;
   p->WorkType_ = WorkType_;
   p->StatusDesc_ = StatusDesc_;
   p->Batch_ = Batch_;
   p->Remarks_ = Remarks_;
   p->AWDComment_ = AWDComment_;
   p->Option_ = Option_;
   p->UpdAllNonFin_ = UpdAllNonFin_;
   p->AWDObjectId_ = AWDObjectId_;
   p->AWDCrda_ = AWDCrda_;
   return(p);
}

BFDataField* dsi_DSTCCONF_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000819: return ( &Using_AWD_ ); break; // Using_AWD
      case 40001211: return ( &BusinessArea_ ); break; // BusinessArea
      case 40001212: return ( &WorkType_ ); break; // WorkType
      case 40000374: return ( &StatusDesc_ ); break; // StatusDesc
      case 40000830: return ( &Batch_ ); break; // Batch
      case 40000590: return ( &Remarks_ ); break; // Remarks
      case 40001218: return ( &AWDComment_ ); break; // AWDComment
      case 40001320: return ( &Option_ ); break; // Option
      case 40005628: return ( &UpdAllNonFin_ ); break; // UpdAllNonFin
      case 40005715: return ( &AWDObjectId_ ); break; // AWDObjectId
      case 40005718: return ( &AWDCrda_ ); break; // AWDCrda
   }
   return( NULL );
}

const BFDataField* dsi_DSTCCONF_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTCCONF_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTCCONF_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 11 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &Using_AWD_; break;
            case 1: aFlds_[1] = &BusinessArea_; break;
            case 2: aFlds_[2] = &WorkType_; break;
            case 3: aFlds_[3] = &StatusDesc_; break;
            case 4: aFlds_[4] = &Batch_; break;
            case 5: aFlds_[5] = &Remarks_; break;
            case 6: aFlds_[6] = &AWDComment_; break;
            case 7: aFlds_[7] = &Option_; break;
            case 8: aFlds_[8] = &UpdAllNonFin_; break;
            case 9: aFlds_[9] = &AWDObjectId_; break;
            case 10: aFlds_[10] = &AWDCrda_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTCCONF_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTCCONF_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTCCONF_VW::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTCCONF_VW::getDefinedByteLength( void ) const
{
   return( 386 * sizeof( I_CHAR ) );
}

bool dsi_DSTCCONF_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTCCONF_VW::fieldExists( id );
}

bool dsi_DSTCCONF_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000819: return( true );
      case 40001211: return( true );
      case 40001212: return( true );
      case 40000374: return( true );
      case 40000830: return( true );
      case 40000590: return( true );
      case 40001218: return( true );
      case 40001320: return( true );
      case 40005628: return( true );
      case 40005715: return( true );
      case 40005718: return( true );
   }
   return false;
}

