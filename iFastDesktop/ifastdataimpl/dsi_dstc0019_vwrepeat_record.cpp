// BFDataImpl implementation file for DataSet DSTC0019.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Monday, November 14, 2016 05:09:26


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0019_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0019_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0019_VWRepeat_Record() { return new dsi_DSTC0019_VWRepeat_Record; }

dsi_DSTC0019_VWRepeat_Record::dsi_DSTC0019_VWRepeat_Record()
: BFDataImpl( 40000386 )
, rxFundCode_( ifds::rxFundCode, &ifds::s_FldProp_rxFundCode )
, rxClassCode_( ifds::rxClassCode, &ifds::s_FldProp_rxClassCode )
, RecordType_( ifds::RecordType, &ifds::s_FldProp_RecordType )
, PShipCode_( ifds::PShipCode, &ifds::s_FldProp_PShipCode )
, FreeYear_( ifds::FreeYear, &ifds::s_FldProp_FreeYear )
, YearDesc_( ifds::YearDesc, &ifds::s_FldProp_YearDesc )
, EligibleAmt_( ifds::EligibleAmt, &ifds::s_FldProp_EligibleAmt )
, EligibleUnits_( ifds::EligibleUnits, &ifds::s_FldProp_EligibleUnits )
, UsedAmt_( ifds::UsedAmt, &ifds::s_FldProp_UsedAmt )
, UsedUnits_( ifds::UsedUnits, &ifds::s_FldProp_UsedUnits )
, LeftAmt_( ifds::LeftAmt, &ifds::s_FldProp_LeftAmt )
, LeftUnits_( ifds::LeftUnits, &ifds::s_FldProp_LeftUnits )
, AmountType_( ifds::AmountType, &ifds::s_FldProp_AmountType )
, rxFundGroup_( ifds::rxFundGroup, &ifds::s_FldProp_rxFundGroup )
{
    cFields_ = 14;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0019_VWRepeat_Record::~dsi_DSTC0019_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0019_VWRepeat_Record::clone()
{
    dsi_DSTC0019_VWRepeat_Record* p = new dsi_DSTC0019_VWRepeat_Record;
    p->rxFundCode_ = rxFundCode_;
    p->rxClassCode_ = rxClassCode_;
    p->RecordType_ = RecordType_;
    p->PShipCode_ = PShipCode_;
    p->FreeYear_ = FreeYear_;
    p->YearDesc_ = YearDesc_;
    p->EligibleAmt_ = EligibleAmt_;
    p->EligibleUnits_ = EligibleUnits_;
    p->UsedAmt_ = UsedAmt_;
    p->UsedUnits_ = UsedUnits_;
    p->LeftAmt_ = LeftAmt_;
    p->LeftUnits_ = LeftUnits_;
    p->AmountType_ = AmountType_;
    p->rxFundGroup_ = rxFundGroup_;
    return(p);
}

BFDataField* dsi_DSTC0019_VWRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000286: return ( &rxFundCode_ ); break; // rxFundCode
        case 40000287: return ( &rxClassCode_ ); break; // rxClassCode
        case 40000951: return ( &RecordType_ ); break; // RecordType
        case 40000387: return ( &PShipCode_ ); break; // PShipCode
        case 40000388: return ( &FreeYear_ ); break; // FreeYear
        case 40000952: return ( &YearDesc_ ); break; // YearDesc
        case 40000389: return ( &EligibleAmt_ ); break; // EligibleAmt
        case 40000390: return ( &EligibleUnits_ ); break; // EligibleUnits
        case 40000391: return ( &UsedAmt_ ); break; // UsedAmt
        case 40000392: return ( &UsedUnits_ ); break; // UsedUnits
        case 40000393: return ( &LeftAmt_ ); break; // LeftAmt
        case 40000394: return ( &LeftUnits_ ); break; // LeftUnits
        case 40000232: return ( &AmountType_ ); break; // AmountType
        case 40004619: return ( &rxFundGroup_ ); break; // rxFundGroup
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0019_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0019_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0019_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 14 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &rxFundCode_; break;
                case 1: aFlds_[1] = &rxClassCode_; break;
                case 2: aFlds_[2] = &RecordType_; break;
                case 3: aFlds_[3] = &PShipCode_; break;
                case 4: aFlds_[4] = &FreeYear_; break;
                case 5: aFlds_[5] = &YearDesc_; break;
                case 6: aFlds_[6] = &EligibleAmt_; break;
                case 7: aFlds_[7] = &EligibleUnits_; break;
                case 8: aFlds_[8] = &UsedAmt_; break;
                case 9: aFlds_[9] = &UsedUnits_; break;
                case 10: aFlds_[10] = &LeftAmt_; break;
                case 11: aFlds_[11] = &LeftUnits_; break;
                case 12: aFlds_[12] = &AmountType_; break;
                case 13: aFlds_[13] = &rxFundGroup_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0019_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0019_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0019_VWRepeat_Record::getLargestDefinedField( void ) const
{
    return( 60 );
}

unsigned long dsi_DSTC0019_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 568 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0019_VWRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0019_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0019_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000286: return ( true );
        case 40000287: return ( true );
        case 40000951: return ( true );
        case 40000387: return ( true );
        case 40000388: return ( true );
        case 40000952: return ( true );
        case 40000389: return ( true );
        case 40000390: return ( true );
        case 40000391: return ( true );
        case 40000392: return ( true );
        case 40000393: return ( true );
        case 40000394: return ( true );
        case 40000232: return ( true );
        case 40004619: return ( true );
    }
    return false;
}

