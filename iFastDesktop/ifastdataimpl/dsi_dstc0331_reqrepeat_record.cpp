// BFDataImpl implementation file for DataSet DSTC0331.REQRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0331_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0331_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0331_REQRepeat_Record() { return new dsi_DSTC0331_REQRepeat_Record; }

dsi_DSTC0331_REQRepeat_Record::dsi_DSTC0331_REQRepeat_Record()
: BFDataImpl( 40005062 )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, EntityId_( ifds::EntityId, &ifds::s_FldProp_EntityId )
, WhereUse_( ifds::WhereUse, &ifds::s_FldProp_WhereUse )
, WhereUseCode_( ifds::WhereUseCode, &ifds::s_FldProp_WhereUseCode )
, EntityType_( ifds::EntityType, &ifds::s_FldProp_EntityType )
, RecId_( ifds::RecId, &ifds::s_FldProp_RecId )
, Version_( ifds::Version, &ifds::s_FldProp_Version )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, HoldingCompName_( ifds::HoldingCompName, &ifds::s_FldProp_HoldingCompName )
, CompUsage_( ifds::CompUsage, &ifds::s_FldProp_CompUsage )
, AggregationMethod_( ifds::AggregationMethod, &ifds::s_FldProp_AggregationMethod )
, LangCode_( ifds::LangCode, &ifds::s_FldProp_LangCode )
{
   cFields_ = 13;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0331_REQRepeat_Record::~dsi_DSTC0331_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0331_REQRepeat_Record::clone()
{
   dsi_DSTC0331_REQRepeat_Record* p = new dsi_DSTC0331_REQRepeat_Record;
   p->RunMode_ = RunMode_;
   p->EntityId_ = EntityId_;
   p->WhereUse_ = WhereUse_;
   p->WhereUseCode_ = WhereUseCode_;
   p->EntityType_ = EntityType_;
   p->RecId_ = RecId_;
   p->Version_ = Version_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->HoldingCompName_ = HoldingCompName_;
   p->CompUsage_ = CompUsage_;
   p->AggregationMethod_ = AggregationMethod_;
   p->LangCode_ = LangCode_;
   return(p);
}

BFDataField* dsi_DSTC0331_REQRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40000033: return ( &EntityId_ ); break; // EntityId
      case 40004727: return ( &WhereUse_ ); break; // WhereUse
      case 40004728: return ( &WhereUseCode_ ); break; // WhereUseCode
      case 40000604: return ( &EntityType_ ); break; // EntityType
      case 40003737: return ( &RecId_ ); break; // RecId
      case 40003739: return ( &Version_ ); break; // Version
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40007043: return ( &HoldingCompName_ ); break; // HoldingCompName
      case 40007057: return ( &CompUsage_ ); break; // CompUsage
      case 40007048: return ( &AggregationMethod_ ); break; // AggregationMethod
      case 40000119: return ( &LangCode_ ); break; // LangCode
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0331_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0331_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0331_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 13 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RunMode_; break;
            case 1: aFlds_[1] = &EntityId_; break;
            case 2: aFlds_[2] = &WhereUse_; break;
            case 3: aFlds_[3] = &WhereUseCode_; break;
            case 4: aFlds_[4] = &EntityType_; break;
            case 5: aFlds_[5] = &RecId_; break;
            case 6: aFlds_[6] = &Version_; break;
            case 7: aFlds_[7] = &EffectiveDate_; break;
            case 8: aFlds_[8] = &StopDate_; break;
            case 9: aFlds_[9] = &HoldingCompName_; break;
            case 10: aFlds_[10] = &CompUsage_; break;
            case 11: aFlds_[11] = &AggregationMethod_; break;
            case 12: aFlds_[12] = &LangCode_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0331_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0331_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0331_REQRepeat_Record::getLargestDefinedField( void ) const
{
   return( 80 );
}

unsigned long dsi_DSTC0331_REQRepeat_Record::getDefinedByteLength( void ) const
{
   return( 372 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0331_REQRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0331_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0331_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000990: return( true );
      case 40000033: return( true );
      case 40004727: return( true );
      case 40004728: return( true );
      case 40000604: return( true );
      case 40003737: return( true );
      case 40003739: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40007043: return( true );
      case 40007057: return( true );
      case 40007048: return( true );
      case 40000119: return( true );
   }
   return false;
}

