// BFDataImpl implementation file for DataSet DSTC0057.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0057_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0057_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0057_VWRepeat_Record() { return new dsi_DSTC0057_VWRepeat_Record; }

dsi_DSTC0057_VWRepeat_Record::dsi_DSTC0057_VWRepeat_Record()
: BFDataImpl( 40000709 )
, EntityId_( ifds::EntityId, &ifds::s_FldProp_EntityId )
, Salutation_( ifds::Salutation, &ifds::s_FldProp_Salutation )
, ERepLastName_( ifds::ERepLastName, &ifds::s_FldProp_ERepLastName )
, ERepFirstName_( ifds::ERepFirstName, &ifds::s_FldProp_ERepFirstName )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, AmtAssigned_( ifds::AmtAssigned, &ifds::s_FldProp_AmtAssigned )
, AmountType_( ifds::AmountType, &ifds::s_FldProp_AmountType )
, AmountTypeDesc_( ifds::AmountTypeDesc, &ifds::s_FldProp_AmountTypeDesc )
, ReasonCode_( ifds::ReasonCode, &ifds::s_FldProp_ReasonCode )
, ReasonDesc_( ifds::ReasonDesc, &ifds::s_FldProp_ReasonDesc )
, DefaultAddrCode_( ifds::DefaultAddrCode, &ifds::s_FldProp_DefaultAddrCode )
, AuthorizedToTrade_( ifds::AuthorizedToTrade, &ifds::s_FldProp_AuthorizedToTrade )
, EffectiveFrom_( ifds::EffectiveFrom, &ifds::s_FldProp_EffectiveFrom )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, VersionNum_( ifds::VersionNum, &ifds::s_FldProp_VersionNum )
{
   cFields_ = 20;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0057_VWRepeat_Record::~dsi_DSTC0057_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0057_VWRepeat_Record::clone()
{
   dsi_DSTC0057_VWRepeat_Record* p = new dsi_DSTC0057_VWRepeat_Record;
   p->EntityId_ = EntityId_;
   p->Salutation_ = Salutation_;
   p->ERepLastName_ = ERepLastName_;
   p->ERepFirstName_ = ERepFirstName_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->AmtAssigned_ = AmtAssigned_;
   p->AmountType_ = AmountType_;
   p->AmountTypeDesc_ = AmountTypeDesc_;
   p->ReasonCode_ = ReasonCode_;
   p->ReasonDesc_ = ReasonDesc_;
   p->DefaultAddrCode_ = DefaultAddrCode_;
   p->AuthorizedToTrade_ = AuthorizedToTrade_;
   p->EffectiveFrom_ = EffectiveFrom_;
   p->StopDate_ = StopDate_;
   p->ProcessDate_ = ProcessDate_;
   p->ModDate_ = ModDate_;
   p->Username_ = Username_;
   p->ModUser_ = ModUser_;
   p->VersionNum_ = VersionNum_;
   return(p);
}

BFDataField* dsi_DSTC0057_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000033: return ( &EntityId_ ); break; // EntityId
      case 40000416: return ( &Salutation_ ); break; // Salutation
      case 40000710: return ( &ERepLastName_ ); break; // ERepLastName
      case 40000711: return ( &ERepFirstName_ ); break; // ERepFirstName
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40001013: return ( &AmtAssigned_ ); break; // AmtAssigned
      case 40000232: return ( &AmountType_ ); break; // AmountType
      case 40000233: return ( &AmountTypeDesc_ ); break; // AmountTypeDesc
      case 40000618: return ( &ReasonCode_ ); break; // ReasonCode
      case 40000619: return ( &ReasonDesc_ ); break; // ReasonDesc
      case 40000712: return ( &DefaultAddrCode_ ); break; // DefaultAddrCode
      case 40000713: return ( &AuthorizedToTrade_ ); break; // AuthorizedToTrade
      case 40000223: return ( &EffectiveFrom_ ); break; // EffectiveFrom
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40000228: return ( &VersionNum_ ); break; // VersionNum
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0057_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0057_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0057_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 20 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &EntityId_; break;
            case 1: aFlds_[1] = &Salutation_; break;
            case 2: aFlds_[2] = &ERepLastName_; break;
            case 3: aFlds_[3] = &ERepFirstName_; break;
            case 4: aFlds_[4] = &FundCode_; break;
            case 5: aFlds_[5] = &ClassCode_; break;
            case 6: aFlds_[6] = &AmtAssigned_; break;
            case 7: aFlds_[7] = &AmountType_; break;
            case 8: aFlds_[8] = &AmountTypeDesc_; break;
            case 9: aFlds_[9] = &ReasonCode_; break;
            case 10: aFlds_[10] = &ReasonDesc_; break;
            case 11: aFlds_[11] = &DefaultAddrCode_; break;
            case 12: aFlds_[12] = &AuthorizedToTrade_; break;
            case 13: aFlds_[13] = &EffectiveFrom_; break;
            case 14: aFlds_[14] = &StopDate_; break;
            case 15: aFlds_[15] = &ProcessDate_; break;
            case 16: aFlds_[16] = &ModDate_; break;
            case 17: aFlds_[17] = &Username_; break;
            case 18: aFlds_[18] = &ModUser_; break;
            case 19: aFlds_[19] = &VersionNum_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0057_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0057_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0057_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0057_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 978 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0057_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0057_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0057_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000033: return( true );
      case 40000416: return( true );
      case 40000710: return( true );
      case 40000711: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40001013: return( true );
      case 40000232: return( true );
      case 40000233: return( true );
      case 40000618: return( true );
      case 40000619: return( true );
      case 40000712: return( true );
      case 40000713: return( true );
      case 40000223: return( true );
      case 40000279: return( true );
      case 40000216: return( true );
      case 40000217: return( true );
      case 40000117: return( true );
      case 40000218: return( true );
      case 40000228: return( true );
   }
   return false;
}

