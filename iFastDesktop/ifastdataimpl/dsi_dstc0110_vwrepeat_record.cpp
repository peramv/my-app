// BFDataImpl implementation file for DataSet DSTC0110.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0110_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0110_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0110_VWRepeat_Record() { return new dsi_DSTC0110_VWRepeat_Record; }

dsi_DSTC0110_VWRepeat_Record::dsi_DSTC0110_VWRepeat_Record()
: BFDataImpl( 40001100 )
, FieldLabel_( ifds::FieldLabel, &ifds::s_FldProp_FieldLabel )
, PreviousDisp_( ifds::PreviousDisp, &ifds::s_FldProp_PreviousDisp )
, NewDisp_( ifds::NewDisp, &ifds::s_FldProp_NewDisp )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModTime_( ifds::ModTime, &ifds::s_FldProp_ModTime )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, AWDObjectId_( ifds::AWDObjectId, &ifds::s_FldProp_AWDObjectId )
, WorkType_( ifds::WorkType, &ifds::s_FldProp_WorkType )
{
   cFields_ = 8;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0110_VWRepeat_Record::~dsi_DSTC0110_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0110_VWRepeat_Record::clone()
{
   dsi_DSTC0110_VWRepeat_Record* p = new dsi_DSTC0110_VWRepeat_Record;
   p->FieldLabel_ = FieldLabel_;
   p->PreviousDisp_ = PreviousDisp_;
   p->NewDisp_ = NewDisp_;
   p->ModDate_ = ModDate_;
   p->ModTime_ = ModTime_;
   p->ModUser_ = ModUser_;
   p->AWDObjectId_ = AWDObjectId_;
   p->WorkType_ = WorkType_;
   return(p);
}

BFDataField* dsi_DSTC0110_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40001096: return ( &FieldLabel_ ); break; // FieldLabel
      case 40001097: return ( &PreviousDisp_ ); break; // PreviousDisp
      case 40003757: return ( &NewDisp_ ); break; // NewDisp
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40002595: return ( &ModTime_ ); break; // ModTime
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40005715: return ( &AWDObjectId_ ); break; // AWDObjectId
      case 40001212: return ( &WorkType_ ); break; // WorkType
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0110_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0110_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0110_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 8 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FieldLabel_; break;
            case 1: aFlds_[1] = &PreviousDisp_; break;
            case 2: aFlds_[2] = &NewDisp_; break;
            case 3: aFlds_[3] = &ModDate_; break;
            case 4: aFlds_[4] = &ModTime_; break;
            case 5: aFlds_[5] = &ModUser_; break;
            case 6: aFlds_[6] = &AWDObjectId_; break;
            case 7: aFlds_[7] = &WorkType_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0110_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0110_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0110_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0110_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 385 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0110_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0110_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0110_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40001096: return( true );
      case 40001097: return( true );
      case 40003757: return( true );
      case 40000217: return( true );
      case 40002595: return( true );
      case 40000218: return( true );
      case 40005715: return( true );
      case 40001212: return( true );
   }
   return false;
}

