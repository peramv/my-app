// BFDataImpl implementation file for DataSet DSTC0326.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Friday, August 19, 2016 04:08:08


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0326_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0326_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0326_VWRepeat_Record() { return new dsi_DSTC0326_VWRepeat_Record; }

dsi_DSTC0326_VWRepeat_Record::dsi_DSTC0326_VWRepeat_Record()
: BFDataImpl( 40004864 )
, FundBrokerCode_( ifds::FundBrokerCode, &ifds::s_FldProp_FundBrokerCode )
, Remarks1_( ifds::Remarks1, &ifds::s_FldProp_Remarks1 )
, PriceType_( ifds::PriceType, &ifds::s_FldProp_PriceType )
, RoutingType_( ifds::RoutingType, &ifds::s_FldProp_RoutingType )
, PUEVCapable_( ifds::PUEVCapable, &ifds::s_FldProp_PUEVCapable )
, FrClearingMethod_( ifds::FrClearingMethod, &ifds::s_FldProp_FrClearingMethod )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, VersionNum_( ifds::VersionNum, &ifds::s_FldProp_VersionNum )
, RecId_( ifds::RecId, &ifds::s_FldProp_RecId )
, EntityId_( ifds::EntityId, &ifds::s_FldProp_EntityId )
, WhereUseFundBrokerRId_( ifds::WhereUseFundBrokerRId, &ifds::s_FldProp_WhereUseFundBrokerRId )
, WhereUseFundBrokerVer_( ifds::WhereUseFundBrokerVer, &ifds::s_FldProp_WhereUseFundBrokerVer )
, Name_( ifds::Name, &ifds::s_FldProp_Name )
, FirstName_( ifds::FirstName, &ifds::s_FldProp_FirstName )
, AddrId_( ifds::AddrId, &ifds::s_FldProp_AddrId )
, EntityAddrVer_( ifds::EntityAddrVer, &ifds::s_FldProp_EntityAddrVer )
, EntityAddrXrefRid_( ifds::EntityAddrXrefRid, &ifds::s_FldProp_EntityAddrXrefRid )
, EntityAddrXrefVer_( ifds::EntityAddrXrefVer, &ifds::s_FldProp_EntityAddrXrefVer )
, AddrLine1_( ifds::AddrLine1, &ifds::s_FldProp_AddrLine1 )
, AddrLine2_( ifds::AddrLine2, &ifds::s_FldProp_AddrLine2 )
, AddrLine3_( ifds::AddrLine3, &ifds::s_FldProp_AddrLine3 )
, AddrLine4_( ifds::AddrLine4, &ifds::s_FldProp_AddrLine4 )
, Province_( ifds::Province, &ifds::s_FldProp_Province )
, Country_( ifds::Country, &ifds::s_FldProp_Country )
, PostalCode_( ifds::PostalCode, &ifds::s_FldProp_PostalCode )
, WhereUseContact1RecId_( ifds::WhereUseContact1RecId, &ifds::s_FldProp_WhereUseContact1RecId )
, Contact1EntityVersion_( ifds::Contact1EntityVersion, &ifds::s_FldProp_Contact1EntityVersion )
, Contact1EntityID_( ifds::Contact1EntityID, &ifds::s_FldProp_Contact1EntityID )
, WhereUseContact2RecId_( ifds::WhereUseContact2RecId, &ifds::s_FldProp_WhereUseContact2RecId )
, Contact2EntityVersion_( ifds::Contact2EntityVersion, &ifds::s_FldProp_Contact2EntityVersion )
, Contact2EntityID_( ifds::Contact2EntityID, &ifds::s_FldProp_Contact2EntityID )
, HasPendingTrades_( ifds::HasPendingTrades, &ifds::s_FldProp_HasPendingTrades )
, LatestPendingTradeDeff_( ifds::LatestPendingTradeDeff, &ifds::s_FldProp_LatestPendingTradeDeff )
, FundBrokerOffsetTime_( ifds::FundBrokerOffsetTime, &ifds::s_FldProp_FundBrokerOffsetTime )
, FbPortfolio_( ifds::FbPortfolio, &ifds::s_FldProp_FbPortfolio )
, FbBranch_( ifds::FbBranch, &ifds::s_FldProp_FbBranch )
, AcctServicer_( ifds::AcctServicer, &ifds::s_FldProp_AcctServicer )
, FbSettleType_( ifds::FbSettleType, &ifds::s_FldProp_FbSettleType )
, FbAcctDesig_( ifds::FbAcctDesig, &ifds::s_FldProp_FbAcctDesig )
, FbAgent_( ifds::FbAgent, &ifds::s_FldProp_FbAgent )
, RegAcct_( ifds::RegAcct, &ifds::s_FldProp_RegAcct )
, FbDealer_( ifds::FbDealer, &ifds::s_FldProp_FbDealer )
, RegName_( ifds::RegName, &ifds::s_FldProp_RegName )
, FbTemplate_( ifds::FbTemplate, &ifds::s_FldProp_FbTemplate )
, RegAddrID_( ifds::RegAddrID, &ifds::s_FldProp_RegAddrID )
, RegEntityAddrVersion_( ifds::RegEntityAddrVersion, &ifds::s_FldProp_RegEntityAddrVersion )
, RegEntityAddrXrefRId_( ifds::RegEntityAddrXrefRId, &ifds::s_FldProp_RegEntityAddrXrefRId )
, RegEntityAddrXrefVer_( ifds::RegEntityAddrXrefVer, &ifds::s_FldProp_RegEntityAddrXrefVer )
, RegAddrLine1_( ifds::RegAddrLine1, &ifds::s_FldProp_RegAddrLine1 )
, RegAddrLine2_( ifds::RegAddrLine2, &ifds::s_FldProp_RegAddrLine2 )
, RegAddrLine3_( ifds::RegAddrLine3, &ifds::s_FldProp_RegAddrLine3 )
, RegAddrLine4_( ifds::RegAddrLine4, &ifds::s_FldProp_RegAddrLine4 )
, RegProvince_( ifds::RegProvince, &ifds::s_FldProp_RegProvince )
, RegCountry_( ifds::RegCountry, &ifds::s_FldProp_RegCountry )
, RegPostalCode_( ifds::RegPostalCode, &ifds::s_FldProp_RegPostalCode )
, FbTagent_( ifds::FbTagent, &ifds::s_FldProp_FbTagent )
, FbFndCmpny_( ifds::FbFndCmpny, &ifds::s_FldProp_FbFndCmpny )
, FbType_( ifds::FbType, &ifds::s_FldProp_FbType )
, FbClientGrp_( ifds::FbClientGrp, &ifds::s_FldProp_FbClientGrp )
{
    cFields_ = 64;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0326_VWRepeat_Record::~dsi_DSTC0326_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0326_VWRepeat_Record::clone()
{
    dsi_DSTC0326_VWRepeat_Record* p = new dsi_DSTC0326_VWRepeat_Record;
    p->FundBrokerCode_ = FundBrokerCode_;
    p->Remarks1_ = Remarks1_;
    p->PriceType_ = PriceType_;
    p->RoutingType_ = RoutingType_;
    p->PUEVCapable_ = PUEVCapable_;
    p->FrClearingMethod_ = FrClearingMethod_;
    p->StopDate_ = StopDate_;
    p->EffectiveDate_ = EffectiveDate_;
    p->ProcessDate_ = ProcessDate_;
    p->Username_ = Username_;
    p->ModDate_ = ModDate_;
    p->ModUser_ = ModUser_;
    p->VersionNum_ = VersionNum_;
    p->RecId_ = RecId_;
    p->EntityId_ = EntityId_;
    p->WhereUseFundBrokerRId_ = WhereUseFundBrokerRId_;
    p->WhereUseFundBrokerVer_ = WhereUseFundBrokerVer_;
    p->Name_ = Name_;
    p->FirstName_ = FirstName_;
    p->AddrId_ = AddrId_;
    p->EntityAddrVer_ = EntityAddrVer_;
    p->EntityAddrXrefRid_ = EntityAddrXrefRid_;
    p->EntityAddrXrefVer_ = EntityAddrXrefVer_;
    p->AddrLine1_ = AddrLine1_;
    p->AddrLine2_ = AddrLine2_;
    p->AddrLine3_ = AddrLine3_;
    p->AddrLine4_ = AddrLine4_;
    p->Province_ = Province_;
    p->Country_ = Country_;
    p->PostalCode_ = PostalCode_;
    p->WhereUseContact1RecId_ = WhereUseContact1RecId_;
    p->Contact1EntityVersion_ = Contact1EntityVersion_;
    p->Contact1EntityID_ = Contact1EntityID_;
    p->WhereUseContact2RecId_ = WhereUseContact2RecId_;
    p->Contact2EntityVersion_ = Contact2EntityVersion_;
    p->Contact2EntityID_ = Contact2EntityID_;
    p->HasPendingTrades_ = HasPendingTrades_;
    p->LatestPendingTradeDeff_ = LatestPendingTradeDeff_;
    p->FundBrokerOffsetTime_ = FundBrokerOffsetTime_;
    p->FbPortfolio_ = FbPortfolio_;
    p->FbBranch_ = FbBranch_;
    p->AcctServicer_ = AcctServicer_;
    p->FbSettleType_ = FbSettleType_;
    p->FbAcctDesig_ = FbAcctDesig_;
    p->FbAgent_ = FbAgent_;
    p->RegAcct_ = RegAcct_;
    p->FbDealer_ = FbDealer_;
    p->RegName_ = RegName_;
    p->FbTemplate_ = FbTemplate_;
    p->RegAddrID_ = RegAddrID_;
    p->RegEntityAddrVersion_ = RegEntityAddrVersion_;
    p->RegEntityAddrXrefRId_ = RegEntityAddrXrefRId_;
    p->RegEntityAddrXrefVer_ = RegEntityAddrXrefVer_;
    p->RegAddrLine1_ = RegAddrLine1_;
    p->RegAddrLine2_ = RegAddrLine2_;
    p->RegAddrLine3_ = RegAddrLine3_;
    p->RegAddrLine4_ = RegAddrLine4_;
    p->RegProvince_ = RegProvince_;
    p->RegCountry_ = RegCountry_;
    p->RegPostalCode_ = RegPostalCode_;
    p->FbTagent_ = FbTagent_;
    p->FbFndCmpny_ = FbFndCmpny_;
    p->FbType_ = FbType_;
    p->FbClientGrp_ = FbClientGrp_;
    return(p);
}

BFDataField* dsi_DSTC0326_VWRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40004712: return ( &FundBrokerCode_ ); break; // FundBrokerCode
        case 40000478: return ( &Remarks1_ ); break; // Remarks1
        case 40004718: return ( &PriceType_ ); break; // PriceType
        case 40004717: return ( &RoutingType_ ); break; // RoutingType
        case 40004595: return ( &PUEVCapable_ ); break; // PUEVCapable
        case 40004280: return ( &FrClearingMethod_ ); break; // FrClearingMethod
        case 40000279: return ( &StopDate_ ); break; // StopDate
        case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
        case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
        case 40000117: return ( &Username_ ); break; // Username
        case 40000217: return ( &ModDate_ ); break; // ModDate
        case 40000218: return ( &ModUser_ ); break; // ModUser
        case 40000228: return ( &VersionNum_ ); break; // VersionNum
        case 40003737: return ( &RecId_ ); break; // RecId
        case 40000033: return ( &EntityId_ ); break; // EntityId
        case 40004715: return ( &WhereUseFundBrokerRId_ ); break; // WhereUseFundBrokerRId
        case 40004743: return ( &WhereUseFundBrokerVer_ ); break; // WhereUseFundBrokerVer
        case 40001090: return ( &Name_ ); break; // Name
        case 40000129: return ( &FirstName_ ); break; // FirstName
        case 40000810: return ( &AddrId_ ); break; // AddrId
        case 40000967: return ( &EntityAddrVer_ ); break; // EntityAddrVer
        case 40000970: return ( &EntityAddrXrefRid_ ); break; // EntityAddrXrefRid
        case 40000969: return ( &EntityAddrXrefVer_ ); break; // EntityAddrXrefVer
        case 40000280: return ( &AddrLine1_ ); break; // AddrLine1
        case 40000281: return ( &AddrLine2_ ); break; // AddrLine2
        case 40000282: return ( &AddrLine3_ ); break; // AddrLine3
        case 40000283: return ( &AddrLine4_ ); break; // AddrLine4
        case 40000811: return ( &Province_ ); break; // Province
        case 40000813: return ( &Country_ ); break; // Country
        case 40000143: return ( &PostalCode_ ); break; // PostalCode
        case 40004724: return ( &WhereUseContact1RecId_ ); break; // WhereUseContact1RecId
        case 40004722: return ( &Contact1EntityVersion_ ); break; // Contact1EntityVersion
        case 40004719: return ( &Contact1EntityID_ ); break; // Contact1EntityID
        case 40004725: return ( &WhereUseContact2RecId_ ); break; // WhereUseContact2RecId
        case 40004723: return ( &Contact2EntityVersion_ ); break; // Contact2EntityVersion
        case 40004720: return ( &Contact2EntityID_ ); break; // Contact2EntityID
        case 40006361: return ( &HasPendingTrades_ ); break; // HasPendingTrades
        case 40006362: return ( &LatestPendingTradeDeff_ ); break; // LatestPendingTradeDeff
        case 40006386: return ( &FundBrokerOffsetTime_ ); break; // FundBrokerOffsetTime
        case 40006604: return ( &FbPortfolio_ ); break; // FbPortfolio
        case 40006605: return ( &FbBranch_ ); break; // FbBranch
        case 40006611: return ( &AcctServicer_ ); break; // AcctServicer
        case 40006606: return ( &FbSettleType_ ); break; // FbSettleType
        case 40006607: return ( &FbAcctDesig_ ); break; // FbAcctDesig
        case 40006608: return ( &FbAgent_ ); break; // FbAgent
        case 40006612: return ( &RegAcct_ ); break; // RegAcct
        case 40006609: return ( &FbDealer_ ); break; // FbDealer
        case 40006613: return ( &RegName_ ); break; // RegName
        case 40006610: return ( &FbTemplate_ ); break; // FbTemplate
        case 40006615: return ( &RegAddrID_ ); break; // RegAddrID
        case 40006616: return ( &RegEntityAddrVersion_ ); break; // RegEntityAddrVersion
        case 40006617: return ( &RegEntityAddrXrefRId_ ); break; // RegEntityAddrXrefRId
        case 40006618: return ( &RegEntityAddrXrefVer_ ); break; // RegEntityAddrXrefVer
        case 40006619: return ( &RegAddrLine1_ ); break; // RegAddrLine1
        case 40006620: return ( &RegAddrLine2_ ); break; // RegAddrLine2
        case 40006621: return ( &RegAddrLine3_ ); break; // RegAddrLine3
        case 40006622: return ( &RegAddrLine4_ ); break; // RegAddrLine4
        case 40006624: return ( &RegProvince_ ); break; // RegProvince
        case 40006625: return ( &RegCountry_ ); break; // RegCountry
        case 40006626: return ( &RegPostalCode_ ); break; // RegPostalCode
        case 40007647: return ( &FbTagent_ ); break; // FbTagent
        case 40007648: return ( &FbFndCmpny_ ); break; // FbFndCmpny
        case 40007649: return ( &FbType_ ); break; // FbType
        case 40007650: return ( &FbClientGrp_ ); break; // FbClientGrp
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0326_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0326_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0326_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 64 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &FundBrokerCode_; break;
                case 1: aFlds_[1] = &Remarks1_; break;
                case 2: aFlds_[2] = &PriceType_; break;
                case 3: aFlds_[3] = &RoutingType_; break;
                case 4: aFlds_[4] = &PUEVCapable_; break;
                case 5: aFlds_[5] = &FrClearingMethod_; break;
                case 6: aFlds_[6] = &StopDate_; break;
                case 7: aFlds_[7] = &EffectiveDate_; break;
                case 8: aFlds_[8] = &ProcessDate_; break;
                case 9: aFlds_[9] = &Username_; break;
                case 10: aFlds_[10] = &ModDate_; break;
                case 11: aFlds_[11] = &ModUser_; break;
                case 12: aFlds_[12] = &VersionNum_; break;
                case 13: aFlds_[13] = &RecId_; break;
                case 14: aFlds_[14] = &EntityId_; break;
                case 15: aFlds_[15] = &WhereUseFundBrokerRId_; break;
                case 16: aFlds_[16] = &WhereUseFundBrokerVer_; break;
                case 17: aFlds_[17] = &Name_; break;
                case 18: aFlds_[18] = &FirstName_; break;
                case 19: aFlds_[19] = &AddrId_; break;
                case 20: aFlds_[20] = &EntityAddrVer_; break;
                case 21: aFlds_[21] = &EntityAddrXrefRid_; break;
                case 22: aFlds_[22] = &EntityAddrXrefVer_; break;
                case 23: aFlds_[23] = &AddrLine1_; break;
                case 24: aFlds_[24] = &AddrLine2_; break;
                case 25: aFlds_[25] = &AddrLine3_; break;
                case 26: aFlds_[26] = &AddrLine4_; break;
                case 27: aFlds_[27] = &Province_; break;
                case 28: aFlds_[28] = &Country_; break;
                case 29: aFlds_[29] = &PostalCode_; break;
                case 30: aFlds_[30] = &WhereUseContact1RecId_; break;
                case 31: aFlds_[31] = &Contact1EntityVersion_; break;
                case 32: aFlds_[32] = &Contact1EntityID_; break;
                case 33: aFlds_[33] = &WhereUseContact2RecId_; break;
                case 34: aFlds_[34] = &Contact2EntityVersion_; break;
                case 35: aFlds_[35] = &Contact2EntityID_; break;
                case 36: aFlds_[36] = &HasPendingTrades_; break;
                case 37: aFlds_[37] = &LatestPendingTradeDeff_; break;
                case 38: aFlds_[38] = &FundBrokerOffsetTime_; break;
                case 39: aFlds_[39] = &FbPortfolio_; break;
                case 40: aFlds_[40] = &FbBranch_; break;
                case 41: aFlds_[41] = &AcctServicer_; break;
                case 42: aFlds_[42] = &FbSettleType_; break;
                case 43: aFlds_[43] = &FbAcctDesig_; break;
                case 44: aFlds_[44] = &FbAgent_; break;
                case 45: aFlds_[45] = &RegAcct_; break;
                case 46: aFlds_[46] = &FbDealer_; break;
                case 47: aFlds_[47] = &RegName_; break;
                case 48: aFlds_[48] = &FbTemplate_; break;
                case 49: aFlds_[49] = &RegAddrID_; break;
                case 50: aFlds_[50] = &RegEntityAddrVersion_; break;
                case 51: aFlds_[51] = &RegEntityAddrXrefRId_; break;
                case 52: aFlds_[52] = &RegEntityAddrXrefVer_; break;
                case 53: aFlds_[53] = &RegAddrLine1_; break;
                case 54: aFlds_[54] = &RegAddrLine2_; break;
                case 55: aFlds_[55] = &RegAddrLine3_; break;
                case 56: aFlds_[56] = &RegAddrLine4_; break;
                case 57: aFlds_[57] = &RegProvince_; break;
                case 58: aFlds_[58] = &RegCountry_; break;
                case 59: aFlds_[59] = &RegPostalCode_; break;
                case 60: aFlds_[60] = &FbTagent_; break;
                case 61: aFlds_[61] = &FbFndCmpny_; break;
                case 62: aFlds_[62] = &FbType_; break;
                case 63: aFlds_[63] = &FbClientGrp_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0326_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0326_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0326_VWRepeat_Record::getLargestDefinedField( void ) const
{
    return( 60 );
}

unsigned long dsi_DSTC0326_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 2061 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0326_VWRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0326_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0326_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40004712: return ( true );
        case 40000478: return ( true );
        case 40004718: return ( true );
        case 40004717: return ( true );
        case 40004595: return ( true );
        case 40004280: return ( true );
        case 40000279: return ( true );
        case 40000327: return ( true );
        case 40000216: return ( true );
        case 40000117: return ( true );
        case 40000217: return ( true );
        case 40000218: return ( true );
        case 40000228: return ( true );
        case 40003737: return ( true );
        case 40000033: return ( true );
        case 40004715: return ( true );
        case 40004743: return ( true );
        case 40001090: return ( true );
        case 40000129: return ( true );
        case 40000810: return ( true );
        case 40000967: return ( true );
        case 40000970: return ( true );
        case 40000969: return ( true );
        case 40000280: return ( true );
        case 40000281: return ( true );
        case 40000282: return ( true );
        case 40000283: return ( true );
        case 40000811: return ( true );
        case 40000813: return ( true );
        case 40000143: return ( true );
        case 40004724: return ( true );
        case 40004722: return ( true );
        case 40004719: return ( true );
        case 40004725: return ( true );
        case 40004723: return ( true );
        case 40004720: return ( true );
        case 40006361: return ( true );
        case 40006362: return ( true );
        case 40006386: return ( true );
        case 40006604: return ( true );
        case 40006605: return ( true );
        case 40006611: return ( true );
        case 40006606: return ( true );
        case 40006607: return ( true );
        case 40006608: return ( true );
        case 40006612: return ( true );
        case 40006609: return ( true );
        case 40006613: return ( true );
        case 40006610: return ( true );
        case 40006615: return ( true );
        case 40006616: return ( true );
        case 40006617: return ( true );
        case 40006618: return ( true );
        case 40006619: return ( true );
        case 40006620: return ( true );
        case 40006621: return ( true );
        case 40006622: return ( true );
        case 40006624: return ( true );
        case 40006625: return ( true );
        case 40006626: return ( true );
        case 40007647: return ( true );
        case 40007648: return ( true );
        case 40007649: return ( true );
        case 40007650: return ( true );
    }
    return false;
}

