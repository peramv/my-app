// BFDataImpl implementation file for DataSet DSTC0197.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0197_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0197_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0197_VWRepeat_Record() { return new dsi_DSTC0197_VWRepeat_Record; }

dsi_DSTC0197_VWRepeat_Record::dsi_DSTC0197_VWRepeat_Record()
: BFDataImpl( 40002934 )
, ScaleRate_( ifds::ScaleRate, &ifds::s_FldProp_ScaleRate )
, UpperBound_( ifds::UpperBound, &ifds::s_FldProp_UpperBound )
, LowerBound_( ifds::LowerBound, &ifds::s_FldProp_LowerBound )
, Level_( ifds::Level, &ifds::s_FldProp_Level )
, FeeParamRid_( ifds::FeeParamRid, &ifds::s_FldProp_FeeParamRid )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, ScaleMinFee_( ifds::ScaleMinFee, &ifds::s_FldProp_ScaleMinFee )
, ScaleMaxFee_( ifds::ScaleMaxFee, &ifds::s_FldProp_ScaleMaxFee )
{
   cFields_ = 8;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0197_VWRepeat_Record::~dsi_DSTC0197_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0197_VWRepeat_Record::clone()
{
   dsi_DSTC0197_VWRepeat_Record* p = new dsi_DSTC0197_VWRepeat_Record;
   p->ScaleRate_ = ScaleRate_;
   p->UpperBound_ = UpperBound_;
   p->LowerBound_ = LowerBound_;
   p->Level_ = Level_;
   p->FeeParamRid_ = FeeParamRid_;
   p->EffectiveDate_ = EffectiveDate_;
   p->ScaleMinFee_ = ScaleMinFee_;
   p->ScaleMaxFee_ = ScaleMaxFee_;
   return(p);
}

BFDataField* dsi_DSTC0197_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40002927: return ( &ScaleRate_ ); break; // ScaleRate
      case 40001498: return ( &UpperBound_ ); break; // UpperBound
      case 40001497: return ( &LowerBound_ ); break; // LowerBound
      case 40000977: return ( &Level_ ); break; // Level
      case 40002946: return ( &FeeParamRid_ ); break; // FeeParamRid
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40003520: return ( &ScaleMinFee_ ); break; // ScaleMinFee
      case 40003521: return ( &ScaleMaxFee_ ); break; // ScaleMaxFee
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0197_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0197_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0197_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 8 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &ScaleRate_; break;
            case 1: aFlds_[1] = &UpperBound_; break;
            case 2: aFlds_[2] = &LowerBound_; break;
            case 3: aFlds_[3] = &Level_; break;
            case 4: aFlds_[4] = &FeeParamRid_; break;
            case 5: aFlds_[5] = &EffectiveDate_; break;
            case 6: aFlds_[6] = &ScaleMinFee_; break;
            case 7: aFlds_[7] = &ScaleMaxFee_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0197_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0197_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0197_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 24 );
}

unsigned long dsi_DSTC0197_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 148 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0197_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0197_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0197_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40002927: return( true );
      case 40001498: return( true );
      case 40001497: return( true );
      case 40000977: return( true );
      case 40002946: return( true );
      case 40000327: return( true );
      case 40003520: return( true );
      case 40003521: return( true );
   }
   return false;
}

