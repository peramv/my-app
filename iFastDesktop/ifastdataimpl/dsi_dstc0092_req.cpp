// BFDataImpl implementation file for DataSet DSTC0092.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0092_req.h"


// This function creates an instance of dsi_DSTC0092_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0092_REQ() { return new dsi_DSTC0092_REQ; }

dsi_DSTC0092_REQ::dsi_DSTC0092_REQ()
: BFDataImpl( 40001175 )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, Slsrep_( ifds::Slsrep, &ifds::s_FldProp_Slsrep )
, CheckUserAccess_( ifds::CheckUserAccess, &ifds::s_FldProp_CheckUserAccess )
, SortBy_( ifds::SortBy, &ifds::s_FldProp_SortBy )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, OverrideRepeats_( ifds::OverrideRepeats, &ifds::s_FldProp_OverrideRepeats )
, IgnoreBrokerBranch_( ifds::IgnoreBrokerBranch, &ifds::s_FldProp_IgnoreBrokerBranch )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, ValidateType_( ifds::ValidateType, &ifds::s_FldProp_ValidateType )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, SlsrepName_( ifds::SlsrepName, &ifds::s_FldProp_SlsrepName )
{
   cFields_ = 19;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0092_REQ::~dsi_DSTC0092_REQ()
{
}

BFDataImpl* dsi_DSTC0092_REQ::clone()
{
   dsi_DSTC0092_REQ* p = new dsi_DSTC0092_REQ;
   p->NextKey_ = NextKey_;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->BrokerCode_ = BrokerCode_;
   p->BranchCode_ = BranchCode_;
   p->Slsrep_ = Slsrep_;
   p->CheckUserAccess_ = CheckUserAccess_;
   p->SortBy_ = SortBy_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->OverrideRepeats_ = OverrideRepeats_;
   p->IgnoreBrokerBranch_ = IgnoreBrokerBranch_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->ValidateType_ = ValidateType_;
   p->AccountNum_ = AccountNum_;
   p->SlsrepName_ = SlsrepName_;
   return(p);
}

BFDataField* dsi_DSTC0092_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000029: return ( &NextKey_ ); break; // NextKey
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000045: return ( &BranchCode_ ); break; // BranchCode
      case 40000185: return ( &Slsrep_ ); break; // Slsrep
      case 40001816: return ( &CheckUserAccess_ ); break; // CheckUserAccess
      case 40001322: return ( &SortBy_ ); break; // SortBy
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40002139: return ( &OverrideRepeats_ ); break; // OverrideRepeats
      case 40002861: return ( &IgnoreBrokerBranch_ ); break; // IgnoreBrokerBranch
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40003549: return ( &ValidateType_ ); break; // ValidateType
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40000212: return ( &SlsrepName_ ); break; // SlsrepName
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0092_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0092_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0092_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 19 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &NextKey_; break;
            case 1: aFlds_[1] = &SessionId_; break;
            case 2: aFlds_[2] = &User_Id_; break;
            case 3: aFlds_[3] = &LanguageCode_; break;
            case 4: aFlds_[4] = &CompanyId_; break;
            case 5: aFlds_[5] = &BrokerCode_; break;
            case 6: aFlds_[6] = &BranchCode_; break;
            case 7: aFlds_[7] = &Slsrep_; break;
            case 8: aFlds_[8] = &CheckUserAccess_; break;
            case 9: aFlds_[9] = &SortBy_; break;
            case 10: aFlds_[10] = &Track_; break;
            case 11: aFlds_[11] = &Activity_; break;
            case 12: aFlds_[12] = &OverrideRepeats_; break;
            case 13: aFlds_[13] = &IgnoreBrokerBranch_; break;
            case 14: aFlds_[14] = &FundCode_; break;
            case 15: aFlds_[15] = &ClassCode_; break;
            case 16: aFlds_[16] = &ValidateType_; break;
            case 17: aFlds_[17] = &AccountNum_; break;
            case 18: aFlds_[18] = &SlsrepName_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0092_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0092_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0092_REQ::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0092_REQ::getDefinedByteLength( void ) const
{
   return( 1110 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0092_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0092_REQ::fieldExists( id );
}

bool dsi_DSTC0092_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000029: return( true );
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40000044: return( true );
      case 40000045: return( true );
      case 40000185: return( true );
      case 40001816: return( true );
      case 40001322: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40002139: return( true );
      case 40002861: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40003549: return( true );
      case 40000040: return( true );
      case 40000212: return( true );
   }
   return false;
}

