// BFDataImpl implementation file for DataSet DSTC0086.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0086_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0086_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0086_VWRepeat_Record() { return new dsi_DSTC0086_VWRepeat_Record; }

dsi_DSTC0086_VWRepeat_Record::dsi_DSTC0086_VWRepeat_Record()
: BFDataImpl( 40001184 )
, IntermName_( ifds::IntermName, &ifds::s_FldProp_IntermName )
, IntermCode_( ifds::IntermCode, &ifds::s_FldProp_IntermCode )
, AllowWire_( ifds::AllowWire, &ifds::s_FldProp_AllowWire )
, MMWire_( ifds::MMWire, &ifds::s_FldProp_MMWire )
, VolSettleType_( ifds::VolSettleType, &ifds::s_FldProp_VolSettleType )
, SWPSettleESGElig_( ifds::SWPSettleESGElig, &ifds::s_FldProp_SWPSettleESGElig )
, CashIDSettleESGElig_( ifds::CashIDSettleESGElig, &ifds::s_FldProp_CashIDSettleESGElig )
, NFUpdate_( ifds::NFUpdate, &ifds::s_FldProp_NFUpdate )
, IntrCssStatus_( ifds::IntrCssStatus, &ifds::s_FldProp_IntrCssStatus )
{
   cFields_ = 9;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0086_VWRepeat_Record::~dsi_DSTC0086_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0086_VWRepeat_Record::clone()
{
   dsi_DSTC0086_VWRepeat_Record* p = new dsi_DSTC0086_VWRepeat_Record;
   p->IntermName_ = IntermName_;
   p->IntermCode_ = IntermCode_;
   p->AllowWire_ = AllowWire_;
   p->MMWire_ = MMWire_;
   p->VolSettleType_ = VolSettleType_;
   p->SWPSettleESGElig_ = SWPSettleESGElig_;
   p->CashIDSettleESGElig_ = CashIDSettleESGElig_;
   p->NFUpdate_ = NFUpdate_;
   p->IntrCssStatus_ = IntrCssStatus_;
   return(p);
}

BFDataField* dsi_DSTC0086_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40001159: return ( &IntermName_ ); break; // IntermName
      case 40001160: return ( &IntermCode_ ); break; // IntermCode
      case 40001984: return ( &AllowWire_ ); break; // AllowWire
      case 40001985: return ( &MMWire_ ); break; // MMWire
      case 40001986: return ( &VolSettleType_ ); break; // VolSettleType
      case 40005416: return ( &SWPSettleESGElig_ ); break; // SWPSettleESGElig
      case 40005417: return ( &CashIDSettleESGElig_ ); break; // CashIDSettleESGElig
      case 40005655: return ( &NFUpdate_ ); break; // NFUpdate
      case 40007327: return ( &IntrCssStatus_ ); break; // IntrCssStatus
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0086_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0086_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0086_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 9 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &IntermName_; break;
            case 1: aFlds_[1] = &IntermCode_; break;
            case 2: aFlds_[2] = &AllowWire_; break;
            case 3: aFlds_[3] = &MMWire_; break;
            case 4: aFlds_[4] = &VolSettleType_; break;
            case 5: aFlds_[5] = &SWPSettleESGElig_; break;
            case 6: aFlds_[6] = &CashIDSettleESGElig_; break;
            case 7: aFlds_[7] = &NFUpdate_; break;
            case 8: aFlds_[8] = &IntrCssStatus_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0086_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0086_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0086_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0086_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 254 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0086_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0086_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0086_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40001159: return( true );
      case 40001160: return( true );
      case 40001984: return( true );
      case 40001985: return( true );
      case 40001986: return( true );
      case 40005416: return( true );
      case 40005417: return( true );
      case 40005655: return( true );
      case 40007327: return( true );
   }
   return false;
}

