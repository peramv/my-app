// BFDataImpl implementation file for DataSet DSTC0099.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0099_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0099_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0099_VWRepeat_Record() { return new dsi_DSTC0099_VWRepeat_Record; }

dsi_DSTC0099_VWRepeat_Record::dsi_DSTC0099_VWRepeat_Record()
: BFDataImpl( 40001681 )
, FromFund_( ifds::FromFund, &ifds::s_FldProp_FromFund )
, FromClass_( ifds::FromClass, &ifds::s_FldProp_FromClass )
, ToFund_( ifds::ToFund, &ifds::s_FldProp_ToFund )
, ToClass_( ifds::ToClass, &ifds::s_FldProp_ToClass )
, BuySell_( ifds::BuySell, &ifds::s_FldProp_BuySell )
, FullorPartial_( ifds::FullorPartial, &ifds::s_FldProp_FullorPartial )
, ShortTermFee_( ifds::ShortTermFee, &ifds::s_FldProp_ShortTermFee )
, TransFundTradeAllowed_( ifds::TransFundTradeAllowed, &ifds::s_FldProp_TransFundTradeAllowed )
, ApplySrcOfFund_( ifds::ApplySrcOfFund, &ifds::s_FldProp_ApplySrcOfFund )
{
   cFields_ = 9;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0099_VWRepeat_Record::~dsi_DSTC0099_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0099_VWRepeat_Record::clone()
{
   dsi_DSTC0099_VWRepeat_Record* p = new dsi_DSTC0099_VWRepeat_Record;
   p->FromFund_ = FromFund_;
   p->FromClass_ = FromClass_;
   p->ToFund_ = ToFund_;
   p->ToClass_ = ToClass_;
   p->BuySell_ = BuySell_;
   p->FullorPartial_ = FullorPartial_;
   p->ShortTermFee_ = ShortTermFee_;
   p->TransFundTradeAllowed_ = TransFundTradeAllowed_;
   p->ApplySrcOfFund_ = ApplySrcOfFund_;
   return(p);
}

BFDataField* dsi_DSTC0099_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000719: return ( &FromFund_ ); break; // FromFund
      case 40000720: return ( &FromClass_ ); break; // FromClass
      case 40000721: return ( &ToFund_ ); break; // ToFund
      case 40000722: return ( &ToClass_ ); break; // ToClass
      case 40002186: return ( &BuySell_ ); break; // BuySell
      case 40003546: return ( &FullorPartial_ ); break; // FullorPartial
      case 40004450: return ( &ShortTermFee_ ); break; // ShortTermFee
      case 40007039: return ( &TransFundTradeAllowed_ ); break; // TransFundTradeAllowed
      case 40007133: return ( &ApplySrcOfFund_ ); break; // ApplySrcOfFund
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0099_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0099_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0099_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 9 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FromFund_; break;
            case 1: aFlds_[1] = &FromClass_; break;
            case 2: aFlds_[2] = &ToFund_; break;
            case 3: aFlds_[3] = &ToClass_; break;
            case 4: aFlds_[4] = &BuySell_; break;
            case 5: aFlds_[5] = &FullorPartial_; break;
            case 6: aFlds_[6] = &ShortTermFee_; break;
            case 7: aFlds_[7] = &TransFundTradeAllowed_; break;
            case 8: aFlds_[8] = &ApplySrcOfFund_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0099_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0099_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0099_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0099_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 382 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0099_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0099_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0099_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000719: return( true );
      case 40000720: return( true );
      case 40000721: return( true );
      case 40000722: return( true );
      case 40002186: return( true );
      case 40003546: return( true );
      case 40004450: return( true );
      case 40007039: return( true );
      case 40007133: return( true );
   }
   return false;
}

