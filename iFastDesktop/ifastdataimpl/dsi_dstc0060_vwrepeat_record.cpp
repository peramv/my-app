// BFDataImpl implementation file for DataSet DSTC0060.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0060_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0060_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0060_VWRepeat_Record() { return new dsi_DSTC0060_VWRepeat_Record; }

dsi_DSTC0060_VWRepeat_Record::dsi_DSTC0060_VWRepeat_Record()
: BFDataImpl( 40000733 )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, AllocPercentage_( ifds::AllocPercentage, &ifds::s_FldProp_AllocPercentage )
, AllocAmount_( ifds::AllocAmount, &ifds::s_FldProp_AllocAmount )
, SettleCurrency_( ifds::SettleCurrency, &ifds::s_FldProp_SettleCurrency )
, SplitComm_( ifds::SplitComm, &ifds::s_FldProp_SplitComm )
, TransSeq_( ifds::TransSeq, &ifds::s_FldProp_TransSeq )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, AcctPrcnt_( ifds::AcctPrcnt, &ifds::s_FldProp_AcctPrcnt )
, AcctLvlVer_( ifds::AcctLvlVer, &ifds::s_FldProp_AcctLvlVer )
, AcctLvlRid_( ifds::AcctLvlRid, &ifds::s_FldProp_AcctLvlRid )
, DistribDetlRid_( ifds::DistribDetlRid, &ifds::s_FldProp_DistribDetlRid )
, DistribDetlVer_( ifds::DistribDetlVer, &ifds::s_FldProp_DistribDetlVer )
, AllocAmtType_( ifds::AllocAmtType, &ifds::s_FldProp_AllocAmtType )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
{
   cFields_ = 15;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0060_VWRepeat_Record::~dsi_DSTC0060_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0060_VWRepeat_Record::clone()
{
   dsi_DSTC0060_VWRepeat_Record* p = new dsi_DSTC0060_VWRepeat_Record;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->AllocPercentage_ = AllocPercentage_;
   p->AllocAmount_ = AllocAmount_;
   p->SettleCurrency_ = SettleCurrency_;
   p->SplitComm_ = SplitComm_;
   p->TransSeq_ = TransSeq_;
   p->AccountNum_ = AccountNum_;
   p->AcctPrcnt_ = AcctPrcnt_;
   p->AcctLvlVer_ = AcctLvlVer_;
   p->AcctLvlRid_ = AcctLvlRid_;
   p->DistribDetlRid_ = DistribDetlRid_;
   p->DistribDetlVer_ = DistribDetlVer_;
   p->AllocAmtType_ = AllocAmtType_;
   p->TransId_ = TransId_;
   return(p);
}

BFDataField* dsi_DSTC0060_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40001035: return ( &AllocPercentage_ ); break; // AllocPercentage
      case 40000292: return ( &AllocAmount_ ); break; // AllocAmount
      case 40000455: return ( &SettleCurrency_ ); break; // SettleCurrency
      case 40001150: return ( &SplitComm_ ); break; // SplitComm
      case 40002217: return ( &TransSeq_ ); break; // TransSeq
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40002286: return ( &AcctPrcnt_ ); break; // AcctPrcnt
      case 40002289: return ( &AcctLvlVer_ ); break; // AcctLvlVer
      case 40002290: return ( &AcctLvlRid_ ); break; // AcctLvlRid
      case 40000950: return ( &DistribDetlRid_ ); break; // DistribDetlRid
      case 40000949: return ( &DistribDetlVer_ ); break; // DistribDetlVer
      case 40003199: return ( &AllocAmtType_ ); break; // AllocAmtType
      case 40000063: return ( &TransId_ ); break; // TransId
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0060_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0060_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0060_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 15 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FundCode_; break;
            case 1: aFlds_[1] = &ClassCode_; break;
            case 2: aFlds_[2] = &AllocPercentage_; break;
            case 3: aFlds_[3] = &AllocAmount_; break;
            case 4: aFlds_[4] = &SettleCurrency_; break;
            case 5: aFlds_[5] = &SplitComm_; break;
            case 6: aFlds_[6] = &TransSeq_; break;
            case 7: aFlds_[7] = &AccountNum_; break;
            case 8: aFlds_[8] = &AcctPrcnt_; break;
            case 9: aFlds_[9] = &AcctLvlVer_; break;
            case 10: aFlds_[10] = &AcctLvlRid_; break;
            case 11: aFlds_[11] = &DistribDetlRid_; break;
            case 12: aFlds_[12] = &DistribDetlVer_; break;
            case 13: aFlds_[13] = &AllocAmtType_; break;
            case 14: aFlds_[14] = &TransId_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0060_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0060_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0060_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0060_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 631 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0060_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0060_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0060_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000049: return( true );
      case 40000050: return( true );
      case 40001035: return( true );
      case 40000292: return( true );
      case 40000455: return( true );
      case 40001150: return( true );
      case 40002217: return( true );
      case 40000040: return( true );
      case 40002286: return( true );
      case 40002289: return( true );
      case 40002290: return( true );
      case 40000950: return( true );
      case 40000949: return( true );
      case 40003199: return( true );
      case 40000063: return( true );
   }
   return false;
}

