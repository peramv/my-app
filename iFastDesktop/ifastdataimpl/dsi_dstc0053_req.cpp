// BFDataImpl implementation file for DataSet DSTC0053.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:58 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0053_req.h"


// This function creates an instance of dsi_DSTC0053_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0053_REQ() { return new dsi_DSTC0053_REQ; }

dsi_DSTC0053_REQ::dsi_DSTC0053_REQ()
: BFDataImpl( 40000093 )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, SlsrepCode_( ifds::SlsrepCode, &ifds::s_FldProp_SlsrepCode )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, OverrideRepeats_( ifds::OverrideRepeats, &ifds::s_FldProp_OverrideRepeats )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, FromDate_( ifds::FromDate, &ifds::s_FldProp_FromDate )
, ToDate_( ifds::ToDate, &ifds::s_FldProp_ToDate )
, SearchType_( ifds::SearchType, &ifds::s_FldProp_SearchType )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, WireOrdNum_( ifds::WireOrdNum, &ifds::s_FldProp_WireOrdNum )
, NetworkID_( ifds::NetworkID, &ifds::s_FldProp_NetworkID )
, ExtTransNum_( ifds::ExtTransNum, &ifds::s_FldProp_ExtTransNum )
, SendRefNum_( ifds::SendRefNum, &ifds::s_FldProp_SendRefNum )
, PartRefNum_( ifds::PartRefNum, &ifds::s_FldProp_PartRefNum )
, MasterRefNum_( ifds::MasterRefNum, &ifds::s_FldProp_MasterRefNum )
, TxnLevelSec_( ifds::TxnLevelSec, &ifds::s_FldProp_TxnLevelSec )
, ExternalIdType_( ifds::ExternalIdType, &ifds::s_FldProp_ExternalIdType )
, ExternalId_( ifds::ExternalId, &ifds::s_FldProp_ExternalId )
, Rebook_( ifds::Rebook, &ifds::s_FldProp_Rebook )
, ExcludeBadTrades_( ifds::ExcludeBadTrades, &ifds::s_FldProp_ExcludeBadTrades )
, NSCCControlNumber_( ifds::NSCCControlNumber, &ifds::s_FldProp_NSCCControlNumber )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, ExcludeVerifiedTrades_( ifds::ExcludeVerifiedTrades, &ifds::s_FldProp_ExcludeVerifiedTrades )
, SearchUserID_( ifds::SearchUserID, &ifds::s_FldProp_SearchUserID )
, ExcludeAggrOrd_( ifds::ExcludeAggrOrd, &ifds::s_FldProp_ExcludeAggrOrd )
, SponsorCode_( ifds::SponsorCode, &ifds::s_FldProp_SponsorCode )
, Platform_( ifds::Platform, &ifds::s_FldProp_Platform )
{
   cFields_ = 36;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0053_REQ::~dsi_DSTC0053_REQ()
{
}

BFDataImpl* dsi_DSTC0053_REQ::clone()
{
   dsi_DSTC0053_REQ* p = new dsi_DSTC0053_REQ;
   p->AccountNum_ = AccountNum_;
   p->NextKey_ = NextKey_;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->BrokerCode_ = BrokerCode_;
   p->BranchCode_ = BranchCode_;
   p->SlsrepCode_ = SlsrepCode_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->OverrideRepeats_ = OverrideRepeats_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->FromDate_ = FromDate_;
   p->ToDate_ = ToDate_;
   p->SearchType_ = SearchType_;
   p->TransNum_ = TransNum_;
   p->WireOrdNum_ = WireOrdNum_;
   p->NetworkID_ = NetworkID_;
   p->ExtTransNum_ = ExtTransNum_;
   p->SendRefNum_ = SendRefNum_;
   p->PartRefNum_ = PartRefNum_;
   p->MasterRefNum_ = MasterRefNum_;
   p->TxnLevelSec_ = TxnLevelSec_;
   p->ExternalIdType_ = ExternalIdType_;
   p->ExternalId_ = ExternalId_;
   p->Rebook_ = Rebook_;
   p->ExcludeBadTrades_ = ExcludeBadTrades_;
   p->NSCCControlNumber_ = NSCCControlNumber_;
   p->TransType_ = TransType_;
   p->ExcludeVerifiedTrades_ = ExcludeVerifiedTrades_;
   p->SearchUserID_ = SearchUserID_;
   p->ExcludeAggrOrd_ = ExcludeAggrOrd_;
   p->SponsorCode_ = SponsorCode_;
   p->Platform_ = Platform_;
   return(p);
}

BFDataField* dsi_DSTC0053_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40000029: return ( &NextKey_ ); break; // NextKey
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000045: return ( &BranchCode_ ); break; // BranchCode
      case 40000656: return ( &SlsrepCode_ ); break; // SlsrepCode
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40002139: return ( &OverrideRepeats_ ); break; // OverrideRepeats
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000067: return ( &FromDate_ ); break; // FromDate
      case 40000068: return ( &ToDate_ ); break; // ToDate
      case 40002438: return ( &SearchType_ ); break; // SearchType
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40000432: return ( &WireOrdNum_ ); break; // WireOrdNum
      case 40003522: return ( &NetworkID_ ); break; // NetworkID
      case 40003523: return ( &ExtTransNum_ ); break; // ExtTransNum
      case 40003524: return ( &SendRefNum_ ); break; // SendRefNum
      case 40003525: return ( &PartRefNum_ ); break; // PartRefNum
      case 40003526: return ( &MasterRefNum_ ); break; // MasterRefNum
      case 40003853: return ( &TxnLevelSec_ ); break; // TxnLevelSec
      case 40004662: return ( &ExternalIdType_ ); break; // ExternalIdType
      case 40002077: return ( &ExternalId_ ); break; // ExternalId
      case 40005236: return ( &Rebook_ ); break; // Rebook
      case 40005427: return ( &ExcludeBadTrades_ ); break; // ExcludeBadTrades
      case 40005419: return ( &NSCCControlNumber_ ); break; // NSCCControlNumber
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40007402: return ( &ExcludeVerifiedTrades_ ); break; // ExcludeVerifiedTrades
      case 40007403: return ( &SearchUserID_ ); break; // SearchUserID
      case 40007457: return ( &ExcludeAggrOrd_ ); break; // ExcludeAggrOrd
      case 40002627: return ( &SponsorCode_ ); break; // SponsorCode
      case 40007196: return ( &Platform_ ); break; // Platform
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0053_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0053_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0053_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 36 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AccountNum_; break;
            case 1: aFlds_[1] = &NextKey_; break;
            case 2: aFlds_[2] = &SessionId_; break;
            case 3: aFlds_[3] = &User_Id_; break;
            case 4: aFlds_[4] = &LanguageCode_; break;
            case 5: aFlds_[5] = &CompanyId_; break;
            case 6: aFlds_[6] = &BrokerCode_; break;
            case 7: aFlds_[7] = &BranchCode_; break;
            case 8: aFlds_[8] = &SlsrepCode_; break;
            case 9: aFlds_[9] = &Track_; break;
            case 10: aFlds_[10] = &Activity_; break;
            case 11: aFlds_[11] = &OverrideRepeats_; break;
            case 12: aFlds_[12] = &FundCode_; break;
            case 13: aFlds_[13] = &ClassCode_; break;
            case 14: aFlds_[14] = &FromDate_; break;
            case 15: aFlds_[15] = &ToDate_; break;
            case 16: aFlds_[16] = &SearchType_; break;
            case 17: aFlds_[17] = &TransNum_; break;
            case 18: aFlds_[18] = &WireOrdNum_; break;
            case 19: aFlds_[19] = &NetworkID_; break;
            case 20: aFlds_[20] = &ExtTransNum_; break;
            case 21: aFlds_[21] = &SendRefNum_; break;
            case 22: aFlds_[22] = &PartRefNum_; break;
            case 23: aFlds_[23] = &MasterRefNum_; break;
            case 24: aFlds_[24] = &TxnLevelSec_; break;
            case 25: aFlds_[25] = &ExternalIdType_; break;
            case 26: aFlds_[26] = &ExternalId_; break;
            case 27: aFlds_[27] = &Rebook_; break;
            case 28: aFlds_[28] = &ExcludeBadTrades_; break;
            case 29: aFlds_[29] = &NSCCControlNumber_; break;
            case 30: aFlds_[30] = &TransType_; break;
            case 31: aFlds_[31] = &ExcludeVerifiedTrades_; break;
            case 32: aFlds_[32] = &SearchUserID_; break;
            case 33: aFlds_[33] = &ExcludeAggrOrd_; break;
			case 34: aFlds_[34] = &SponsorCode_; break;
            case 35: aFlds_[35] = &Platform_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0053_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0053_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0053_REQ::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0053_REQ::getDefinedByteLength( void ) const
{
   return( 1790 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0053_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0053_REQ::fieldExists( id );
}

bool dsi_DSTC0053_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000040: return( true );
      case 40000029: return( true );
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40000044: return( true );
      case 40000045: return( true );
      case 40000656: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40002139: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000067: return( true );
      case 40000068: return( true );
      case 40002438: return( true );
      case 40000096: return( true );
      case 40000432: return( true );
      case 40003522: return( true );
      case 40003523: return( true );
      case 40003524: return( true );
      case 40003525: return( true );
      case 40003526: return( true );
      case 40003853: return( true );
      case 40004662: return( true );
      case 40002077: return( true );
      case 40005236: return( true );
      case 40005427: return( true );
      case 40005419: return( true );
      case 40000095: return( true );
      case 40007402: return( true );
      case 40007403: return( true );
      case 40007457: return( true );
      case 40002627: return ( true );
      case 40007196: return ( true );
   }
   return false;
}

