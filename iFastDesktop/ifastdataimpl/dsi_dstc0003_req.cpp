// BFDataImpl implementation file for DataSet DSTC0003.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:58 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0003_req.h"


// This function creates an instance of dsi_DSTC0003_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0003_REQ() { return new dsi_DSTC0003_REQ; }

dsi_DSTC0003_REQ::dsi_DSTC0003_REQ()
: BFDataImpl( 40000006 )
, SrchAccountNum_( ifds::SrchAccountNum, &ifds::s_FldProp_SrchAccountNum )
, SrchShrNum_( ifds::SrchShrNum, &ifds::s_FldProp_SrchShrNum )
, SrchLastName_( ifds::SrchLastName, &ifds::s_FldProp_SrchLastName )
, SrchFirstName_( ifds::SrchFirstName, &ifds::s_FldProp_SrchFirstName )
, SrchBirthLName_( ifds::SrchBirthLName, &ifds::s_FldProp_SrchBirthLName )
, SrchBirthFName_( ifds::SrchBirthFName, &ifds::s_FldProp_SrchBirthFName )
, SrchSIN_( ifds::SrchSIN, &ifds::s_FldProp_SrchSIN )
, SrchIdType_( ifds::SrchIdType, &ifds::s_FldProp_SrchIdType )
, SrchIdValue_( ifds::SrchIdValue, &ifds::s_FldProp_SrchIdValue )
, SrchFamily_( ifds::SrchFamily, &ifds::s_FldProp_SrchFamily )
, SrchGroup_( ifds::SrchGroup, &ifds::s_FldProp_SrchGroup )
, SrchIntCode_( ifds::SrchIntCode, &ifds::s_FldProp_SrchIntCode )
, SrchIntAcct_( ifds::SrchIntAcct, &ifds::s_FldProp_SrchIntAcct )
, SrchXrefNum_( ifds::SrchXrefNum, &ifds::s_FldProp_SrchXrefNum )
, SrchAltAcct_( ifds::SrchAltAcct, &ifds::s_FldProp_SrchAltAcct )
, SrchBroker_( ifds::SrchBroker, &ifds::s_FldProp_SrchBroker )
, SrchBranch_( ifds::SrchBranch, &ifds::s_FldProp_SrchBranch )
, SrchSlsrep_( ifds::SrchSlsrep, &ifds::s_FldProp_SrchSlsrep )
, SrchWireNum_( ifds::SrchWireNum, &ifds::s_FldProp_SrchWireNum )
, SrchPhoneCntry_( ifds::SrchPhoneCntry, &ifds::s_FldProp_SrchPhoneCntry )
, SrchPhoneArea_( ifds::SrchPhoneArea, &ifds::s_FldProp_SrchPhoneArea )
, SrchPhoneNum_( ifds::SrchPhoneNum, &ifds::s_FldProp_SrchPhoneNum )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, SortBy_( ifds::SortBy, &ifds::s_FldProp_SortBy )
, SrchEntType_( ifds::SrchEntType, &ifds::s_FldProp_SrchEntType )
, AllAccounts_( ifds::AllAccounts, &ifds::s_FldProp_AllAccounts )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, OverrideRepeats_( ifds::OverrideRepeats, &ifds::s_FldProp_OverrideRepeats )
, NextOrPrevious_( ifds::NextOrPrevious, &ifds::s_FldProp_NextOrPrevious )
, CompanyCode_( ifds::CompanyCode, &ifds::s_FldProp_CompanyCode )
, SrchBusinessNo_( ifds::SrchBusinessNo, &ifds::s_FldProp_SrchBusinessNo )
, ExactMatch_( ifds::ExactMatch, &ifds::s_FldProp_ExactMatch )
, AllEntitys_( ifds::AllEntitys, &ifds::s_FldProp_AllEntitys )
, SrchWhereUse_( ifds::SrchWhereUse, &ifds::s_FldProp_SrchWhereUse )
, SrchWhereUseCode_( ifds::SrchWhereUseCode, &ifds::s_FldProp_SrchWhereUseCode )
, SrchRefCode_( ifds::SrchRefCode, &ifds::s_FldProp_SrchRefCode )
, SrchAcctRegKey_( ifds::SrchAcctRegKey, &ifds::s_FldProp_SrchAcctRegKey )
, RetHoldingCoOnly_( ifds::RetHoldingCoOnly, &ifds::s_FldProp_RetHoldingCoOnly )
{
   cFields_ = 43;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0003_REQ::~dsi_DSTC0003_REQ()
{
}

BFDataImpl* dsi_DSTC0003_REQ::clone()
{
   dsi_DSTC0003_REQ* p = new dsi_DSTC0003_REQ;
   p->SrchAccountNum_ = SrchAccountNum_;
   p->SrchShrNum_ = SrchShrNum_;
   p->SrchLastName_ = SrchLastName_;
   p->SrchFirstName_ = SrchFirstName_;
   p->SrchBirthLName_ = SrchBirthLName_;
   p->SrchBirthFName_ = SrchBirthFName_;
   p->SrchSIN_ = SrchSIN_;
   p->SrchIdType_ = SrchIdType_;
   p->SrchIdValue_ = SrchIdValue_;
   p->SrchFamily_ = SrchFamily_;
   p->SrchGroup_ = SrchGroup_;
   p->SrchIntCode_ = SrchIntCode_;
   p->SrchIntAcct_ = SrchIntAcct_;
   p->SrchXrefNum_ = SrchXrefNum_;
   p->SrchAltAcct_ = SrchAltAcct_;
   p->SrchBroker_ = SrchBroker_;
   p->SrchBranch_ = SrchBranch_;
   p->SrchSlsrep_ = SrchSlsrep_;
   p->SrchWireNum_ = SrchWireNum_;
   p->SrchPhoneCntry_ = SrchPhoneCntry_;
   p->SrchPhoneArea_ = SrchPhoneArea_;
   p->SrchPhoneNum_ = SrchPhoneNum_;
   p->NextKey_ = NextKey_;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->SortBy_ = SortBy_;
   p->SrchEntType_ = SrchEntType_;
   p->AllAccounts_ = AllAccounts_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->OverrideRepeats_ = OverrideRepeats_;
   p->NextOrPrevious_ = NextOrPrevious_;
   p->CompanyCode_ = CompanyCode_;
   p->SrchBusinessNo_ = SrchBusinessNo_;
   p->ExactMatch_ = ExactMatch_;
   p->AllEntitys_ = AllEntitys_;
   p->SrchWhereUse_ = SrchWhereUse_;
   p->SrchWhereUseCode_ = SrchWhereUseCode_;
   p->SrchRefCode_ = SrchRefCode_;
   p->SrchAcctRegKey_ = SrchAcctRegKey_;
   p->RetHoldingCoOnly_ = RetHoldingCoOnly_;
   return(p);
}

BFDataField* dsi_DSTC0003_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000007: return ( &SrchAccountNum_ ); break; // SrchAccountNum
      case 40000008: return ( &SrchShrNum_ ); break; // SrchShrNum
      case 40000009: return ( &SrchLastName_ ); break; // SrchLastName
      case 40000010: return ( &SrchFirstName_ ); break; // SrchFirstName
      case 40000011: return ( &SrchBirthLName_ ); break; // SrchBirthLName
      case 40000012: return ( &SrchBirthFName_ ); break; // SrchBirthFName
      case 40000013: return ( &SrchSIN_ ); break; // SrchSIN
      case 40000014: return ( &SrchIdType_ ); break; // SrchIdType
      case 40000015: return ( &SrchIdValue_ ); break; // SrchIdValue
      case 40000016: return ( &SrchFamily_ ); break; // SrchFamily
      case 40000017: return ( &SrchGroup_ ); break; // SrchGroup
      case 40000018: return ( &SrchIntCode_ ); break; // SrchIntCode
      case 40000019: return ( &SrchIntAcct_ ); break; // SrchIntAcct
      case 40000020: return ( &SrchXrefNum_ ); break; // SrchXrefNum
      case 40000021: return ( &SrchAltAcct_ ); break; // SrchAltAcct
      case 40000022: return ( &SrchBroker_ ); break; // SrchBroker
      case 40000023: return ( &SrchBranch_ ); break; // SrchBranch
      case 40000024: return ( &SrchSlsrep_ ); break; // SrchSlsrep
      case 40000025: return ( &SrchWireNum_ ); break; // SrchWireNum
      case 40000026: return ( &SrchPhoneCntry_ ); break; // SrchPhoneCntry
      case 40000027: return ( &SrchPhoneArea_ ); break; // SrchPhoneArea
      case 40000028: return ( &SrchPhoneNum_ ); break; // SrchPhoneNum
      case 40000029: return ( &NextKey_ ); break; // NextKey
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40001322: return ( &SortBy_ ); break; // SortBy
      case 40001332: return ( &SrchEntType_ ); break; // SrchEntType
      case 40001942: return ( &AllAccounts_ ); break; // AllAccounts
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40002139: return ( &OverrideRepeats_ ); break; // OverrideRepeats
      case 40002271: return ( &NextOrPrevious_ ); break; // NextOrPrevious
      case 40002245: return ( &CompanyCode_ ); break; // CompanyCode
      case 40004017: return ( &SrchBusinessNo_ ); break; // SrchBusinessNo
      case 40003430: return ( &ExactMatch_ ); break; // ExactMatch
      case 40004926: return ( &AllEntitys_ ); break; // AllEntitys
      case 40005120: return ( &SrchWhereUse_ ); break; // SrchWhereUse
      case 40005344: return ( &SrchWhereUseCode_ ); break; // SrchWhereUseCode
      case 40006847: return ( &SrchRefCode_ ); break; // SrchRefCode
      case 40006848: return ( &SrchAcctRegKey_ ); break; // SrchAcctRegKey
      case 40007058: return ( &RetHoldingCoOnly_ ); break; // RetHoldingCoOnly
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0003_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0003_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0003_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 43 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SrchAccountNum_; break;
            case 1: aFlds_[1] = &SrchShrNum_; break;
            case 2: aFlds_[2] = &SrchLastName_; break;
            case 3: aFlds_[3] = &SrchFirstName_; break;
            case 4: aFlds_[4] = &SrchBirthLName_; break;
            case 5: aFlds_[5] = &SrchBirthFName_; break;
            case 6: aFlds_[6] = &SrchSIN_; break;
            case 7: aFlds_[7] = &SrchIdType_; break;
            case 8: aFlds_[8] = &SrchIdValue_; break;
            case 9: aFlds_[9] = &SrchFamily_; break;
            case 10: aFlds_[10] = &SrchGroup_; break;
            case 11: aFlds_[11] = &SrchIntCode_; break;
            case 12: aFlds_[12] = &SrchIntAcct_; break;
            case 13: aFlds_[13] = &SrchXrefNum_; break;
            case 14: aFlds_[14] = &SrchAltAcct_; break;
            case 15: aFlds_[15] = &SrchBroker_; break;
            case 16: aFlds_[16] = &SrchBranch_; break;
            case 17: aFlds_[17] = &SrchSlsrep_; break;
            case 18: aFlds_[18] = &SrchWireNum_; break;
            case 19: aFlds_[19] = &SrchPhoneCntry_; break;
            case 20: aFlds_[20] = &SrchPhoneArea_; break;
            case 21: aFlds_[21] = &SrchPhoneNum_; break;
            case 22: aFlds_[22] = &NextKey_; break;
            case 23: aFlds_[23] = &SessionId_; break;
            case 24: aFlds_[24] = &User_Id_; break;
            case 25: aFlds_[25] = &LanguageCode_; break;
            case 26: aFlds_[26] = &CompanyId_; break;
            case 27: aFlds_[27] = &SortBy_; break;
            case 28: aFlds_[28] = &SrchEntType_; break;
            case 29: aFlds_[29] = &AllAccounts_; break;
            case 30: aFlds_[30] = &Track_; break;
            case 31: aFlds_[31] = &Activity_; break;
            case 32: aFlds_[32] = &OverrideRepeats_; break;
            case 33: aFlds_[33] = &NextOrPrevious_; break;
            case 34: aFlds_[34] = &CompanyCode_; break;
            case 35: aFlds_[35] = &SrchBusinessNo_; break;
            case 36: aFlds_[36] = &ExactMatch_; break;
            case 37: aFlds_[37] = &AllEntitys_; break;
            case 38: aFlds_[38] = &SrchWhereUse_; break;
            case 39: aFlds_[39] = &SrchWhereUseCode_; break;
            case 40: aFlds_[40] = &SrchRefCode_; break;
            case 41: aFlds_[41] = &SrchAcctRegKey_; break;
            case 42: aFlds_[42] = &RetHoldingCoOnly_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0003_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0003_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0003_REQ::getLargestDefinedField( void ) const
{
   return( 100 );
}

unsigned long dsi_DSTC0003_REQ::getDefinedByteLength( void ) const
{
   return( 2016 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0003_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0003_REQ::fieldExists( id );
}

bool dsi_DSTC0003_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000007: return( true );
      case 40000008: return( true );
      case 40000009: return( true );
      case 40000010: return( true );
      case 40000011: return( true );
      case 40000012: return( true );
      case 40000013: return( true );
      case 40000014: return( true );
      case 40000015: return( true );
      case 40000016: return( true );
      case 40000017: return( true );
      case 40000018: return( true );
      case 40000019: return( true );
      case 40000020: return( true );
      case 40000021: return( true );
      case 40000022: return( true );
      case 40000023: return( true );
      case 40000024: return( true );
      case 40000025: return( true );
      case 40000026: return( true );
      case 40000027: return( true );
      case 40000028: return( true );
      case 40000029: return( true );
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40001322: return( true );
      case 40001332: return( true );
      case 40001942: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40002139: return( true );
      case 40002271: return( true );
      case 40002245: return( true );
      case 40004017: return( true );
      case 40003430: return( true );
      case 40004926: return( true );
      case 40005120: return( true );
      case 40005344: return( true );
      case 40006847: return( true );
      case 40006848: return( true );
      case 40007058: return( true );
   }
   return false;
}

