// BFDataImpl implementation file for DataSet DSTC0137.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0137_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0137_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0137_VWRepeat_Record() { return new dsi_DSTC0137_VWRepeat_Record; }

dsi_DSTC0137_VWRepeat_Record::dsi_DSTC0137_VWRepeat_Record()
: BFDataImpl( 40002964 )
, rxFundCode_( ifds::rxFundCode, &ifds::s_FldProp_rxFundCode )
, rxClassCode_( ifds::rxClassCode, &ifds::s_FldProp_rxClassCode )
, GrossAmt_( ifds::GrossAmt, &ifds::s_FldProp_GrossAmt )
, Units_( ifds::Units, &ifds::s_FldProp_Units )
, DSC_( ifds::DSC, &ifds::s_FldProp_DSC )
, FeeFreeAmt_( ifds::FeeFreeAmt, &ifds::s_FldProp_FeeFreeAmt )
, FeeFreeUnits_( ifds::FeeFreeUnits, &ifds::s_FldProp_FeeFreeUnits )
, FeeApplAmt_( ifds::FeeApplAmt, &ifds::s_FldProp_FeeApplAmt )
, FeeApplUnits_( ifds::FeeApplUnits, &ifds::s_FldProp_FeeApplUnits )
, ValueAsAt_( ifds::ValueAsAt, &ifds::s_FldProp_ValueAsAt )
, FundNAV_( ifds::FundNAV, &ifds::s_FldProp_FundNAV )
, rxBaycom_( ifds::rxBaycom, &ifds::s_FldProp_rxBaycom )
, ElongName1_( ifds::ElongName1, &ifds::s_FldProp_ElongName1 )
, AcctUnits_( ifds::AcctUnits, &ifds::s_FldProp_AcctUnits )
{
   cFields_ = 14;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0137_VWRepeat_Record::~dsi_DSTC0137_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0137_VWRepeat_Record::clone()
{
   dsi_DSTC0137_VWRepeat_Record* p = new dsi_DSTC0137_VWRepeat_Record;
   p->rxFundCode_ = rxFundCode_;
   p->rxClassCode_ = rxClassCode_;
   p->GrossAmt_ = GrossAmt_;
   p->Units_ = Units_;
   p->DSC_ = DSC_;
   p->FeeFreeAmt_ = FeeFreeAmt_;
   p->FeeFreeUnits_ = FeeFreeUnits_;
   p->FeeApplAmt_ = FeeApplAmt_;
   p->FeeApplUnits_ = FeeApplUnits_;
   p->ValueAsAt_ = ValueAsAt_;
   p->FundNAV_ = FundNAV_;
   p->rxBaycom_ = rxBaycom_;
   p->ElongName1_ = ElongName1_;
   p->AcctUnits_ = AcctUnits_;
   return(p);
}

BFDataField* dsi_DSTC0137_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000286: return ( &rxFundCode_ ); break; // rxFundCode
      case 40000287: return ( &rxClassCode_ ); break; // rxClassCode
      case 40000350: return ( &GrossAmt_ ); break; // GrossAmt
      case 40000332: return ( &Units_ ); break; // Units
      case 40001735: return ( &DSC_ ); break; // DSC
      case 40001736: return ( &FeeFreeAmt_ ); break; // FeeFreeAmt
      case 40001737: return ( &FeeFreeUnits_ ); break; // FeeFreeUnits
      case 40001738: return ( &FeeApplAmt_ ); break; // FeeApplAmt
      case 40001764: return ( &FeeApplUnits_ ); break; // FeeApplUnits
      case 40000489: return ( &ValueAsAt_ ); break; // ValueAsAt
      case 40000405: return ( &FundNAV_ ); break; // FundNAV
      case 40002965: return ( &rxBaycom_ ); break; // rxBaycom
      case 40000747: return ( &ElongName1_ ); break; // ElongName1
      case 40000377: return ( &AcctUnits_ ); break; // AcctUnits
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0137_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0137_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0137_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 14 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &rxFundCode_; break;
            case 1: aFlds_[1] = &rxClassCode_; break;
            case 2: aFlds_[2] = &GrossAmt_; break;
            case 3: aFlds_[3] = &Units_; break;
            case 4: aFlds_[4] = &DSC_; break;
            case 5: aFlds_[5] = &FeeFreeAmt_; break;
            case 6: aFlds_[6] = &FeeFreeUnits_; break;
            case 7: aFlds_[7] = &FeeApplAmt_; break;
            case 8: aFlds_[8] = &FeeApplUnits_; break;
            case 9: aFlds_[9] = &ValueAsAt_; break;
            case 10: aFlds_[10] = &FundNAV_; break;
            case 11: aFlds_[11] = &rxBaycom_; break;
            case 12: aFlds_[12] = &ElongName1_; break;
            case 13: aFlds_[13] = &AcctUnits_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0137_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0137_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0137_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0137_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 679 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0137_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0137_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0137_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000286: return( true );
      case 40000287: return( true );
      case 40000350: return( true );
      case 40000332: return( true );
      case 40001735: return( true );
      case 40001736: return( true );
      case 40001737: return( true );
      case 40001738: return( true );
      case 40001764: return( true );
      case 40000489: return( true );
      case 40000405: return( true );
      case 40002965: return( true );
      case 40000747: return( true );
      case 40000377: return( true );
   }
   return false;
}

