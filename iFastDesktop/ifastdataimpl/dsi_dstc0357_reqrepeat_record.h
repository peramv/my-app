// BFDataImpl header file for DataSet DSTC0357.REQRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#pragma once
#include <commonport.h>
#include <clientlocale.hpp>

#undef IFAST_DATAIMPL_LINKAGE
#ifdef IFAST_DATAIMPL_DLL
   #define IFAST_DATAIMPL_LINKAGE CLASS_EXPORT
#else
   #define IFAST_DATAIMPL_LINKAGE CLASS_IMPORT
#endif

namespace ifds
{
   //Field Externs
   extern const BFTextFieldId RunMode;
   extern const BFTextFieldId Accountable;
   extern const BFTextFieldId BackDatedReason;
   extern const BFDateFieldId RespDate;
   extern const BFDecimalFieldId AllocPercent;
   extern const BFDecimalFieldId DilVersion;
   extern const BFDecimalFieldId SplitAccCodeRID;
   extern const BFTextFieldId BillingToEntityType;
   extern const BFTextFieldId BillingToEntity;
   extern const BFNumericFieldId AssociatedAcctNum;
   extern const BFTextFieldId DilutionNSM;
   extern const BFTextFieldId ExSysDilPymtNSM;

   //Property Externs
   extern const BFDataFieldProperties s_FldProp_RunMode;
   extern const BFDataFieldProperties s_FldProp_Accountable;
   extern const BFDataFieldProperties s_FldProp_BackDatedReason;
   extern const BFDataFieldProperties s_FldProp_RespDate;
   extern const BFDataFieldProperties s_FldProp_AllocPercent;
   extern const BFDataFieldProperties s_FldProp_DilVersion;
   extern const BFDataFieldProperties s_FldProp_SplitAccCodeRID;
   extern const BFDataFieldProperties s_FldProp_BillingToEntityType;
   extern const BFDataFieldProperties s_FldProp_BillingToEntity;
   extern const BFDataFieldProperties s_FldProp_AssociatedAcctNum;
   extern const BFDataFieldProperties s_FldProp_DilutionNSM;
   extern const BFDataFieldProperties s_FldProp_ExSysDilPymtNSM;
}


class dsi_DSTC0357_REQRepeat_Record : public BFDataImpl 
{
public:
   // Constructors
   dsi_DSTC0357_REQRepeat_Record();
   virtual ~dsi_DSTC0357_REQRepeat_Record();

   virtual BFDataImpl* clone();

   virtual BFDataField* getElement( const BFFieldId& id );
   virtual const BFDataField* getElement( const BFFieldId& id ) const;
   virtual BFDataField* getElementByIndex( unsigned int iField );
   virtual const BFDataField* getElementByIndex( unsigned int iField ) const;


   virtual unsigned long getLargestDefinedField( void ) const;
   virtual unsigned long getDefinedByteLength( void ) const;
   virtual bool exists( const BFFieldId& id ) const;
   static bool fieldExists( const BFFieldId& id );

private:
   BFDataField* aFlds_[12];
   // Field Declarations
   BFTextField_60 RunMode_;
   BFTextField_60 Accountable_;
   BFTextField_2 BackDatedReason_;
   BFDateField RespDate_;
   BFDecimalField AllocPercent_;
   BFDecimalField DilVersion_;
   BFDecimalField SplitAccCodeRID_;
   BFTextField_60 BillingToEntityType_;
   BFTextField_60 BillingToEntity_;
   BFNumericField AssociatedAcctNum_;
   BFTextField<50> DilutionNSM_;
   BFTextField<50> ExSysDilPymtNSM_;

};
