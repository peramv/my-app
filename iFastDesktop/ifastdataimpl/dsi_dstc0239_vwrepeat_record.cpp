// BFDataImpl implementation file for DataSet DSTC0239.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0239_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0239_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0239_VWRepeat_Record() { return new dsi_DSTC0239_VWRepeat_Record; }

dsi_DSTC0239_VWRepeat_Record::dsi_DSTC0239_VWRepeat_Record()
: BFDataImpl( 40003668 )
, ContractID_( ifds::ContractID, &ifds::s_FldProp_ContractID )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, MaturityDate_( ifds::MaturityDate, &ifds::s_FldProp_MaturityDate )
, GuarAmt_( ifds::GuarAmt, &ifds::s_FldProp_GuarAmt )
, GuarUnits_( ifds::GuarUnits, &ifds::s_FldProp_GuarUnits )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, TransAmt_( ifds::TransAmt, &ifds::s_FldProp_TransAmt )
, TransUnits_( ifds::TransUnits, &ifds::s_FldProp_TransUnits )
, ResetID_( ifds::ResetID, &ifds::s_FldProp_ResetID )
, InstrAmt_( ifds::InstrAmt, &ifds::s_FldProp_InstrAmt )
, ContractGapDate_( ifds::ContractGapDate, &ifds::s_FldProp_ContractGapDate )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, ProtContractRId_( ifds::ProtContractRId, &ifds::s_FldProp_ProtContractRId )
, MktValue_( ifds::MktValue, &ifds::s_FldProp_MktValue )
, GainOrLossAmt_( ifds::GainOrLossAmt, &ifds::s_FldProp_GainOrLossAmt )
{
   cFields_ = 20;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0239_VWRepeat_Record::~dsi_DSTC0239_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0239_VWRepeat_Record::clone()
{
   dsi_DSTC0239_VWRepeat_Record* p = new dsi_DSTC0239_VWRepeat_Record;
   p->ContractID_ = ContractID_;
   p->EffectiveDate_ = EffectiveDate_;
   p->MaturityDate_ = MaturityDate_;
   p->GuarAmt_ = GuarAmt_;
   p->GuarUnits_ = GuarUnits_;
   p->TransId_ = TransId_;
   p->TransAmt_ = TransAmt_;
   p->TransUnits_ = TransUnits_;
   p->ResetID_ = ResetID_;
   p->InstrAmt_ = InstrAmt_;
   p->ContractGapDate_ = ContractGapDate_;
   p->ModDate_ = ModDate_;
   p->ModUser_ = ModUser_;
   p->Username_ = Username_;
   p->ProcessDate_ = ProcessDate_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->ProtContractRId_ = ProtContractRId_;
   p->MktValue_ = MktValue_;
   p->GainOrLossAmt_ = GainOrLossAmt_;
   return(p);
}

BFDataField* dsi_DSTC0239_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40003669: return ( &ContractID_ ); break; // ContractID
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000679: return ( &MaturityDate_ ); break; // MaturityDate
      case 40003670: return ( &GuarAmt_ ); break; // GuarAmt
      case 40003671: return ( &GuarUnits_ ); break; // GuarUnits
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40003672: return ( &TransAmt_ ); break; // TransAmt
      case 40003673: return ( &TransUnits_ ); break; // TransUnits
      case 40003674: return ( &ResetID_ ); break; // ResetID
      case 40003675: return ( &InstrAmt_ ); break; // InstrAmt
      case 40003676: return ( &ContractGapDate_ ); break; // ContractGapDate
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40000117: return ( &Username_ ); break; // Username
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40003677: return ( &ProtContractRId_ ); break; // ProtContractRId
      case 40003682: return ( &MktValue_ ); break; // MktValue
      case 40000336: return ( &GainOrLossAmt_ ); break; // GainOrLossAmt
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0239_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0239_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0239_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 20 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &ContractID_; break;
            case 1: aFlds_[1] = &EffectiveDate_; break;
            case 2: aFlds_[2] = &MaturityDate_; break;
            case 3: aFlds_[3] = &GuarAmt_; break;
            case 4: aFlds_[4] = &GuarUnits_; break;
            case 5: aFlds_[5] = &TransId_; break;
            case 6: aFlds_[6] = &TransAmt_; break;
            case 7: aFlds_[7] = &TransUnits_; break;
            case 8: aFlds_[8] = &ResetID_; break;
            case 9: aFlds_[9] = &InstrAmt_; break;
            case 10: aFlds_[10] = &ContractGapDate_; break;
            case 11: aFlds_[11] = &ModDate_; break;
            case 12: aFlds_[12] = &ModUser_; break;
            case 13: aFlds_[13] = &Username_; break;
            case 14: aFlds_[14] = &ProcessDate_; break;
            case 15: aFlds_[15] = &FundCode_; break;
            case 16: aFlds_[16] = &ClassCode_; break;
            case 17: aFlds_[17] = &ProtContractRId_; break;
            case 18: aFlds_[18] = &MktValue_; break;
            case 19: aFlds_[19] = &GainOrLossAmt_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0239_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0239_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0239_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0239_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 737 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0239_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0239_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0239_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40003669: return( true );
      case 40000327: return( true );
      case 40000679: return( true );
      case 40003670: return( true );
      case 40003671: return( true );
      case 40000063: return( true );
      case 40003672: return( true );
      case 40003673: return( true );
      case 40003674: return( true );
      case 40003675: return( true );
      case 40003676: return( true );
      case 40000217: return( true );
      case 40000218: return( true );
      case 40000117: return( true );
      case 40000216: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40003677: return( true );
      case 40003682: return( true );
      case 40000336: return( true );
   }
   return false;
}

