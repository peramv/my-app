// BFDataImpl implementation file for DataSet DSTC0270.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0270_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0270_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0270_VWRepeat_Record() { return new dsi_DSTC0270_VWRepeat_Record; }

dsi_DSTC0270_VWRepeat_Record::dsi_DSTC0270_VWRepeat_Record()
: BFDataImpl( 40004238 )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, ExtTransferType_( ifds::ExtTransferType, &ifds::s_FldProp_ExtTransferType )
, BankIdType_( ifds::BankIdType, &ifds::s_FldProp_BankIdType )
, ExtInstCode_( ifds::ExtInstCode, &ifds::s_FldProp_ExtInstCode )
, ExtTransitCode_( ifds::ExtTransitCode, &ifds::s_FldProp_ExtTransitCode )
, PlanNum_( ifds::PlanNum, &ifds::s_FldProp_PlanNum )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, Version_( ifds::Version, &ifds::s_FldProp_Version )
, AcctExtXferRId_( ifds::AcctExtXferRId, &ifds::s_FldProp_AcctExtXferRId )
, TransferNumber_( ifds::TransferNumber, &ifds::s_FldProp_TransferNumber )
, InstCategory_( ifds::InstCategory, &ifds::s_FldProp_InstCategory )
{
   cFields_ = 14;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0270_VWRepeat_Record::~dsi_DSTC0270_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0270_VWRepeat_Record::clone()
{
   dsi_DSTC0270_VWRepeat_Record* p = new dsi_DSTC0270_VWRepeat_Record;
   p->AccountNum_ = AccountNum_;
   p->ExtTransferType_ = ExtTransferType_;
   p->BankIdType_ = BankIdType_;
   p->ExtInstCode_ = ExtInstCode_;
   p->ExtTransitCode_ = ExtTransitCode_;
   p->PlanNum_ = PlanNum_;
   p->ProcessDate_ = ProcessDate_;
   p->Username_ = Username_;
   p->ModDate_ = ModDate_;
   p->ModUser_ = ModUser_;
   p->Version_ = Version_;
   p->AcctExtXferRId_ = AcctExtXferRId_;
   p->TransferNumber_ = TransferNumber_;
   p->InstCategory_ = InstCategory_;
   return(p);
}

BFDataField* dsi_DSTC0270_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40004186: return ( &ExtTransferType_ ); break; // ExtTransferType
      case 40002119: return ( &BankIdType_ ); break; // BankIdType
      case 40004233: return ( &ExtInstCode_ ); break; // ExtInstCode
      case 40004234: return ( &ExtTransitCode_ ); break; // ExtTransitCode
      case 40000768: return ( &PlanNum_ ); break; // PlanNum
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40003739: return ( &Version_ ); break; // Version
      case 40004235: return ( &AcctExtXferRId_ ); break; // AcctExtXferRId
      case 40004218: return ( &TransferNumber_ ); break; // TransferNumber
      case 40004213: return ( &InstCategory_ ); break; // InstCategory
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0270_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0270_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0270_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 14 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AccountNum_; break;
            case 1: aFlds_[1] = &ExtTransferType_; break;
            case 2: aFlds_[2] = &BankIdType_; break;
            case 3: aFlds_[3] = &ExtInstCode_; break;
            case 4: aFlds_[4] = &ExtTransitCode_; break;
            case 5: aFlds_[5] = &PlanNum_; break;
            case 6: aFlds_[6] = &ProcessDate_; break;
            case 7: aFlds_[7] = &Username_; break;
            case 8: aFlds_[8] = &ModDate_; break;
            case 9: aFlds_[9] = &ModUser_; break;
            case 10: aFlds_[10] = &Version_; break;
            case 11: aFlds_[11] = &AcctExtXferRId_; break;
            case 12: aFlds_[12] = &TransferNumber_; break;
            case 13: aFlds_[13] = &InstCategory_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0270_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0270_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0270_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0270_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 557 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0270_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0270_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0270_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000040: return( true );
      case 40004186: return( true );
      case 40002119: return( true );
      case 40004233: return( true );
      case 40004234: return( true );
      case 40000768: return( true );
      case 40000216: return( true );
      case 40000117: return( true );
      case 40000217: return( true );
      case 40000218: return( true );
      case 40003739: return( true );
      case 40004235: return( true );
      case 40004218: return( true );
      case 40004213: return( true );
   }
   return false;
}

