// BFDataImpl implementation file for DataSet DSTC0166.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0166_vw.h"


// This function creates an instance of dsi_DSTC0166_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0166_VW() { return new dsi_DSTC0166_VW; }

dsi_DSTC0166_VW::dsi_DSTC0166_VW()
: BFDataImpl( 40002619, 40002618 )
, MoreAvailable_( ifds::MoreAvailable, &ifds::s_FldProp_MoreAvailable )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, BeneficialOwner_( ifds::BeneficialOwner, &ifds::s_FldProp_BeneficialOwner )
, AltAccount_( ifds::AltAccount, &ifds::s_FldProp_AltAccount )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, CurrencyName_( ifds::CurrencyName, &ifds::s_FldProp_CurrencyName )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, SlsrepCode_( ifds::SlsrepCode, &ifds::s_FldProp_SlsrepCode )
, AcctStatus_( ifds::AcctStatus, &ifds::s_FldProp_AcctStatus )
, DateOfReg_( ifds::DateOfReg, &ifds::s_FldProp_DateOfReg )
, BrokerName_( ifds::BrokerName, &ifds::s_FldProp_BrokerName )
, BranchName_( ifds::BranchName, &ifds::s_FldProp_BranchName )
, SlsrepName_( ifds::SlsrepName, &ifds::s_FldProp_SlsrepName )
, ShrNum_( ifds::ShrNum, &ifds::s_FldProp_ShrNum )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, StopPurch_( ifds::StopPurch, &ifds::s_FldProp_StopPurch )
, StopRed_( ifds::StopRed, &ifds::s_FldProp_StopRed )
, StopXferOut_( ifds::StopXferOut, &ifds::s_FldProp_StopXferOut )
, StopXferIn_( ifds::StopXferIn, &ifds::s_FldProp_StopXferIn )
, OwnerFirstName_( ifds::OwnerFirstName, &ifds::s_FldProp_OwnerFirstName )
, OwnerLastName_( ifds::OwnerLastName, &ifds::s_FldProp_OwnerLastName )
, AcctType_( ifds::AcctType, &ifds::s_FldProp_AcctType )
, AccountBalance_( ifds::AccountBalance, &ifds::s_FldProp_AccountBalance )
, TotalValueAcctCurr_( ifds::TotalValueAcctCurr, &ifds::s_FldProp_TotalValueAcctCurr )
, TaxType_( ifds::TaxType, &ifds::s_FldProp_TaxType )
, TaxTypeDesc_( ifds::TaxTypeDesc, &ifds::s_FldProp_TaxTypeDesc )
, AcctStatusDesc_( ifds::AcctStatusDesc, &ifds::s_FldProp_AcctStatusDesc )
, AcctTypeDesc_( ifds::AcctTypeDesc, &ifds::s_FldProp_AcctTypeDesc )
, InterAccount_( ifds::InterAccount, &ifds::s_FldProp_InterAccount )
, InvObjCode_( ifds::InvObjCode, &ifds::s_FldProp_InvObjCode )
, AdvisorCode_( ifds::AdvisorCode, &ifds::s_FldProp_AdvisorCode )
, AdvisorDesc_( ifds::AdvisorDesc, &ifds::s_FldProp_AdvisorDesc )
, InvObjDesc_( ifds::InvObjDesc, &ifds::s_FldProp_InvObjDesc )
, NomineeOwnFirstN_( ifds::NomineeOwnFirstN, &ifds::s_FldProp_NomineeOwnFirstN )
, NomineeOwnLastN_( ifds::NomineeOwnLastN, &ifds::s_FldProp_NomineeOwnLastN )
, AMSCode_( ifds::AMSCode, &ifds::s_FldProp_AMSCode )
, AcctGroup_( ifds::AcctGroup, &ifds::s_FldProp_AcctGroup )
, AcctGroupName_( ifds::AcctGroupName, &ifds::s_FldProp_AcctGroupName )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
   cFields_ = 41;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0166_VW::~dsi_DSTC0166_VW()
{
}

BFDataImpl* dsi_DSTC0166_VW::clone()
{
   dsi_DSTC0166_VW* p = new dsi_DSTC0166_VW;
   p->MoreAvailable_ = MoreAvailable_;
   p->NextKey_ = NextKey_;
   p->BeneficialOwner_ = BeneficialOwner_;
   p->AltAccount_ = AltAccount_;
   p->Currency_ = Currency_;
   p->CurrencyName_ = CurrencyName_;
   p->BrokerCode_ = BrokerCode_;
   p->BranchCode_ = BranchCode_;
   p->SlsrepCode_ = SlsrepCode_;
   p->AcctStatus_ = AcctStatus_;
   p->DateOfReg_ = DateOfReg_;
   p->BrokerName_ = BrokerName_;
   p->BranchName_ = BranchName_;
   p->SlsrepName_ = SlsrepName_;
   p->ShrNum_ = ShrNum_;
   p->EffectiveDate_ = EffectiveDate_;
   p->ModDate_ = ModDate_;
   p->StopPurch_ = StopPurch_;
   p->StopRed_ = StopRed_;
   p->StopXferOut_ = StopXferOut_;
   p->StopXferIn_ = StopXferIn_;
   p->OwnerFirstName_ = OwnerFirstName_;
   p->OwnerLastName_ = OwnerLastName_;
   p->AcctType_ = AcctType_;
   p->AccountBalance_ = AccountBalance_;
   p->TotalValueAcctCurr_ = TotalValueAcctCurr_;
   p->TaxType_ = TaxType_;
   p->TaxTypeDesc_ = TaxTypeDesc_;
   p->AcctStatusDesc_ = AcctStatusDesc_;
   p->AcctTypeDesc_ = AcctTypeDesc_;
   p->InterAccount_ = InterAccount_;
   p->InvObjCode_ = InvObjCode_;
   p->AdvisorCode_ = AdvisorCode_;
   p->AdvisorDesc_ = AdvisorDesc_;
   p->InvObjDesc_ = InvObjDesc_;
   p->NomineeOwnFirstN_ = NomineeOwnFirstN_;
   p->NomineeOwnLastN_ = NomineeOwnLastN_;
   p->AMSCode_ = AMSCode_;
   p->AcctGroup_ = AcctGroup_;
   p->AcctGroupName_ = AcctGroupName_;
   p->RepeatCount_ = RepeatCount_;
   return(p);
}

BFDataField* dsi_DSTC0166_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000126: return ( &MoreAvailable_ ); break; // MoreAvailable
      case 40000029: return ( &NextKey_ ); break; // NextKey
      case 40000172: return ( &BeneficialOwner_ ); break; // BeneficialOwner
      case 40000173: return ( &AltAccount_ ); break; // AltAccount
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40000181: return ( &CurrencyName_ ); break; // CurrencyName
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000045: return ( &BranchCode_ ); break; // BranchCode
      case 40000656: return ( &SlsrepCode_ ); break; // SlsrepCode
      case 40000188: return ( &AcctStatus_ ); break; // AcctStatus
      case 40000190: return ( &DateOfReg_ ); break; // DateOfReg
      case 40000210: return ( &BrokerName_ ); break; // BrokerName
      case 40000211: return ( &BranchName_ ); break; // BranchName
      case 40000212: return ( &SlsrepName_ ); break; // SlsrepName
      case 40000114: return ( &ShrNum_ ); break; // ShrNum
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000592: return ( &StopPurch_ ); break; // StopPurch
      case 40000593: return ( &StopRed_ ); break; // StopRed
      case 40000198: return ( &StopXferOut_ ); break; // StopXferOut
      case 40000197: return ( &StopXferIn_ ); break; // StopXferIn
      case 40002624: return ( &OwnerFirstName_ ); break; // OwnerFirstName
      case 40002625: return ( &OwnerLastName_ ); break; // OwnerLastName
      case 40000174: return ( &AcctType_ ); break; // AcctType
      case 40000396: return ( &AccountBalance_ ); break; // AccountBalance
      case 40002087: return ( &TotalValueAcctCurr_ ); break; // TotalValueAcctCurr
      case 40000134: return ( &TaxType_ ); break; // TaxType
      case 40000135: return ( &TaxTypeDesc_ ); break; // TaxTypeDesc
      case 40000189: return ( &AcctStatusDesc_ ); break; // AcctStatusDesc
      case 40000175: return ( &AcctTypeDesc_ ); break; // AcctTypeDesc
      case 40000187: return ( &InterAccount_ ); break; // InterAccount
      case 40000314: return ( &InvObjCode_ ); break; // InvObjCode
      case 40000323: return ( &AdvisorCode_ ); break; // AdvisorCode
      case 40000324: return ( &AdvisorDesc_ ); break; // AdvisorDesc
      case 40000315: return ( &InvObjDesc_ ); break; // InvObjDesc
      case 40003822: return ( &NomineeOwnFirstN_ ); break; // NomineeOwnFirstN
      case 40003823: return ( &NomineeOwnLastN_ ); break; // NomineeOwnLastN
      case 40000193: return ( &AMSCode_ ); break; // AMSCode
      case 40000208: return ( &AcctGroup_ ); break; // AcctGroup
      case 40000209: return ( &AcctGroupName_ ); break; // AcctGroupName
      case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0166_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0166_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0166_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 41 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &MoreAvailable_; break;
            case 1: aFlds_[1] = &NextKey_; break;
            case 2: aFlds_[2] = &BeneficialOwner_; break;
            case 3: aFlds_[3] = &AltAccount_; break;
            case 4: aFlds_[4] = &Currency_; break;
            case 5: aFlds_[5] = &CurrencyName_; break;
            case 6: aFlds_[6] = &BrokerCode_; break;
            case 7: aFlds_[7] = &BranchCode_; break;
            case 8: aFlds_[8] = &SlsrepCode_; break;
            case 9: aFlds_[9] = &AcctStatus_; break;
            case 10: aFlds_[10] = &DateOfReg_; break;
            case 11: aFlds_[11] = &BrokerName_; break;
            case 12: aFlds_[12] = &BranchName_; break;
            case 13: aFlds_[13] = &SlsrepName_; break;
            case 14: aFlds_[14] = &ShrNum_; break;
            case 15: aFlds_[15] = &EffectiveDate_; break;
            case 16: aFlds_[16] = &ModDate_; break;
            case 17: aFlds_[17] = &StopPurch_; break;
            case 18: aFlds_[18] = &StopRed_; break;
            case 19: aFlds_[19] = &StopXferOut_; break;
            case 20: aFlds_[20] = &StopXferIn_; break;
            case 21: aFlds_[21] = &OwnerFirstName_; break;
            case 22: aFlds_[22] = &OwnerLastName_; break;
            case 23: aFlds_[23] = &AcctType_; break;
            case 24: aFlds_[24] = &AccountBalance_; break;
            case 25: aFlds_[25] = &TotalValueAcctCurr_; break;
            case 26: aFlds_[26] = &TaxType_; break;
            case 27: aFlds_[27] = &TaxTypeDesc_; break;
            case 28: aFlds_[28] = &AcctStatusDesc_; break;
            case 29: aFlds_[29] = &AcctTypeDesc_; break;
            case 30: aFlds_[30] = &InterAccount_; break;
            case 31: aFlds_[31] = &InvObjCode_; break;
            case 32: aFlds_[32] = &AdvisorCode_; break;
            case 33: aFlds_[33] = &AdvisorDesc_; break;
            case 34: aFlds_[34] = &InvObjDesc_; break;
            case 35: aFlds_[35] = &NomineeOwnFirstN_; break;
            case 36: aFlds_[36] = &NomineeOwnLastN_; break;
            case 37: aFlds_[37] = &AMSCode_; break;
            case 38: aFlds_[38] = &AcctGroup_; break;
            case 39: aFlds_[39] = &AcctGroupName_; break;
            case 40: aFlds_[40] = &RepeatCount_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0166_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0166_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0166_VW::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0166_VW::getDefinedByteLength( void ) const
{
   return( 2027 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0166_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0166_VW::fieldExists( id );
}

bool dsi_DSTC0166_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000126: return( true );
      case 40000029: return( true );
      case 40000172: return( true );
      case 40000173: return( true );
      case 40000180: return( true );
      case 40000181: return( true );
      case 40000044: return( true );
      case 40000045: return( true );
      case 40000656: return( true );
      case 40000188: return( true );
      case 40000190: return( true );
      case 40000210: return( true );
      case 40000211: return( true );
      case 40000212: return( true );
      case 40000114: return( true );
      case 40000327: return( true );
      case 40000217: return( true );
      case 40000592: return( true );
      case 40000593: return( true );
      case 40000198: return( true );
      case 40000197: return( true );
      case 40002624: return( true );
      case 40002625: return( true );
      case 40000174: return( true );
      case 40000396: return( true );
      case 40002087: return( true );
      case 40000134: return( true );
      case 40000135: return( true );
      case 40000189: return( true );
      case 40000175: return( true );
      case 40000187: return( true );
      case 40000314: return( true );
      case 40000323: return( true );
      case 40000324: return( true );
      case 40000315: return( true );
      case 40003822: return( true );
      case 40003823: return( true );
      case 40000193: return( true );
      case 40000208: return( true );
      case 40000209: return( true );
      case 40000120: return( true );
   }
   return false;
}

