// BFDataImpl implementation file for DataSet DSTC0176.REQRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0176_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0176_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0176_REQRepeat_Record() { return new dsi_DSTC0176_REQRepeat_Record; }

dsi_DSTC0176_REQRepeat_Record::dsi_DSTC0176_REQRepeat_Record()
: BFDataImpl( 40002774 )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, CommLevel_( ifds::CommLevel, &ifds::s_FldProp_CommLevel )
, GrossOrNet_( ifds::GrossOrNet, &ifds::s_FldProp_GrossOrNet )
, TradesPayType_( ifds::TradesPayType, &ifds::s_FldProp_TradesPayType )
, CommPrcnt_( ifds::CommPrcnt, &ifds::s_FldProp_CommPrcnt )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, AgencyCode_( ifds::AgencyCode, &ifds::s_FldProp_AgencyCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, AgentCode_( ifds::AgentCode, &ifds::s_FldProp_AgentCode )
, SplCommRid_( ifds::SplCommRid, &ifds::s_FldProp_SplCommRid )
, Active_( ifds::Active, &ifds::s_FldProp_Active )
{
   cFields_ = 12;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0176_REQRepeat_Record::~dsi_DSTC0176_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0176_REQRepeat_Record::clone()
{
   dsi_DSTC0176_REQRepeat_Record* p = new dsi_DSTC0176_REQRepeat_Record;
   p->RunMode_ = RunMode_;
   p->CommLevel_ = CommLevel_;
   p->GrossOrNet_ = GrossOrNet_;
   p->TradesPayType_ = TradesPayType_;
   p->CommPrcnt_ = CommPrcnt_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->AgencyCode_ = AgencyCode_;
   p->BranchCode_ = BranchCode_;
   p->AgentCode_ = AgentCode_;
   p->SplCommRid_ = SplCommRid_;
   p->Active_ = Active_;
   return(p);
}

BFDataField* dsi_DSTC0176_REQRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40002240: return ( &CommLevel_ ); break; // CommLevel
      case 40000234: return ( &GrossOrNet_ ); break; // GrossOrNet
      case 40001377: return ( &TradesPayType_ ); break; // TradesPayType
      case 40002211: return ( &CommPrcnt_ ); break; // CommPrcnt
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40002769: return ( &AgencyCode_ ); break; // AgencyCode
      case 40000045: return ( &BranchCode_ ); break; // BranchCode
      case 40002770: return ( &AgentCode_ ); break; // AgentCode
      case 40002772: return ( &SplCommRid_ ); break; // SplCommRid
      case 40000222: return ( &Active_ ); break; // Active
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0176_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0176_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0176_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 12 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RunMode_; break;
            case 1: aFlds_[1] = &CommLevel_; break;
            case 2: aFlds_[2] = &GrossOrNet_; break;
            case 3: aFlds_[3] = &TradesPayType_; break;
            case 4: aFlds_[4] = &CommPrcnt_; break;
            case 5: aFlds_[5] = &EffectiveDate_; break;
            case 6: aFlds_[6] = &StopDate_; break;
            case 7: aFlds_[7] = &AgencyCode_; break;
            case 8: aFlds_[8] = &BranchCode_; break;
            case 9: aFlds_[9] = &AgentCode_; break;
            case 10: aFlds_[10] = &SplCommRid_; break;
            case 11: aFlds_[11] = &Active_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0176_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0176_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0176_REQRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0176_REQRepeat_Record::getDefinedByteLength( void ) const
{
   return( 466 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0176_REQRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0176_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0176_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000990: return( true );
      case 40002240: return( true );
      case 40000234: return( true );
      case 40001377: return( true );
      case 40002211: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40002769: return( true );
      case 40000045: return( true );
      case 40002770: return( true );
      case 40002772: return( true );
      case 40000222: return( true );
   }
   return false;
}

