// BFDataImpl implementation file for DataSet DSTC0213.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0213_req.h"


// This function creates an instance of dsi_DSTC0213_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0213_REQ() { return new dsi_DSTC0213_REQ; }

dsi_DSTC0213_REQ::dsi_DSTC0213_REQ()
: BFDataImpl( 40003225 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, January_( ifds::January, &ifds::s_FldProp_January )
, February_( ifds::February, &ifds::s_FldProp_February )
, March_( ifds::March, &ifds::s_FldProp_March )
, April_( ifds::April, &ifds::s_FldProp_April )
, May_( ifds::May, &ifds::s_FldProp_May )
, June_( ifds::June, &ifds::s_FldProp_June )
, July_( ifds::July, &ifds::s_FldProp_July )
, August_( ifds::August, &ifds::s_FldProp_August )
, September_( ifds::September, &ifds::s_FldProp_September )
, October_( ifds::October, &ifds::s_FldProp_October )
, November_( ifds::November, &ifds::s_FldProp_November )
, December_( ifds::December, &ifds::s_FldProp_December )
, Frequency_( ifds::Frequency, &ifds::s_FldProp_Frequency )
, DayOfWeek_( ifds::DayOfWeek, &ifds::s_FldProp_DayOfWeek )
, EndOfMonth_( ifds::EndOfMonth, &ifds::s_FldProp_EndOfMonth )
, LastProcDate_( ifds::LastProcDate, &ifds::s_FldProp_LastProcDate )
{
   cFields_ = 25;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0213_REQ::~dsi_DSTC0213_REQ()
{
}

BFDataImpl* dsi_DSTC0213_REQ::clone()
{
   dsi_DSTC0213_REQ* p = new dsi_DSTC0213_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->EffectiveDate_ = EffectiveDate_;
   p->January_ = January_;
   p->February_ = February_;
   p->March_ = March_;
   p->April_ = April_;
   p->May_ = May_;
   p->June_ = June_;
   p->July_ = July_;
   p->August_ = August_;
   p->September_ = September_;
   p->October_ = October_;
   p->November_ = November_;
   p->December_ = December_;
   p->Frequency_ = Frequency_;
   p->DayOfWeek_ = DayOfWeek_;
   p->EndOfMonth_ = EndOfMonth_;
   p->LastProcDate_ = LastProcDate_;
   return(p);
}

BFDataField* dsi_DSTC0213_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000257: return ( &January_ ); break; // January
      case 40000258: return ( &February_ ); break; // February
      case 40000259: return ( &March_ ); break; // March
      case 40000260: return ( &April_ ); break; // April
      case 40000261: return ( &May_ ); break; // May
      case 40000262: return ( &June_ ); break; // June
      case 40000263: return ( &July_ ); break; // July
      case 40000264: return ( &August_ ); break; // August
      case 40000265: return ( &September_ ); break; // September
      case 40000266: return ( &October_ ); break; // October
      case 40000267: return ( &November_ ); break; // November
      case 40000268: return ( &December_ ); break; // December
      case 40000730: return ( &Frequency_ ); break; // Frequency
      case 40000275: return ( &DayOfWeek_ ); break; // DayOfWeek
      case 40000272: return ( &EndOfMonth_ ); break; // EndOfMonth
      case 40000829: return ( &LastProcDate_ ); break; // LastProcDate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0213_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0213_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0213_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 25 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &FundCode_; break;
            case 7: aFlds_[7] = &ClassCode_; break;
            case 8: aFlds_[8] = &EffectiveDate_; break;
            case 9: aFlds_[9] = &January_; break;
            case 10: aFlds_[10] = &February_; break;
            case 11: aFlds_[11] = &March_; break;
            case 12: aFlds_[12] = &April_; break;
            case 13: aFlds_[13] = &May_; break;
            case 14: aFlds_[14] = &June_; break;
            case 15: aFlds_[15] = &July_; break;
            case 16: aFlds_[16] = &August_; break;
            case 17: aFlds_[17] = &September_; break;
            case 18: aFlds_[18] = &October_; break;
            case 19: aFlds_[19] = &November_; break;
            case 20: aFlds_[20] = &December_; break;
            case 21: aFlds_[21] = &Frequency_; break;
            case 22: aFlds_[22] = &DayOfWeek_; break;
            case 23: aFlds_[23] = &EndOfMonth_; break;
            case 24: aFlds_[24] = &LastProcDate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0213_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0213_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0213_REQ::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0213_REQ::getDefinedByteLength( void ) const
{
   return( 715 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0213_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0213_REQ::fieldExists( id );
}

bool dsi_DSTC0213_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000327: return( true );
      case 40000257: return( true );
      case 40000258: return( true );
      case 40000259: return( true );
      case 40000260: return( true );
      case 40000261: return( true );
      case 40000262: return( true );
      case 40000263: return( true );
      case 40000264: return( true );
      case 40000265: return( true );
      case 40000266: return( true );
      case 40000267: return( true );
      case 40000268: return( true );
      case 40000730: return( true );
      case 40000275: return( true );
      case 40000272: return( true );
      case 40000829: return( true );
   }
   return false;
}

