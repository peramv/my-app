// BFDataImpl implementation file for DataSet DSTC0244.REQRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0244_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0244_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0244_REQRepeat_Record() { return new dsi_DSTC0244_REQRepeat_Record; }

dsi_DSTC0244_REQRepeat_Record::dsi_DSTC0244_REQRepeat_Record()
: BFDataImpl( 40003747 )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, ResetDate_( ifds::ResetDate, &ifds::s_FldProp_ResetDate )
, ResetType_( ifds::ResetType, &ifds::s_FldProp_ResetType )
, CanResetId_( ifds::CanResetId, &ifds::s_FldProp_CanResetId )
, BatchEffective_( ifds::BatchEffective, &ifds::s_FldProp_BatchEffective )
, BatchName_( ifds::BatchName, &ifds::s_FldProp_BatchName )
, Trace_( ifds::Trace, &ifds::s_FldProp_Trace )
, VersionNum_( ifds::VersionNum, &ifds::s_FldProp_VersionNum )
, ProtContractRId_( ifds::ProtContractRId, &ifds::s_FldProp_ProtContractRId )
{
   cFields_ = 12;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0244_REQRepeat_Record::~dsi_DSTC0244_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0244_REQRepeat_Record::clone()
{
   dsi_DSTC0244_REQRepeat_Record* p = new dsi_DSTC0244_REQRepeat_Record;
   p->RunMode_ = RunMode_;
   p->AccountNum_ = AccountNum_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->ResetDate_ = ResetDate_;
   p->ResetType_ = ResetType_;
   p->CanResetId_ = CanResetId_;
   p->BatchEffective_ = BatchEffective_;
   p->BatchName_ = BatchName_;
   p->Trace_ = Trace_;
   p->VersionNum_ = VersionNum_;
   p->ProtContractRId_ = ProtContractRId_;
   return(p);
}

BFDataField* dsi_DSTC0244_REQRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40003726: return ( &ResetDate_ ); break; // ResetDate
      case 40003727: return ( &ResetType_ ); break; // ResetType
      case 40003729: return ( &CanResetId_ ); break; // CanResetId
      case 40000861: return ( &BatchEffective_ ); break; // BatchEffective
      case 40000653: return ( &BatchName_ ); break; // BatchName
      case 40001355: return ( &Trace_ ); break; // Trace
      case 40000228: return ( &VersionNum_ ); break; // VersionNum
      case 40003677: return ( &ProtContractRId_ ); break; // ProtContractRId
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0244_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0244_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0244_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 12 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RunMode_; break;
            case 1: aFlds_[1] = &AccountNum_; break;
            case 2: aFlds_[2] = &FundCode_; break;
            case 3: aFlds_[3] = &ClassCode_; break;
            case 4: aFlds_[4] = &ResetDate_; break;
            case 5: aFlds_[5] = &ResetType_; break;
            case 6: aFlds_[6] = &CanResetId_; break;
            case 7: aFlds_[7] = &BatchEffective_; break;
            case 8: aFlds_[8] = &BatchName_; break;
            case 9: aFlds_[9] = &Trace_; break;
            case 10: aFlds_[10] = &VersionNum_; break;
            case 11: aFlds_[11] = &ProtContractRId_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0244_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0244_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0244_REQRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0244_REQRepeat_Record::getDefinedByteLength( void ) const
{
   return( 588 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0244_REQRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0244_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0244_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000990: return( true );
      case 40000040: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40003726: return( true );
      case 40003727: return( true );
      case 40003729: return( true );
      case 40000861: return( true );
      case 40000653: return( true );
      case 40001355: return( true );
      case 40000228: return( true );
      case 40003677: return( true );
   }
   return false;
}

