// BFDataImpl implementation file for DataSet DSTC0020.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Monday, November 07, 2016 01:08:13


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0020_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0020_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0020_VWRepeat_Record() { return new dsi_DSTC0020_VWRepeat_Record; }

dsi_DSTC0020_VWRepeat_Record::dsi_DSTC0020_VWRepeat_Record()
: BFDataImpl( 40000400 )
, rxFundCode_( ifds::rxFundCode, &ifds::s_FldProp_rxFundCode )
, rxClassCode_( ifds::rxClassCode, &ifds::s_FldProp_rxClassCode )
, SettledUnits_( ifds::SettledUnits, &ifds::s_FldProp_SettledUnits )
, SettledValue_( ifds::SettledValue, &ifds::s_FldProp_SettledValue )
, UnsettledUnits_( ifds::UnsettledUnits, &ifds::s_FldProp_UnsettledUnits )
, UnsettledValue_( ifds::UnsettledValue, &ifds::s_FldProp_UnsettledValue )
, FundNAV_( ifds::FundNAV, &ifds::s_FldProp_FundNAV )
, PYEUnits_( ifds::PYEUnits, &ifds::s_FldProp_PYEUnits )
, PYEValue_( ifds::PYEValue, &ifds::s_FldProp_PYEValue )
, AsAtDate_( ifds::AsAtDate, &ifds::s_FldProp_AsAtDate )
, LastEvent_( ifds::LastEvent, &ifds::s_FldProp_LastEvent )
, SettledValueAcctCurr_( ifds::SettledValueAcctCurr, &ifds::s_FldProp_SettledValueAcctCurr )
, FundCurrency_( ifds::FundCurrency, &ifds::s_FldProp_FundCurrency )
, TradedUnits_( ifds::TradedUnits, &ifds::s_FldProp_TradedUnits )
, CombValueFundCurr_( ifds::CombValueFundCurr, &ifds::s_FldProp_CombValueFundCurr )
, CombValueAcctCurr_( ifds::CombValueAcctCurr, &ifds::s_FldProp_CombValueAcctCurr )
, ExchRate_( ifds::ExchRate, &ifds::s_FldProp_ExchRate )
, PendingTradesExist_( ifds::PendingTradesExist, &ifds::s_FldProp_PendingTradesExist )
, ACBSettl_( ifds::ACBSettl, &ifds::s_FldProp_ACBSettl )
, ACBTotal_( ifds::ACBTotal, &ifds::s_FldProp_ACBTotal )
, FundNumber_( ifds::FundNumber, &ifds::s_FldProp_FundNumber )
, FundGroup_( ifds::FundGroup, &ifds::s_FldProp_FundGroup )
, FndClsACBAvailable_( ifds::FndClsACBAvailable, &ifds::s_FldProp_FndClsACBAvailable )
, ReportingExchRate_( ifds::ReportingExchRate, &ifds::s_FldProp_ReportingExchRate )
, NAVDate_( ifds::NAVDate, &ifds::s_FldProp_NAVDate )
, AllocatorFund_( ifds::AllocatorFund, &ifds::s_FldProp_AllocatorFund )
, ACBSettledValue_( ifds::ACBSettledValue, &ifds::s_FldProp_ACBSettledValue )
, ActiveCert_( ifds::ActiveCert, &ifds::s_FldProp_ActiveCert )
, Grp1Shares_( ifds::Grp1Shares, &ifds::s_FldProp_Grp1Shares )
, Grp2Shares_( ifds::Grp2Shares, &ifds::s_FldProp_Grp2Shares )
, GuarMktValue_( ifds::GuarMktValue, &ifds::s_FldProp_GuarMktValue )
, rxOpenDate_( ifds::rxOpenDate, &ifds::s_FldProp_rxOpenDate )
, rxCloseDate_( ifds::rxCloseDate, &ifds::s_FldProp_rxCloseDate )
{
    cFields_ = 33;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0020_VWRepeat_Record::~dsi_DSTC0020_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0020_VWRepeat_Record::clone()
{
    dsi_DSTC0020_VWRepeat_Record* p = new dsi_DSTC0020_VWRepeat_Record;
    p->rxFundCode_ = rxFundCode_;
    p->rxClassCode_ = rxClassCode_;
    p->SettledUnits_ = SettledUnits_;
    p->SettledValue_ = SettledValue_;
    p->UnsettledUnits_ = UnsettledUnits_;
    p->UnsettledValue_ = UnsettledValue_;
    p->FundNAV_ = FundNAV_;
    p->PYEUnits_ = PYEUnits_;
    p->PYEValue_ = PYEValue_;
    p->AsAtDate_ = AsAtDate_;
    p->LastEvent_ = LastEvent_;
    p->SettledValueAcctCurr_ = SettledValueAcctCurr_;
    p->FundCurrency_ = FundCurrency_;
    p->TradedUnits_ = TradedUnits_;
    p->CombValueFundCurr_ = CombValueFundCurr_;
    p->CombValueAcctCurr_ = CombValueAcctCurr_;
    p->ExchRate_ = ExchRate_;
    p->PendingTradesExist_ = PendingTradesExist_;
    p->ACBSettl_ = ACBSettl_;
    p->ACBTotal_ = ACBTotal_;
    p->FundNumber_ = FundNumber_;
    p->FundGroup_ = FundGroup_;
    p->FndClsACBAvailable_ = FndClsACBAvailable_;
    p->ReportingExchRate_ = ReportingExchRate_;
    p->NAVDate_ = NAVDate_;
    p->AllocatorFund_ = AllocatorFund_;
    p->ACBSettledValue_ = ACBSettledValue_;
    p->ActiveCert_ = ActiveCert_;
    p->Grp1Shares_ = Grp1Shares_;
    p->Grp2Shares_ = Grp2Shares_;
    p->GuarMktValue_ = GuarMktValue_;
    p->rxOpenDate_ = rxOpenDate_;
    p->rxCloseDate_ = rxCloseDate_;
    return(p);
}

BFDataField* dsi_DSTC0020_VWRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000286: return ( &rxFundCode_ ); break; // rxFundCode
        case 40000287: return ( &rxClassCode_ ); break; // rxClassCode
        case 40000401: return ( &SettledUnits_ ); break; // SettledUnits
        case 40000402: return ( &SettledValue_ ); break; // SettledValue
        case 40000403: return ( &UnsettledUnits_ ); break; // UnsettledUnits
        case 40000404: return ( &UnsettledValue_ ); break; // UnsettledValue
        case 40000405: return ( &FundNAV_ ); break; // FundNAV
        case 40000406: return ( &PYEUnits_ ); break; // PYEUnits
        case 40000407: return ( &PYEValue_ ); break; // PYEValue
        case 40000408: return ( &AsAtDate_ ); break; // AsAtDate
        case 40000978: return ( &LastEvent_ ); break; // LastEvent
        case 40001316: return ( &SettledValueAcctCurr_ ); break; // SettledValueAcctCurr
        case 40001948: return ( &FundCurrency_ ); break; // FundCurrency
        case 40002070: return ( &TradedUnits_ ); break; // TradedUnits
        case 40002071: return ( &CombValueFundCurr_ ); break; // CombValueFundCurr
        case 40002072: return ( &CombValueAcctCurr_ ); break; // CombValueAcctCurr
        case 40000456: return ( &ExchRate_ ); break; // ExchRate
        case 40002075: return ( &PendingTradesExist_ ); break; // PendingTradesExist
        case 40002880: return ( &ACBSettl_ ); break; // ACBSettl
        case 40002881: return ( &ACBTotal_ ); break; // ACBTotal
        case 40002893: return ( &FundNumber_ ); break; // FundNumber
        case 40002031: return ( &FundGroup_ ); break; // FundGroup
        case 40003762: return ( &FndClsACBAvailable_ ); break; // FndClsACBAvailable
        case 40005407: return ( &ReportingExchRate_ ); break; // ReportingExchRate
        case 40005408: return ( &NAVDate_ ); break; // NAVDate
        case 40005708: return ( &AllocatorFund_ ); break; // AllocatorFund
        case 40005719: return ( &ACBSettledValue_ ); break; // ACBSettledValue
        case 40005714: return ( &ActiveCert_ ); break; // ActiveCert
        case 40002821: return ( &Grp1Shares_ ); break; // Grp1Shares
        case 40002825: return ( &Grp2Shares_ ); break; // Grp2Shares
        case 40007692: return ( &GuarMktValue_ ); break; // GuarMktValue
        case 40007867: return ( &rxOpenDate_ ); break; // rxOpenDate
        case 40007868: return ( &rxCloseDate_ ); break; // rxCloseDate
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0020_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0020_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0020_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 33 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &rxFundCode_; break;
                case 1: aFlds_[1] = &rxClassCode_; break;
                case 2: aFlds_[2] = &SettledUnits_; break;
                case 3: aFlds_[3] = &SettledValue_; break;
                case 4: aFlds_[4] = &UnsettledUnits_; break;
                case 5: aFlds_[5] = &UnsettledValue_; break;
                case 6: aFlds_[6] = &FundNAV_; break;
                case 7: aFlds_[7] = &PYEUnits_; break;
                case 8: aFlds_[8] = &PYEValue_; break;
                case 9: aFlds_[9] = &AsAtDate_; break;
                case 10: aFlds_[10] = &LastEvent_; break;
                case 11: aFlds_[11] = &SettledValueAcctCurr_; break;
                case 12: aFlds_[12] = &FundCurrency_; break;
                case 13: aFlds_[13] = &TradedUnits_; break;
                case 14: aFlds_[14] = &CombValueFundCurr_; break;
                case 15: aFlds_[15] = &CombValueAcctCurr_; break;
                case 16: aFlds_[16] = &ExchRate_; break;
                case 17: aFlds_[17] = &PendingTradesExist_; break;
                case 18: aFlds_[18] = &ACBSettl_; break;
                case 19: aFlds_[19] = &ACBTotal_; break;
                case 20: aFlds_[20] = &FundNumber_; break;
                case 21: aFlds_[21] = &FundGroup_; break;
                case 22: aFlds_[22] = &FndClsACBAvailable_; break;
                case 23: aFlds_[23] = &ReportingExchRate_; break;
                case 24: aFlds_[24] = &NAVDate_; break;
                case 25: aFlds_[25] = &AllocatorFund_; break;
                case 26: aFlds_[26] = &ACBSettledValue_; break;
                case 27: aFlds_[27] = &ActiveCert_; break;
                case 28: aFlds_[28] = &Grp1Shares_; break;
                case 29: aFlds_[29] = &Grp2Shares_; break;
                case 30: aFlds_[30] = &GuarMktValue_; break;
                case 31: aFlds_[31] = &rxOpenDate_; break;
                case 32: aFlds_[32] = &rxCloseDate_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0020_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0020_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0020_VWRepeat_Record::getLargestDefinedField( void ) const
{
    return( 60 );
}

unsigned long dsi_DSTC0020_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 813 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0020_VWRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0020_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0020_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000286: return ( true );
        case 40000287: return ( true );
        case 40000401: return ( true );
        case 40000402: return ( true );
        case 40000403: return ( true );
        case 40000404: return ( true );
        case 40000405: return ( true );
        case 40000406: return ( true );
        case 40000407: return ( true );
        case 40000408: return ( true );
        case 40000978: return ( true );
        case 40001316: return ( true );
        case 40001948: return ( true );
        case 40002070: return ( true );
        case 40002071: return ( true );
        case 40002072: return ( true );
        case 40000456: return ( true );
        case 40002075: return ( true );
        case 40002880: return ( true );
        case 40002881: return ( true );
        case 40002893: return ( true );
        case 40002031: return ( true );
        case 40003762: return ( true );
        case 40005407: return ( true );
        case 40005408: return ( true );
        case 40005708: return ( true );
        case 40005719: return ( true );
        case 40005714: return ( true );
        case 40002821: return ( true );
        case 40002825: return ( true );
        case 40007692: return ( true );
        case 40007867: return ( true );
        case 40007868: return ( true );
    }
    return false;
}

