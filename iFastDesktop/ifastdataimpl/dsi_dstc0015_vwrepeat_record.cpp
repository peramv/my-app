// BFDataImpl implementation file for DataSet DSTC0015.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:58 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0015_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0015_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0015_VWRepeat_Record() { return new dsi_DSTC0015_VWRepeat_Record; }

dsi_DSTC0015_VWRepeat_Record::dsi_DSTC0015_VWRepeat_Record()
: BFDataImpl( 40000330 )
, rxFundCode_( ifds::rxFundCode, &ifds::s_FldProp_rxFundCode )
, rxClassCode_( ifds::rxClassCode, &ifds::s_FldProp_rxClassCode )
, TradeDate_( ifds::TradeDate, &ifds::s_FldProp_TradeDate )
, TransAmount_( ifds::TransAmount, &ifds::s_FldProp_TransAmount )
, Units_( ifds::Units, &ifds::s_FldProp_Units )
, UnitsHeld_( ifds::UnitsHeld, &ifds::s_FldProp_UnitsHeld )
, AdjustedCost_( ifds::AdjustedCost, &ifds::s_FldProp_AdjustedCost )
, ACBPerUnit_( ifds::ACBPerUnit, &ifds::s_FldProp_ACBPerUnit )
, GainOrLossAmt_( ifds::GainOrLossAmt, &ifds::s_FldProp_GainOrLossAmt )
, TransTypeDesc_( ifds::TransTypeDesc, &ifds::s_FldProp_TransTypeDesc )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, HistUnitACB_( ifds::HistUnitACB, &ifds::s_FldProp_HistUnitACB )
, ACBOffset_( ifds::ACBOffset, &ifds::s_FldProp_ACBOffset )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, TaxableAmount_( ifds::TaxableAmount, &ifds::s_FldProp_TaxableAmount )
, GIAOpenMktValue_( ifds::GIAOpenMktValue, &ifds::s_FldProp_GIAOpenMktValue )
, GainOrLossCurrency_( ifds::GainOrLossCurrency, &ifds::s_FldProp_GainOrLossCurrency )
{
   cFields_ = 17;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0015_VWRepeat_Record::~dsi_DSTC0015_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0015_VWRepeat_Record::clone()
{
   dsi_DSTC0015_VWRepeat_Record* p = new dsi_DSTC0015_VWRepeat_Record;
   p->rxFundCode_ = rxFundCode_;
   p->rxClassCode_ = rxClassCode_;
   p->TradeDate_ = TradeDate_;
   p->TransAmount_ = TransAmount_;
   p->Units_ = Units_;
   p->UnitsHeld_ = UnitsHeld_;
   p->AdjustedCost_ = AdjustedCost_;
   p->ACBPerUnit_ = ACBPerUnit_;
   p->GainOrLossAmt_ = GainOrLossAmt_;
   p->TransTypeDesc_ = TransTypeDesc_;
   p->TransType_ = TransType_;
   p->HistUnitACB_ = HistUnitACB_;
   p->ACBOffset_ = ACBOffset_;
   p->TransId_ = TransId_;
   p->TaxableAmount_ = TaxableAmount_;
   p->GIAOpenMktValue_ = GIAOpenMktValue_;
   p->GainOrLossCurrency_ = GainOrLossCurrency_;
   return(p);
}

BFDataField* dsi_DSTC0015_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000286: return ( &rxFundCode_ ); break; // rxFundCode
      case 40000287: return ( &rxClassCode_ ); break; // rxClassCode
      case 40000097: return ( &TradeDate_ ); break; // TradeDate
      case 40000331: return ( &TransAmount_ ); break; // TransAmount
      case 40000332: return ( &Units_ ); break; // Units
      case 40000333: return ( &UnitsHeld_ ); break; // UnitsHeld
      case 40000334: return ( &AdjustedCost_ ); break; // AdjustedCost
      case 40000335: return ( &ACBPerUnit_ ); break; // ACBPerUnit
      case 40000336: return ( &GainOrLossAmt_ ); break; // GainOrLossAmt
      case 40000337: return ( &TransTypeDesc_ ); break; // TransTypeDesc
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40005735: return ( &HistUnitACB_ ); break; // HistUnitACB
      case 40006407: return ( &ACBOffset_ ); break; // ACBOffset
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40006916: return ( &TaxableAmount_ ); break; // TaxableAmount
      case 40007233: return ( &GIAOpenMktValue_ ); break; // GIAOpenMktValue
      case 40007425: return ( &GainOrLossCurrency_ ); break; // GainOrLossCurrency
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0015_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0015_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0015_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 17 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &rxFundCode_; break;
            case 1: aFlds_[1] = &rxClassCode_; break;
            case 2: aFlds_[2] = &TradeDate_; break;
            case 3: aFlds_[3] = &TransAmount_; break;
            case 4: aFlds_[4] = &Units_; break;
            case 5: aFlds_[5] = &UnitsHeld_; break;
            case 6: aFlds_[6] = &AdjustedCost_; break;
            case 7: aFlds_[7] = &ACBPerUnit_; break;
            case 8: aFlds_[8] = &GainOrLossAmt_; break;
            case 9: aFlds_[9] = &TransTypeDesc_; break;
            case 10: aFlds_[10] = &TransType_; break;
            case 11: aFlds_[11] = &HistUnitACB_; break;
            case 12: aFlds_[12] = &ACBOffset_; break;
            case 13: aFlds_[13] = &TransId_; break;
            case 14: aFlds_[14] = &TaxableAmount_; break;
            case 15: aFlds_[15] = &GIAOpenMktValue_; break;
            case 16: aFlds_[16] = &GainOrLossCurrency_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0015_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0015_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0015_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0015_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 507 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0015_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0015_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0015_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000286: return( true );
      case 40000287: return( true );
      case 40000097: return( true );
      case 40000331: return( true );
      case 40000332: return( true );
      case 40000333: return( true );
      case 40000334: return( true );
      case 40000335: return( true );
      case 40000336: return( true );
      case 40000337: return( true );
      case 40000095: return( true );
      case 40005735: return( true );
      case 40006407: return( true );
      case 40000063: return( true );
      case 40006916: return( true );
      case 40007233: return( true );
      case 40007425: return( true );
   }
   return false;
}

