// BFDataImpl implementation file for DataSet DSTC0095.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0095_req.h"


// This function creates an instance of dsi_DSTC0095_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0095_REQ() { return new dsi_DSTC0095_REQ; }

dsi_DSTC0095_REQ::dsi_DSTC0095_REQ()
: BFDataImpl( 40001047, 40001048 )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, AutoTrfId_( ifds::AutoTrfId, &ifds::s_FldProp_AutoTrfId )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, AccountTo_( ifds::AccountTo, &ifds::s_FldProp_AccountTo )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, FundToCode_( ifds::FundToCode, &ifds::s_FldProp_FundToCode )
, ClassToCode_( ifds::ClassToCode, &ifds::s_FldProp_ClassToCode )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, AmountType_( ifds::AmountType, &ifds::s_FldProp_AmountType )
, Fee_( ifds::Fee, &ifds::s_FldProp_Fee )
, FeePercent_( ifds::FeePercent, &ifds::s_FldProp_FeePercent )
, BELFee_( ifds::BELFee, &ifds::s_FldProp_BELFee )
, Frequency_( ifds::Frequency, &ifds::s_FldProp_Frequency )
, DayOfWeek_( ifds::DayOfWeek, &ifds::s_FldProp_DayOfWeek )
, EndOfMonth_( ifds::EndOfMonth, &ifds::s_FldProp_EndOfMonth )
, January_( ifds::January, &ifds::s_FldProp_January )
, February_( ifds::February, &ifds::s_FldProp_February )
, March_( ifds::March, &ifds::s_FldProp_March )
, April_( ifds::April, &ifds::s_FldProp_April )
, May_( ifds::May, &ifds::s_FldProp_May )
, June_( ifds::June, &ifds::s_FldProp_June )
, July_( ifds::July, &ifds::s_FldProp_July )
, August_( ifds::August, &ifds::s_FldProp_August )
, September_( ifds::September, &ifds::s_FldProp_September )
, October_( ifds::October, &ifds::s_FldProp_October )
, November_( ifds::November, &ifds::s_FldProp_November )
, December_( ifds::December, &ifds::s_FldProp_December )
, LastProcDate_( ifds::LastProcDate, &ifds::s_FldProp_LastProcDate )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, StatusCode_( ifds::StatusCode, &ifds::s_FldProp_StatusCode )
, SetAsDefault_( ifds::SetAsDefault, &ifds::s_FldProp_SetAsDefault )
, VersionNum_( ifds::VersionNum, &ifds::s_FldProp_VersionNum )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
{
   cFields_ = 40;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0095_REQ::~dsi_DSTC0095_REQ()
{
}

BFDataImpl* dsi_DSTC0095_REQ::clone()
{
   dsi_DSTC0095_REQ* p = new dsi_DSTC0095_REQ;
   p->AccountNum_ = AccountNum_;
   p->ClassCode_ = ClassCode_;
   p->FundCode_ = FundCode_;
   p->CompanyId_ = CompanyId_;
   p->LanguageCode_ = LanguageCode_;
   p->AutoTrfId_ = AutoTrfId_;
   p->RunMode_ = RunMode_;
   p->AccountTo_ = AccountTo_;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->FundToCode_ = FundToCode_;
   p->ClassToCode_ = ClassToCode_;
   p->Amount_ = Amount_;
   p->AmountType_ = AmountType_;
   p->Fee_ = Fee_;
   p->FeePercent_ = FeePercent_;
   p->BELFee_ = BELFee_;
   p->Frequency_ = Frequency_;
   p->DayOfWeek_ = DayOfWeek_;
   p->EndOfMonth_ = EndOfMonth_;
   p->January_ = January_;
   p->February_ = February_;
   p->March_ = March_;
   p->April_ = April_;
   p->May_ = May_;
   p->June_ = June_;
   p->July_ = July_;
   p->August_ = August_;
   p->September_ = September_;
   p->October_ = October_;
   p->November_ = November_;
   p->December_ = December_;
   p->LastProcDate_ = LastProcDate_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->StatusCode_ = StatusCode_;
   p->SetAsDefault_ = SetAsDefault_;
   p->VersionNum_ = VersionNum_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   return(p);
}

BFDataField* dsi_DSTC0095_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000718: return ( &AutoTrfId_ ); break; // AutoTrfId
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40000646: return ( &AccountTo_ ); break; // AccountTo
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000340: return ( &FundToCode_ ); break; // FundToCode
      case 40000341: return ( &ClassToCode_ ); break; // ClassToCode
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40000232: return ( &AmountType_ ); break; // AmountType
      case 40000235: return ( &Fee_ ); break; // Fee
      case 40000236: return ( &FeePercent_ ); break; // FeePercent
      case 40000659: return ( &BELFee_ ); break; // BELFee
      case 40000730: return ( &Frequency_ ); break; // Frequency
      case 40000275: return ( &DayOfWeek_ ); break; // DayOfWeek
      case 40000272: return ( &EndOfMonth_ ); break; // EndOfMonth
      case 40000257: return ( &January_ ); break; // January
      case 40000258: return ( &February_ ); break; // February
      case 40000259: return ( &March_ ); break; // March
      case 40000260: return ( &April_ ); break; // April
      case 40000261: return ( &May_ ); break; // May
      case 40000262: return ( &June_ ); break; // June
      case 40000263: return ( &July_ ); break; // July
      case 40000264: return ( &August_ ); break; // August
      case 40000265: return ( &September_ ); break; // September
      case 40000266: return ( &October_ ); break; // October
      case 40000267: return ( &November_ ); break; // November
      case 40000268: return ( &December_ ); break; // December
      case 40000829: return ( &LastProcDate_ ); break; // LastProcDate
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40000278: return ( &StatusCode_ ); break; // StatusCode
      case 40001036: return ( &SetAsDefault_ ); break; // SetAsDefault
      case 40000228: return ( &VersionNum_ ); break; // VersionNum
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0095_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0095_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0095_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 40 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AccountNum_; break;
            case 1: aFlds_[1] = &ClassCode_; break;
            case 2: aFlds_[2] = &FundCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &LanguageCode_; break;
            case 5: aFlds_[5] = &AutoTrfId_; break;
            case 6: aFlds_[6] = &RunMode_; break;
            case 7: aFlds_[7] = &AccountTo_; break;
            case 8: aFlds_[8] = &SessionId_; break;
            case 9: aFlds_[9] = &User_Id_; break;
            case 10: aFlds_[10] = &FundToCode_; break;
            case 11: aFlds_[11] = &ClassToCode_; break;
            case 12: aFlds_[12] = &Amount_; break;
            case 13: aFlds_[13] = &AmountType_; break;
            case 14: aFlds_[14] = &Fee_; break;
            case 15: aFlds_[15] = &FeePercent_; break;
            case 16: aFlds_[16] = &BELFee_; break;
            case 17: aFlds_[17] = &Frequency_; break;
            case 18: aFlds_[18] = &DayOfWeek_; break;
            case 19: aFlds_[19] = &EndOfMonth_; break;
            case 20: aFlds_[20] = &January_; break;
            case 21: aFlds_[21] = &February_; break;
            case 22: aFlds_[22] = &March_; break;
            case 23: aFlds_[23] = &April_; break;
            case 24: aFlds_[24] = &May_; break;
            case 25: aFlds_[25] = &June_; break;
            case 26: aFlds_[26] = &July_; break;
            case 27: aFlds_[27] = &August_; break;
            case 28: aFlds_[28] = &September_; break;
            case 29: aFlds_[29] = &October_; break;
            case 30: aFlds_[30] = &November_; break;
            case 31: aFlds_[31] = &December_; break;
            case 32: aFlds_[32] = &LastProcDate_; break;
            case 33: aFlds_[33] = &EffectiveDate_; break;
            case 34: aFlds_[34] = &StopDate_; break;
            case 35: aFlds_[35] = &StatusCode_; break;
            case 36: aFlds_[36] = &SetAsDefault_; break;
            case 37: aFlds_[37] = &VersionNum_; break;
            case 38: aFlds_[38] = &Track_; break;
            case 39: aFlds_[39] = &Activity_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0095_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0095_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0095_REQ::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0095_REQ::getDefinedByteLength( void ) const
{
   return( 1090 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0095_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0095_REQ::fieldExists( id );
}

bool dsi_DSTC0095_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000040: return( true );
      case 40000050: return( true );
      case 40000049: return( true );
      case 40000031: return( true );
      case 40000030: return( true );
      case 40000718: return( true );
      case 40000990: return( true );
      case 40000646: return( true );
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000340: return( true );
      case 40000341: return( true );
      case 40000231: return( true );
      case 40000232: return( true );
      case 40000235: return( true );
      case 40000236: return( true );
      case 40000659: return( true );
      case 40000730: return( true );
      case 40000275: return( true );
      case 40000272: return( true );
      case 40000257: return( true );
      case 40000258: return( true );
      case 40000259: return( true );
      case 40000260: return( true );
      case 40000261: return( true );
      case 40000262: return( true );
      case 40000263: return( true );
      case 40000264: return( true );
      case 40000265: return( true );
      case 40000266: return( true );
      case 40000267: return( true );
      case 40000268: return( true );
      case 40000829: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40000278: return( true );
      case 40001036: return( true );
      case 40000228: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
   }
   return false;
}

