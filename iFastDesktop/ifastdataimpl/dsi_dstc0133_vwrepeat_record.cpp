// BFDataImpl implementation file for DataSet DSTC0133.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0133_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0133_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0133_VWRepeat_Record() { return new dsi_DSTC0133_VWRepeat_Record; }

dsi_DSTC0133_VWRepeat_Record::dsi_DSTC0133_VWRepeat_Record()
: BFDataImpl( 40001693 )
, GroupCode_( ifds::GroupCode, &ifds::s_FldProp_GroupCode )
, ContractType_( ifds::ContractType, &ifds::s_FldProp_ContractType )
, ContractTypeId_( ifds::ContractTypeId, &ifds::s_FldProp_ContractTypeId )
, MinTerm_( ifds::MinTerm, &ifds::s_FldProp_MinTerm )
, MaxTerm_( ifds::MaxTerm, &ifds::s_FldProp_MaxTerm )
, AnnivDateType_( ifds::AnnivDateType, &ifds::s_FldProp_AnnivDateType )
, ContMatDateBasedOn_( ifds::ContMatDateBasedOn, &ifds::s_FldProp_ContMatDateBasedOn )
, MatDateBasedOn_( ifds::MatDateBasedOn, &ifds::s_FldProp_MatDateBasedOn )
, IsGWOContract_( ifds::IsGWOContract, &ifds::s_FldProp_IsGWOContract )
, ContractVer_( ifds::ContractVer, &ifds::s_FldProp_ContractVer )
, DefaultVer_( ifds::DefaultVer, &ifds::s_FldProp_DefaultVer )
, ClsPerTerm_( ifds::ClsPerTerm, &ifds::s_FldProp_ClsPerTerm )
, NewContrAllowed_( ifds::NewContrAllowed, &ifds::s_FldProp_NewContrAllowed )
, MaxAge_( ifds::MaxAge, &ifds::s_FldProp_MaxAge )
, TaxTypeList_( ifds::TaxTypeList, &ifds::s_FldProp_TaxTypeList )
, PensionJurisdictionList_( ifds::PensionJurisdictionList, &ifds::s_FldProp_PensionJurisdictionList )
, LinkedContract_( ifds::LinkedContract, &ifds::s_FldProp_LinkedContract )
, MinAge_( ifds::MinAge, &ifds::s_FldProp_MinAge )
, DfCMDBaseOn_( ifds::DfCMDBaseOn, &ifds::s_FldProp_DfCMDBaseOn )
, NewMoney_( ifds::NewMoney, &ifds::s_FldProp_NewMoney )
, TaxApl_( ifds::TaxApl, &ifds::s_FldProp_TaxApl )
, TopUpClass_( ifds::TopUpClass, &ifds::s_FldProp_TopUpClass )
, TopUpFund_( ifds::TopUpFund, &ifds::s_FldProp_TopUpFund )
, NMCRContract_( ifds::NMCRContract, &ifds::s_FldProp_NMCRContract )
, RGrFnd_( ifds::RGrFnd, &ifds::s_FldProp_RGrFnd )
, RGrCls_( ifds::RGrCls, &ifds::s_FldProp_RGrCls )
{
   cFields_ = 26;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0133_VWRepeat_Record::~dsi_DSTC0133_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0133_VWRepeat_Record::clone()
{
   dsi_DSTC0133_VWRepeat_Record* p = new dsi_DSTC0133_VWRepeat_Record;
   p->GroupCode_ = GroupCode_;
   p->ContractType_ = ContractType_;
   p->ContractTypeId_ = ContractTypeId_;
   p->MinTerm_ = MinTerm_;
   p->MaxTerm_ = MaxTerm_;
   p->AnnivDateType_ = AnnivDateType_;
   p->ContMatDateBasedOn_ = ContMatDateBasedOn_;
   p->MatDateBasedOn_ = MatDateBasedOn_;
   p->IsGWOContract_ = IsGWOContract_;
   p->ContractVer_ = ContractVer_;
   p->DefaultVer_ = DefaultVer_;
   p->ClsPerTerm_ = ClsPerTerm_;
   p->NewContrAllowed_ = NewContrAllowed_;
   p->MaxAge_ = MaxAge_;
   p->TaxTypeList_ = TaxTypeList_;
   p->PensionJurisdictionList_ = PensionJurisdictionList_;
   p->LinkedContract_ = LinkedContract_;
   p->MinAge_ = MinAge_;
   p->DfCMDBaseOn_ = DfCMDBaseOn_;
   p->NewMoney_ = NewMoney_;
   p->TaxApl_ = TaxApl_;
   p->TopUpClass_ = TopUpClass_;
   p->TopUpFund_ = TopUpFund_;
   p->NMCRContract_ = NMCRContract_;
   p->RGrFnd_ = RGrFnd_;
   p->RGrCls_ = RGrCls_;
   return(p);
}

BFDataField* dsi_DSTC0133_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000800: return ( &GroupCode_ ); break; // GroupCode
      case 40001385: return ( &ContractType_ ); break; // ContractType
      case 40001386: return ( &ContractTypeId_ ); break; // ContractTypeId
      case 40001686: return ( &MinTerm_ ); break; // MinTerm
      case 40001687: return ( &MaxTerm_ ); break; // MaxTerm
      case 40001688: return ( &AnnivDateType_ ); break; // AnnivDateType
      case 40005111: return ( &ContMatDateBasedOn_ ); break; // ContMatDateBasedOn
      case 40005112: return ( &MatDateBasedOn_ ); break; // MatDateBasedOn
      case 40005446: return ( &IsGWOContract_ ); break; // IsGWOContract
      case 40006627: return ( &ContractVer_ ); break; // ContractVer
      case 40006634: return ( &DefaultVer_ ); break; // DefaultVer
      case 40006704: return ( &ClsPerTerm_ ); break; // ClsPerTerm
      case 40006705: return ( &NewContrAllowed_ ); break; // NewContrAllowed
      case 40001759: return ( &MaxAge_ ); break; // MaxAge
      case 40006840: return ( &TaxTypeList_ ); break; // TaxTypeList
      case 40006841: return ( &PensionJurisdictionList_ ); break; // PensionJurisdictionList
      case 40006857: return ( &LinkedContract_ ); break; // LinkedContract
      case 40001758: return ( &MinAge_ ); break; // MinAge
      case 40006886: return ( &DfCMDBaseOn_ ); break; // DfCMDBaseOn
      case 40002657: return ( &NewMoney_ ); break; // NewMoney
      case 40006888: return ( &TaxApl_ ); break; // TaxApl
      case 40006889: return ( &TopUpClass_ ); break; // TopUpClass
      case 40006890: return ( &TopUpFund_ ); break; // TopUpFund
      case 40007134: return ( &NMCRContract_ ); break; // NMCRContract
      case 40007244: return ( &RGrFnd_ ); break; // RGrFnd
      case 40007245: return ( &RGrCls_ ); break; // RGrCls
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0133_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0133_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0133_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 26 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &GroupCode_; break;
            case 1: aFlds_[1] = &ContractType_; break;
            case 2: aFlds_[2] = &ContractTypeId_; break;
            case 3: aFlds_[3] = &MinTerm_; break;
            case 4: aFlds_[4] = &MaxTerm_; break;
            case 5: aFlds_[5] = &AnnivDateType_; break;
            case 6: aFlds_[6] = &ContMatDateBasedOn_; break;
            case 7: aFlds_[7] = &MatDateBasedOn_; break;
            case 8: aFlds_[8] = &IsGWOContract_; break;
            case 9: aFlds_[9] = &ContractVer_; break;
            case 10: aFlds_[10] = &DefaultVer_; break;
            case 11: aFlds_[11] = &ClsPerTerm_; break;
            case 12: aFlds_[12] = &NewContrAllowed_; break;
            case 13: aFlds_[13] = &MaxAge_; break;
            case 14: aFlds_[14] = &TaxTypeList_; break;
            case 15: aFlds_[15] = &PensionJurisdictionList_; break;
            case 16: aFlds_[16] = &LinkedContract_; break;
            case 17: aFlds_[17] = &MinAge_; break;
            case 18: aFlds_[18] = &DfCMDBaseOn_; break;
            case 19: aFlds_[19] = &NewMoney_; break;
            case 20: aFlds_[20] = &TaxApl_; break;
            case 21: aFlds_[21] = &TopUpClass_; break;
            case 22: aFlds_[22] = &TopUpFund_; break;
            case 23: aFlds_[23] = &NMCRContract_; break;
            case 24: aFlds_[24] = &RGrFnd_; break;
            case 25: aFlds_[25] = &RGrCls_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0133_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0133_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0133_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 150 );
}

unsigned long dsi_DSTC0133_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 923 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0133_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0133_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0133_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000800: return( true );
      case 40001385: return( true );
      case 40001386: return( true );
      case 40001686: return( true );
      case 40001687: return( true );
      case 40001688: return( true );
      case 40005111: return( true );
      case 40005112: return( true );
      case 40005446: return( true );
      case 40006627: return( true );
      case 40006634: return( true );
      case 40006704: return( true );
      case 40006705: return( true );
      case 40001759: return( true );
      case 40006840: return( true );
      case 40006841: return( true );
      case 40006857: return( true );
      case 40001758: return( true );
      case 40006886: return( true );
      case 40002657: return( true );
      case 40006888: return( true );
      case 40006889: return( true );
      case 40006890: return( true );
      case 40007134: return( true );
      case 40007244: return( true );
      case 40007245: return( true );
   }
   return false;
}

