// BFDataImpl implementation file for DataSet DSTC0022.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:58 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0022_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0022_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0022_VWRepeat_Record() { return new dsi_DSTC0022_VWRepeat_Record; }

dsi_DSTC0022_VWRepeat_Record::dsi_DSTC0022_VWRepeat_Record()
: BFDataImpl( 40000482 )
, DeductCode_( ifds::DeductCode, &ifds::s_FldProp_DeductCode )
, DeductDesc_( ifds::DeductDesc, &ifds::s_FldProp_DeductDesc )
, DeductAmt_( ifds::DeductAmt, &ifds::s_FldProp_DeductAmt )
, DeductCategory_( ifds::DeductCategory, &ifds::s_FldProp_DeductCategory )
, FeeRate_( ifds::FeeRate, &ifds::s_FldProp_FeeRate )
, DiscountRate_( ifds::DiscountRate, &ifds::s_FldProp_DiscountRate )
{
    cFields_ = 6;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0022_VWRepeat_Record::~dsi_DSTC0022_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0022_VWRepeat_Record::clone()
{
   dsi_DSTC0022_VWRepeat_Record* p = new dsi_DSTC0022_VWRepeat_Record;
   p->DeductCode_ = DeductCode_;
   p->DeductDesc_ = DeductDesc_;
   p->DeductAmt_ = DeductAmt_;
   p->DeductCategory_ = DeductCategory_;
   p->FeeRate_ = FeeRate_;
   p->DiscountRate_ = DiscountRate_;
   return(p);
}

BFDataField* dsi_DSTC0022_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000483: return ( &DeductCode_ ); break; // DeductCode
      case 40000484: return ( &DeductDesc_ ); break; // DeductDesc
      case 40000485: return ( &DeductAmt_ ); break; // DeductAmt
      case 40002057: return ( &DeductCategory_ ); break; // DeductCategory
      case 40004370: return ( &FeeRate_ ); break; // FeeRate
      case 40004607: return ( &DiscountRate_ ); break; // DiscountRate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0022_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0022_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0022_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 6 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &DeductCode_; break;
                case 1: aFlds_[1] = &DeductDesc_; break;
                case 2: aFlds_[2] = &DeductAmt_; break;
                case 3: aFlds_[3] = &DeductCategory_; break;
                case 4: aFlds_[4] = &FeeRate_; break;
                case 5: aFlds_[5] = &DiscountRate_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0022_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0022_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0022_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0022_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 251 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0022_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0022_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0022_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000483: return ( true );
        case 40000484: return ( true );
        case 40000485: return ( true );
        case 40002057: return ( true );
        case 40004370: return ( true );
        case 40004607: return ( true );
    }
    return false;
}

