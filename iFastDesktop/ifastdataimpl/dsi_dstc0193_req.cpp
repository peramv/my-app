// BFDataImpl implementation file for DataSet DSTC0193.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0193_req.h"


// This function creates an instance of dsi_DSTC0193_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0193_REQ() { return new dsi_DSTC0193_REQ; }

dsi_DSTC0193_REQ::dsi_DSTC0193_REQ()
: BFDataImpl( 40002841 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, AcctDesignation_( ifds::AcctDesignation, &ifds::s_FldProp_AcctDesignation )
, TaxType_( ifds::TaxType, &ifds::s_FldProp_TaxType )
, PensionJuris_( ifds::PensionJuris, &ifds::s_FldProp_PensionJuris )
, DofBirth_( ifds::DofBirth, &ifds::s_FldProp_DofBirth )
, ContractType_( ifds::ContractType, &ifds::s_FldProp_ContractType )
, MaturityType_( ifds::MaturityType, &ifds::s_FldProp_MaturityType )
, UserMaturityDate_( ifds::UserMaturityDate, &ifds::s_FldProp_UserMaturityDate )
, AgeBasedOn_( ifds::AgeBasedOn, &ifds::s_FldProp_AgeBasedOn )
{
   cFields_ = 17;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0193_REQ::~dsi_DSTC0193_REQ()
{
}

BFDataImpl* dsi_DSTC0193_REQ::clone()
{
   dsi_DSTC0193_REQ* p = new dsi_DSTC0193_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->EffectiveDate_ = EffectiveDate_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->AcctDesignation_ = AcctDesignation_;
   p->TaxType_ = TaxType_;
   p->PensionJuris_ = PensionJuris_;
   p->DofBirth_ = DofBirth_;
   p->ContractType_ = ContractType_;
   p->MaturityType_ = MaturityType_;
   p->UserMaturityDate_ = UserMaturityDate_;
   p->AgeBasedOn_ = AgeBasedOn_;
   return(p);
}

BFDataField* dsi_DSTC0193_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40000178: return ( &AcctDesignation_ ); break; // AcctDesignation
      case 40000134: return ( &TaxType_ ); break; // TaxType
      case 40000194: return ( &PensionJuris_ ); break; // PensionJuris
      case 40000623: return ( &DofBirth_ ); break; // DofBirth
      case 40001385: return ( &ContractType_ ); break; // ContractType
      case 40001393: return ( &MaturityType_ ); break; // MaturityType
      case 40001398: return ( &UserMaturityDate_ ); break; // UserMaturityDate
      case 40001395: return ( &AgeBasedOn_ ); break; // AgeBasedOn
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0193_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0193_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0193_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 17 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &FundCode_; break;
            case 5: aFlds_[5] = &ClassCode_; break;
            case 6: aFlds_[6] = &EffectiveDate_; break;
            case 7: aFlds_[7] = &Track_; break;
            case 8: aFlds_[8] = &Activity_; break;
            case 9: aFlds_[9] = &AcctDesignation_; break;
            case 10: aFlds_[10] = &TaxType_; break;
            case 11: aFlds_[11] = &PensionJuris_; break;
            case 12: aFlds_[12] = &DofBirth_; break;
            case 13: aFlds_[13] = &ContractType_; break;
            case 14: aFlds_[14] = &MaturityType_; break;
            case 15: aFlds_[15] = &UserMaturityDate_; break;
            case 16: aFlds_[16] = &AgeBasedOn_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0193_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0193_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0193_REQ::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0193_REQ::getDefinedByteLength( void ) const
{
   return( 1011 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0193_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0193_REQ::fieldExists( id );
}

bool dsi_DSTC0193_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000327: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40000178: return( true );
      case 40000134: return( true );
      case 40000194: return( true );
      case 40000623: return( true );
      case 40001385: return( true );
      case 40001393: return( true );
      case 40001398: return( true );
      case 40001395: return( true );
   }
   return false;
}

