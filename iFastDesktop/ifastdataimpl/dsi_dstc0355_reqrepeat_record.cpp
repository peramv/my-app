// BFDataImpl implementation file for DataSet DSTC0355.REQRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0355_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0355_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0355_REQRepeat_Record() { return new dsi_DSTC0355_REQRepeat_Record; }

dsi_DSTC0355_REQRepeat_Record::dsi_DSTC0355_REQRepeat_Record()
: BFDataImpl( 40005339 )
, DilRunMode_( ifds::DilRunMode, &ifds::s_FldProp_DilRunMode )
, Accountable_( ifds::Accountable, &ifds::s_FldProp_Accountable )
, BackDatedReason_( ifds::BackDatedReason, &ifds::s_FldProp_BackDatedReason )
, RespDate_( ifds::RespDate, &ifds::s_FldProp_RespDate )
, AllocPercent_( ifds::AllocPercent, &ifds::s_FldProp_AllocPercent )
, DilVersion_( ifds::DilVersion, &ifds::s_FldProp_DilVersion )
, SplitAccCodeRID_( ifds::SplitAccCodeRID, &ifds::s_FldProp_SplitAccCodeRID )
, SplitAccCodeID_( ifds::SplitAccCodeID, &ifds::s_FldProp_SplitAccCodeID )
, ExSysDilPymtNSM_( ifds::ExSysDilPymtNSM, &ifds::s_FldProp_ExSysDilPymtNSM )
{
   cFields_ = 9;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0355_REQRepeat_Record::~dsi_DSTC0355_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0355_REQRepeat_Record::clone()
{
   dsi_DSTC0355_REQRepeat_Record* p = new dsi_DSTC0355_REQRepeat_Record;
   p->DilRunMode_ = DilRunMode_;
   p->Accountable_ = Accountable_;
   p->BackDatedReason_ = BackDatedReason_;
   p->RespDate_ = RespDate_;
   p->AllocPercent_ = AllocPercent_;
   p->DilVersion_ = DilVersion_;
   p->SplitAccCodeRID_ = SplitAccCodeRID_;
   p->SplitAccCodeID_ = SplitAccCodeID_;
   p->ExSysDilPymtNSM_ = ExSysDilPymtNSM_;
   return(p);
}

BFDataField* dsi_DSTC0355_REQRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40005238: return ( &DilRunMode_ ); break; // DilRunMode
      case 40000476: return ( &Accountable_ ); break; // Accountable
      case 40001353: return ( &BackDatedReason_ ); break; // BackDatedReason
      case 40005082: return ( &RespDate_ ); break; // RespDate
      case 40000342: return ( &AllocPercent_ ); break; // AllocPercent
      case 40005088: return ( &DilVersion_ ); break; // DilVersion
      case 40005083: return ( &SplitAccCodeRID_ ); break; // SplitAccCodeRID
      case 40005360: return ( &SplitAccCodeID_ ); break; // SplitAccCodeID
      case 40007324: return ( &ExSysDilPymtNSM_ ); break; // ExSysDilPymtNSM
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0355_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0355_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0355_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 9 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &DilRunMode_; break;
            case 1: aFlds_[1] = &Accountable_; break;
            case 2: aFlds_[2] = &BackDatedReason_; break;
            case 3: aFlds_[3] = &RespDate_; break;
            case 4: aFlds_[4] = &AllocPercent_; break;
            case 5: aFlds_[5] = &DilVersion_; break;
            case 6: aFlds_[6] = &SplitAccCodeRID_; break;
            case 7: aFlds_[7] = &SplitAccCodeID_; break;
            case 8: aFlds_[8] = &ExSysDilPymtNSM_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0355_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0355_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0355_REQRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0355_REQRepeat_Record::getDefinedByteLength( void ) const
{
   return( 250 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0355_REQRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0355_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0355_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40005238: return( true );
      case 40000476: return( true );
      case 40001353: return( true );
      case 40005082: return( true );
      case 40000342: return( true );
      case 40005088: return( true );
      case 40005083: return( true );
      case 40005360: return( true );
      case 40007324: return( true );
   }
   return false;
}

