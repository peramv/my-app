// BFDataImpl implementation file for DataSet DSTC0135.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0135_vw.h"


// This function creates an instance of dsi_DSTC0135_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0135_VW() { return new dsi_DSTC0135_VW; }

dsi_DSTC0135_VW::dsi_DSTC0135_VW()
: BFDataImpl( 40001754 )
, TradeDate_( ifds::TradeDate, &ifds::s_FldProp_TradeDate )
, TradeDateFailed_( ifds::TradeDateFailed, &ifds::s_FldProp_TradeDateFailed )
, SettleDate_( ifds::SettleDate, &ifds::s_FldProp_SettleDate )
, SettleDateFailed_( ifds::SettleDateFailed, &ifds::s_FldProp_SettleDateFailed )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, EffectiveDateFailed_( ifds::EffectiveDateFailed, &ifds::s_FldProp_EffectiveDateFailed )
, SuggestDealDate_( ifds::SuggestDealDate, &ifds::s_FldProp_SuggestDealDate )
, ValueDate_( ifds::ValueDate, &ifds::s_FldProp_ValueDate )
, ValueDateErrCode_( ifds::ValueDateErrCode, &ifds::s_FldProp_ValueDateErrCode )
, WarnMsgCode_( ifds::WarnMsgCode, &ifds::s_FldProp_WarnMsgCode )
, SixtiethDayOfYear_( ifds::SixtiethDayOfYear, &ifds::s_FldProp_SixtiethDayOfYear )
, SuggestSettleInDate_( ifds::SuggestSettleInDate, &ifds::s_FldProp_SuggestSettleInDate )
, RejErrNum_( ifds::RejErrNum, &ifds::s_FldProp_RejErrNum )
, ValuationDt_( ifds::ValuationDt, &ifds::s_FldProp_ValuationDt )
, RestrictedSettleDate_( ifds::RestrictedSettleDate, &ifds::s_FldProp_RestrictedSettleDate )
, TradeInDateFailed_( ifds::TradeInDateFailed, &ifds::s_FldProp_TradeInDateFailed )
, TradeInDate_( ifds::TradeInDate, &ifds::s_FldProp_TradeInDate )
, ValuationInDt_( ifds::ValuationInDt, &ifds::s_FldProp_ValuationInDt )
, RestrictedSettleInDate_( ifds::RestrictedSettleInDate, &ifds::s_FldProp_RestrictedSettleInDate )
, CashDate_( ifds::CashDate, &ifds::s_FldProp_CashDate )
{
    cFields_ = 20;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0135_VW::~dsi_DSTC0135_VW()
{
}

BFDataImpl* dsi_DSTC0135_VW::clone()
{
   dsi_DSTC0135_VW* p = new dsi_DSTC0135_VW;
   p->TradeDate_ = TradeDate_;
   p->TradeDateFailed_ = TradeDateFailed_;
   p->SettleDate_ = SettleDate_;
   p->SettleDateFailed_ = SettleDateFailed_;
   p->EffectiveDate_ = EffectiveDate_;
   p->EffectiveDateFailed_ = EffectiveDateFailed_;
   p->SuggestDealDate_ = SuggestDealDate_;
   p->ValueDate_ = ValueDate_;
   p->ValueDateErrCode_ = ValueDateErrCode_;
   p->WarnMsgCode_ = WarnMsgCode_;
   p->SixtiethDayOfYear_ = SixtiethDayOfYear_;
   p->SuggestSettleInDate_ = SuggestSettleInDate_;
   p->RejErrNum_ = RejErrNum_;
   p->ValuationDt_ = ValuationDt_;
   p->RestrictedSettleDate_ = RestrictedSettleDate_;
   p->TradeInDateFailed_ = TradeInDateFailed_;
   p->TradeInDate_ = TradeInDate_;
   p->ValuationInDt_ = ValuationInDt_;
   p->RestrictedSettleInDate_ = RestrictedSettleInDate_;
    p->CashDate_ = CashDate_;
   return(p);
}

BFDataField* dsi_DSTC0135_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000097: return ( &TradeDate_ ); break; // TradeDate
      case 40001751: return ( &TradeDateFailed_ ); break; // TradeDateFailed
      case 40000348: return ( &SettleDate_ ); break; // SettleDate
      case 40001752: return ( &SettleDateFailed_ ); break; // SettleDateFailed
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40001753: return ( &EffectiveDateFailed_ ); break; // EffectiveDateFailed
      case 40001961: return ( &SuggestDealDate_ ); break; // SuggestDealDate
      case 40003139: return ( &ValueDate_ ); break; // ValueDate
      case 40003217: return ( &ValueDateErrCode_ ); break; // ValueDateErrCode
      case 40004685: return ( &WarnMsgCode_ ); break; // WarnMsgCode
      case 40005247: return ( &SixtiethDayOfYear_ ); break; // SixtiethDayOfYear
      case 40005573: return ( &SuggestSettleInDate_ ); break; // SuggestSettleInDate
      case 40005654: return ( &RejErrNum_ ); break; // RejErrNum
      case 40006656: return ( &ValuationDt_ ); break; // ValuationDt
	  case 40007713: return ( &RestrictedSettleDate_ ); break; // RestrictedSettleDate
      case 40007784: return ( &TradeInDateFailed_ ); break; // TradeInDateFailed
	  case 40007782: return ( &TradeInDate_ ); break; // TradeInDate
      case 40007783: return ( &ValuationInDt_ ); break; // ValuationInDt
      case 40007797: return ( &RestrictedSettleInDate_ ); break; // RestrictedSettleInDate
      case 40000450: return ( &CashDate_ ); break; // CashDate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0135_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0135_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0135_VW::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 20 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TradeDate_; break;
            case 1: aFlds_[1] = &TradeDateFailed_; break;
            case 2: aFlds_[2] = &SettleDate_; break;
            case 3: aFlds_[3] = &SettleDateFailed_; break;
            case 4: aFlds_[4] = &EffectiveDate_; break;
            case 5: aFlds_[5] = &EffectiveDateFailed_; break;
            case 6: aFlds_[6] = &SuggestDealDate_; break;
            case 7: aFlds_[7] = &ValueDate_; break;
            case 8: aFlds_[8] = &ValueDateErrCode_; break;
            case 9: aFlds_[9] = &WarnMsgCode_; break;
            case 10: aFlds_[10] = &SixtiethDayOfYear_; break;
            case 11: aFlds_[11] = &SuggestSettleInDate_; break;
            case 12: aFlds_[12] = &RejErrNum_; break;
            case 13: aFlds_[13] = &ValuationDt_; break;
			case 14: aFlds_[14] = &RestrictedSettleDate_; break;
         	case 15: aFlds_[15] = &TradeInDateFailed_; break;
			case 16: aFlds_[16] = &TradeInDate_; break;
            case 17: aFlds_[17] = &ValuationInDt_; break;
            case 18: aFlds_[18] = &RestrictedSettleInDate_; break;
            case 19: aFlds_[19] = &CashDate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0135_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0135_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0135_VW::getLargestDefinedField( void ) const
{
   return( 10 );
}

unsigned long dsi_DSTC0135_VW::getDefinedByteLength( void ) const
{
    return( 162 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0135_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0135_VW::fieldExists( id );
}

bool dsi_DSTC0135_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000097: return( true );
      case 40001751: return( true );
      case 40000348: return( true );
      case 40001752: return( true );
      case 40000327: return( true );
      case 40001753: return( true );
      case 40001961: return( true );
      case 40003139: return( true );
      case 40003217: return( true );
      case 40004685: return( true );
      case 40005247: return( true );
      case 40005573: return( true );
      case 40005654: return( true );
      case 40006656: return( true );
	  case 40007713: return ( true );
      case 40007784: return ( true );
	  case 40007782: return ( true );
      case 40007783: return ( true );
      case 40007797: return ( true );
      case 40000450: return ( true );
   }
   return false;
}

