// BFDataImpl implementation file for DataSet DSTC0158.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0158_req.h"


// This function creates an instance of dsi_DSTC0158_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0158_REQ() { return new dsi_DSTC0158_REQ; }

dsi_DSTC0158_REQ::dsi_DSTC0158_REQ()
: BFDataImpl( 40002221 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, Account_( ifds::Account, &ifds::s_FldProp_Account )
, AccountTo_( ifds::AccountTo, &ifds::s_FldProp_AccountTo )
, Fund_( ifds::Fund, &ifds::s_FldProp_Fund )
, FundTo_( ifds::FundTo, &ifds::s_FldProp_FundTo )
, Class_( ifds::Class, &ifds::s_FldProp_Class )
, ClassTo_( ifds::ClassTo, &ifds::s_FldProp_ClassTo )
, PUD_( ifds::PUD, &ifds::s_FldProp_PUD )
, FlatPrcnt_( ifds::FlatPrcnt, &ifds::s_FldProp_FlatPrcnt )
, InPayType_( ifds::InPayType, &ifds::s_FldProp_InPayType )
, IAmount_( ifds::IAmount, &ifds::s_FldProp_IAmount )
, InTransType_( ifds::InTransType, &ifds::s_FldProp_InTransType )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, InGrossNet_( ifds::InGrossNet, &ifds::s_FldProp_InGrossNet )
, InBrokerCode_( ifds::InBrokerCode, &ifds::s_FldProp_InBrokerCode )
, InBranchCode_( ifds::InBranchCode, &ifds::s_FldProp_InBranchCode )
, InSlsRepCode_( ifds::InSlsRepCode, &ifds::s_FldProp_InSlsRepCode )
, SettleCurrency_( ifds::SettleCurrency, &ifds::s_FldProp_SettleCurrency )
, RecordType_( ifds::RecordType, &ifds::s_FldProp_RecordType )
, ExchRate_( ifds::ExchRate, &ifds::s_FldProp_ExchRate )
, InvestTerm_( ifds::InvestTerm, &ifds::s_FldProp_InvestTerm )
, TradeInDate_( ifds::TradeInDate, &ifds::s_FldProp_TradeInDate )
{
   cFields_ = 27;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0158_REQ::~dsi_DSTC0158_REQ()
{
}

BFDataImpl* dsi_DSTC0158_REQ::clone()
{
   dsi_DSTC0158_REQ* p = new dsi_DSTC0158_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->Account_ = Account_;
   p->AccountTo_ = AccountTo_;
   p->Fund_ = Fund_;
   p->FundTo_ = FundTo_;
   p->Class_ = Class_;
   p->ClassTo_ = ClassTo_;
   p->PUD_ = PUD_;
   p->FlatPrcnt_ = FlatPrcnt_;
   p->InPayType_ = InPayType_;
   p->IAmount_ = IAmount_;
   p->InTransType_ = InTransType_;
   p->EffectiveDate_ = EffectiveDate_;
   p->InGrossNet_ = InGrossNet_;
   p->InBrokerCode_ = InBrokerCode_;
   p->InBranchCode_ = InBranchCode_;
   p->InSlsRepCode_ = InSlsRepCode_;
   p->SettleCurrency_ = SettleCurrency_;
   p->RecordType_ = RecordType_;
   p->ExchRate_ = ExchRate_;
   p->InvestTerm_ = InvestTerm_;
   p->TradeInDate_ = TradeInDate_;
   return(p);
}

BFDataField* dsi_DSTC0158_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40002226: return ( &Account_ ); break; // Account
      case 40000646: return ( &AccountTo_ ); break; // AccountTo
      case 40002227: return ( &Fund_ ); break; // Fund
      case 40000648: return ( &FundTo_ ); break; // FundTo
      case 40002228: return ( &Class_ ); break; // Class
      case 40000649: return ( &ClassTo_ ); break; // ClassTo
      case 40002229: return ( &PUD_ ); break; // PUD
      case 40002230: return ( &FlatPrcnt_ ); break; // FlatPrcnt
      case 40002231: return ( &InPayType_ ); break; // InPayType
      case 40002233: return ( &IAmount_ ); break; // IAmount
      case 40002234: return ( &InTransType_ ); break; // InTransType
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40002235: return ( &InGrossNet_ ); break; // InGrossNet
      case 40002236: return ( &InBrokerCode_ ); break; // InBrokerCode
      case 40002237: return ( &InBranchCode_ ); break; // InBranchCode
      case 40002238: return ( &InSlsRepCode_ ); break; // InSlsRepCode
      case 40000455: return ( &SettleCurrency_ ); break; // SettleCurrency
      case 40000951: return ( &RecordType_ ); break; // RecordType
      case 40000456: return ( &ExchRate_ ); break; // ExchRate
      case 40006503: return ( &InvestTerm_ ); break; // InvestTerm
      case 40007782: return ( &TradeInDate_ ); break; // TradeInDate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0158_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0158_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0158_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 27 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &Account_; break;
            case 7: aFlds_[7] = &AccountTo_; break;
            case 8: aFlds_[8] = &Fund_; break;
            case 9: aFlds_[9] = &FundTo_; break;
            case 10: aFlds_[10] = &Class_; break;
            case 11: aFlds_[11] = &ClassTo_; break;
            case 12: aFlds_[12] = &PUD_; break;
            case 13: aFlds_[13] = &FlatPrcnt_; break;
            case 14: aFlds_[14] = &InPayType_; break;
            case 15: aFlds_[15] = &IAmount_; break;
            case 16: aFlds_[16] = &InTransType_; break;
            case 17: aFlds_[17] = &EffectiveDate_; break;
            case 18: aFlds_[18] = &InGrossNet_; break;
            case 19: aFlds_[19] = &InBrokerCode_; break;
            case 20: aFlds_[20] = &InBranchCode_; break;
            case 21: aFlds_[21] = &InSlsRepCode_; break;
            case 22: aFlds_[22] = &SettleCurrency_; break;
            case 23: aFlds_[23] = &RecordType_; break;
            case 24: aFlds_[24] = &ExchRate_; break;
            case 25: aFlds_[25] = &InvestTerm_; break;
            case 26: aFlds_[26] = &TradeInDate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0158_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0158_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0158_REQ::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0158_REQ::getDefinedByteLength( void ) const
{
   return( 1230 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0158_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0158_REQ::fieldExists( id );
}

bool dsi_DSTC0158_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40002226: return( true );
      case 40000646: return( true );
      case 40002227: return( true );
      case 40000648: return( true );
      case 40002228: return( true );
      case 40000649: return( true );
      case 40002229: return( true );
      case 40002230: return( true );
      case 40002231: return( true );
      case 40002233: return( true );
      case 40002234: return( true );
      case 40000327: return( true );
      case 40002235: return( true );
      case 40002236: return( true );
      case 40002237: return( true );
      case 40002238: return( true );
      case 40000455: return( true );
      case 40000951: return( true );
      case 40000456: return( true );
      case 40006503: return( true );
	  case 40007782: return ( true );
   }
   return false;
}

