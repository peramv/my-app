// BFDataImpl implementation file for DataSet DSTC0451.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Tuesday, June 20, 2017 15:19:15


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0451_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0451_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0451_VWRepeat_Record() { return new dsi_DSTC0451_VWRepeat_Record; }

dsi_DSTC0451_VWRepeat_Record::dsi_DSTC0451_VWRepeat_Record()
: BFDataImpl( 40007159 )
, AcctRegDetailsUUID_( ifds::AcctRegDetailsUUID, &ifds::s_FldProp_AcctRegDetailsUUID )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, FICategory_( ifds::FICategory, &ifds::s_FldProp_FICategory )
, FinInstRegDetlUUID_( ifds::FinInstRegDetlUUID, &ifds::s_FldProp_FinInstRegDetlUUID )
, ComplyAction_( ifds::ComplyAction, &ifds::s_FldProp_ComplyAction )
, Consented_( ifds::Consented, &ifds::s_FldProp_Consented )
, VersionAcctRegDetl_( ifds::VersionAcctRegDetl, &ifds::s_FldProp_VersionAcctRegDetl )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, Regulatory_( ifds::Regulatory, &ifds::s_FldProp_Regulatory )
, AcctRegDetailRid_( ifds::AcctRegDetailRid, &ifds::s_FldProp_AcctRegDetailRid )
, CountryCode_( ifds::CountryCode, &ifds::s_FldProp_CountryCode )
, ComplyRuleDesc_( ifds::ComplyRuleDesc, &ifds::s_FldProp_ComplyRuleDesc )
{
    cFields_ = 16;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0451_VWRepeat_Record::~dsi_DSTC0451_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0451_VWRepeat_Record::clone()
{
    dsi_DSTC0451_VWRepeat_Record* p = new dsi_DSTC0451_VWRepeat_Record;
    p->AcctRegDetailsUUID_ = AcctRegDetailsUUID_;
    p->EffectiveDate_ = EffectiveDate_;
    p->StopDate_ = StopDate_;
    p->FICategory_ = FICategory_;
    p->FinInstRegDetlUUID_ = FinInstRegDetlUUID_;
    p->ComplyAction_ = ComplyAction_;
    p->Consented_ = Consented_;
    p->VersionAcctRegDetl_ = VersionAcctRegDetl_;
    p->ProcessDate_ = ProcessDate_;
    p->Username_ = Username_;
    p->ModDate_ = ModDate_;
    p->ModUser_ = ModUser_;
    p->Regulatory_ = Regulatory_;
    p->AcctRegDetailRid_ = AcctRegDetailRid_;
    p->CountryCode_ = CountryCode_;
    p->ComplyRuleDesc_ = ComplyRuleDesc_;
    return(p);
}

BFDataField* dsi_DSTC0451_VWRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40007148: return ( &AcctRegDetailsUUID_ ); break; // AcctRegDetailsUUID
        case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
        case 40000279: return ( &StopDate_ ); break; // StopDate
        case 40007145: return ( &FICategory_ ); break; // FICategory
        case 40007142: return ( &FinInstRegDetlUUID_ ); break; // FinInstRegDetlUUID
        case 40007149: return ( &ComplyAction_ ); break; // ComplyAction
        case 40007150: return ( &Consented_ ); break; // Consented
        case 40007151: return ( &VersionAcctRegDetl_ ); break; // VersionAcctRegDetl
        case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
        case 40000117: return ( &Username_ ); break; // Username
        case 40000217: return ( &ModDate_ ); break; // ModDate
        case 40000218: return ( &ModUser_ ); break; // ModUser
        case 40007165: return ( &Regulatory_ ); break; // Regulatory
        case 40007177: return ( &AcctRegDetailRid_ ); break; // AcctRegDetailRid
        case 40000344: return ( &CountryCode_ ); break; // CountryCode
        case 40007772: return ( &ComplyRuleDesc_ ); break; // ComplyRuleDesc
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0451_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0451_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0451_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 16 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &AcctRegDetailsUUID_; break;
                case 1: aFlds_[1] = &EffectiveDate_; break;
                case 2: aFlds_[2] = &StopDate_; break;
                case 3: aFlds_[3] = &FICategory_; break;
                case 4: aFlds_[4] = &FinInstRegDetlUUID_; break;
                case 5: aFlds_[5] = &ComplyAction_; break;
                case 6: aFlds_[6] = &Consented_; break;
                case 7: aFlds_[7] = &VersionAcctRegDetl_; break;
                case 8: aFlds_[8] = &ProcessDate_; break;
                case 9: aFlds_[9] = &Username_; break;
                case 10: aFlds_[10] = &ModDate_; break;
                case 11: aFlds_[11] = &ModUser_; break;
                case 12: aFlds_[12] = &Regulatory_; break;
                case 13: aFlds_[13] = &AcctRegDetailRid_; break;
                case 14: aFlds_[14] = &CountryCode_; break;
                case 15: aFlds_[15] = &ComplyRuleDesc_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0451_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0451_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0451_VWRepeat_Record::getLargestDefinedField( void ) const
{
    return( 60 );
}

unsigned long dsi_DSTC0451_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 430 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0451_VWRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0451_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0451_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40007148: return ( true );
        case 40000327: return ( true );
        case 40000279: return ( true );
        case 40007145: return ( true );
        case 40007142: return ( true );
        case 40007149: return ( true );
        case 40007150: return ( true );
        case 40007151: return ( true );
        case 40000216: return ( true );
        case 40000117: return ( true );
        case 40000217: return ( true );
        case 40000218: return ( true );
        case 40007165: return ( true );
        case 40007177: return ( true );
        case 40000344: return ( true );
        case 40007772: return ( true );
    }
    return false;
}

