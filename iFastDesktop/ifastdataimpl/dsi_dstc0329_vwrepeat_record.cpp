// BFDataImpl implementation file for DataSet DSTC0329.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0329_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0329_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0329_VWRepeat_Record() { return new dsi_DSTC0329_VWRepeat_Record; }

dsi_DSTC0329_VWRepeat_Record::dsi_DSTC0329_VWRepeat_Record()
: BFDataImpl( 40004996 )
, InvDetlId_( ifds::InvDetlId, &ifds::s_FldProp_InvDetlId )
, DeductCode_( ifds::DeductCode, &ifds::s_FldProp_DeductCode )
, BasedOn_( ifds::BasedOn, &ifds::s_FldProp_BasedOn )
, BasedOnValue_( ifds::BasedOnValue, &ifds::s_FldProp_BasedOnValue )
, LSIFCode_( ifds::LSIFCode, &ifds::s_FldProp_LSIFCode )
, ChargedAmount_( ifds::ChargedAmount, &ifds::s_FldProp_ChargedAmount )
, CalculatedAmount_( ifds::CalculatedAmount, &ifds::s_FldProp_CalculatedAmount )
, DeductUnits_( ifds::DeductUnits, &ifds::s_FldProp_DeductUnits )
, DeductDesc_( ifds::DeductDesc, &ifds::s_FldProp_DeductDesc )
, InvSummId_( ifds::InvSummId, &ifds::s_FldProp_InvSummId )
{
   cFields_ = 10;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0329_VWRepeat_Record::~dsi_DSTC0329_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0329_VWRepeat_Record::clone()
{
   dsi_DSTC0329_VWRepeat_Record* p = new dsi_DSTC0329_VWRepeat_Record;
   p->InvDetlId_ = InvDetlId_;
   p->DeductCode_ = DeductCode_;
   p->BasedOn_ = BasedOn_;
   p->BasedOnValue_ = BasedOnValue_;
   p->LSIFCode_ = LSIFCode_;
   p->ChargedAmount_ = ChargedAmount_;
   p->CalculatedAmount_ = CalculatedAmount_;
   p->DeductUnits_ = DeductUnits_;
   p->DeductDesc_ = DeductDesc_;
   p->InvSummId_ = InvSummId_;
   return(p);
}

BFDataField* dsi_DSTC0329_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40004998: return ( &InvDetlId_ ); break; // InvDetlId
      case 40000483: return ( &DeductCode_ ); break; // DeductCode
      case 40003580: return ( &BasedOn_ ); break; // BasedOn
      case 40004999: return ( &BasedOnValue_ ); break; // BasedOnValue
      case 40004484: return ( &LSIFCode_ ); break; // LSIFCode
      case 40005000: return ( &ChargedAmount_ ); break; // ChargedAmount
      case 40005001: return ( &CalculatedAmount_ ); break; // CalculatedAmount
      case 40005002: return ( &DeductUnits_ ); break; // DeductUnits
      case 40000484: return ( &DeductDesc_ ); break; // DeductDesc
      case 40004394: return ( &InvSummId_ ); break; // InvSummId
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0329_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0329_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0329_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 10 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &InvDetlId_; break;
            case 1: aFlds_[1] = &DeductCode_; break;
            case 2: aFlds_[2] = &BasedOn_; break;
            case 3: aFlds_[3] = &BasedOnValue_; break;
            case 4: aFlds_[4] = &LSIFCode_; break;
            case 5: aFlds_[5] = &ChargedAmount_; break;
            case 6: aFlds_[6] = &CalculatedAmount_; break;
            case 7: aFlds_[7] = &DeductUnits_; break;
            case 8: aFlds_[8] = &DeductDesc_; break;
            case 9: aFlds_[9] = &InvSummId_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0329_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0329_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0329_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0329_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 343 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0329_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0329_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0329_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40004998: return( true );
      case 40000483: return( true );
      case 40003580: return( true );
      case 40004999: return( true );
      case 40004484: return( true );
      case 40005000: return( true );
      case 40005001: return( true );
      case 40005002: return( true );
      case 40000484: return( true );
      case 40004394: return( true );
   }
   return false;
}

