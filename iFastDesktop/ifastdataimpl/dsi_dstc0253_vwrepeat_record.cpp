// BFDataImpl implementation file for DataSet DSTC0253.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0253_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0253_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0253_VWRepeat_Record() { return new dsi_DSTC0253_VWRepeat_Record; }

dsi_DSTC0253_VWRepeat_Record::dsi_DSTC0253_VWRepeat_Record()
: BFDataImpl( 40003848 )
, FeeCode_( ifds::FeeCode, &ifds::s_FldProp_FeeCode )
, ShGroupApplicable_( ifds::ShGroupApplicable, &ifds::s_FldProp_ShGroupApplicable )
, BrokerApplicable_( ifds::BrokerApplicable, &ifds::s_FldProp_BrokerApplicable )
, BranchApplicable_( ifds::BranchApplicable, &ifds::s_FldProp_BranchApplicable )
, SalesrepApplicable_( ifds::SalesrepApplicable, &ifds::s_FldProp_SalesrepApplicable )
, FundGroupType_( ifds::FundGroupType, &ifds::s_FldProp_FundGroupType )
, FundClassApplicable_( ifds::FundClassApplicable, &ifds::s_FldProp_FundClassApplicable )
, FromFundClassApplicable_( ifds::FromFundClassApplicable, &ifds::s_FldProp_FromFundClassApplicable )
, FeeTypeList_( ifds::FeeTypeList, &ifds::s_FldProp_FeeTypeList )
, BaseOnList_( ifds::BaseOnList, &ifds::s_FldProp_BaseOnList )
, HowPaidList_( ifds::HowPaidList, &ifds::s_FldProp_HowPaidList )
, MinMaxFreqList_( ifds::MinMaxFreqList, &ifds::s_FldProp_MinMaxFreqList )
, OverrideList_( ifds::OverrideList, &ifds::s_FldProp_OverrideList )
, OnPWApplicable_( ifds::OnPWApplicable, &ifds::s_FldProp_OnPWApplicable )
, OnFWApplicable_( ifds::OnFWApplicable, &ifds::s_FldProp_OnFWApplicable )
, FeeSetupLevel_( ifds::FeeSetupLevel, &ifds::s_FldProp_FeeSetupLevel )
, FamilyCodeApplicable_( ifds::FamilyCodeApplicable, &ifds::s_FldProp_FamilyCodeApplicable )
, FeeLevel_( ifds::FeeLevel, &ifds::s_FldProp_FeeLevel )
, TradeFeeTypeList_( ifds::TradeFeeTypeList, &ifds::s_FldProp_TradeFeeTypeList )
, ChargeOptionList_( ifds::ChargeOptionList, &ifds::s_FldProp_ChargeOptionList )
, Status_( ifds::Status, &ifds::s_FldProp_Status )
, FeeExists_( ifds::FeeExists, &ifds::s_FldProp_FeeExists )
, FeeExistsByBroker_( ifds::FeeExistsByBroker, &ifds::s_FldProp_FeeExistsByBroker )
, FeeExistsByBranch_( ifds::FeeExistsByBranch, &ifds::s_FldProp_FeeExistsByBranch )
, FeeExistsBySlsrep_( ifds::FeeExistsBySlsrep, &ifds::s_FldProp_FeeExistsBySlsrep )
, FeeExistsByFundComGrp_( ifds::FeeExistsByFundComGrp, &ifds::s_FldProp_FeeExistsByFundComGrp )
, AppliedMethodList_( ifds::AppliedMethodList, &ifds::s_FldProp_AppliedMethodList )
, FundList_( ifds::FundList, &ifds::s_FldProp_FundList )
, ThresholdAmtApply_( ifds::ThresholdAmtApply, &ifds::s_FldProp_ThresholdAmtApply )
, UpdateRule_( ifds::UpdateRule, &ifds::s_FldProp_UpdateRule )
, MaxFee_( ifds::MaxFee, &ifds::s_FldProp_MaxFee )
{
   cFields_ = 31;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0253_VWRepeat_Record::~dsi_DSTC0253_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0253_VWRepeat_Record::clone()
{
   dsi_DSTC0253_VWRepeat_Record* p = new dsi_DSTC0253_VWRepeat_Record;
   p->FeeCode_ = FeeCode_;
   p->ShGroupApplicable_ = ShGroupApplicable_;
   p->BrokerApplicable_ = BrokerApplicable_;
   p->BranchApplicable_ = BranchApplicable_;
   p->SalesrepApplicable_ = SalesrepApplicable_;
   p->FundGroupType_ = FundGroupType_;
   p->FundClassApplicable_ = FundClassApplicable_;
   p->FromFundClassApplicable_ = FromFundClassApplicable_;
   p->FeeTypeList_ = FeeTypeList_;
   p->BaseOnList_ = BaseOnList_;
   p->HowPaidList_ = HowPaidList_;
   p->MinMaxFreqList_ = MinMaxFreqList_;
   p->OverrideList_ = OverrideList_;
   p->OnPWApplicable_ = OnPWApplicable_;
   p->OnFWApplicable_ = OnFWApplicable_;
   p->FeeSetupLevel_ = FeeSetupLevel_;
   p->FamilyCodeApplicable_ = FamilyCodeApplicable_;
   p->FeeLevel_ = FeeLevel_;
   p->TradeFeeTypeList_ = TradeFeeTypeList_;
   p->ChargeOptionList_ = ChargeOptionList_;
   p->Status_ = Status_;
   p->FeeExists_ = FeeExists_;
   p->FeeExistsByBroker_ = FeeExistsByBroker_;
   p->FeeExistsByBranch_ = FeeExistsByBranch_;
   p->FeeExistsBySlsrep_ = FeeExistsBySlsrep_;
   p->FeeExistsByFundComGrp_ = FeeExistsByFundComGrp_;
   p->AppliedMethodList_ = AppliedMethodList_;
   p->FundList_ = FundList_;
   p->ThresholdAmtApply_ = ThresholdAmtApply_;
   p->UpdateRule_ = UpdateRule_;
   p->MaxFee_ = MaxFee_;
   return(p);
}

BFDataField* dsi_DSTC0253_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40002917: return ( &FeeCode_ ); break; // FeeCode
      case 40003830: return ( &ShGroupApplicable_ ); break; // ShGroupApplicable
      case 40003831: return ( &BrokerApplicable_ ); break; // BrokerApplicable
      case 40003832: return ( &BranchApplicable_ ); break; // BranchApplicable
      case 40003833: return ( &SalesrepApplicable_ ); break; // SalesrepApplicable
      case 40001477: return ( &FundGroupType_ ); break; // FundGroupType
      case 40003835: return ( &FundClassApplicable_ ); break; // FundClassApplicable
      case 40003836: return ( &FromFundClassApplicable_ ); break; // FromFundClassApplicable
      case 40003837: return ( &FeeTypeList_ ); break; // FeeTypeList
      case 40003838: return ( &BaseOnList_ ); break; // BaseOnList
      case 40003839: return ( &HowPaidList_ ); break; // HowPaidList
      case 40003840: return ( &MinMaxFreqList_ ); break; // MinMaxFreqList
      case 40003841: return ( &OverrideList_ ); break; // OverrideList
      case 40003842: return ( &OnPWApplicable_ ); break; // OnPWApplicable
      case 40003843: return ( &OnFWApplicable_ ); break; // OnFWApplicable
      case 40003844: return ( &FeeSetupLevel_ ); break; // FeeSetupLevel
      case 40003851: return ( &FamilyCodeApplicable_ ); break; // FamilyCodeApplicable
      case 40003938: return ( &FeeLevel_ ); break; // FeeLevel
      case 40004583: return ( &TradeFeeTypeList_ ); break; // TradeFeeTypeList
      case 40004661: return ( &ChargeOptionList_ ); break; // ChargeOptionList
      case 40001399: return ( &Status_ ); break; // Status
      case 40003818: return ( &FeeExists_ ); break; // FeeExists
      case 40004688: return ( &FeeExistsByBroker_ ); break; // FeeExistsByBroker
      case 40004689: return ( &FeeExistsByBranch_ ); break; // FeeExistsByBranch
      case 40004690: return ( &FeeExistsBySlsrep_ ); break; // FeeExistsBySlsrep
      case 40004691: return ( &FeeExistsByFundComGrp_ ); break; // FeeExistsByFundComGrp
      case 40005334: return ( &AppliedMethodList_ ); break; // AppliedMethodList
      case 40002134: return ( &FundList_ ); break; // FundList
      case 40006021: return ( &ThresholdAmtApply_ ); break; // ThresholdAmtApply
      case 40007105: return ( &UpdateRule_ ); break; // UpdateRule
      case 40001674: return ( &MaxFee_ ); break; // MaxFee
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0253_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0253_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0253_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 31 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FeeCode_; break;
            case 1: aFlds_[1] = &ShGroupApplicable_; break;
            case 2: aFlds_[2] = &BrokerApplicable_; break;
            case 3: aFlds_[3] = &BranchApplicable_; break;
            case 4: aFlds_[4] = &SalesrepApplicable_; break;
            case 5: aFlds_[5] = &FundGroupType_; break;
            case 6: aFlds_[6] = &FundClassApplicable_; break;
            case 7: aFlds_[7] = &FromFundClassApplicable_; break;
            case 8: aFlds_[8] = &FeeTypeList_; break;
            case 9: aFlds_[9] = &BaseOnList_; break;
            case 10: aFlds_[10] = &HowPaidList_; break;
            case 11: aFlds_[11] = &MinMaxFreqList_; break;
            case 12: aFlds_[12] = &OverrideList_; break;
            case 13: aFlds_[13] = &OnPWApplicable_; break;
            case 14: aFlds_[14] = &OnFWApplicable_; break;
            case 15: aFlds_[15] = &FeeSetupLevel_; break;
            case 16: aFlds_[16] = &FamilyCodeApplicable_; break;
            case 17: aFlds_[17] = &FeeLevel_; break;
            case 18: aFlds_[18] = &TradeFeeTypeList_; break;
            case 19: aFlds_[19] = &ChargeOptionList_; break;
            case 20: aFlds_[20] = &Status_; break;
            case 21: aFlds_[21] = &FeeExists_; break;
            case 22: aFlds_[22] = &FeeExistsByBroker_; break;
            case 23: aFlds_[23] = &FeeExistsByBranch_; break;
            case 24: aFlds_[24] = &FeeExistsBySlsrep_; break;
            case 25: aFlds_[25] = &FeeExistsByFundComGrp_; break;
            case 26: aFlds_[26] = &AppliedMethodList_; break;
            case 27: aFlds_[27] = &FundList_; break;
            case 28: aFlds_[28] = &ThresholdAmtApply_; break;
            case 29: aFlds_[29] = &UpdateRule_; break;
            case 30: aFlds_[30] = &MaxFee_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0253_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0253_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0253_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 1000 );
}

unsigned long dsi_DSTC0253_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 2364 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0253_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0253_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0253_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40002917: return( true );
      case 40003830: return( true );
      case 40003831: return( true );
      case 40003832: return( true );
      case 40003833: return( true );
      case 40001477: return( true );
      case 40003835: return( true );
      case 40003836: return( true );
      case 40003837: return( true );
      case 40003838: return( true );
      case 40003839: return( true );
      case 40003840: return( true );
      case 40003841: return( true );
      case 40003842: return( true );
      case 40003843: return( true );
      case 40003844: return( true );
      case 40003851: return( true );
      case 40003938: return( true );
      case 40004583: return( true );
      case 40004661: return( true );
      case 40001399: return( true );
      case 40003818: return( true );
      case 40004688: return( true );
      case 40004689: return( true );
      case 40004690: return( true );
      case 40004691: return( true );
      case 40005334: return( true );
      case 40002134: return( true );
      case 40006021: return( true );
      case 40007105: return( true );
      case 40001674: return( true );
   }
   return false;
}

