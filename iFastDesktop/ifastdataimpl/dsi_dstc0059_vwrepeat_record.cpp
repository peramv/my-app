// BFDataImpl implementation file for DataSet DSTC0059.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0059_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0059_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0059_VWRepeat_Record() { return new dsi_DSTC0059_VWRepeat_Record; }

dsi_DSTC0059_VWRepeat_Record::dsi_DSTC0059_VWRepeat_Record()
: BFDataImpl( 40000717 )
, AutoTrfId_( ifds::AutoTrfId, &ifds::s_FldProp_AutoTrfId )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, FundToCode_( ifds::FundToCode, &ifds::s_FldProp_FundToCode )
, ClassToCode_( ifds::ClassToCode, &ifds::s_FldProp_ClassToCode )
, AccountTo_( ifds::AccountTo, &ifds::s_FldProp_AccountTo )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, AmountType_( ifds::AmountType, &ifds::s_FldProp_AmountType )
, Fee_( ifds::Fee, &ifds::s_FldProp_Fee )
, FeeType_( ifds::FeeType, &ifds::s_FldProp_FeeType )
, BELFee_( ifds::BELFee, &ifds::s_FldProp_BELFee )
, Frequency_( ifds::Frequency, &ifds::s_FldProp_Frequency )
, DayOfWeek_( ifds::DayOfWeek, &ifds::s_FldProp_DayOfWeek )
, EndOfMonth_( ifds::EndOfMonth, &ifds::s_FldProp_EndOfMonth )
, January_( ifds::January, &ifds::s_FldProp_January )
, February_( ifds::February, &ifds::s_FldProp_February )
, March_( ifds::March, &ifds::s_FldProp_March )
, April_( ifds::April, &ifds::s_FldProp_April )
, May_( ifds::May, &ifds::s_FldProp_May )
, June_( ifds::June, &ifds::s_FldProp_June )
, July_( ifds::July, &ifds::s_FldProp_July )
, August_( ifds::August, &ifds::s_FldProp_August )
, September_( ifds::September, &ifds::s_FldProp_September )
, October_( ifds::October, &ifds::s_FldProp_October )
, November_( ifds::November, &ifds::s_FldProp_November )
, December_( ifds::December, &ifds::s_FldProp_December )
, LastProcDate_( ifds::LastProcDate, &ifds::s_FldProp_LastProcDate )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, BatchUser_( ifds::BatchUser, &ifds::s_FldProp_BatchUser )
, Batch_( ifds::Batch, &ifds::s_FldProp_Batch )
, BatchTrace_( ifds::BatchTrace, &ifds::s_FldProp_BatchTrace )
, BatchDate_( ifds::BatchDate, &ifds::s_FldProp_BatchDate )
, TransferType_( ifds::TransferType, &ifds::s_FldProp_TransferType )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, AmountTypeDesc_( ifds::AmountTypeDesc, &ifds::s_FldProp_AmountTypeDesc )
, FeeTypeDesc_( ifds::FeeTypeDesc, &ifds::s_FldProp_FeeTypeDesc )
, FrequencyDesc_( ifds::FrequencyDesc, &ifds::s_FldProp_FrequencyDesc )
, TransferTypeDesc_( ifds::TransferTypeDesc, &ifds::s_FldProp_TransferTypeDesc )
, RecurDetlVer_( ifds::RecurDetlVer, &ifds::s_FldProp_RecurDetlVer )
{
   cFields_ = 43;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0059_VWRepeat_Record::~dsi_DSTC0059_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0059_VWRepeat_Record::clone()
{
   dsi_DSTC0059_VWRepeat_Record* p = new dsi_DSTC0059_VWRepeat_Record;
   p->AutoTrfId_ = AutoTrfId_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->FundToCode_ = FundToCode_;
   p->ClassToCode_ = ClassToCode_;
   p->AccountTo_ = AccountTo_;
   p->Amount_ = Amount_;
   p->AmountType_ = AmountType_;
   p->Fee_ = Fee_;
   p->FeeType_ = FeeType_;
   p->BELFee_ = BELFee_;
   p->Frequency_ = Frequency_;
   p->DayOfWeek_ = DayOfWeek_;
   p->EndOfMonth_ = EndOfMonth_;
   p->January_ = January_;
   p->February_ = February_;
   p->March_ = March_;
   p->April_ = April_;
   p->May_ = May_;
   p->June_ = June_;
   p->July_ = July_;
   p->August_ = August_;
   p->September_ = September_;
   p->October_ = October_;
   p->November_ = November_;
   p->December_ = December_;
   p->LastProcDate_ = LastProcDate_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->BatchUser_ = BatchUser_;
   p->Batch_ = Batch_;
   p->BatchTrace_ = BatchTrace_;
   p->BatchDate_ = BatchDate_;
   p->TransferType_ = TransferType_;
   p->ProcessDate_ = ProcessDate_;
   p->ModDate_ = ModDate_;
   p->Username_ = Username_;
   p->ModUser_ = ModUser_;
   p->AmountTypeDesc_ = AmountTypeDesc_;
   p->FeeTypeDesc_ = FeeTypeDesc_;
   p->FrequencyDesc_ = FrequencyDesc_;
   p->TransferTypeDesc_ = TransferTypeDesc_;
   p->RecurDetlVer_ = RecurDetlVer_;
   return(p);
}

BFDataField* dsi_DSTC0059_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000718: return ( &AutoTrfId_ ); break; // AutoTrfId
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000340: return ( &FundToCode_ ); break; // FundToCode
      case 40000341: return ( &ClassToCode_ ); break; // ClassToCode
      case 40000646: return ( &AccountTo_ ); break; // AccountTo
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40000232: return ( &AmountType_ ); break; // AmountType
      case 40000235: return ( &Fee_ ); break; // Fee
      case 40000728: return ( &FeeType_ ); break; // FeeType
      case 40000659: return ( &BELFee_ ); break; // BELFee
      case 40000730: return ( &Frequency_ ); break; // Frequency
      case 40000275: return ( &DayOfWeek_ ); break; // DayOfWeek
      case 40000272: return ( &EndOfMonth_ ); break; // EndOfMonth
      case 40000257: return ( &January_ ); break; // January
      case 40000258: return ( &February_ ); break; // February
      case 40000259: return ( &March_ ); break; // March
      case 40000260: return ( &April_ ); break; // April
      case 40000261: return ( &May_ ); break; // May
      case 40000262: return ( &June_ ); break; // June
      case 40000263: return ( &July_ ); break; // July
      case 40000264: return ( &August_ ); break; // August
      case 40000265: return ( &September_ ); break; // September
      case 40000266: return ( &October_ ); break; // October
      case 40000267: return ( &November_ ); break; // November
      case 40000268: return ( &December_ ); break; // December
      case 40000829: return ( &LastProcDate_ ); break; // LastProcDate
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40000652: return ( &BatchUser_ ); break; // BatchUser
      case 40000830: return ( &Batch_ ); break; // Batch
      case 40000654: return ( &BatchTrace_ ); break; // BatchTrace
      case 40000831: return ( &BatchDate_ ); break; // BatchDate
      case 40000832: return ( &TransferType_ ); break; // TransferType
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40000233: return ( &AmountTypeDesc_ ); break; // AmountTypeDesc
      case 40000833: return ( &FeeTypeDesc_ ); break; // FeeTypeDesc
      case 40000834: return ( &FrequencyDesc_ ); break; // FrequencyDesc
      case 40000835: return ( &TransferTypeDesc_ ); break; // TransferTypeDesc
      case 40000962: return ( &RecurDetlVer_ ); break; // RecurDetlVer
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0059_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0059_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0059_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 43 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AutoTrfId_; break;
            case 1: aFlds_[1] = &FundCode_; break;
            case 2: aFlds_[2] = &ClassCode_; break;
            case 3: aFlds_[3] = &FundToCode_; break;
            case 4: aFlds_[4] = &ClassToCode_; break;
            case 5: aFlds_[5] = &AccountTo_; break;
            case 6: aFlds_[6] = &Amount_; break;
            case 7: aFlds_[7] = &AmountType_; break;
            case 8: aFlds_[8] = &Fee_; break;
            case 9: aFlds_[9] = &FeeType_; break;
            case 10: aFlds_[10] = &BELFee_; break;
            case 11: aFlds_[11] = &Frequency_; break;
            case 12: aFlds_[12] = &DayOfWeek_; break;
            case 13: aFlds_[13] = &EndOfMonth_; break;
            case 14: aFlds_[14] = &January_; break;
            case 15: aFlds_[15] = &February_; break;
            case 16: aFlds_[16] = &March_; break;
            case 17: aFlds_[17] = &April_; break;
            case 18: aFlds_[18] = &May_; break;
            case 19: aFlds_[19] = &June_; break;
            case 20: aFlds_[20] = &July_; break;
            case 21: aFlds_[21] = &August_; break;
            case 22: aFlds_[22] = &September_; break;
            case 23: aFlds_[23] = &October_; break;
            case 24: aFlds_[24] = &November_; break;
            case 25: aFlds_[25] = &December_; break;
            case 26: aFlds_[26] = &LastProcDate_; break;
            case 27: aFlds_[27] = &EffectiveDate_; break;
            case 28: aFlds_[28] = &StopDate_; break;
            case 29: aFlds_[29] = &BatchUser_; break;
            case 30: aFlds_[30] = &Batch_; break;
            case 31: aFlds_[31] = &BatchTrace_; break;
            case 32: aFlds_[32] = &BatchDate_; break;
            case 33: aFlds_[33] = &TransferType_; break;
            case 34: aFlds_[34] = &ProcessDate_; break;
            case 35: aFlds_[35] = &ModDate_; break;
            case 36: aFlds_[36] = &Username_; break;
            case 37: aFlds_[37] = &ModUser_; break;
            case 38: aFlds_[38] = &AmountTypeDesc_; break;
            case 39: aFlds_[39] = &FeeTypeDesc_; break;
            case 40: aFlds_[40] = &FrequencyDesc_; break;
            case 41: aFlds_[41] = &TransferTypeDesc_; break;
            case 42: aFlds_[42] = &RecurDetlVer_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0059_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0059_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0059_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0059_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 1357 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0059_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0059_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0059_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000718: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000340: return( true );
      case 40000341: return( true );
      case 40000646: return( true );
      case 40000231: return( true );
      case 40000232: return( true );
      case 40000235: return( true );
      case 40000728: return( true );
      case 40000659: return( true );
      case 40000730: return( true );
      case 40000275: return( true );
      case 40000272: return( true );
      case 40000257: return( true );
      case 40000258: return( true );
      case 40000259: return( true );
      case 40000260: return( true );
      case 40000261: return( true );
      case 40000262: return( true );
      case 40000263: return( true );
      case 40000264: return( true );
      case 40000265: return( true );
      case 40000266: return( true );
      case 40000267: return( true );
      case 40000268: return( true );
      case 40000829: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40000652: return( true );
      case 40000830: return( true );
      case 40000654: return( true );
      case 40000831: return( true );
      case 40000832: return( true );
      case 40000216: return( true );
      case 40000217: return( true );
      case 40000117: return( true );
      case 40000218: return( true );
      case 40000233: return( true );
      case 40000833: return( true );
      case 40000834: return( true );
      case 40000835: return( true );
      case 40000962: return( true );
   }
   return false;
}

