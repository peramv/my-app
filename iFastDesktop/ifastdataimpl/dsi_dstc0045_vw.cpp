// BFDataImpl implementation file for DataSet DSTC0045.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0045_vw.h"


// This function creates an instance of dsi_DSTC0045_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0045_VW() { return new dsi_DSTC0045_VW; }

dsi_DSTC0045_VW::dsi_DSTC0045_VW()
: BFDataImpl( 40000585 )
, ErrorCode_( ifds::ErrorCode, &ifds::s_FldProp_ErrorCode )
, ErrorDesc_( ifds::ErrorDesc, &ifds::s_FldProp_ErrorDesc )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
{
   cFields_ = 3;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0045_VW::~dsi_DSTC0045_VW()
{
}

BFDataImpl* dsi_DSTC0045_VW::clone()
{
   dsi_DSTC0045_VW* p = new dsi_DSTC0045_VW;
   p->ErrorCode_ = ErrorCode_;
   p->ErrorDesc_ = ErrorDesc_;
   p->EffectiveDate_ = EffectiveDate_;
   return(p);
}

BFDataField* dsi_DSTC0045_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000586: return ( &ErrorCode_ ); break; // ErrorCode
      case 40000587: return ( &ErrorDesc_ ); break; // ErrorDesc
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0045_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0045_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0045_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 3 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &ErrorCode_; break;
            case 1: aFlds_[1] = &ErrorDesc_; break;
            case 2: aFlds_[2] = &EffectiveDate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0045_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0045_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0045_VW::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0045_VW::getDefinedByteLength( void ) const
{
   return( 80 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0045_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0045_VW::fieldExists( id );
}

bool dsi_DSTC0045_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000586: return( true );
      case 40000587: return( true );
      case 40000327: return( true );
   }
   return false;
}

