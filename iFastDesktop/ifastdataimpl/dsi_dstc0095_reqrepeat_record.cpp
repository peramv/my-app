// BFDataImpl implementation file for DataSet DSTC0095.REQRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0095_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0095_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0095_REQRepeat_Record() { return new dsi_DSTC0095_REQRepeat_Record; }

dsi_DSTC0095_REQRepeat_Record::dsi_DSTC0095_REQRepeat_Record()
: BFDataImpl( 40001048 )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
, AllocRunMode_( ifds::AllocRunMode, &ifds::s_FldProp_AllocRunMode )
, Level_( ifds::Level, &ifds::s_FldProp_Level )
, AllocAccountNum_( ifds::AllocAccountNum, &ifds::s_FldProp_AllocAccountNum )
, AllocFundToCode_( ifds::AllocFundToCode, &ifds::s_FldProp_AllocFundToCode )
, AllocClassToCode_( ifds::AllocClassToCode, &ifds::s_FldProp_AllocClassToCode )
, AllocPercentage_( ifds::AllocPercentage, &ifds::s_FldProp_AllocPercentage )
, AllocAmount_( ifds::AllocAmount, &ifds::s_FldProp_AllocAmount )
, DistribDetlRid_( ifds::DistribDetlRid, &ifds::s_FldProp_DistribDetlRid )
{
   cFields_ = 9;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0095_REQRepeat_Record::~dsi_DSTC0095_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0095_REQRepeat_Record::clone()
{
   dsi_DSTC0095_REQRepeat_Record* p = new dsi_DSTC0095_REQRepeat_Record;
   p->RepeatCount_ = RepeatCount_;
   p->AllocRunMode_ = AllocRunMode_;
   p->Level_ = Level_;
   p->AllocAccountNum_ = AllocAccountNum_;
   p->AllocFundToCode_ = AllocFundToCode_;
   p->AllocClassToCode_ = AllocClassToCode_;
   p->AllocPercentage_ = AllocPercentage_;
   p->AllocAmount_ = AllocAmount_;
   p->DistribDetlRid_ = DistribDetlRid_;
   return(p);
}

BFDataField* dsi_DSTC0095_REQRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
      case 40001032: return ( &AllocRunMode_ ); break; // AllocRunMode
      case 40000977: return ( &Level_ ); break; // Level
      case 40001049: return ( &AllocAccountNum_ ); break; // AllocAccountNum
      case 40001033: return ( &AllocFundToCode_ ); break; // AllocFundToCode
      case 40001034: return ( &AllocClassToCode_ ); break; // AllocClassToCode
      case 40001035: return ( &AllocPercentage_ ); break; // AllocPercentage
      case 40000292: return ( &AllocAmount_ ); break; // AllocAmount
      case 40000950: return ( &DistribDetlRid_ ); break; // DistribDetlRid
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0095_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0095_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0095_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 9 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RepeatCount_; break;
            case 1: aFlds_[1] = &AllocRunMode_; break;
            case 2: aFlds_[2] = &Level_; break;
            case 3: aFlds_[3] = &AllocAccountNum_; break;
            case 4: aFlds_[4] = &AllocFundToCode_; break;
            case 5: aFlds_[5] = &AllocClassToCode_; break;
            case 6: aFlds_[6] = &AllocPercentage_; break;
            case 7: aFlds_[7] = &AllocAmount_; break;
            case 8: aFlds_[8] = &DistribDetlRid_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0095_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0095_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0095_REQRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0095_REQRepeat_Record::getDefinedByteLength( void ) const
{
   return( 267 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0095_REQRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0095_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0095_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000120: return( true );
      case 40001032: return( true );
      case 40000977: return( true );
      case 40001049: return( true );
      case 40001033: return( true );
      case 40001034: return( true );
      case 40001035: return( true );
      case 40000292: return( true );
      case 40000950: return( true );
   }
   return false;
}

