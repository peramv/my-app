// BFDataImpl implementation file for DataSet DSTC0194.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0194_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0194_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0194_VWRepeat_Record() { return new dsi_DSTC0194_VWRepeat_Record; }

dsi_DSTC0194_VWRepeat_Record::dsi_DSTC0194_VWRepeat_Record()
: BFDataImpl( 40002913 )
, AcctFeeParamId_( ifds::AcctFeeParamId, &ifds::s_FldProp_AcctFeeParamId )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, FundFromCode_( ifds::FundFromCode, &ifds::s_FldProp_FundFromCode )
, ClassFromCode_( ifds::ClassFromCode, &ifds::s_FldProp_ClassFromCode )
, FeeCode_( ifds::FeeCode, &ifds::s_FldProp_FeeCode )
, ParamFeeType_( ifds::ParamFeeType, &ifds::s_FldProp_ParamFeeType )
, Rate_( ifds::Rate, &ifds::s_FldProp_Rate )
, MinFee_( ifds::MinFee, &ifds::s_FldProp_MinFee )
, MaxFee_( ifds::MaxFee, &ifds::s_FldProp_MaxFee )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, FreqMinMaxApp_( ifds::FreqMinMaxApp, &ifds::s_FldProp_FreqMinMaxApp )
, ChrgOnPrtlRed_( ifds::ChrgOnPrtlRed, &ifds::s_FldProp_ChrgOnPrtlRed )
, ChrgOnFullRed_( ifds::ChrgOnFullRed, &ifds::s_FldProp_ChrgOnFullRed )
, Status_( ifds::Status, &ifds::s_FldProp_Status )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, CommGroup_( ifds::CommGroup, &ifds::s_FldProp_CommGroup )
, ModPerm_( ifds::ModPerm, &ifds::s_FldProp_ModPerm )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BasedOn_( ifds::BasedOn, &ifds::s_FldProp_BasedOn )
{
   cFields_ = 24;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0194_VWRepeat_Record::~dsi_DSTC0194_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0194_VWRepeat_Record::clone()
{
   dsi_DSTC0194_VWRepeat_Record* p = new dsi_DSTC0194_VWRepeat_Record;
   p->AcctFeeParamId_ = AcctFeeParamId_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->FundFromCode_ = FundFromCode_;
   p->ClassFromCode_ = ClassFromCode_;
   p->FeeCode_ = FeeCode_;
   p->ParamFeeType_ = ParamFeeType_;
   p->Rate_ = Rate_;
   p->MinFee_ = MinFee_;
   p->MaxFee_ = MaxFee_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->FreqMinMaxApp_ = FreqMinMaxApp_;
   p->ChrgOnPrtlRed_ = ChrgOnPrtlRed_;
   p->ChrgOnFullRed_ = ChrgOnFullRed_;
   p->Status_ = Status_;
   p->ProcessDate_ = ProcessDate_;
   p->ModDate_ = ModDate_;
   p->Username_ = Username_;
   p->ModUser_ = ModUser_;
   p->CommGroup_ = CommGroup_;
   p->ModPerm_ = ModPerm_;
   p->BrokerCode_ = BrokerCode_;
   p->BasedOn_ = BasedOn_;
   return(p);
}

BFDataField* dsi_DSTC0194_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40002914: return ( &AcctFeeParamId_ ); break; // AcctFeeParamId
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40002915: return ( &FundFromCode_ ); break; // FundFromCode
      case 40002916: return ( &ClassFromCode_ ); break; // ClassFromCode
      case 40002917: return ( &FeeCode_ ); break; // FeeCode
      case 40002945: return ( &ParamFeeType_ ); break; // ParamFeeType
      case 40002919: return ( &Rate_ ); break; // Rate
      case 40002899: return ( &MinFee_ ); break; // MinFee
      case 40001674: return ( &MaxFee_ ); break; // MaxFee
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40002921: return ( &FreqMinMaxApp_ ); break; // FreqMinMaxApp
      case 40002922: return ( &ChrgOnPrtlRed_ ); break; // ChrgOnPrtlRed
      case 40002923: return ( &ChrgOnFullRed_ ); break; // ChrgOnFullRed
      case 40001399: return ( &Status_ ); break; // Status
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40003519: return ( &CommGroup_ ); break; // CommGroup
      case 40000763: return ( &ModPerm_ ); break; // ModPerm
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40003580: return ( &BasedOn_ ); break; // BasedOn
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0194_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0194_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0194_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 24 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AcctFeeParamId_; break;
            case 1: aFlds_[1] = &FundCode_; break;
            case 2: aFlds_[2] = &ClassCode_; break;
            case 3: aFlds_[3] = &FundFromCode_; break;
            case 4: aFlds_[4] = &ClassFromCode_; break;
            case 5: aFlds_[5] = &FeeCode_; break;
            case 6: aFlds_[6] = &ParamFeeType_; break;
            case 7: aFlds_[7] = &Rate_; break;
            case 8: aFlds_[8] = &MinFee_; break;
            case 9: aFlds_[9] = &MaxFee_; break;
            case 10: aFlds_[10] = &EffectiveDate_; break;
            case 11: aFlds_[11] = &StopDate_; break;
            case 12: aFlds_[12] = &FreqMinMaxApp_; break;
            case 13: aFlds_[13] = &ChrgOnPrtlRed_; break;
            case 14: aFlds_[14] = &ChrgOnFullRed_; break;
            case 15: aFlds_[15] = &Status_; break;
            case 16: aFlds_[16] = &ProcessDate_; break;
            case 17: aFlds_[17] = &ModDate_; break;
            case 18: aFlds_[18] = &Username_; break;
            case 19: aFlds_[19] = &ModUser_; break;
            case 20: aFlds_[20] = &CommGroup_; break;
            case 21: aFlds_[21] = &ModPerm_; break;
            case 22: aFlds_[22] = &BrokerCode_; break;
            case 23: aFlds_[23] = &BasedOn_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0194_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0194_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0194_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0194_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 1070 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0194_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0194_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0194_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40002914: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40002915: return( true );
      case 40002916: return( true );
      case 40002917: return( true );
      case 40002945: return( true );
      case 40002919: return( true );
      case 40002899: return( true );
      case 40001674: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40002921: return( true );
      case 40002922: return( true );
      case 40002923: return( true );
      case 40001399: return( true );
      case 40000216: return( true );
      case 40000217: return( true );
      case 40000117: return( true );
      case 40000218: return( true );
      case 40003519: return( true );
      case 40000763: return( true );
      case 40000044: return( true );
      case 40003580: return( true );
   }
   return false;
}

