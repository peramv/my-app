// BFDataImpl implementation file for DataSet DSTC0393.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0393_req.h"


// This function creates an instance of dsi_DSTC0393_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0393_REQ() { return new dsi_DSTC0393_REQ; }

dsi_DSTC0393_REQ::dsi_DSTC0393_REQ()
: BFDataImpl( 40005963 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, PendProcRecordType_( ifds::PendProcRecordType, &ifds::s_FldProp_PendProcRecordType )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, StcPendTrdAuthorization_( ifds::StcPendTrdAuthorization, &ifds::s_FldProp_StcPendTrdAuthorization )
, SettleBatch_( ifds::SettleBatch, &ifds::s_FldProp_SettleBatch )
, PaymentInfo_( ifds::PaymentInfo, &ifds::s_FldProp_PaymentInfo )
, TradeRestriction_( ifds::TradeRestriction, &ifds::s_FldProp_TradeRestriction )
, TradeRestrictionReason_( ifds::TradeRestrictionReason, &ifds::s_FldProp_TradeRestrictionReason )
, SourceofFundsChecked_( ifds::SourceofFundsChecked, &ifds::s_FldProp_SourceofFundsChecked )
, ScreenDesc_( ifds::ScreenDesc, &ifds::s_FldProp_ScreenDesc )
{
   cFields_ = 16;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0393_REQ::~dsi_DSTC0393_REQ()
{
}

BFDataImpl* dsi_DSTC0393_REQ::clone()
{
   dsi_DSTC0393_REQ* p = new dsi_DSTC0393_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->PendProcRecordType_ = PendProcRecordType_;
   p->TransNum_ = TransNum_;
   p->TransId_ = TransId_;
   p->StcPendTrdAuthorization_ = StcPendTrdAuthorization_;
   p->SettleBatch_ = SettleBatch_;
   p->PaymentInfo_ = PaymentInfo_;
   p->TradeRestriction_ = TradeRestriction_;
   p->TradeRestrictionReason_ = TradeRestrictionReason_;
   p->SourceofFundsChecked_ = SourceofFundsChecked_;
   p->ScreenDesc_ = ScreenDesc_;
   return(p);
}

BFDataField* dsi_DSTC0393_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40005966: return ( &PendProcRecordType_ ); break; // PendProcRecordType
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40005965: return ( &StcPendTrdAuthorization_ ); break; // StcPendTrdAuthorization
      case 40000362: return ( &SettleBatch_ ); break; // SettleBatch
      case 40006601: return ( &PaymentInfo_ ); break; // PaymentInfo
      case 40007182: return ( &TradeRestriction_ ); break; // TradeRestriction
      case 40007183: return ( &TradeRestrictionReason_ ); break; // TradeRestrictionReason
      case 40007517: return ( &SourceofFundsChecked_ ); break; // SourceofFundsChecked
      case 40001208: return ( &ScreenDesc_ ); break; // ScreenDesc
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0393_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0393_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0393_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 16 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &PendProcRecordType_; break;
            case 7: aFlds_[7] = &TransNum_; break;
            case 8: aFlds_[8] = &TransId_; break;
            case 9: aFlds_[9] = &StcPendTrdAuthorization_; break;
            case 10: aFlds_[10] = &SettleBatch_; break;
            case 11: aFlds_[11] = &PaymentInfo_; break;
            case 12: aFlds_[12] = &TradeRestriction_; break;
            case 13: aFlds_[13] = &TradeRestrictionReason_; break;
            case 14: aFlds_[14] = &SourceofFundsChecked_; break;
            case 15: aFlds_[15] = &ScreenDesc_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0393_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0393_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0393_REQ::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0393_REQ::getDefinedByteLength( void ) const
{
   return( 612 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0393_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0393_REQ::fieldExists( id );
}

bool dsi_DSTC0393_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40005966: return( true );
      case 40000096: return( true );
      case 40000063: return( true );
      case 40005965: return( true );
      case 40000362: return( true );
      case 40006601: return( true );
      case 40007182: return( true );
      case 40007183: return( true );
      case 40007517: return( true );
      case 40001208: return( true );
   }
   return false;
}

