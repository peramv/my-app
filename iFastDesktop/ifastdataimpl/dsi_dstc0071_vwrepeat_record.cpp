// BFDataImpl implementation file for DataSet DSTC0071.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0071_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0071_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0071_VWRepeat_Record() { return new dsi_DSTC0071_VWRepeat_Record; }

dsi_DSTC0071_VWRepeat_Record::dsi_DSTC0071_VWRepeat_Record()
: BFDataImpl( 40000808 )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, AddrCode_( ifds::AddrCode, &ifds::s_FldProp_AddrCode )
, AddrDesc_( ifds::AddrDesc, &ifds::s_FldProp_AddrDesc )
, AddrId_( ifds::AddrId, &ifds::s_FldProp_AddrId )
, AddrLine1_( ifds::AddrLine1, &ifds::s_FldProp_AddrLine1 )
, AddrLine2_( ifds::AddrLine2, &ifds::s_FldProp_AddrLine2 )
, AddrLine3_( ifds::AddrLine3, &ifds::s_FldProp_AddrLine3 )
, City_( ifds::City, &ifds::s_FldProp_City )
, Province_( ifds::Province, &ifds::s_FldProp_Province )
, ProvinceName_( ifds::ProvinceName, &ifds::s_FldProp_ProvinceName )
, Country_( ifds::Country, &ifds::s_FldProp_Country )
, CountryName_( ifds::CountryName, &ifds::s_FldProp_CountryName )
, PostalCode_( ifds::PostalCode, &ifds::s_FldProp_PostalCode )
, HoldMail_( ifds::HoldMail, &ifds::s_FldProp_HoldMail )
, EntityAddrVer_( ifds::EntityAddrVer, &ifds::s_FldProp_EntityAddrVer )
, EntityAddrRid_( ifds::EntityAddrRid, &ifds::s_FldProp_EntityAddrRid )
, EntityAddrXrefVer_( ifds::EntityAddrXrefVer, &ifds::s_FldProp_EntityAddrXrefVer )
, EntityAddrXrefRid_( ifds::EntityAddrXrefRid, &ifds::s_FldProp_EntityAddrXrefRid )
, EntityId_( ifds::EntityId, &ifds::s_FldProp_EntityId )
, LastName_( ifds::LastName, &ifds::s_FldProp_LastName )
, FirstName_( ifds::FirstName, &ifds::s_FldProp_FirstName )
, RetMailFlag_( ifds::RetMailFlag, &ifds::s_FldProp_RetMailFlag )
, RetMailDate_( ifds::RetMailDate, &ifds::s_FldProp_RetMailDate )
, RetMailReasonCode_( ifds::RetMailReasonCode, &ifds::s_FldProp_RetMailReasonCode )
, UnclmComment_( ifds::UnclmComment, &ifds::s_FldProp_UnclmComment )
{
   cFields_ = 29;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0071_VWRepeat_Record::~dsi_DSTC0071_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0071_VWRepeat_Record::clone()
{
   dsi_DSTC0071_VWRepeat_Record* p = new dsi_DSTC0071_VWRepeat_Record;
   p->EffectiveDate_ = EffectiveDate_;
   p->ProcessDate_ = ProcessDate_;
   p->Username_ = Username_;
   p->ModUser_ = ModUser_;
   p->ModDate_ = ModDate_;
   p->AddrCode_ = AddrCode_;
   p->AddrDesc_ = AddrDesc_;
   p->AddrId_ = AddrId_;
   p->AddrLine1_ = AddrLine1_;
   p->AddrLine2_ = AddrLine2_;
   p->AddrLine3_ = AddrLine3_;
   p->City_ = City_;
   p->Province_ = Province_;
   p->ProvinceName_ = ProvinceName_;
   p->Country_ = Country_;
   p->CountryName_ = CountryName_;
   p->PostalCode_ = PostalCode_;
   p->HoldMail_ = HoldMail_;
   p->EntityAddrVer_ = EntityAddrVer_;
   p->EntityAddrRid_ = EntityAddrRid_;
   p->EntityAddrXrefVer_ = EntityAddrXrefVer_;
   p->EntityAddrXrefRid_ = EntityAddrXrefRid_;
   p->EntityId_ = EntityId_;
   p->LastName_ = LastName_;
   p->FirstName_ = FirstName_;
   p->RetMailFlag_ = RetMailFlag_;
   p->RetMailDate_ = RetMailDate_;
   p->RetMailReasonCode_ = RetMailReasonCode_;
   p->UnclmComment_ = UnclmComment_;
   return(p);
}

BFDataField* dsi_DSTC0071_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000277: return ( &AddrCode_ ); break; // AddrCode
      case 40000809: return ( &AddrDesc_ ); break; // AddrDesc
      case 40000810: return ( &AddrId_ ); break; // AddrId
      case 40000280: return ( &AddrLine1_ ); break; // AddrLine1
      case 40000281: return ( &AddrLine2_ ); break; // AddrLine2
      case 40000282: return ( &AddrLine3_ ); break; // AddrLine3
      case 40000576: return ( &City_ ); break; // City
      case 40000811: return ( &Province_ ); break; // Province
      case 40000812: return ( &ProvinceName_ ); break; // ProvinceName
      case 40000813: return ( &Country_ ); break; // Country
      case 40000544: return ( &CountryName_ ); break; // CountryName
      case 40000143: return ( &PostalCode_ ); break; // PostalCode
      case 40000814: return ( &HoldMail_ ); break; // HoldMail
      case 40000967: return ( &EntityAddrVer_ ); break; // EntityAddrVer
      case 40000968: return ( &EntityAddrRid_ ); break; // EntityAddrRid
      case 40000969: return ( &EntityAddrXrefVer_ ); break; // EntityAddrXrefVer
      case 40000970: return ( &EntityAddrXrefRid_ ); break; // EntityAddrXrefRid
      case 40000033: return ( &EntityId_ ); break; // EntityId
      case 40000128: return ( &LastName_ ); break; // LastName
      case 40000129: return ( &FirstName_ ); break; // FirstName
      case 40004013: return ( &RetMailFlag_ ); break; // RetMailFlag
      case 40004012: return ( &RetMailDate_ ); break; // RetMailDate
      case 40005890: return ( &RetMailReasonCode_ ); break; // RetMailReasonCode
      case 40005894: return ( &UnclmComment_ ); break; // UnclmComment
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0071_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0071_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0071_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 29 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &EffectiveDate_; break;
            case 1: aFlds_[1] = &ProcessDate_; break;
            case 2: aFlds_[2] = &Username_; break;
            case 3: aFlds_[3] = &ModUser_; break;
            case 4: aFlds_[4] = &ModDate_; break;
            case 5: aFlds_[5] = &AddrCode_; break;
            case 6: aFlds_[6] = &AddrDesc_; break;
            case 7: aFlds_[7] = &AddrId_; break;
            case 8: aFlds_[8] = &AddrLine1_; break;
            case 9: aFlds_[9] = &AddrLine2_; break;
            case 10: aFlds_[10] = &AddrLine3_; break;
            case 11: aFlds_[11] = &City_; break;
            case 12: aFlds_[12] = &Province_; break;
            case 13: aFlds_[13] = &ProvinceName_; break;
            case 14: aFlds_[14] = &Country_; break;
            case 15: aFlds_[15] = &CountryName_; break;
            case 16: aFlds_[16] = &PostalCode_; break;
            case 17: aFlds_[17] = &HoldMail_; break;
            case 18: aFlds_[18] = &EntityAddrVer_; break;
            case 19: aFlds_[19] = &EntityAddrRid_; break;
            case 20: aFlds_[20] = &EntityAddrXrefVer_; break;
            case 21: aFlds_[21] = &EntityAddrXrefRid_; break;
            case 22: aFlds_[22] = &EntityId_; break;
            case 23: aFlds_[23] = &LastName_; break;
            case 24: aFlds_[24] = &FirstName_; break;
            case 25: aFlds_[25] = &RetMailFlag_; break;
            case 26: aFlds_[26] = &RetMailDate_; break;
            case 27: aFlds_[27] = &RetMailReasonCode_; break;
            case 28: aFlds_[28] = &UnclmComment_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0071_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0071_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0071_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 100 );
}

unsigned long dsi_DSTC0071_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 1113 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0071_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0071_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0071_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000327: return( true );
      case 40000216: return( true );
      case 40000117: return( true );
      case 40000218: return( true );
      case 40000217: return( true );
      case 40000277: return( true );
      case 40000809: return( true );
      case 40000810: return( true );
      case 40000280: return( true );
      case 40000281: return( true );
      case 40000282: return( true );
      case 40000576: return( true );
      case 40000811: return( true );
      case 40000812: return( true );
      case 40000813: return( true );
      case 40000544: return( true );
      case 40000143: return( true );
      case 40000814: return( true );
      case 40000967: return( true );
      case 40000968: return( true );
      case 40000969: return( true );
      case 40000970: return( true );
      case 40000033: return( true );
      case 40000128: return( true );
      case 40000129: return( true );
      case 40004013: return( true );
      case 40004012: return( true );
      case 40005890: return( true );
      case 40005894: return( true );
   }
   return false;
}

