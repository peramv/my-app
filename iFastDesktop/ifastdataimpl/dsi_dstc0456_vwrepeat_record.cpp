// BFDataImpl implementation file for DataSet DSTC0456.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0456_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0456_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0456_VWRepeat_Record() { return new dsi_DSTC0456_VWRepeat_Record; }

dsi_DSTC0456_VWRepeat_Record::dsi_DSTC0456_VWRepeat_Record()
: BFDataImpl( 40007261 )
, EntRegDetlUUID_( ifds::EntRegDetlUUID, &ifds::s_FldProp_EntRegDetlUUID )
, EntityId_( ifds::EntityId, &ifds::s_FldProp_EntityId )
, FirstName_( ifds::FirstName, &ifds::s_FldProp_FirstName )
, LastName_( ifds::LastName, &ifds::s_FldProp_LastName )
, EntityType_( ifds::EntityType, &ifds::s_FldProp_EntityType )
, FATCACode_( ifds::FATCACode, &ifds::s_FldProp_FATCACode )
, FFIClass_( ifds::FFIClass, &ifds::s_FldProp_FFIClass )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, Version_( ifds::Version, &ifds::s_FldProp_Version )
, EntRegDetlRId_( ifds::EntRegDetlRId, &ifds::s_FldProp_EntRegDetlRId )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
{
   cFields_ = 15;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0456_VWRepeat_Record::~dsi_DSTC0456_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0456_VWRepeat_Record::clone()
{
   dsi_DSTC0456_VWRepeat_Record* p = new dsi_DSTC0456_VWRepeat_Record;
   p->EntRegDetlUUID_ = EntRegDetlUUID_;
   p->EntityId_ = EntityId_;
   p->FirstName_ = FirstName_;
   p->LastName_ = LastName_;
   p->EntityType_ = EntityType_;
   p->FATCACode_ = FATCACode_;
   p->FFIClass_ = FFIClass_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->Version_ = Version_;
   p->EntRegDetlRId_ = EntRegDetlRId_;
   p->ProcessDate_ = ProcessDate_;
   p->Username_ = Username_;
   p->ModDate_ = ModDate_;
   p->ModUser_ = ModUser_;
   return(p);
}

BFDataField* dsi_DSTC0456_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40007274: return ( &EntRegDetlUUID_ ); break; // EntRegDetlUUID
      case 40000033: return ( &EntityId_ ); break; // EntityId
      case 40000129: return ( &FirstName_ ); break; // FirstName
      case 40000128: return ( &LastName_ ); break; // LastName
      case 40000604: return ( &EntityType_ ); break; // EntityType
      case 40007275: return ( &FATCACode_ ); break; // FATCACode
      case 40007276: return ( &FFIClass_ ); break; // FFIClass
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40003739: return ( &Version_ ); break; // Version
      case 40007277: return ( &EntRegDetlRId_ ); break; // EntRegDetlRId
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0456_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0456_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0456_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 15 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &EntRegDetlUUID_; break;
            case 1: aFlds_[1] = &EntityId_; break;
            case 2: aFlds_[2] = &FirstName_; break;
            case 3: aFlds_[3] = &LastName_; break;
            case 4: aFlds_[4] = &EntityType_; break;
            case 5: aFlds_[5] = &FATCACode_; break;
            case 6: aFlds_[6] = &FFIClass_; break;
            case 7: aFlds_[7] = &EffectiveDate_; break;
            case 8: aFlds_[8] = &StopDate_; break;
            case 9: aFlds_[9] = &Version_; break;
            case 10: aFlds_[10] = &EntRegDetlRId_; break;
            case 11: aFlds_[11] = &ProcessDate_; break;
            case 12: aFlds_[12] = &Username_; break;
            case 13: aFlds_[13] = &ModDate_; break;
            case 14: aFlds_[14] = &ModUser_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0456_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0456_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0456_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 80 );
}

unsigned long dsi_DSTC0456_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 585 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0456_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0456_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0456_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40007274: return( true );
      case 40000033: return( true );
      case 40000129: return( true );
      case 40000128: return( true );
      case 40000604: return( true );
      case 40007275: return( true );
      case 40007276: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40003739: return( true );
      case 40007277: return( true );
      case 40000216: return( true );
      case 40000117: return( true );
      case 40000217: return( true );
      case 40000218: return( true );
   }
   return false;
}

