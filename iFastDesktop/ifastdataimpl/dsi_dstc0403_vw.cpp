// BFDataImpl implementation file for DataSet DSTC0403.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0403_vw.h"


// This function creates an instance of dsi_DSTC0403_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0403_VW() { return new dsi_DSTC0403_VW; }

dsi_DSTC0403_VW::dsi_DSTC0403_VW()
: BFDataImpl( 40006107 )
, UpdateStatus_( ifds::UpdateStatus, &ifds::s_FldProp_UpdateStatus )
, WarnCode1_( ifds::WarnCode1, &ifds::s_FldProp_WarnCode1 )
, WarnCode2_( ifds::WarnCode2, &ifds::s_FldProp_WarnCode2 )
, WarnCode3_( ifds::WarnCode3, &ifds::s_FldProp_WarnCode3 )
, WarnCode4_( ifds::WarnCode4, &ifds::s_FldProp_WarnCode4 )
, WarnCode5_( ifds::WarnCode5, &ifds::s_FldProp_WarnCode5 )
, WarnCode6_( ifds::WarnCode6, &ifds::s_FldProp_WarnCode6 )
, WarnCode7_( ifds::WarnCode7, &ifds::s_FldProp_WarnCode7 )
, WarnCode8_( ifds::WarnCode8, &ifds::s_FldProp_WarnCode8 )
, WarnCode9_( ifds::WarnCode9, &ifds::s_FldProp_WarnCode9 )
, WarnCode10_( ifds::WarnCode10, &ifds::s_FldProp_WarnCode10 )
, WarnCode11_( ifds::WarnCode11, &ifds::s_FldProp_WarnCode11 )
, WarnCode12_( ifds::WarnCode12, &ifds::s_FldProp_WarnCode12 )
, WarnParam51_( ifds::WarnParam51, &ifds::s_FldProp_WarnParam51 )
, WarnParam52_( ifds::WarnParam52, &ifds::s_FldProp_WarnParam52 )
, WarnParam61_( ifds::WarnParam61, &ifds::s_FldProp_WarnParam61 )
, WarnParam62_( ifds::WarnParam62, &ifds::s_FldProp_WarnParam62 )
{
   cFields_ = 17;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0403_VW::~dsi_DSTC0403_VW()
{
}

BFDataImpl* dsi_DSTC0403_VW::clone()
{
   dsi_DSTC0403_VW* p = new dsi_DSTC0403_VW;
   p->UpdateStatus_ = UpdateStatus_;
   p->WarnCode1_ = WarnCode1_;
   p->WarnCode2_ = WarnCode2_;
   p->WarnCode3_ = WarnCode3_;
   p->WarnCode4_ = WarnCode4_;
   p->WarnCode5_ = WarnCode5_;
   p->WarnCode6_ = WarnCode6_;
   p->WarnCode7_ = WarnCode7_;
   p->WarnCode8_ = WarnCode8_;
   p->WarnCode9_ = WarnCode9_;
   p->WarnCode10_ = WarnCode10_;
   p->WarnCode11_ = WarnCode11_;
   p->WarnCode12_ = WarnCode12_;
   p->WarnParam51_ = WarnParam51_;
   p->WarnParam52_ = WarnParam52_;
   p->WarnParam61_ = WarnParam61_;
   p->WarnParam62_ = WarnParam62_;
   return(p);
}

BFDataField* dsi_DSTC0403_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000989: return ( &UpdateStatus_ ); break; // UpdateStatus
      case 40005185: return ( &WarnCode1_ ); break; // WarnCode1
      case 40005186: return ( &WarnCode2_ ); break; // WarnCode2
      case 40005187: return ( &WarnCode3_ ); break; // WarnCode3
      case 40005188: return ( &WarnCode4_ ); break; // WarnCode4
      case 40005189: return ( &WarnCode5_ ); break; // WarnCode5
      case 40006109: return ( &WarnCode6_ ); break; // WarnCode6
      case 40006110: return ( &WarnCode7_ ); break; // WarnCode7
      case 40006111: return ( &WarnCode8_ ); break; // WarnCode8
      case 40006147: return ( &WarnCode9_ ); break; // WarnCode9
      case 40006148: return ( &WarnCode10_ ); break; // WarnCode10
      case 40006149: return ( &WarnCode11_ ); break; // WarnCode11
      case 40006150: return ( &WarnCode12_ ); break; // WarnCode12
      case 40006126: return ( &WarnParam51_ ); break; // WarnParam51
      case 40006127: return ( &WarnParam52_ ); break; // WarnParam52
      case 40006128: return ( &WarnParam61_ ); break; // WarnParam61
      case 40006129: return ( &WarnParam62_ ); break; // WarnParam62
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0403_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0403_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0403_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 17 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &UpdateStatus_; break;
            case 1: aFlds_[1] = &WarnCode1_; break;
            case 2: aFlds_[2] = &WarnCode2_; break;
            case 3: aFlds_[3] = &WarnCode3_; break;
            case 4: aFlds_[4] = &WarnCode4_; break;
            case 5: aFlds_[5] = &WarnCode5_; break;
            case 6: aFlds_[6] = &WarnCode6_; break;
            case 7: aFlds_[7] = &WarnCode7_; break;
            case 8: aFlds_[8] = &WarnCode8_; break;
            case 9: aFlds_[9] = &WarnCode9_; break;
            case 10: aFlds_[10] = &WarnCode10_; break;
            case 11: aFlds_[11] = &WarnCode11_; break;
            case 12: aFlds_[12] = &WarnCode12_; break;
            case 13: aFlds_[13] = &WarnParam51_; break;
            case 14: aFlds_[14] = &WarnParam52_; break;
            case 15: aFlds_[15] = &WarnParam61_; break;
            case 16: aFlds_[16] = &WarnParam62_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0403_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0403_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0403_VW::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0403_VW::getDefinedByteLength( void ) const
{
   return( 325 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0403_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0403_VW::fieldExists( id );
}

bool dsi_DSTC0403_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000989: return( true );
      case 40005185: return( true );
      case 40005186: return( true );
      case 40005187: return( true );
      case 40005188: return( true );
      case 40005189: return( true );
      case 40006109: return( true );
      case 40006110: return( true );
      case 40006111: return( true );
      case 40006147: return( true );
      case 40006148: return( true );
      case 40006149: return( true );
      case 40006150: return( true );
      case 40006126: return( true );
      case 40006127: return( true );
      case 40006128: return( true );
      case 40006129: return( true );
   }
   return false;
}

