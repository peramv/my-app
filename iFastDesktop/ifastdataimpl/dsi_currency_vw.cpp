// BFDataImpl implementation file for DataSet CURRENCY.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_currency_vw.h"


// This function creates an instance of dsi_CURRENCY_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_CURRENCY_VW() { return new dsi_CURRENCY_VW; }

dsi_CURRENCY_VW::dsi_CURRENCY_VW()
: BFDataImpl( 40000883 )
, JapaneseCurrency_( ifds::JapaneseCurrency, &ifds::s_FldProp_JapaneseCurrency )
, CanadianCurrency_( ifds::CanadianCurrency, &ifds::s_FldProp_CanadianCurrency )
, USDollar_( ifds::USDollar, &ifds::s_FldProp_USDollar )
, EuroDollar_( ifds::EuroDollar, &ifds::s_FldProp_EuroDollar )
, IrishPounds_( ifds::IrishPounds, &ifds::s_FldProp_IrishPounds )
, LuxembourgFranc_( ifds::LuxembourgFranc, &ifds::s_FldProp_LuxembourgFranc )
, PortugueseEscudo_( ifds::PortugueseEscudo, &ifds::s_FldProp_PortugueseEscudo )
{
   cFields_ = 7;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_CURRENCY_VW::~dsi_CURRENCY_VW()
{
}

BFDataImpl* dsi_CURRENCY_VW::clone()
{
   dsi_CURRENCY_VW* p = new dsi_CURRENCY_VW;
   p->JapaneseCurrency_ = JapaneseCurrency_;
   p->CanadianCurrency_ = CanadianCurrency_;
   p->USDollar_ = USDollar_;
   p->EuroDollar_ = EuroDollar_;
   p->IrishPounds_ = IrishPounds_;
   p->LuxembourgFranc_ = LuxembourgFranc_;
   p->PortugueseEscudo_ = PortugueseEscudo_;
   return(p);
}

BFDataField* dsi_CURRENCY_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000884: return ( &JapaneseCurrency_ ); break; // JapaneseCurrency
      case 40000885: return ( &CanadianCurrency_ ); break; // CanadianCurrency
      case 40000886: return ( &USDollar_ ); break; // USDollar
      case 40000887: return ( &EuroDollar_ ); break; // EuroDollar
      case 40000888: return ( &IrishPounds_ ); break; // IrishPounds
      case 40000889: return ( &LuxembourgFranc_ ); break; // LuxembourgFranc
      case 40000890: return ( &PortugueseEscudo_ ); break; // PortugueseEscudo
   }
   return( NULL );
}

const BFDataField* dsi_CURRENCY_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_CURRENCY_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_CURRENCY_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 7 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &JapaneseCurrency_; break;
            case 1: aFlds_[1] = &CanadianCurrency_; break;
            case 2: aFlds_[2] = &USDollar_; break;
            case 3: aFlds_[3] = &EuroDollar_; break;
            case 4: aFlds_[4] = &IrishPounds_; break;
            case 5: aFlds_[5] = &LuxembourgFranc_; break;
            case 6: aFlds_[6] = &PortugueseEscudo_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_CURRENCY_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_CURRENCY_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_CURRENCY_VW::getLargestDefinedField( void ) const
{
   return( 23 );
}

unsigned long dsi_CURRENCY_VW::getDefinedByteLength( void ) const
{
   return( 161 * sizeof( I_CHAR ) );
}

bool dsi_CURRENCY_VW::exists( const BFFieldId& id ) const
{
   return dsi_CURRENCY_VW::fieldExists( id );
}

bool dsi_CURRENCY_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000884: return( true );
      case 40000885: return( true );
      case 40000886: return( true );
      case 40000887: return( true );
      case 40000888: return( true );
      case 40000889: return( true );
      case 40000890: return( true );
   }
   return false;
}

