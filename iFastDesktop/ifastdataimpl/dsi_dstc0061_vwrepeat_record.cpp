// BFDataImpl implementation file for DataSet DSTC0061.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0061_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0061_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0061_VWRepeat_Record() { return new dsi_DSTC0061_VWRepeat_Record; }

dsi_DSTC0061_VWRepeat_Record::dsi_DSTC0061_VWRepeat_Record()
: BFDataImpl( 40000735 )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, EntityType_( ifds::EntityType, &ifds::s_FldProp_EntityType )
, EntityTypeDesc_( ifds::EntityTypeDesc, &ifds::s_FldProp_EntityTypeDesc )
, ShrNum_( ifds::ShrNum, &ifds::s_FldProp_ShrNum )
, TaxTypeDesc_( ifds::TaxTypeDesc, &ifds::s_FldProp_TaxTypeDesc )
, AcctTypeDesc_( ifds::AcctTypeDesc, &ifds::s_FldProp_AcctTypeDesc )
, AcctStatusDesc_( ifds::AcctStatusDesc, &ifds::s_FldProp_AcctStatusDesc )
, CurrencyName_( ifds::CurrencyName, &ifds::s_FldProp_CurrencyName )
, AccountBalance_( ifds::AccountBalance, &ifds::s_FldProp_AccountBalance )
, EntityTypeSeq_( ifds::EntityTypeSeq, &ifds::s_FldProp_EntityTypeSeq )
, AcctDesignation_( ifds::AcctDesignation, &ifds::s_FldProp_AcctDesignation )
, TaxType_( ifds::TaxType, &ifds::s_FldProp_TaxType )
, AcctType_( ifds::AcctType, &ifds::s_FldProp_AcctType )
, AcctStatus_( ifds::AcctStatus, &ifds::s_FldProp_AcctStatus )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, RegistrationInfo_( ifds::RegistrationInfo, &ifds::s_FldProp_RegistrationInfo )
, WhereUse_( ifds::WhereUse, &ifds::s_FldProp_WhereUse )
, WhereUseCode_( ifds::WhereUseCode, &ifds::s_FldProp_WhereUseCode )
, RecId_( ifds::RecId, &ifds::s_FldProp_RecId )
, Version_( ifds::Version, &ifds::s_FldProp_Version )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, EntityId_( ifds::EntityId, &ifds::s_FldProp_EntityId )
{
   cFields_ = 23;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0061_VWRepeat_Record::~dsi_DSTC0061_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0061_VWRepeat_Record::clone()
{
   dsi_DSTC0061_VWRepeat_Record* p = new dsi_DSTC0061_VWRepeat_Record;
   p->AccountNum_ = AccountNum_;
   p->EntityType_ = EntityType_;
   p->EntityTypeDesc_ = EntityTypeDesc_;
   p->ShrNum_ = ShrNum_;
   p->TaxTypeDesc_ = TaxTypeDesc_;
   p->AcctTypeDesc_ = AcctTypeDesc_;
   p->AcctStatusDesc_ = AcctStatusDesc_;
   p->CurrencyName_ = CurrencyName_;
   p->AccountBalance_ = AccountBalance_;
   p->EntityTypeSeq_ = EntityTypeSeq_;
   p->AcctDesignation_ = AcctDesignation_;
   p->TaxType_ = TaxType_;
   p->AcctType_ = AcctType_;
   p->AcctStatus_ = AcctStatus_;
   p->Currency_ = Currency_;
   p->RegistrationInfo_ = RegistrationInfo_;
   p->WhereUse_ = WhereUse_;
   p->WhereUseCode_ = WhereUseCode_;
   p->RecId_ = RecId_;
   p->Version_ = Version_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->EntityId_ = EntityId_;
   return(p);
}

BFDataField* dsi_DSTC0061_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40000604: return ( &EntityType_ ); break; // EntityType
      case 40000605: return ( &EntityTypeDesc_ ); break; // EntityTypeDesc
      case 40000114: return ( &ShrNum_ ); break; // ShrNum
      case 40000135: return ( &TaxTypeDesc_ ); break; // TaxTypeDesc
      case 40000175: return ( &AcctTypeDesc_ ); break; // AcctTypeDesc
      case 40000189: return ( &AcctStatusDesc_ ); break; // AcctStatusDesc
      case 40000181: return ( &CurrencyName_ ); break; // CurrencyName
      case 40000396: return ( &AccountBalance_ ); break; // AccountBalance
      case 40001103: return ( &EntityTypeSeq_ ); break; // EntityTypeSeq
      case 40000178: return ( &AcctDesignation_ ); break; // AcctDesignation
      case 40000134: return ( &TaxType_ ); break; // TaxType
      case 40000174: return ( &AcctType_ ); break; // AcctType
      case 40000188: return ( &AcctStatus_ ); break; // AcctStatus
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40004572: return ( &RegistrationInfo_ ); break; // RegistrationInfo
      case 40004727: return ( &WhereUse_ ); break; // WhereUse
      case 40004728: return ( &WhereUseCode_ ); break; // WhereUseCode
      case 40003737: return ( &RecId_ ); break; // RecId
      case 40003739: return ( &Version_ ); break; // Version
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40000033: return ( &EntityId_ ); break; // EntityId
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0061_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0061_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0061_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 23 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AccountNum_; break;
            case 1: aFlds_[1] = &EntityType_; break;
            case 2: aFlds_[2] = &EntityTypeDesc_; break;
            case 3: aFlds_[3] = &ShrNum_; break;
            case 4: aFlds_[4] = &TaxTypeDesc_; break;
            case 5: aFlds_[5] = &AcctTypeDesc_; break;
            case 6: aFlds_[6] = &AcctStatusDesc_; break;
            case 7: aFlds_[7] = &CurrencyName_; break;
            case 8: aFlds_[8] = &AccountBalance_; break;
            case 9: aFlds_[9] = &EntityTypeSeq_; break;
            case 10: aFlds_[10] = &AcctDesignation_; break;
            case 11: aFlds_[11] = &TaxType_; break;
            case 12: aFlds_[12] = &AcctType_; break;
            case 13: aFlds_[13] = &AcctStatus_; break;
            case 14: aFlds_[14] = &Currency_; break;
            case 15: aFlds_[15] = &RegistrationInfo_; break;
            case 16: aFlds_[16] = &WhereUse_; break;
            case 17: aFlds_[17] = &WhereUseCode_; break;
            case 18: aFlds_[18] = &RecId_; break;
            case 19: aFlds_[19] = &Version_; break;
            case 20: aFlds_[20] = &EffectiveDate_; break;
            case 21: aFlds_[21] = &StopDate_; break;
            case 22: aFlds_[22] = &EntityId_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0061_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0061_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0061_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0061_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 1031 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0061_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0061_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0061_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000040: return( true );
      case 40000604: return( true );
      case 40000605: return( true );
      case 40000114: return( true );
      case 40000135: return( true );
      case 40000175: return( true );
      case 40000189: return( true );
      case 40000181: return( true );
      case 40000396: return( true );
      case 40001103: return( true );
      case 40000178: return( true );
      case 40000134: return( true );
      case 40000174: return( true );
      case 40000188: return( true );
      case 40000180: return( true );
      case 40004572: return( true );
      case 40004727: return( true );
      case 40004728: return( true );
      case 40003737: return( true );
      case 40003739: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40000033: return( true );
   }
   return false;
}

