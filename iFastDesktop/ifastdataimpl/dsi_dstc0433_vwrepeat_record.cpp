// BFDataImpl implementation file for DataSet DSTC0433.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0433_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0433_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0433_VWRepeat_Record() { return new dsi_DSTC0433_VWRepeat_Record; }

dsi_DSTC0433_VWRepeat_Record::dsi_DSTC0433_VWRepeat_Record()
: BFDataImpl( 40006760 )
, RecType_( ifds::RecType, &ifds::s_FldProp_RecType )
, AcctCommitDetlUUID_( ifds::AcctCommitDetlUUID, &ifds::s_FldProp_AcctCommitDetlUUID )
, DetlDeff_( ifds::DetlDeff, &ifds::s_FldProp_DetlDeff )
, DetlAmt_( ifds::DetlAmt, &ifds::s_FldProp_DetlAmt )
, DetlStopDate_( ifds::DetlStopDate, &ifds::s_FldProp_DetlStopDate )
, DetlCommClawBack_( ifds::DetlCommClawBack, &ifds::s_FldProp_DetlCommClawBack )
, AcctCommitActivityUUID_( ifds::AcctCommitActivityUUID, &ifds::s_FldProp_AcctCommitActivityUUID )
, ActivityAmt_( ifds::ActivityAmt, &ifds::s_FldProp_ActivityAmt )
, ActivityDeff_( ifds::ActivityDeff, &ifds::s_FldProp_ActivityDeff )
, ActivityCommClawBack_( ifds::ActivityCommClawBack, &ifds::s_FldProp_ActivityCommClawBack )
, ExpectedAmt_( ifds::ExpectedAmt, &ifds::s_FldProp_ExpectedAmt )
, BonusPercentage_( ifds::BonusPercentage, &ifds::s_FldProp_BonusPercentage )
{
   cFields_ = 12;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0433_VWRepeat_Record::~dsi_DSTC0433_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0433_VWRepeat_Record::clone()
{
   dsi_DSTC0433_VWRepeat_Record* p = new dsi_DSTC0433_VWRepeat_Record;
   p->RecType_ = RecType_;
   p->AcctCommitDetlUUID_ = AcctCommitDetlUUID_;
   p->DetlDeff_ = DetlDeff_;
   p->DetlAmt_ = DetlAmt_;
   p->DetlStopDate_ = DetlStopDate_;
   p->DetlCommClawBack_ = DetlCommClawBack_;
   p->AcctCommitActivityUUID_ = AcctCommitActivityUUID_;
   p->ActivityAmt_ = ActivityAmt_;
   p->ActivityDeff_ = ActivityDeff_;
   p->ActivityCommClawBack_ = ActivityCommClawBack_;
   p->ExpectedAmt_ = ExpectedAmt_;
   p->BonusPercentage_ = BonusPercentage_;
   return(p);
}

BFDataField* dsi_DSTC0433_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000411: return ( &RecType_ ); break; // RecType
      case 40006761: return ( &AcctCommitDetlUUID_ ); break; // AcctCommitDetlUUID
      case 40006762: return ( &DetlDeff_ ); break; // DetlDeff
      case 40006763: return ( &DetlAmt_ ); break; // DetlAmt
      case 40006764: return ( &DetlStopDate_ ); break; // DetlStopDate
      case 40006765: return ( &DetlCommClawBack_ ); break; // DetlCommClawBack
      case 40006766: return ( &AcctCommitActivityUUID_ ); break; // AcctCommitActivityUUID
      case 40006767: return ( &ActivityAmt_ ); break; // ActivityAmt
      case 40006768: return ( &ActivityDeff_ ); break; // ActivityDeff
      case 40006769: return ( &ActivityCommClawBack_ ); break; // ActivityCommClawBack
      case 40006825: return ( &ExpectedAmt_ ); break; // ExpectedAmt
      case 40006826: return ( &BonusPercentage_ ); break; // BonusPercentage
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0433_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0433_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0433_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 12 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RecType_; break;
            case 1: aFlds_[1] = &AcctCommitDetlUUID_; break;
            case 2: aFlds_[2] = &DetlDeff_; break;
            case 3: aFlds_[3] = &DetlAmt_; break;
            case 4: aFlds_[4] = &DetlStopDate_; break;
            case 5: aFlds_[5] = &DetlCommClawBack_; break;
            case 6: aFlds_[6] = &AcctCommitActivityUUID_; break;
            case 7: aFlds_[7] = &ActivityAmt_; break;
            case 8: aFlds_[8] = &ActivityDeff_; break;
            case 9: aFlds_[9] = &ActivityCommClawBack_; break;
            case 10: aFlds_[10] = &ExpectedAmt_; break;
            case 11: aFlds_[11] = &BonusPercentage_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0433_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0433_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0433_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0433_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 370 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0433_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0433_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0433_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000411: return( true );
      case 40006761: return( true );
      case 40006762: return( true );
      case 40006763: return( true );
      case 40006764: return( true );
      case 40006765: return( true );
      case 40006766: return( true );
      case 40006767: return( true );
      case 40006768: return( true );
      case 40006769: return( true );
      case 40006825: return( true );
      case 40006826: return( true );
   }
   return false;
}

