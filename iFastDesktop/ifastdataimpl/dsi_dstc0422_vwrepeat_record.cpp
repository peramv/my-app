// BFDataImpl implementation file for DataSet DSTC0422.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0422_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0422_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0422_VWRepeat_Record() { return new dsi_DSTC0422_VWRepeat_Record; }

dsi_DSTC0422_VWRepeat_Record::dsi_DSTC0422_VWRepeat_Record()
: BFDataImpl( 40006456 )
, InvHisSegmentUUID_( ifds::InvHisSegmentUUID, &ifds::s_FldProp_InvHisSegmentUUID )
, InvHisSegment_( ifds::InvHisSegment, &ifds::s_FldProp_InvHisSegment )
, InvHisIntSegment_( ifds::InvHisIntSegment, &ifds::s_FldProp_InvHisIntSegment )
, InvHisCode_( ifds::InvHisCode, &ifds::s_FldProp_InvHisCode )
, InvHisRate_( ifds::InvHisRate, &ifds::s_FldProp_InvHisRate )
{
   cFields_ = 5;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0422_VWRepeat_Record::~dsi_DSTC0422_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0422_VWRepeat_Record::clone()
{
   dsi_DSTC0422_VWRepeat_Record* p = new dsi_DSTC0422_VWRepeat_Record;
   p->InvHisSegmentUUID_ = InvHisSegmentUUID_;
   p->InvHisSegment_ = InvHisSegment_;
   p->InvHisIntSegment_ = InvHisIntSegment_;
   p->InvHisCode_ = InvHisCode_;
   p->InvHisRate_ = InvHisRate_;
   return(p);
}

BFDataField* dsi_DSTC0422_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40006578: return ( &InvHisSegmentUUID_ ); break; // InvHisSegmentUUID
      case 40006580: return ( &InvHisSegment_ ); break; // InvHisSegment
      case 40006581: return ( &InvHisIntSegment_ ); break; // InvHisIntSegment
      case 40006582: return ( &InvHisCode_ ); break; // InvHisCode
      case 40006583: return ( &InvHisRate_ ); break; // InvHisRate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0422_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0422_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0422_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 5 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &InvHisSegmentUUID_; break;
            case 1: aFlds_[1] = &InvHisSegment_; break;
            case 2: aFlds_[2] = &InvHisIntSegment_; break;
            case 3: aFlds_[3] = &InvHisCode_; break;
            case 4: aFlds_[4] = &InvHisRate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0422_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0422_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0422_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 50 );
}

unsigned long dsi_DSTC0422_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 250 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0422_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0422_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0422_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40006578: return( true );
      case 40006580: return( true );
      case 40006581: return( true );
      case 40006582: return( true );
      case 40006583: return( true );
   }
   return false;
}

