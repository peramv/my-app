// BFDataImpl implementation file for DataSet DSTC0125.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0125_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0125_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0125_VWRepeat_Record() { return new dsi_DSTC0125_VWRepeat_Record; }

dsi_DSTC0125_VWRepeat_Record::dsi_DSTC0125_VWRepeat_Record()
: BFDataImpl( 40001463 )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, BusDayCode_( ifds::BusDayCode, &ifds::s_FldProp_BusDayCode )
, IncludeCode_( ifds::IncludeCode, &ifds::s_FldProp_IncludeCode )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, SundayIsBusDay_( ifds::SundayIsBusDay, &ifds::s_FldProp_SundayIsBusDay )
, MondayIsBusDay_( ifds::MondayIsBusDay, &ifds::s_FldProp_MondayIsBusDay )
, TuesdayIsBusDay_( ifds::TuesdayIsBusDay, &ifds::s_FldProp_TuesdayIsBusDay )
, WednesdayIsBusDay_( ifds::WednesdayIsBusDay, &ifds::s_FldProp_WednesdayIsBusDay )
, ThursdayIsBusDay_( ifds::ThursdayIsBusDay, &ifds::s_FldProp_ThursdayIsBusDay )
, FridayIsBusDay_( ifds::FridayIsBusDay, &ifds::s_FldProp_FridayIsBusDay )
, SaturdayIsBusDay_( ifds::SaturdayIsBusDay, &ifds::s_FldProp_SaturdayIsBusDay )
{
   cFields_ = 11;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0125_VWRepeat_Record::~dsi_DSTC0125_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0125_VWRepeat_Record::clone()
{
   dsi_DSTC0125_VWRepeat_Record* p = new dsi_DSTC0125_VWRepeat_Record;
   p->EffectiveDate_ = EffectiveDate_;
   p->BusDayCode_ = BusDayCode_;
   p->IncludeCode_ = IncludeCode_;
   p->StopDate_ = StopDate_;
   p->SundayIsBusDay_ = SundayIsBusDay_;
   p->MondayIsBusDay_ = MondayIsBusDay_;
   p->TuesdayIsBusDay_ = TuesdayIsBusDay_;
   p->WednesdayIsBusDay_ = WednesdayIsBusDay_;
   p->ThursdayIsBusDay_ = ThursdayIsBusDay_;
   p->FridayIsBusDay_ = FridayIsBusDay_;
   p->SaturdayIsBusDay_ = SaturdayIsBusDay_;
   return(p);
}

BFDataField* dsi_DSTC0125_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40001464: return ( &BusDayCode_ ); break; // BusDayCode
      case 40001465: return ( &IncludeCode_ ); break; // IncludeCode
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40001466: return ( &SundayIsBusDay_ ); break; // SundayIsBusDay
      case 40001467: return ( &MondayIsBusDay_ ); break; // MondayIsBusDay
      case 40001468: return ( &TuesdayIsBusDay_ ); break; // TuesdayIsBusDay
      case 40001469: return ( &WednesdayIsBusDay_ ); break; // WednesdayIsBusDay
      case 40001470: return ( &ThursdayIsBusDay_ ); break; // ThursdayIsBusDay
      case 40001471: return ( &FridayIsBusDay_ ); break; // FridayIsBusDay
      case 40001472: return ( &SaturdayIsBusDay_ ); break; // SaturdayIsBusDay
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0125_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0125_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0125_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 11 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &EffectiveDate_; break;
            case 1: aFlds_[1] = &BusDayCode_; break;
            case 2: aFlds_[2] = &IncludeCode_; break;
            case 3: aFlds_[3] = &StopDate_; break;
            case 4: aFlds_[4] = &SundayIsBusDay_; break;
            case 5: aFlds_[5] = &MondayIsBusDay_; break;
            case 6: aFlds_[6] = &TuesdayIsBusDay_; break;
            case 7: aFlds_[7] = &WednesdayIsBusDay_; break;
            case 8: aFlds_[8] = &ThursdayIsBusDay_; break;
            case 9: aFlds_[9] = &FridayIsBusDay_; break;
            case 10: aFlds_[10] = &SaturdayIsBusDay_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0125_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0125_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0125_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0125_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 147 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0125_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0125_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0125_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000327: return( true );
      case 40001464: return( true );
      case 40001465: return( true );
      case 40000279: return( true );
      case 40001466: return( true );
      case 40001467: return( true );
      case 40001468: return( true );
      case 40001469: return( true );
      case 40001470: return( true );
      case 40001471: return( true );
      case 40001472: return( true );
   }
   return false;
}

