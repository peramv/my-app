// BFDataImpl implementation file for DataSet DSTC0323.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0323_req.h"


// This function creates an instance of dsi_DSTC0323_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0323_REQ() { return new dsi_DSTC0323_REQ; }

dsi_DSTC0323_REQ::dsi_DSTC0323_REQ()
: BFDataImpl( 40004782 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, OverrideRepeats_( ifds::OverrideRepeats, &ifds::s_FldProp_OverrideRepeats )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, rxOrdStatus_( ifds::rxOrdStatus, &ifds::s_FldProp_rxOrdStatus )
, FundBroker_( ifds::FundBroker, &ifds::s_FldProp_FundBroker )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, OmnibusID_( ifds::OmnibusID, &ifds::s_FldProp_OmnibusID )
, RoutingRef_( ifds::RoutingRef, &ifds::s_FldProp_RoutingRef )
, FromDate_( ifds::FromDate, &ifds::s_FldProp_FromDate )
, ToDate_( ifds::ToDate, &ifds::s_FldProp_ToDate )
, SearchType_( ifds::SearchType, &ifds::s_FldProp_SearchType )
, FundBrkKVNum_( ifds::FundBrkKVNum, &ifds::s_FldProp_FundBrkKVNum )
, FundIDType_( ifds::FundIDType, &ifds::s_FldProp_FundIDType )
, FundIDValue_( ifds::FundIDValue, &ifds::s_FldProp_FundIDValue )
, AmountType_( ifds::AmountType, &ifds::s_FldProp_AmountType )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
{
   cFields_ = 22;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0323_REQ::~dsi_DSTC0323_REQ()
{
}

BFDataImpl* dsi_DSTC0323_REQ::clone()
{
   dsi_DSTC0323_REQ* p = new dsi_DSTC0323_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->OverrideRepeats_ = OverrideRepeats_;
   p->NextKey_ = NextKey_;
   p->rxOrdStatus_ = rxOrdStatus_;
   p->FundBroker_ = FundBroker_;
   p->FundCode_ = FundCode_;
   p->OmnibusID_ = OmnibusID_;
   p->RoutingRef_ = RoutingRef_;
   p->FromDate_ = FromDate_;
   p->ToDate_ = ToDate_;
   p->SearchType_ = SearchType_;
   p->FundBrkKVNum_ = FundBrkKVNum_;
   p->FundIDType_ = FundIDType_;
   p->FundIDValue_ = FundIDValue_;
   p->AmountType_ = AmountType_;
   p->Amount_ = Amount_;
   p->TransType_ = TransType_;
   return(p);
}

BFDataField* dsi_DSTC0323_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40002139: return ( &OverrideRepeats_ ); break; // OverrideRepeats
      case 40000029: return ( &NextKey_ ); break; // NextKey
      case 40004820: return ( &rxOrdStatus_ ); break; // rxOrdStatus
      case 40004772: return ( &FundBroker_ ); break; // FundBroker
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40004780: return ( &OmnibusID_ ); break; // OmnibusID
      case 40004836: return ( &RoutingRef_ ); break; // RoutingRef
      case 40000067: return ( &FromDate_ ); break; // FromDate
      case 40000068: return ( &ToDate_ ); break; // ToDate
      case 40002438: return ( &SearchType_ ); break; // SearchType
      case 40004968: return ( &FundBrkKVNum_ ); break; // FundBrkKVNum
      case 40004966: return ( &FundIDType_ ); break; // FundIDType
      case 40004967: return ( &FundIDValue_ ); break; // FundIDValue
      case 40000232: return ( &AmountType_ ); break; // AmountType
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40000095: return ( &TransType_ ); break; // TransType
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0323_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0323_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0323_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 22 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &OverrideRepeats_; break;
            case 7: aFlds_[7] = &NextKey_; break;
            case 8: aFlds_[8] = &rxOrdStatus_; break;
            case 9: aFlds_[9] = &FundBroker_; break;
            case 10: aFlds_[10] = &FundCode_; break;
            case 11: aFlds_[11] = &OmnibusID_; break;
            case 12: aFlds_[12] = &RoutingRef_; break;
            case 13: aFlds_[13] = &FromDate_; break;
            case 14: aFlds_[14] = &ToDate_; break;
            case 15: aFlds_[15] = &SearchType_; break;
            case 16: aFlds_[16] = &FundBrkKVNum_; break;
            case 17: aFlds_[17] = &FundIDType_; break;
            case 18: aFlds_[18] = &FundIDValue_; break;
            case 19: aFlds_[19] = &AmountType_; break;
            case 20: aFlds_[20] = &Amount_; break;
            case 21: aFlds_[21] = &TransType_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0323_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0323_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0323_REQ::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0323_REQ::getDefinedByteLength( void ) const
{
   return( 1171 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0323_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0323_REQ::fieldExists( id );
}

bool dsi_DSTC0323_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40002139: return( true );
      case 40000029: return( true );
      case 40004820: return( true );
      case 40004772: return( true );
      case 40000049: return( true );
      case 40004780: return( true );
      case 40004836: return( true );
      case 40000067: return( true );
      case 40000068: return( true );
      case 40002438: return( true );
      case 40004968: return( true );
      case 40004966: return( true );
      case 40004967: return( true );
      case 40000232: return( true );
      case 40000231: return( true );
      case 40000095: return( true );
   }
   return false;
}

