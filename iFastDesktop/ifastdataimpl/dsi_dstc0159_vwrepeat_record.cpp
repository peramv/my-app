// BFDataImpl implementation file for DataSet DSTC0159.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0159_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0159_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0159_VWRepeat_Record() { return new dsi_DSTC0159_VWRepeat_Record; }

dsi_DSTC0159_VWRepeat_Record::dsi_DSTC0159_VWRepeat_Record()
: BFDataImpl( 40002439 )
, RxPlanCode_( ifds::RxPlanCode, &ifds::s_FldProp_RxPlanCode )
, PlanCodeDesc_( ifds::PlanCodeDesc, &ifds::s_FldProp_PlanCodeDesc )
, AnnualFeeAmt_( ifds::AnnualFeeAmt, &ifds::s_FldProp_AnnualFeeAmt )
, VUBFeeType_( ifds::VUBFeeType, &ifds::s_FldProp_VUBFeeType )
, VUBFeeFrac1_( ifds::VUBFeeFrac1, &ifds::s_FldProp_VUBFeeFrac1 )
, VUBFeeFrac2_( ifds::VUBFeeFrac2, &ifds::s_FldProp_VUBFeeFrac2 )
, VUBFeeRate_( ifds::VUBFeeRate, &ifds::s_FldProp_VUBFeeRate )
, IndexAmt_( ifds::IndexAmt, &ifds::s_FldProp_IndexAmt )
, IndexType_( ifds::IndexType, &ifds::s_FldProp_IndexType )
, IndexFrequency_( ifds::IndexFrequency, &ifds::s_FldProp_IndexFrequency )
{
   cFields_ = 10;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0159_VWRepeat_Record::~dsi_DSTC0159_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0159_VWRepeat_Record::clone()
{
   dsi_DSTC0159_VWRepeat_Record* p = new dsi_DSTC0159_VWRepeat_Record;
   p->RxPlanCode_ = RxPlanCode_;
   p->PlanCodeDesc_ = PlanCodeDesc_;
   p->AnnualFeeAmt_ = AnnualFeeAmt_;
   p->VUBFeeType_ = VUBFeeType_;
   p->VUBFeeFrac1_ = VUBFeeFrac1_;
   p->VUBFeeFrac2_ = VUBFeeFrac2_;
   p->VUBFeeRate_ = VUBFeeRate_;
   p->IndexAmt_ = IndexAmt_;
   p->IndexType_ = IndexType_;
   p->IndexFrequency_ = IndexFrequency_;
   return(p);
}

BFDataField* dsi_DSTC0159_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40002554: return ( &RxPlanCode_ ); break; // RxPlanCode
      case 40002555: return ( &PlanCodeDesc_ ); break; // PlanCodeDesc
      case 40002535: return ( &AnnualFeeAmt_ ); break; // AnnualFeeAmt
      case 40002537: return ( &VUBFeeType_ ); break; // VUBFeeType
      case 40002556: return ( &VUBFeeFrac1_ ); break; // VUBFeeFrac1
      case 40002557: return ( &VUBFeeFrac2_ ); break; // VUBFeeFrac2
      case 40002558: return ( &VUBFeeRate_ ); break; // VUBFeeRate
      case 40002517: return ( &IndexAmt_ ); break; // IndexAmt
      case 40002518: return ( &IndexType_ ); break; // IndexType
      case 40002519: return ( &IndexFrequency_ ); break; // IndexFrequency
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0159_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0159_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0159_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 10 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RxPlanCode_; break;
            case 1: aFlds_[1] = &PlanCodeDesc_; break;
            case 2: aFlds_[2] = &AnnualFeeAmt_; break;
            case 3: aFlds_[3] = &VUBFeeType_; break;
            case 4: aFlds_[4] = &VUBFeeFrac1_; break;
            case 5: aFlds_[5] = &VUBFeeFrac2_; break;
            case 6: aFlds_[6] = &VUBFeeRate_; break;
            case 7: aFlds_[7] = &IndexAmt_; break;
            case 8: aFlds_[8] = &IndexType_; break;
            case 9: aFlds_[9] = &IndexFrequency_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0159_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0159_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0159_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0159_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 173 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0159_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0159_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0159_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40002554: return( true );
      case 40002555: return( true );
      case 40002535: return( true );
      case 40002537: return( true );
      case 40002556: return( true );
      case 40002557: return( true );
      case 40002558: return( true );
      case 40002517: return( true );
      case 40002518: return( true );
      case 40002519: return( true );
   }
   return false;
}

