// BFDataImpl implementation file for DataSet DSTC0421.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0421_req.h"


// This function creates an instance of dsi_DSTC0421_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0421_REQ() { return new dsi_DSTC0421_REQ; }

dsi_DSTC0421_REQ::dsi_DSTC0421_REQ()
: BFDataImpl( 40006451 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, InputAcctNum_( ifds::InputAcctNum, &ifds::s_FldProp_InputAcctNum )
, InvestmentHistorySearch_( ifds::InvestmentHistorySearch, &ifds::s_FldProp_InvestmentHistorySearch )
, InvestmentHistoryFund_( ifds::InvestmentHistoryFund, &ifds::s_FldProp_InvestmentHistoryFund )
, InvestmentHistoryClass_( ifds::InvestmentHistoryClass, &ifds::s_FldProp_InvestmentHistoryClass )
, InvestmentHistoryNumber_( ifds::InvestmentHistoryNumber, &ifds::s_FldProp_InvestmentHistoryNumber )
, InvestmentHistoryStatus_( ifds::InvestmentHistoryStatus, &ifds::s_FldProp_InvestmentHistoryStatus )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, GrossNet_( ifds::GrossNet, &ifds::s_FldProp_GrossNet )
, RedemOrder_( ifds::RedemOrder, &ifds::s_FldProp_RedemOrder )
, SelInvAmtType_( ifds::SelInvAmtType, &ifds::s_FldProp_SelInvAmtType )
, SelInvAmount_( ifds::SelInvAmount, &ifds::s_FldProp_SelInvAmount )
, SuppressMVA_( ifds::SuppressMVA, &ifds::s_FldProp_SuppressMVA )
, SuppressAdmin_( ifds::SuppressAdmin, &ifds::s_FldProp_SuppressAdmin )
, InvHisInvestId_( ifds::InvHisInvestId, &ifds::s_FldProp_InvHisInvestId )
, InvSummId_( ifds::InvSummId, &ifds::s_FldProp_InvSummId )
, TradeAmount_( ifds::TradeAmount, &ifds::s_FldProp_TradeAmount )
{
   cFields_ = 24;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0421_REQ::~dsi_DSTC0421_REQ()
{
}

BFDataImpl* dsi_DSTC0421_REQ::clone()
{
   dsi_DSTC0421_REQ* p = new dsi_DSTC0421_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->NextKey_ = NextKey_;
   p->InputAcctNum_ = InputAcctNum_;
   p->InvestmentHistorySearch_ = InvestmentHistorySearch_;
   p->InvestmentHistoryFund_ = InvestmentHistoryFund_;
   p->InvestmentHistoryClass_ = InvestmentHistoryClass_;
   p->InvestmentHistoryNumber_ = InvestmentHistoryNumber_;
   p->InvestmentHistoryStatus_ = InvestmentHistoryStatus_;
   p->TransId_ = TransId_;
   p->EffectiveDate_ = EffectiveDate_;
   p->GrossNet_ = GrossNet_;
   p->RedemOrder_ = RedemOrder_;
   p->SelInvAmtType_ = SelInvAmtType_;
   p->SelInvAmount_ = SelInvAmount_;
   p->SuppressMVA_ = SuppressMVA_;
   p->SuppressAdmin_ = SuppressAdmin_;
   p->InvHisInvestId_ = InvHisInvestId_;
   p->InvSummId_ = InvSummId_;
   p->TradeAmount_ = TradeAmount_;
   return(p);
}

BFDataField* dsi_DSTC0421_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40000029: return ( &NextKey_ ); break; // NextKey
      case 40000034: return ( &InputAcctNum_ ); break; // InputAcctNum
      case 40006444: return ( &InvestmentHistorySearch_ ); break; // InvestmentHistorySearch
      case 40006446: return ( &InvestmentHistoryFund_ ); break; // InvestmentHistoryFund
      case 40006447: return ( &InvestmentHistoryClass_ ); break; // InvestmentHistoryClass
      case 40006448: return ( &InvestmentHistoryNumber_ ); break; // InvestmentHistoryNumber
      case 40006445: return ( &InvestmentHistoryStatus_ ); break; // InvestmentHistoryStatus
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40002214: return ( &GrossNet_ ); break; // GrossNet
      case 40006712: return ( &RedemOrder_ ); break; // RedemOrder
      case 40006714: return ( &SelInvAmtType_ ); break; // SelInvAmtType
      case 40006718: return ( &SelInvAmount_ ); break; // SelInvAmount
      case 40006719: return ( &SuppressMVA_ ); break; // SuppressMVA
      case 40006720: return ( &SuppressAdmin_ ); break; // SuppressAdmin
      case 40006534: return ( &InvHisInvestId_ ); break; // InvHisInvestId
      case 40004394: return ( &InvSummId_ ); break; // InvSummId
      case 40002440: return ( &TradeAmount_ ); break; // TradeAmount
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0421_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0421_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0421_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 24 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &NextKey_; break;
            case 7: aFlds_[7] = &InputAcctNum_; break;
            case 8: aFlds_[8] = &InvestmentHistorySearch_; break;
            case 9: aFlds_[9] = &InvestmentHistoryFund_; break;
            case 10: aFlds_[10] = &InvestmentHistoryClass_; break;
            case 11: aFlds_[11] = &InvestmentHistoryNumber_; break;
            case 12: aFlds_[12] = &InvestmentHistoryStatus_; break;
            case 13: aFlds_[13] = &TransId_; break;
            case 14: aFlds_[14] = &EffectiveDate_; break;
            case 15: aFlds_[15] = &GrossNet_; break;
            case 16: aFlds_[16] = &RedemOrder_; break;
            case 17: aFlds_[17] = &SelInvAmtType_; break;
            case 18: aFlds_[18] = &SelInvAmount_; break;
            case 19: aFlds_[19] = &SuppressMVA_; break;
            case 20: aFlds_[20] = &SuppressAdmin_; break;
            case 21: aFlds_[21] = &InvHisInvestId_; break;
            case 22: aFlds_[22] = &InvSummId_; break;
            case 23: aFlds_[23] = &TradeAmount_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0421_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0421_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0421_REQ::getLargestDefinedField( void ) const
{
   return( 100 );
}

unsigned long dsi_DSTC0421_REQ::getDefinedByteLength( void ) const
{
   return( 791 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0421_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0421_REQ::fieldExists( id );
}

bool dsi_DSTC0421_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40000029: return( true );
      case 40000034: return( true );
      case 40006444: return( true );
      case 40006446: return( true );
      case 40006447: return( true );
      case 40006448: return( true );
      case 40006445: return( true );
      case 40000063: return( true );
      case 40000327: return( true );
      case 40002214: return( true );
      case 40006712: return( true );
      case 40006714: return( true );
      case 40006718: return( true );
      case 40006719: return( true );
      case 40006720: return( true );
      case 40006534: return( true );
      case 40004394: return( true );
      case 40002440: return( true );
   }
   return false;
}

