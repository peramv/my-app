// BFDataImpl implementation file for DataSet DSTC0062.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0062_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0062_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0062_VWRepeat_Record() { return new dsi_DSTC0062_VWRepeat_Record; }

dsi_DSTC0062_VWRepeat_Record::dsi_DSTC0062_VWRepeat_Record()
: BFDataImpl( 40000737 )
, RecType_( ifds::RecType, &ifds::s_FldProp_RecType )
, rxFundCode_( ifds::rxFundCode, &ifds::s_FldProp_rxFundCode )
, rxClassCode_( ifds::rxClassCode, &ifds::s_FldProp_rxClassCode )
, AsofDate_( ifds::AsofDate, &ifds::s_FldProp_AsofDate )
, EligibleUnits_( ifds::EligibleUnits, &ifds::s_FldProp_EligibleUnits )
, IntRate_( ifds::IntRate, &ifds::s_FldProp_IntRate )
, IntValue_( ifds::IntValue, &ifds::s_FldProp_IntValue )
, IntPaid_( ifds::IntPaid, &ifds::s_FldProp_IntPaid )
, AccumTotal_( ifds::AccumTotal, &ifds::s_FldProp_AccumTotal )
, MktValue_( ifds::MktValue, &ifds::s_FldProp_MktValue )
{
   cFields_ = 10;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0062_VWRepeat_Record::~dsi_DSTC0062_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0062_VWRepeat_Record::clone()
{
   dsi_DSTC0062_VWRepeat_Record* p = new dsi_DSTC0062_VWRepeat_Record;
   p->RecType_ = RecType_;
   p->rxFundCode_ = rxFundCode_;
   p->rxClassCode_ = rxClassCode_;
   p->AsofDate_ = AsofDate_;
   p->EligibleUnits_ = EligibleUnits_;
   p->IntRate_ = IntRate_;
   p->IntValue_ = IntValue_;
   p->IntPaid_ = IntPaid_;
   p->AccumTotal_ = AccumTotal_;
   p->MktValue_ = MktValue_;
   return(p);
}

BFDataField* dsi_DSTC0062_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000411: return ( &RecType_ ); break; // RecType
      case 40000286: return ( &rxFundCode_ ); break; // rxFundCode
      case 40000287: return ( &rxClassCode_ ); break; // rxClassCode
      case 40000061: return ( &AsofDate_ ); break; // AsofDate
      case 40000390: return ( &EligibleUnits_ ); break; // EligibleUnits
      case 40000741: return ( &IntRate_ ); break; // IntRate
      case 40000742: return ( &IntValue_ ); break; // IntValue
      case 40000743: return ( &IntPaid_ ); break; // IntPaid
      case 40000744: return ( &AccumTotal_ ); break; // AccumTotal
      case 40003682: return ( &MktValue_ ); break; // MktValue
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0062_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0062_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0062_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 10 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RecType_; break;
            case 1: aFlds_[1] = &rxFundCode_; break;
            case 2: aFlds_[2] = &rxClassCode_; break;
            case 3: aFlds_[3] = &AsofDate_; break;
            case 4: aFlds_[4] = &EligibleUnits_; break;
            case 5: aFlds_[5] = &IntRate_; break;
            case 6: aFlds_[6] = &IntValue_; break;
            case 7: aFlds_[7] = &IntPaid_; break;
            case 8: aFlds_[8] = &AccumTotal_; break;
            case 9: aFlds_[9] = &MktValue_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0062_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0062_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0062_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0062_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 335 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0062_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0062_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0062_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000411: return( true );
      case 40000286: return( true );
      case 40000287: return( true );
      case 40000061: return( true );
      case 40000390: return( true );
      case 40000741: return( true );
      case 40000742: return( true );
      case 40000743: return( true );
      case 40000744: return( true );
      case 40003682: return( true );
   }
   return false;
}

