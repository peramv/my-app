// BFDataImpl implementation file for DataSet DSTCFUNDCLASS.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstcfundclass_vw.h"


// This function creates an instance of dsi_DSTCFUNDCLASS_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTCFUNDCLASS_VW() { return new dsi_DSTCFUNDCLASS_VW; }

dsi_DSTCFUNDCLASS_VW::dsi_DSTCFUNDCLASS_VW()
: BFDataImpl( 40001796 )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, Baycom_( ifds::Baycom, &ifds::s_FldProp_Baycom )
, ElongName1_( ifds::ElongName1, &ifds::s_FldProp_ElongName1 )
, FLongName_( ifds::FLongName, &ifds::s_FldProp_FLongName )
{
   cFields_ = 5;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTCFUNDCLASS_VW::~dsi_DSTCFUNDCLASS_VW()
{
}

BFDataImpl* dsi_DSTCFUNDCLASS_VW::clone()
{
   dsi_DSTCFUNDCLASS_VW* p = new dsi_DSTCFUNDCLASS_VW;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->Baycom_ = Baycom_;
   p->ElongName1_ = ElongName1_;
   p->FLongName_ = FLongName_;
   return(p);
}

BFDataField* dsi_DSTCFUNDCLASS_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000958: return ( &Baycom_ ); break; // Baycom
      case 40000747: return ( &ElongName1_ ); break; // ElongName1
      case 40000750: return ( &FLongName_ ); break; // FLongName
   }
   return( NULL );
}

const BFDataField* dsi_DSTCFUNDCLASS_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTCFUNDCLASS_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTCFUNDCLASS_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 5 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FundCode_; break;
            case 1: aFlds_[1] = &ClassCode_; break;
            case 2: aFlds_[2] = &Baycom_; break;
            case 3: aFlds_[3] = &ElongName1_; break;
            case 4: aFlds_[4] = &FLongName_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTCFUNDCLASS_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTCFUNDCLASS_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTCFUNDCLASS_VW::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTCFUNDCLASS_VW::getDefinedByteLength( void ) const
{
   return( 500 * sizeof( I_CHAR ) );
}

bool dsi_DSTCFUNDCLASS_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTCFUNDCLASS_VW::fieldExists( id );
}

bool dsi_DSTCFUNDCLASS_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000958: return( true );
      case 40000747: return( true );
      case 40000750: return( true );
   }
   return false;
}

