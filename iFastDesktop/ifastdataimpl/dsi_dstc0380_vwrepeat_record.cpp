// BFDataImpl implementation file for DataSet DSTC0380.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Monday, March 05, 2018 23:19:36


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0380_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0380_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0380_VWRepeat_Record() { return new dsi_DSTC0380_VWRepeat_Record; }

dsi_DSTC0380_VWRepeat_Record::dsi_DSTC0380_VWRepeat_Record()
: BFDataImpl( 40005603 )
, AMSCode_( ifds::AMSCode, &ifds::s_FldProp_AMSCode )
, AMSType_( ifds::AMSType, &ifds::s_FldProp_AMSType )
, Deff_( ifds::Deff, &ifds::s_FldProp_Deff )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, NextProcessDate_( ifds::NextProcessDate, &ifds::s_FldProp_NextProcessDate )
, LastProcessDate_( ifds::LastProcessDate, &ifds::s_FldProp_LastProcessDate )
, FreqOverride_( ifds::FreqOverride, &ifds::s_FldProp_FreqOverride )
, SchedSetupFreqID_( ifds::SchedSetupFreqID, &ifds::s_FldProp_SchedSetupFreqID )
, AMSStat_( ifds::AMSStat, &ifds::s_FldProp_AMSStat )
, ActivationDate_( ifds::ActivationDate, &ifds::s_FldProp_ActivationDate )
, AcctAMSRID_( ifds::AcctAMSRID, &ifds::s_FldProp_AcctAMSRID )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, ThresholdPrcnt_( ifds::ThresholdPrcnt, &ifds::s_FldProp_ThresholdPrcnt )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, ActualRebalanceDate_( ifds::ActualRebalanceDate, &ifds::s_FldProp_ActualRebalanceDate )
, Rebalance_( ifds::Rebalance, &ifds::s_FldProp_Rebalance )
, RestrictUpdateStat_( ifds::RestrictUpdateStat, &ifds::s_FldProp_RestrictUpdateStat )
, TargetMixOption_( ifds::TargetMixOption, &ifds::s_FldProp_TargetMixOption )
, AMSDeltaRequestUUID_( ifds::AMSDeltaRequestUUID, &ifds::s_FldProp_AMSDeltaRequestUUID )
, LastAMSModDate_( ifds::LastAMSModDate, &ifds::s_FldProp_LastAMSModDate )
{
    cFields_ = 23;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0380_VWRepeat_Record::~dsi_DSTC0380_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0380_VWRepeat_Record::clone()
{
    dsi_DSTC0380_VWRepeat_Record* p = new dsi_DSTC0380_VWRepeat_Record;
    p->AMSCode_ = AMSCode_;
    p->AMSType_ = AMSType_;
    p->Deff_ = Deff_;
    p->StopDate_ = StopDate_;
    p->NextProcessDate_ = NextProcessDate_;
    p->LastProcessDate_ = LastProcessDate_;
    p->FreqOverride_ = FreqOverride_;
    p->SchedSetupFreqID_ = SchedSetupFreqID_;
    p->AMSStat_ = AMSStat_;
    p->ActivationDate_ = ActivationDate_;
    p->AcctAMSRID_ = AcctAMSRID_;
    p->ProcessDate_ = ProcessDate_;
    p->Username_ = Username_;
    p->ModDate_ = ModDate_;
    p->ModUser_ = ModUser_;
    p->ThresholdPrcnt_ = ThresholdPrcnt_;
    p->Currency_ = Currency_;
    p->ActualRebalanceDate_ = ActualRebalanceDate_;
    p->Rebalance_ = Rebalance_;
    p->RestrictUpdateStat_ = RestrictUpdateStat_;
    p->TargetMixOption_ = TargetMixOption_;
    p->AMSDeltaRequestUUID_ = AMSDeltaRequestUUID_;
    p->LastAMSModDate_ = LastAMSModDate_;
    return(p);
}

BFDataField* dsi_DSTC0380_VWRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000193: return ( &AMSCode_ ); break; // AMSCode
        case 40003518: return ( &AMSType_ ); break; // AMSType
        case 40000215: return ( &Deff_ ); break; // Deff
        case 40000279: return ( &StopDate_ ); break; // StopDate
        case 40002445: return ( &NextProcessDate_ ); break; // NextProcessDate
        case 40000276: return ( &LastProcessDate_ ); break; // LastProcessDate
        case 40005604: return ( &FreqOverride_ ); break; // FreqOverride
        case 40005605: return ( &SchedSetupFreqID_ ); break; // SchedSetupFreqID
        case 40005606: return ( &AMSStat_ ); break; // AMSStat
        case 40005607: return ( &ActivationDate_ ); break; // ActivationDate
        case 40005608: return ( &AcctAMSRID_ ); break; // AcctAMSRID
        case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
        case 40000117: return ( &Username_ ); break; // Username
        case 40000217: return ( &ModDate_ ); break; // ModDate
        case 40000218: return ( &ModUser_ ); break; // ModUser
        case 40005611: return ( &ThresholdPrcnt_ ); break; // ThresholdPrcnt
        case 40000180: return ( &Currency_ ); break; // Currency
        case 40007531: return ( &ActualRebalanceDate_ ); break; // ActualRebalanceDate
        case 40003547: return ( &Rebalance_ ); break; // Rebalance
        case 40007627: return ( &RestrictUpdateStat_ ); break; // RestrictUpdateStat
        case 40007774: return ( &TargetMixOption_ ); break; // TargetMixOption
        case 40007849: return ( &AMSDeltaRequestUUID_ ); break; // AMSDeltaRequestUUID
        case 40007866: return ( &LastAMSModDate_ ); break; // LastAMSModDate
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0380_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0380_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0380_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 23 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &AMSCode_; break;
                case 1: aFlds_[1] = &AMSType_; break;
                case 2: aFlds_[2] = &Deff_; break;
                case 3: aFlds_[3] = &StopDate_; break;
                case 4: aFlds_[4] = &NextProcessDate_; break;
                case 5: aFlds_[5] = &LastProcessDate_; break;
                case 6: aFlds_[6] = &FreqOverride_; break;
                case 7: aFlds_[7] = &SchedSetupFreqID_; break;
                case 8: aFlds_[8] = &AMSStat_; break;
                case 9: aFlds_[9] = &ActivationDate_; break;
                case 10: aFlds_[10] = &AcctAMSRID_; break;
                case 11: aFlds_[11] = &ProcessDate_; break;
                case 12: aFlds_[12] = &Username_; break;
                case 13: aFlds_[13] = &ModDate_; break;
                case 14: aFlds_[14] = &ModUser_; break;
                case 15: aFlds_[15] = &ThresholdPrcnt_; break;
                case 16: aFlds_[16] = &Currency_; break;
                case 17: aFlds_[17] = &ActualRebalanceDate_; break;
                case 18: aFlds_[18] = &Rebalance_; break;
                case 19: aFlds_[19] = &RestrictUpdateStat_; break;
                case 20: aFlds_[20] = &TargetMixOption_; break;
                case 21: aFlds_[21] = &AMSDeltaRequestUUID_; break;
                case 22: aFlds_[22] = &LastAMSModDate_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0380_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0380_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0380_VWRepeat_Record::getLargestDefinedField( void ) const
{
    return( 200 );
}

unsigned long dsi_DSTC0380_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 610 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0380_VWRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0380_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0380_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000193: return ( true );
        case 40003518: return ( true );
        case 40000215: return ( true );
        case 40000279: return ( true );
        case 40002445: return ( true );
        case 40000276: return ( true );
        case 40005604: return ( true );
        case 40005605: return ( true );
        case 40005606: return ( true );
        case 40005607: return ( true );
        case 40005608: return ( true );
        case 40000216: return ( true );
        case 40000117: return ( true );
        case 40000217: return ( true );
        case 40000218: return ( true );
        case 40005611: return ( true );
        case 40000180: return ( true );
        case 40007531: return ( true );
        case 40003547: return ( true );
        case 40007627: return ( true );
        case 40007774: return ( true );
        case 40007849: return ( true );
        case 40007866: return ( true );
    }
    return false;
}

