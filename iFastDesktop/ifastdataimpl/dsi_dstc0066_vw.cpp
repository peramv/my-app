// BFDataImpl implementation file for DataSet DSTC0066.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0066_vw.h"


// This function creates an instance of dsi_DSTC0066_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0066_VW() { return new dsi_DSTC0066_VW; }

dsi_DSTC0066_VW::dsi_DSTC0066_VW()
: BFDataImpl( 40000765, 40000785 )
, MoreAvailable_( ifds::MoreAvailable, &ifds::s_FldProp_MoreAvailable )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, TerminateDate_( ifds::TerminateDate, &ifds::s_FldProp_TerminateDate )
, MaturityDate_( ifds::MaturityDate, &ifds::s_FldProp_MaturityDate )
, ToDateContr_( ifds::ToDateContr, &ifds::s_FldProp_ToDateContr )
, PlanNum_( ifds::PlanNum, &ifds::s_FldProp_PlanNum )
, GrantRepayable_( ifds::GrantRepayable, &ifds::s_FldProp_GrantRepayable )
, CESGEligible_( ifds::CESGEligible, &ifds::s_FldProp_CESGEligible )
, TDRedEarning_( ifds::TDRedEarning, &ifds::s_FldProp_TDRedEarning )
, GFathered_( ifds::GFathered, &ifds::s_FldProp_GFathered )
, CurrEarning_( ifds::CurrEarning, &ifds::s_FldProp_CurrEarning )
, RESPStatus_( ifds::RESPStatus, &ifds::s_FldProp_RESPStatus )
, RESPStatDesc_( ifds::RESPStatDesc, &ifds::s_FldProp_RESPStatDesc )
, RedLifeContr_( ifds::RedLifeContr, &ifds::s_FldProp_RedLifeContr )
, RedUCAmt_( ifds::RedUCAmt, &ifds::s_FldProp_RedUCAmt )
, RedACAmt_( ifds::RedACAmt, &ifds::s_FldProp_RedACAmt )
, RedNetGrant_( ifds::RedNetGrant, &ifds::s_FldProp_RedNetGrant )
, AcctLifeContr_( ifds::AcctLifeContr, &ifds::s_FldProp_AcctLifeContr )
, AcctUCAmt_( ifds::AcctUCAmt, &ifds::s_FldProp_AcctUCAmt )
, AcctACAmt_( ifds::AcctACAmt, &ifds::s_FldProp_AcctACAmt )
, AcctNetGrant_( ifds::AcctNetGrant, &ifds::s_FldProp_AcctNetGrant )
, AcctEAP_( ifds::AcctEAP, &ifds::s_FldProp_AcctEAP )
, RESPClassify_( ifds::RESPClassify, &ifds::s_FldProp_RESPClassify )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
   cFields_ = 24;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0066_VW::~dsi_DSTC0066_VW()
{
}

BFDataImpl* dsi_DSTC0066_VW::clone()
{
   dsi_DSTC0066_VW* p = new dsi_DSTC0066_VW;
   p->MoreAvailable_ = MoreAvailable_;
   p->NextKey_ = NextKey_;
   p->TerminateDate_ = TerminateDate_;
   p->MaturityDate_ = MaturityDate_;
   p->ToDateContr_ = ToDateContr_;
   p->PlanNum_ = PlanNum_;
   p->GrantRepayable_ = GrantRepayable_;
   p->CESGEligible_ = CESGEligible_;
   p->TDRedEarning_ = TDRedEarning_;
   p->GFathered_ = GFathered_;
   p->CurrEarning_ = CurrEarning_;
   p->RESPStatus_ = RESPStatus_;
   p->RESPStatDesc_ = RESPStatDesc_;
   p->RedLifeContr_ = RedLifeContr_;
   p->RedUCAmt_ = RedUCAmt_;
   p->RedACAmt_ = RedACAmt_;
   p->RedNetGrant_ = RedNetGrant_;
   p->AcctLifeContr_ = AcctLifeContr_;
   p->AcctUCAmt_ = AcctUCAmt_;
   p->AcctACAmt_ = AcctACAmt_;
   p->AcctNetGrant_ = AcctNetGrant_;
   p->AcctEAP_ = AcctEAP_;
   p->RESPClassify_ = RESPClassify_;
   p->RepeatCount_ = RepeatCount_;
   return(p);
}

BFDataField* dsi_DSTC0066_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000126: return ( &MoreAvailable_ ); break; // MoreAvailable
      case 40000029: return ( &NextKey_ ); break; // NextKey
      case 40000766: return ( &TerminateDate_ ); break; // TerminateDate
      case 40000679: return ( &MaturityDate_ ); break; // MaturityDate
      case 40000767: return ( &ToDateContr_ ); break; // ToDateContr
      case 40000768: return ( &PlanNum_ ); break; // PlanNum
      case 40000769: return ( &GrantRepayable_ ); break; // GrantRepayable
      case 40000770: return ( &CESGEligible_ ); break; // CESGEligible
      case 40000771: return ( &TDRedEarning_ ); break; // TDRedEarning
      case 40000772: return ( &GFathered_ ); break; // GFathered
      case 40000773: return ( &CurrEarning_ ); break; // CurrEarning
      case 40000774: return ( &RESPStatus_ ); break; // RESPStatus
      case 40000775: return ( &RESPStatDesc_ ); break; // RESPStatDesc
      case 40000776: return ( &RedLifeContr_ ); break; // RedLifeContr
      case 40000777: return ( &RedUCAmt_ ); break; // RedUCAmt
      case 40000778: return ( &RedACAmt_ ); break; // RedACAmt
      case 40000779: return ( &RedNetGrant_ ); break; // RedNetGrant
      case 40000780: return ( &AcctLifeContr_ ); break; // AcctLifeContr
      case 40000781: return ( &AcctUCAmt_ ); break; // AcctUCAmt
      case 40000782: return ( &AcctACAmt_ ); break; // AcctACAmt
      case 40000783: return ( &AcctNetGrant_ ); break; // AcctNetGrant
      case 40000784: return ( &AcctEAP_ ); break; // AcctEAP
      case 40007256: return ( &RESPClassify_ ); break; // RESPClassify
      case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0066_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0066_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0066_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 24 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &MoreAvailable_; break;
            case 1: aFlds_[1] = &NextKey_; break;
            case 2: aFlds_[2] = &TerminateDate_; break;
            case 3: aFlds_[3] = &MaturityDate_; break;
            case 4: aFlds_[4] = &ToDateContr_; break;
            case 5: aFlds_[5] = &PlanNum_; break;
            case 6: aFlds_[6] = &GrantRepayable_; break;
            case 7: aFlds_[7] = &CESGEligible_; break;
            case 8: aFlds_[8] = &TDRedEarning_; break;
            case 9: aFlds_[9] = &GFathered_; break;
            case 10: aFlds_[10] = &CurrEarning_; break;
            case 11: aFlds_[11] = &RESPStatus_; break;
            case 12: aFlds_[12] = &RESPStatDesc_; break;
            case 13: aFlds_[13] = &RedLifeContr_; break;
            case 14: aFlds_[14] = &RedUCAmt_; break;
            case 15: aFlds_[15] = &RedACAmt_; break;
            case 16: aFlds_[16] = &RedNetGrant_; break;
            case 17: aFlds_[17] = &AcctLifeContr_; break;
            case 18: aFlds_[18] = &AcctUCAmt_; break;
            case 19: aFlds_[19] = &AcctACAmt_; break;
            case 20: aFlds_[20] = &AcctNetGrant_; break;
            case 21: aFlds_[21] = &AcctEAP_; break;
            case 22: aFlds_[22] = &RESPClassify_; break;
            case 23: aFlds_[23] = &RepeatCount_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0066_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0066_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0066_VW::getLargestDefinedField( void ) const
{
   return( 100 );
}

unsigned long dsi_DSTC0066_VW::getDefinedByteLength( void ) const
{
   return( 628 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0066_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0066_VW::fieldExists( id );
}

bool dsi_DSTC0066_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000126: return( true );
      case 40000029: return( true );
      case 40000766: return( true );
      case 40000679: return( true );
      case 40000767: return( true );
      case 40000768: return( true );
      case 40000769: return( true );
      case 40000770: return( true );
      case 40000771: return( true );
      case 40000772: return( true );
      case 40000773: return( true );
      case 40000774: return( true );
      case 40000775: return( true );
      case 40000776: return( true );
      case 40000777: return( true );
      case 40000778: return( true );
      case 40000779: return( true );
      case 40000780: return( true );
      case 40000781: return( true );
      case 40000782: return( true );
      case 40000783: return( true );
      case 40000784: return( true );
      case 40007256: return( true );
      case 40000120: return( true );
   }
   return false;
}

