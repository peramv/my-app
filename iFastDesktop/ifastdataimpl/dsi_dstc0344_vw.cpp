// BFDataImpl implementation file for DataSet DSTC0344_VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0344_vw.h"


// This function creates an instance of dsi_DSTC0344_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0344_VW() { return new dsi_DSTC0344_VW; }

dsi_DSTC0344_VW::dsi_DSTC0344_VW()
: BFDataImpl( 40005126 )
, TransTypeDefault_( ifds::TransTypeDefault, &ifds::s_FldProp_TransTypeDefault )
, TradeAmtTypeDefault_( ifds::TradeAmtTypeDefault, &ifds::s_FldProp_TradeAmtTypeDefault )
, TradePayTypeDefault_( ifds::TradePayTypeDefault, &ifds::s_FldProp_TradePayTypeDefault )
, TradeClearMethodDefault_( ifds::TradeClearMethodDefault, &ifds::s_FldProp_TradeClearMethodDefault )
, TradeFileProcessorDefault_( ifds::TradeFileProcessorDefault, &ifds::s_FldProp_TradeFileProcessorDefault )
, TrxSettCurrRefresh_( ifds::TrxSettCurrRefresh, &ifds::s_FldProp_TrxSettCurrRefresh )
, CanSuppressConfirm_( ifds::CanSuppressConfirm, &ifds::s_FldProp_CanSuppressConfirm )
, ROATransType_( ifds::ROATransType, &ifds::s_FldProp_ROATransType )
, DefaultExchRate_( ifds::DefaultExchRate, &ifds::s_FldProp_DefaultExchRate )
, MCHSRActive_( ifds::MCHSRActive, &ifds::s_FldProp_MCHSRActive )
, MCHNewTrade_( ifds::MCHNewTrade, &ifds::s_FldProp_MCHNewTrade )
, MCHRbkTrade_( ifds::MCHRbkTrade, &ifds::s_FldProp_MCHRbkTrade )
, MCHIndCancel_( ifds::MCHIndCancel, &ifds::s_FldProp_MCHIndCancel )
, MCHBulkCancel_( ifds::MCHBulkCancel, &ifds::s_FldProp_MCHBulkCancel )
, MCHBulkRbk_( ifds::MCHBulkRbk, &ifds::s_FldProp_MCHBulkRbk )
, SRNewTrade_( ifds::SRNewTrade, &ifds::s_FldProp_SRNewTrade )
, SRRbkTrade_( ifds::SRRbkTrade, &ifds::s_FldProp_SRRbkTrade )
, SRIndCancel_( ifds::SRIndCancel, &ifds::s_FldProp_SRIndCancel )
, SRBulkCancel_( ifds::SRBulkCancel, &ifds::s_FldProp_SRBulkCancel )
, SRBulkRbk_( ifds::SRBulkRbk, &ifds::s_FldProp_SRBulkRbk )
, SWPSettleESGElig_( ifds::SWPSettleESGElig, &ifds::s_FldProp_SWPSettleESGElig )
, CashIDSettleESGElig_( ifds::CashIDSettleESGElig, &ifds::s_FldProp_CashIDSettleESGElig )
, SDRTReportFlag_( ifds::SDRTReportFlag, &ifds::s_FldProp_SDRTReportFlag )
, AWDFieldFlag_( ifds::AWDFieldFlag, &ifds::s_FldProp_AWDFieldFlag )
, PSDAdvice_( ifds::PSDAdvice, &ifds::s_FldProp_PSDAdvice )
, PymtRoutingMthd_( ifds::PymtRoutingMthd, &ifds::s_FldProp_PymtRoutingMthd )
, TradelevelOveride_( ifds::TradelevelOveride, &ifds::s_FldProp_TradelevelOveride )
, DefPymtRoutingMthd_( ifds::DefPymtRoutingMthd, &ifds::s_FldProp_DefPymtRoutingMthd )
, UCITFlag_( ifds::UCITFlag, &ifds::s_FldProp_UCITFlag )
, AllowableTransferValidation_( ifds::AllowableTransferValidation, &ifds::s_FldProp_AllowableTransferValidation )
, StopOverrideRule_( ifds::StopOverrideRule, &ifds::s_FldProp_StopOverrideRule )
, BatchVerify_( ifds::BatchVerify, &ifds::s_FldProp_BatchVerify )
, G1G2CalcMethd_( ifds::G1G2CalcMethd, &ifds::s_FldProp_G1G2CalcMethd )
, DupliRuleFieldList_( ifds::DupliRuleFieldList, &ifds::s_FldProp_DupliRuleFieldList )
, XferInTradeDat_( ifds::XferInTradeDat, &ifds::s_FldProp_XferInTradeDat )
, AcctOpenCloseDates_( ifds::AcctOpenCloseDates, &ifds::s_FldProp_AcctOpenCloseDates )
{
    cFields_ = 36;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0344_VW::~dsi_DSTC0344_VW()
{
}

BFDataImpl* dsi_DSTC0344_VW::clone()
{
   dsi_DSTC0344_VW* p = new dsi_DSTC0344_VW;
   p->TransTypeDefault_ = TransTypeDefault_;
   p->TradeAmtTypeDefault_ = TradeAmtTypeDefault_;
   p->TradePayTypeDefault_ = TradePayTypeDefault_;
   p->TradeClearMethodDefault_ = TradeClearMethodDefault_;
   p->TradeFileProcessorDefault_ = TradeFileProcessorDefault_;
   p->TrxSettCurrRefresh_ = TrxSettCurrRefresh_;
   p->CanSuppressConfirm_ = CanSuppressConfirm_;
   p->ROATransType_ = ROATransType_;
   p->DefaultExchRate_ = DefaultExchRate_;
   p->MCHSRActive_ = MCHSRActive_;
   p->MCHNewTrade_ = MCHNewTrade_;
   p->MCHRbkTrade_ = MCHRbkTrade_;
   p->MCHIndCancel_ = MCHIndCancel_;
   p->MCHBulkCancel_ = MCHBulkCancel_;
   p->MCHBulkRbk_ = MCHBulkRbk_;
   p->SRNewTrade_ = SRNewTrade_;
   p->SRRbkTrade_ = SRRbkTrade_;
   p->SRIndCancel_ = SRIndCancel_;
   p->SRBulkCancel_ = SRBulkCancel_;
   p->SRBulkRbk_ = SRBulkRbk_;
   p->SWPSettleESGElig_ = SWPSettleESGElig_;
   p->CashIDSettleESGElig_ = CashIDSettleESGElig_;
   p->SDRTReportFlag_ = SDRTReportFlag_;
   p->AWDFieldFlag_ = AWDFieldFlag_;
   p->PSDAdvice_ = PSDAdvice_;
   p->PymtRoutingMthd_ = PymtRoutingMthd_;
   p->TradelevelOveride_ = TradelevelOveride_;
   p->DefPymtRoutingMthd_ = DefPymtRoutingMthd_;
   p->UCITFlag_ = UCITFlag_;
   p->AllowableTransferValidation_ = AllowableTransferValidation_;
   p->StopOverrideRule_ = StopOverrideRule_;
   p->BatchVerify_ = BatchVerify_;
   p->G1G2CalcMethd_ = G1G2CalcMethd_;
   p->DupliRuleFieldList_ = DupliRuleFieldList_;
   p->XferInTradeDat_ = XferInTradeDat_;
   p->AcctOpenCloseDates_ = AcctOpenCloseDates_;
   return(p);
}

BFDataField* dsi_DSTC0344_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40004635: return ( &TransTypeDefault_ ); break; // TransTypeDefault
      case 40004636: return ( &TradeAmtTypeDefault_ ); break; // TradeAmtTypeDefault
      case 40004637: return ( &TradePayTypeDefault_ ); break; // TradePayTypeDefault
      case 40004638: return ( &TradeClearMethodDefault_ ); break; // TradeClearMethodDefault
      case 40004649: return ( &TradeFileProcessorDefault_ ); break; // TradeFileProcessorDefault
      case 40004612: return ( &TrxSettCurrRefresh_ ); break; // TrxSettCurrRefresh
      case 40004777: return ( &CanSuppressConfirm_ ); break; // CanSuppressConfirm
      case 40005127: return ( &ROATransType_ ); break; // ROATransType
      case 40005248: return ( &DefaultExchRate_ ); break; // DefaultExchRate
      case 40005382: return ( &MCHSRActive_ ); break; // MCHSRActive
      case 40005386: return ( &MCHNewTrade_ ); break; // MCHNewTrade
      case 40005389: return ( &MCHRbkTrade_ ); break; // MCHRbkTrade
      case 40005391: return ( &MCHIndCancel_ ); break; // MCHIndCancel
      case 40005392: return ( &MCHBulkCancel_ ); break; // MCHBulkCancel
      case 40005393: return ( &MCHBulkRbk_ ); break; // MCHBulkRbk
      case 40005394: return ( &SRNewTrade_ ); break; // SRNewTrade
      case 40005395: return ( &SRRbkTrade_ ); break; // SRRbkTrade
      case 40005396: return ( &SRIndCancel_ ); break; // SRIndCancel
      case 40005397: return ( &SRBulkCancel_ ); break; // SRBulkCancel
      case 40005398: return ( &SRBulkRbk_ ); break; // SRBulkRbk
      case 40005416: return ( &SWPSettleESGElig_ ); break; // SWPSettleESGElig
      case 40005417: return ( &CashIDSettleESGElig_ ); break; // CashIDSettleESGElig
      case 40006982: return ( &SDRTReportFlag_ ); break; // SDRTReportFlag
      case 40007011: return ( &AWDFieldFlag_ ); break; // AWDFieldFlag
      case 40007020: return ( &PSDAdvice_ ); break; // PSDAdvice
      case 40007021: return ( &PymtRoutingMthd_ ); break; // PymtRoutingMthd
      case 40007022: return ( &TradelevelOveride_ ); break; // TradelevelOveride
      case 40007023: return ( &DefPymtRoutingMthd_ ); break; // DefPymtRoutingMthd
      case 40007031: return ( &UCITFlag_ ); break; // UCITFlag
      case 40007239: return ( &AllowableTransferValidation_ ); break; // AllowableTransferValidation
      case 40007385: return ( &StopOverrideRule_ ); break; // StopOverrideRule
      case 40007455: return ( &BatchVerify_ ); break; // BatchVerify
      case 40007487: return ( &G1G2CalcMethd_ ); break; // G1G2CalcMethd
	  case 40007729: return ( &DupliRuleFieldList_ ); break; // DupliRuleFieldList
	  case 40007786: return ( &XferInTradeDat_ ); break; // XferInTradeDat
      case 40007883: return ( &AcctOpenCloseDates_ ); break; // AcctOpenCloseDates
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0344_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0344_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0344_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 36 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &TransTypeDefault_; break;
            case 1: aFlds_[1] = &TradeAmtTypeDefault_; break;
            case 2: aFlds_[2] = &TradePayTypeDefault_; break;
            case 3: aFlds_[3] = &TradeClearMethodDefault_; break;
            case 4: aFlds_[4] = &TradeFileProcessorDefault_; break;
            case 5: aFlds_[5] = &TrxSettCurrRefresh_; break;
            case 6: aFlds_[6] = &CanSuppressConfirm_; break;
            case 7: aFlds_[7] = &ROATransType_; break;
            case 8: aFlds_[8] = &DefaultExchRate_; break;
            case 9: aFlds_[9] = &MCHSRActive_; break;
            case 10: aFlds_[10] = &MCHNewTrade_; break;
            case 11: aFlds_[11] = &MCHRbkTrade_; break;
            case 12: aFlds_[12] = &MCHIndCancel_; break;
            case 13: aFlds_[13] = &MCHBulkCancel_; break;
            case 14: aFlds_[14] = &MCHBulkRbk_; break;
            case 15: aFlds_[15] = &SRNewTrade_; break;
            case 16: aFlds_[16] = &SRRbkTrade_; break;
            case 17: aFlds_[17] = &SRIndCancel_; break;
            case 18: aFlds_[18] = &SRBulkCancel_; break;
            case 19: aFlds_[19] = &SRBulkRbk_; break;
            case 20: aFlds_[20] = &SWPSettleESGElig_; break;
            case 21: aFlds_[21] = &CashIDSettleESGElig_; break;
            case 22: aFlds_[22] = &SDRTReportFlag_; break;
            case 23: aFlds_[23] = &AWDFieldFlag_; break;
            case 24: aFlds_[24] = &PSDAdvice_; break;
            case 25: aFlds_[25] = &PymtRoutingMthd_; break;
            case 26: aFlds_[26] = &TradelevelOveride_; break;
            case 27: aFlds_[27] = &DefPymtRoutingMthd_; break;
            case 28: aFlds_[28] = &UCITFlag_; break;
            case 29: aFlds_[29] = &AllowableTransferValidation_; break;
            case 30: aFlds_[30] = &StopOverrideRule_; break;
            case 31: aFlds_[31] = &BatchVerify_; break;
            case 32: aFlds_[32] = &G1G2CalcMethd_; break;
			case 33: aFlds_[33] = &DupliRuleFieldList_; break;
			case 34: aFlds_[34] = &XferInTradeDat_; break;
            case 35: aFlds_[35] = &AcctOpenCloseDates_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0344_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0344_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0344_VW::getLargestDefinedField( void ) const
{
   return( 150 );
}

unsigned long dsi_DSTC0344_VW::getDefinedByteLength( void ) const
{
   return( 1445 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0344_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0344_VW::fieldExists( id );
}

bool dsi_DSTC0344_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40004635: return( true );
      case 40004636: return( true );
      case 40004637: return( true );
      case 40004638: return( true );
      case 40004649: return( true );
      case 40004612: return( true );
      case 40004777: return( true );
      case 40005127: return( true );
      case 40005248: return( true );
      case 40005382: return( true );
      case 40005386: return( true );
      case 40005389: return( true );
      case 40005391: return( true );
      case 40005392: return( true );
      case 40005393: return( true );
      case 40005394: return( true );
      case 40005395: return( true );
      case 40005396: return( true );
      case 40005397: return( true );
      case 40005398: return( true );
      case 40005416: return( true );
      case 40005417: return( true );
      case 40006982: return( true );
      case 40007011: return( true );
      case 40007020: return( true );
      case 40007021: return( true );
      case 40007022: return( true );
      case 40007023: return( true );
      case 40007031: return( true );
      case 40007239: return( true );
      case 40007385: return( true );
      case 40007455: return( true );
      case 40007487: return( true );
	  case 40007729: return ( true );
	  case 40007786: return ( true );
      case 40007883: return ( true );
   }
   return false;
}

