// BFDataImpl implementation file for DataSet DSTC0427.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0427_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0427_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0427_VWRepeat_Record() { return new dsi_DSTC0427_VWRepeat_Record; }

dsi_DSTC0427_VWRepeat_Record::dsi_DSTC0427_VWRepeat_Record()
: BFDataImpl( 40006566 )
, MatSwpInstructionType_( ifds::MatSwpInstructionType, &ifds::s_FldProp_MatSwpInstructionType )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, Fund_( ifds::Fund, &ifds::s_FldProp_Fund )
, Class_( ifds::Class, &ifds::s_FldProp_Class )
, SplitType_( ifds::SplitType, &ifds::s_FldProp_SplitType )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, CashSweepBal_( ifds::CashSweepBal, &ifds::s_FldProp_CashSweepBal )
, SelectedAmt_( ifds::SelectedAmt, &ifds::s_FldProp_SelectedAmt )
, IntInvestId_( ifds::IntInvestId, &ifds::s_FldProp_IntInvestId )
, GoodBad_( ifds::GoodBad, &ifds::s_FldProp_GoodBad )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, TransSeq_( ifds::TransSeq, &ifds::s_FldProp_TransSeq )
{
   cFields_ = 13;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0427_VWRepeat_Record::~dsi_DSTC0427_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0427_VWRepeat_Record::clone()
{
   dsi_DSTC0427_VWRepeat_Record* p = new dsi_DSTC0427_VWRepeat_Record;
   p->MatSwpInstructionType_ = MatSwpInstructionType_;
   p->AccountNum_ = AccountNum_;
   p->Fund_ = Fund_;
   p->Class_ = Class_;
   p->SplitType_ = SplitType_;
   p->EffectiveDate_ = EffectiveDate_;
   p->TransNum_ = TransNum_;
   p->CashSweepBal_ = CashSweepBal_;
   p->SelectedAmt_ = SelectedAmt_;
   p->IntInvestId_ = IntInvestId_;
   p->GoodBad_ = GoodBad_;
   p->TransId_ = TransId_;
   p->TransSeq_ = TransSeq_;
   return(p);
}

BFDataField* dsi_DSTC0427_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40006562: return ( &MatSwpInstructionType_ ); break; // MatSwpInstructionType
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40002227: return ( &Fund_ ); break; // Fund
      case 40002228: return ( &Class_ ); break; // Class
      case 40006544: return ( &SplitType_ ); break; // SplitType
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40006545: return ( &CashSweepBal_ ); break; // CashSweepBal
      case 40006546: return ( &SelectedAmt_ ); break; // SelectedAmt
      case 40006548: return ( &IntInvestId_ ); break; // IntInvestId
      case 40000496: return ( &GoodBad_ ); break; // GoodBad
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40002217: return ( &TransSeq_ ); break; // TransSeq
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0427_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0427_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0427_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 13 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &MatSwpInstructionType_; break;
            case 1: aFlds_[1] = &AccountNum_; break;
            case 2: aFlds_[2] = &Fund_; break;
            case 3: aFlds_[3] = &Class_; break;
            case 4: aFlds_[4] = &SplitType_; break;
            case 5: aFlds_[5] = &EffectiveDate_; break;
            case 6: aFlds_[6] = &TransNum_; break;
            case 7: aFlds_[7] = &CashSweepBal_; break;
            case 8: aFlds_[8] = &SelectedAmt_; break;
            case 9: aFlds_[9] = &IntInvestId_; break;
            case 10: aFlds_[10] = &GoodBad_; break;
            case 11: aFlds_[11] = &TransId_; break;
            case 12: aFlds_[12] = &TransSeq_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0427_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0427_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0427_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0427_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 402 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0427_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0427_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0427_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40006562: return( true );
      case 40000040: return( true );
      case 40002227: return( true );
      case 40002228: return( true );
      case 40006544: return( true );
      case 40000327: return( true );
      case 40000096: return( true );
      case 40006545: return( true );
      case 40006546: return( true );
      case 40006548: return( true );
      case 40000496: return( true );
      case 40000063: return( true );
      case 40002217: return( true );
   }
   return false;
}

