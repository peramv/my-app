// BFDataImpl implementation file for DataSet DSTC0044.VW
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0044_vw.h"


// This function creates an instance of dsi_DSTC0044_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0044_VW() { return new dsi_DSTC0044_VW; }

dsi_DSTC0044_VW::dsi_DSTC0044_VW()
: BFDataImpl( 40000577 )
, InstCode_( ifds::InstCode, &ifds::s_FldProp_InstCode )
, InstName_( ifds::InstName, &ifds::s_FldProp_InstName )
, TransitNo_( ifds::TransitNo, &ifds::s_FldProp_TransitNo )
, TransitName_( ifds::TransitName, &ifds::s_FldProp_TransitName )
, BankAcctNum_( ifds::BankAcctNum, &ifds::s_FldProp_BankAcctNum )
, FeeAmt_( ifds::FeeAmt, &ifds::s_FldProp_FeeAmt )
, FedTax_( ifds::FedTax, &ifds::s_FldProp_FedTax )
, ProvTax_( ifds::ProvTax, &ifds::s_FldProp_ProvTax )
, NetAmt_( ifds::NetAmt, &ifds::s_FldProp_NetAmt )
, BankAcctType_( ifds::BankAcctType, &ifds::s_FldProp_BankAcctType )
, BankAcctTypeDesc_( ifds::BankAcctTypeDesc, &ifds::s_FldProp_BankAcctTypeDesc )
{
   cFields_ = 11;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0044_VW::~dsi_DSTC0044_VW()
{
}

BFDataImpl* dsi_DSTC0044_VW::clone()
{
   dsi_DSTC0044_VW* p = new dsi_DSTC0044_VW;
   p->InstCode_ = InstCode_;
   p->InstName_ = InstName_;
   p->TransitNo_ = TransitNo_;
   p->TransitName_ = TransitName_;
   p->BankAcctNum_ = BankAcctNum_;
   p->FeeAmt_ = FeeAmt_;
   p->FedTax_ = FedTax_;
   p->ProvTax_ = ProvTax_;
   p->NetAmt_ = NetAmt_;
   p->BankAcctType_ = BankAcctType_;
   p->BankAcctTypeDesc_ = BankAcctTypeDesc_;
   return(p);
}

BFDataField* dsi_DSTC0044_VW::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000244: return ( &InstCode_ ); break; // InstCode
      case 40000285: return ( &InstName_ ); break; // InstName
      case 40000247: return ( &TransitNo_ ); break; // TransitNo
      case 40000581: return ( &TransitName_ ); break; // TransitName
      case 40000248: return ( &BankAcctNum_ ); break; // BankAcctNum
      case 40000413: return ( &FeeAmt_ ); break; // FeeAmt
      case 40000414: return ( &FedTax_ ); break; // FedTax
      case 40000415: return ( &ProvTax_ ); break; // ProvTax
      case 40000351: return ( &NetAmt_ ); break; // NetAmt
      case 40000253: return ( &BankAcctType_ ); break; // BankAcctType
      case 40000254: return ( &BankAcctTypeDesc_ ); break; // BankAcctTypeDesc
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0044_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0044_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0044_VW::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 11 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &InstCode_; break;
            case 1: aFlds_[1] = &InstName_; break;
            case 2: aFlds_[2] = &TransitNo_; break;
            case 3: aFlds_[3] = &TransitName_; break;
            case 4: aFlds_[4] = &BankAcctNum_; break;
            case 5: aFlds_[5] = &FeeAmt_; break;
            case 6: aFlds_[6] = &FedTax_; break;
            case 7: aFlds_[7] = &ProvTax_; break;
            case 8: aFlds_[8] = &NetAmt_; break;
            case 9: aFlds_[9] = &BankAcctType_; break;
            case 10: aFlds_[10] = &BankAcctTypeDesc_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0044_VW::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0044_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0044_VW::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0044_VW::getDefinedByteLength( void ) const
{
   return( 506 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0044_VW::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0044_VW::fieldExists( id );
}

bool dsi_DSTC0044_VW::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000244: return( true );
      case 40000285: return( true );
      case 40000247: return( true );
      case 40000581: return( true );
      case 40000248: return( true );
      case 40000413: return( true );
      case 40000414: return( true );
      case 40000415: return( true );
      case 40000351: return( true );
      case 40000253: return( true );
      case 40000254: return( true );
   }
   return false;
}

