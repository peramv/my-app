// BFDataImpl implementation file for DataSet DSTC0219.REQRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0219_reqrepeat_record.h"


// This function creates an instance of dsi_DSTC0219_REQRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0219_REQRepeat_Record() { return new dsi_DSTC0219_REQRepeat_Record; }

dsi_DSTC0219_REQRepeat_Record::dsi_DSTC0219_REQRepeat_Record()
: BFDataImpl( 40003446 )
, AllocRunMode_( ifds::AllocRunMode, &ifds::s_FldProp_AllocRunMode )
, AMSAllocRId_( ifds::AMSAllocRId, &ifds::s_FldProp_AMSAllocRId )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, AllocPercentage_( ifds::AllocPercentage, &ifds::s_FldProp_AllocPercentage )
, AMSAllocVer_( ifds::AMSAllocVer, &ifds::s_FldProp_AMSAllocVer )
{
   cFields_ = 6;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0219_REQRepeat_Record::~dsi_DSTC0219_REQRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0219_REQRepeat_Record::clone()
{
   dsi_DSTC0219_REQRepeat_Record* p = new dsi_DSTC0219_REQRepeat_Record;
   p->AllocRunMode_ = AllocRunMode_;
   p->AMSAllocRId_ = AMSAllocRId_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->AllocPercentage_ = AllocPercentage_;
   p->AMSAllocVer_ = AMSAllocVer_;
   return(p);
}

BFDataField* dsi_DSTC0219_REQRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40001032: return ( &AllocRunMode_ ); break; // AllocRunMode
      case 40003441: return ( &AMSAllocRId_ ); break; // AMSAllocRId
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40001035: return ( &AllocPercentage_ ); break; // AllocPercentage
      case 40003443: return ( &AMSAllocVer_ ); break; // AMSAllocVer
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0219_REQRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0219_REQRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0219_REQRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 6 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &AllocRunMode_; break;
            case 1: aFlds_[1] = &AMSAllocRId_; break;
            case 2: aFlds_[2] = &FundCode_; break;
            case 3: aFlds_[3] = &ClassCode_; break;
            case 4: aFlds_[4] = &AllocPercentage_; break;
            case 5: aFlds_[5] = &AMSAllocVer_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0219_REQRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0219_REQRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0219_REQRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0219_REQRepeat_Record::getDefinedByteLength( void ) const
{
   return( 510 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0219_REQRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0219_REQRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0219_REQRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40001032: return( true );
      case 40003441: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40001035: return( true );
      case 40003443: return( true );
   }
   return false;
}

