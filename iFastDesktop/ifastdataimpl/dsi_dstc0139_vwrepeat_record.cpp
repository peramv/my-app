// BFDataImpl implementation file for DataSet DSTC0139.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0139_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0139_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0139_VWRepeat_Record() { return new dsi_DSTC0139_VWRepeat_Record; }

dsi_DSTC0139_VWRepeat_Record::dsi_DSTC0139_VWRepeat_Record()
: BFDataImpl( 40002515 )
, CompoundDate_( ifds::CompoundDate, &ifds::s_FldProp_CompoundDate )
, IndexAmt_( ifds::IndexAmt, &ifds::s_FldProp_IndexAmt )
, IndexType_( ifds::IndexType, &ifds::s_FldProp_IndexType )
, IndexFrequency_( ifds::IndexFrequency, &ifds::s_FldProp_IndexFrequency )
, StartDate_( ifds::StartDate, &ifds::s_FldProp_StartDate )
, EndDate_( ifds::EndDate, &ifds::s_FldProp_EndDate )
, NextIndexDate_( ifds::NextIndexDate, &ifds::s_FldProp_NextIndexDate )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
{
   cFields_ = 8;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0139_VWRepeat_Record::~dsi_DSTC0139_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0139_VWRepeat_Record::clone()
{
   dsi_DSTC0139_VWRepeat_Record* p = new dsi_DSTC0139_VWRepeat_Record;
   p->CompoundDate_ = CompoundDate_;
   p->IndexAmt_ = IndexAmt_;
   p->IndexType_ = IndexType_;
   p->IndexFrequency_ = IndexFrequency_;
   p->StartDate_ = StartDate_;
   p->EndDate_ = EndDate_;
   p->NextIndexDate_ = NextIndexDate_;
   p->TransNum_ = TransNum_;
   return(p);
}

BFDataField* dsi_DSTC0139_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40001309: return ( &CompoundDate_ ); break; // CompoundDate
      case 40002517: return ( &IndexAmt_ ); break; // IndexAmt
      case 40002518: return ( &IndexType_ ); break; // IndexType
      case 40002519: return ( &IndexFrequency_ ); break; // IndexFrequency
      case 40000107: return ( &StartDate_ ); break; // StartDate
      case 40000108: return ( &EndDate_ ); break; // EndDate
      case 40002520: return ( &NextIndexDate_ ); break; // NextIndexDate
      case 40000096: return ( &TransNum_ ); break; // TransNum
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0139_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0139_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0139_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 8 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &CompoundDate_; break;
            case 1: aFlds_[1] = &IndexAmt_; break;
            case 2: aFlds_[2] = &IndexType_; break;
            case 3: aFlds_[3] = &IndexFrequency_; break;
            case 4: aFlds_[4] = &StartDate_; break;
            case 5: aFlds_[5] = &EndDate_; break;
            case 6: aFlds_[6] = &NextIndexDate_; break;
            case 7: aFlds_[7] = &TransNum_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0139_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0139_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0139_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0139_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 130 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0139_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0139_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0139_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40001309: return( true );
      case 40002517: return( true );
      case 40002518: return( true );
      case 40002519: return( true );
      case 40000107: return( true );
      case 40000108: return( true );
      case 40002520: return( true );
      case 40000096: return( true );
   }
   return false;
}

