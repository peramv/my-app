// BFDataImpl implementation file for DataSet DSTC0480.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Thursday, March 30, 2017 10:00:06


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0480_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0480_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0480_VWRepeat_Record() { return new dsi_DSTC0480_VWRepeat_Record; }

dsi_DSTC0480_VWRepeat_Record::dsi_DSTC0480_VWRepeat_Record()
: BFDataImpl( 40007742 )
, RoundFlg_( ifds::RoundFlg, &ifds::s_FldProp_RoundFlg )
, RecalcMthd_( ifds::RecalcMthd, &ifds::s_FldProp_RecalcMthd )
, UnitsPrecisionAcct_( ifds::UnitsPrecisionAcct, &ifds::s_FldProp_UnitsPrecisionAcct )
, StartDate_( ifds::StartDate, &ifds::s_FldProp_StartDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, AcctRndRulesUUID_( ifds::AcctRndRulesUUID, &ifds::s_FldProp_AcctRndRulesUUID )
{
    cFields_ = 9;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0480_VWRepeat_Record::~dsi_DSTC0480_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0480_VWRepeat_Record::clone()
{
    dsi_DSTC0480_VWRepeat_Record* p = new dsi_DSTC0480_VWRepeat_Record;
    p->RoundFlg_ = RoundFlg_;
    p->RecalcMthd_ = RecalcMthd_;
    p->UnitsPrecisionAcct_ = UnitsPrecisionAcct_;
    p->StartDate_ = StartDate_;
    p->StopDate_ = StopDate_;
    p->Username_ = Username_;
    p->ModUser_ = ModUser_;
    p->ModDate_ = ModDate_;
    p->AcctRndRulesUUID_ = AcctRndRulesUUID_;
    return(p);
}

BFDataField* dsi_DSTC0480_VWRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40007730: return ( &RoundFlg_ ); break; // RoundFlg
        case 40007731: return ( &RecalcMthd_ ); break; // RecalcMthd
        case 40007732: return ( &UnitsPrecisionAcct_ ); break; // UnitsPrecisionAcct
        case 40000107: return ( &StartDate_ ); break; // StartDate
        case 40000279: return ( &StopDate_ ); break; // StopDate
        case 40000117: return ( &Username_ ); break; // Username
        case 40000218: return ( &ModUser_ ); break; // ModUser
        case 40000217: return ( &ModDate_ ); break; // ModDate
        case 40007739: return ( &AcctRndRulesUUID_ ); break; // AcctRndRulesUUID
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0480_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0480_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0480_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 9 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &RoundFlg_; break;
                case 1: aFlds_[1] = &RecalcMthd_; break;
                case 2: aFlds_[2] = &UnitsPrecisionAcct_; break;
                case 3: aFlds_[3] = &StartDate_; break;
                case 4: aFlds_[4] = &StopDate_; break;
                case 5: aFlds_[5] = &Username_; break;
                case 6: aFlds_[6] = &ModUser_; break;
                case 7: aFlds_[7] = &ModDate_; break;
                case 8: aFlds_[8] = &AcctRndRulesUUID_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0480_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0480_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0480_VWRepeat_Record::getLargestDefinedField( void ) const
{
    return( 60 );
}

unsigned long dsi_DSTC0480_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 215 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0480_VWRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0480_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0480_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40007730: return ( true );
        case 40007731: return ( true );
        case 40007732: return ( true );
        case 40000107: return ( true );
        case 40000279: return ( true );
        case 40000117: return ( true );
        case 40000218: return ( true );
        case 40000217: return ( true );
        case 40007739: return ( true );
    }
    return false;
}

