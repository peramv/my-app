// BFDataImpl implementation file for DataSet DSTC0118.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0118_req.h"


// This function creates an instance of dsi_DSTC0118_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0118_REQ() { return new dsi_DSTC0118_REQ; }

dsi_DSTC0118_REQ::dsi_DSTC0118_REQ()
: BFDataImpl( 40002447 )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, NextOrPrevious_( ifds::NextOrPrevious, &ifds::s_FldProp_NextOrPrevious )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, SalesRepCode_( ifds::SalesRepCode, &ifds::s_FldProp_SalesRepCode )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, SIN_( ifds::SIN, &ifds::s_FldProp_SIN )
, ShrNum_( ifds::ShrNum, &ifds::s_FldProp_ShrNum )
, AltAccount_( ifds::AltAccount, &ifds::s_FldProp_AltAccount )
, LastName_( ifds::LastName, &ifds::s_FldProp_LastName )
, FirstName_( ifds::FirstName, &ifds::s_FldProp_FirstName )
, CorpIndiv_( ifds::CorpIndiv, &ifds::s_FldProp_CorpIndiv )
, InTrustJoint_( ifds::InTrustJoint, &ifds::s_FldProp_InTrustJoint )
, IntermCode_( ifds::IntermCode, &ifds::s_FldProp_IntermCode )
, InterAccount_( ifds::InterAccount, &ifds::s_FldProp_InterAccount )
{
   cFields_ = 21;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0118_REQ::~dsi_DSTC0118_REQ()
{
}

BFDataImpl* dsi_DSTC0118_REQ::clone()
{
   dsi_DSTC0118_REQ* p = new dsi_DSTC0118_REQ;
   p->NextKey_ = NextKey_;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->NextOrPrevious_ = NextOrPrevious_;
   p->BrokerCode_ = BrokerCode_;
   p->BranchCode_ = BranchCode_;
   p->SalesRepCode_ = SalesRepCode_;
   p->AccountNum_ = AccountNum_;
   p->SIN_ = SIN_;
   p->ShrNum_ = ShrNum_;
   p->AltAccount_ = AltAccount_;
   p->LastName_ = LastName_;
   p->FirstName_ = FirstName_;
   p->CorpIndiv_ = CorpIndiv_;
   p->InTrustJoint_ = InTrustJoint_;
   p->IntermCode_ = IntermCode_;
   p->InterAccount_ = InterAccount_;
   return(p);
}

BFDataField* dsi_DSTC0118_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000029: return ( &NextKey_ ); break; // NextKey
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40002271: return ( &NextOrPrevious_ ); break; // NextOrPrevious
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000045: return ( &BranchCode_ ); break; // BranchCode
      case 40000046: return ( &SalesRepCode_ ); break; // SalesRepCode
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40000132: return ( &SIN_ ); break; // SIN
      case 40000114: return ( &ShrNum_ ); break; // ShrNum
      case 40000173: return ( &AltAccount_ ); break; // AltAccount
      case 40000128: return ( &LastName_ ); break; // LastName
      case 40000129: return ( &FirstName_ ); break; // FirstName
      case 40002450: return ( &CorpIndiv_ ); break; // CorpIndiv
      case 40002190: return ( &InTrustJoint_ ); break; // InTrustJoint
      case 40001160: return ( &IntermCode_ ); break; // IntermCode
      case 40000187: return ( &InterAccount_ ); break; // InterAccount
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0118_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0118_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0118_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 21 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &NextKey_; break;
            case 1: aFlds_[1] = &SessionId_; break;
            case 2: aFlds_[2] = &User_Id_; break;
            case 3: aFlds_[3] = &LanguageCode_; break;
            case 4: aFlds_[4] = &CompanyId_; break;
            case 5: aFlds_[5] = &Track_; break;
            case 6: aFlds_[6] = &Activity_; break;
            case 7: aFlds_[7] = &NextOrPrevious_; break;
            case 8: aFlds_[8] = &BrokerCode_; break;
            case 9: aFlds_[9] = &BranchCode_; break;
            case 10: aFlds_[10] = &SalesRepCode_; break;
            case 11: aFlds_[11] = &AccountNum_; break;
            case 12: aFlds_[12] = &SIN_; break;
            case 13: aFlds_[13] = &ShrNum_; break;
            case 14: aFlds_[14] = &AltAccount_; break;
            case 15: aFlds_[15] = &LastName_; break;
            case 16: aFlds_[16] = &FirstName_; break;
            case 17: aFlds_[17] = &CorpIndiv_; break;
            case 18: aFlds_[18] = &InTrustJoint_; break;
            case 19: aFlds_[19] = &IntermCode_; break;
            case 20: aFlds_[20] = &InterAccount_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0118_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0118_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0118_REQ::getLargestDefinedField( void ) const
{
   return( 100 );
}

unsigned long dsi_DSTC0118_REQ::getDefinedByteLength( void ) const
{
   return( 999 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0118_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0118_REQ::fieldExists( id );
}

bool dsi_DSTC0118_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000029: return( true );
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40002271: return( true );
      case 40000044: return( true );
      case 40000045: return( true );
      case 40000046: return( true );
      case 40000040: return( true );
      case 40000132: return( true );
      case 40000114: return( true );
      case 40000173: return( true );
      case 40000128: return( true );
      case 40000129: return( true );
      case 40002450: return( true );
      case 40002190: return( true );
      case 40001160: return( true );
      case 40000187: return( true );
   }
   return false;
}

