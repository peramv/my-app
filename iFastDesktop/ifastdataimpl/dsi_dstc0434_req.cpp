// BFDataImpl implementation file for DataSet DSTC0434.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0434_req.h"


// This function creates an instance of dsi_DSTC0434_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0434_REQ() { return new dsi_DSTC0434_REQ; }

dsi_DSTC0434_REQ::dsi_DSTC0434_REQ()
: BFDataImpl( 40006771 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, PACDeff_( ifds::PACDeff, &ifds::s_FldProp_PACDeff )
, AcctCommitMstrUUID_( ifds::AcctCommitMstrUUID, &ifds::s_FldProp_AcctCommitMstrUUID )
, CommitmentUUID_( ifds::CommitmentUUID, &ifds::s_FldProp_CommitmentUUID )
, CommitmentCode_( ifds::CommitmentCode, &ifds::s_FldProp_CommitmentCode )
, CommitAmt_( ifds::CommitAmt, &ifds::s_FldProp_CommitAmt )
, CommitDeff_( ifds::CommitDeff, &ifds::s_FldProp_CommitDeff )
, PACID_( ifds::PACID, &ifds::s_FldProp_PACID )
, InstCode_( ifds::InstCode, &ifds::s_FldProp_InstCode )
, SwiftCode_( ifds::SwiftCode, &ifds::s_FldProp_SwiftCode )
, RefNumber_( ifds::RefNumber, &ifds::s_FldProp_RefNumber )
, TransitNo_( ifds::TransitNo, &ifds::s_FldProp_TransitNo )
, BankAcctNum_( ifds::BankAcctNum, &ifds::s_FldProp_BankAcctNum )
, BankAcctName_( ifds::BankAcctName, &ifds::s_FldProp_BankAcctName )
, SourceOfBankAcct_( ifds::SourceOfBankAcct, &ifds::s_FldProp_SourceOfBankAcct )
, BankAcctCurrency_( ifds::BankAcctCurrency, &ifds::s_FldProp_BankAcctCurrency )
, BankAcctType_( ifds::BankAcctType, &ifds::s_FldProp_BankAcctType )
, BankType_( ifds::BankType, &ifds::s_FldProp_BankType )
, BankIdNum_( ifds::BankIdNum, &ifds::s_FldProp_BankIdNum )
, ACHProcessor_( ifds::ACHProcessor, &ifds::s_FldProp_ACHProcessor )
, BankId_( ifds::BankId, &ifds::s_FldProp_BankId )
, CreditInfoLine1_( ifds::CreditInfoLine1, &ifds::s_FldProp_CreditInfoLine1 )
, CreditInfoLine2_( ifds::CreditInfoLine2, &ifds::s_FldProp_CreditInfoLine2 )
, InstName_( ifds::InstName, &ifds::s_FldProp_InstName )
, BankAddr1_( ifds::BankAddr1, &ifds::s_FldProp_BankAddr1 )
, BankAddr2_( ifds::BankAddr2, &ifds::s_FldProp_BankAddr2 )
, BankAddr3_( ifds::BankAddr3, &ifds::s_FldProp_BankAddr3 )
, BankAddr4_( ifds::BankAddr4, &ifds::s_FldProp_BankAddr4 )
, BankAddr5_( ifds::BankAddr5, &ifds::s_FldProp_BankAddr5 )
, BankContact_( ifds::BankContact, &ifds::s_FldProp_BankContact )
, BankCntry_( ifds::BankCntry, &ifds::s_FldProp_BankCntry )
, BankPstl_( ifds::BankPstl, &ifds::s_FldProp_BankPstl )
, PayReason1_( ifds::PayReason1, &ifds::s_FldProp_PayReason1 )
, PayReason2_( ifds::PayReason2, &ifds::s_FldProp_PayReason2 )
, PayMethod_( ifds::PayMethod, &ifds::s_FldProp_PayMethod )
, BankAcctVer_( ifds::BankAcctVer, &ifds::s_FldProp_BankAcctVer )
, CommitMstrVer_( ifds::CommitMstrVer, &ifds::s_FldProp_CommitMstrVer )
, NextDrawDate_( ifds::NextDrawDate, &ifds::s_FldProp_NextDrawDate )
, NextProcessDate_( ifds::NextProcessDate, &ifds::s_FldProp_NextProcessDate )
{
   cFields_ = 46;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0434_REQ::~dsi_DSTC0434_REQ()
{
}

BFDataImpl* dsi_DSTC0434_REQ::clone()
{
   dsi_DSTC0434_REQ* p = new dsi_DSTC0434_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->AccountNum_ = AccountNum_;
   p->RunMode_ = RunMode_;
   p->PACDeff_ = PACDeff_;
   p->AcctCommitMstrUUID_ = AcctCommitMstrUUID_;
   p->CommitmentUUID_ = CommitmentUUID_;
   p->CommitmentCode_ = CommitmentCode_;
   p->CommitAmt_ = CommitAmt_;
   p->CommitDeff_ = CommitDeff_;
   p->PACID_ = PACID_;
   p->InstCode_ = InstCode_;
   p->SwiftCode_ = SwiftCode_;
   p->RefNumber_ = RefNumber_;
   p->TransitNo_ = TransitNo_;
   p->BankAcctNum_ = BankAcctNum_;
   p->BankAcctName_ = BankAcctName_;
   p->SourceOfBankAcct_ = SourceOfBankAcct_;
   p->BankAcctCurrency_ = BankAcctCurrency_;
   p->BankAcctType_ = BankAcctType_;
   p->BankType_ = BankType_;
   p->BankIdNum_ = BankIdNum_;
   p->ACHProcessor_ = ACHProcessor_;
   p->BankId_ = BankId_;
   p->CreditInfoLine1_ = CreditInfoLine1_;
   p->CreditInfoLine2_ = CreditInfoLine2_;
   p->InstName_ = InstName_;
   p->BankAddr1_ = BankAddr1_;
   p->BankAddr2_ = BankAddr2_;
   p->BankAddr3_ = BankAddr3_;
   p->BankAddr4_ = BankAddr4_;
   p->BankAddr5_ = BankAddr5_;
   p->BankContact_ = BankContact_;
   p->BankCntry_ = BankCntry_;
   p->BankPstl_ = BankPstl_;
   p->PayReason1_ = PayReason1_;
   p->PayReason2_ = PayReason2_;
   p->PayMethod_ = PayMethod_;
   p->BankAcctVer_ = BankAcctVer_;
   p->CommitMstrVer_ = CommitMstrVer_;
   p->NextDrawDate_ = NextDrawDate_;
   p->NextProcessDate_ = NextProcessDate_;
   return(p);
}

BFDataField* dsi_DSTC0434_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40000990: return ( &RunMode_ ); break; // RunMode
      case 40006755: return ( &PACDeff_ ); break; // PACDeff
      case 40006734: return ( &AcctCommitMstrUUID_ ); break; // AcctCommitMstrUUID
      case 40006735: return ( &CommitmentUUID_ ); break; // CommitmentUUID
      case 40006736: return ( &CommitmentCode_ ); break; // CommitmentCode
      case 40006744: return ( &CommitAmt_ ); break; // CommitAmt
      case 40006738: return ( &CommitDeff_ ); break; // CommitDeff
      case 40006754: return ( &PACID_ ); break; // PACID
      case 40000244: return ( &InstCode_ ); break; // InstCode
      case 40000245: return ( &SwiftCode_ ); break; // SwiftCode
      case 40000246: return ( &RefNumber_ ); break; // RefNumber
      case 40000247: return ( &TransitNo_ ); break; // TransitNo
      case 40000248: return ( &BankAcctNum_ ); break; // BankAcctNum
      case 40000249: return ( &BankAcctName_ ); break; // BankAcctName
      case 40000250: return ( &SourceOfBankAcct_ ); break; // SourceOfBankAcct
      case 40000251: return ( &BankAcctCurrency_ ); break; // BankAcctCurrency
      case 40000253: return ( &BankAcctType_ ); break; // BankAcctType
      case 40002299: return ( &BankType_ ); break; // BankType
      case 40002301: return ( &BankIdNum_ ); break; // BankIdNum
      case 40002150: return ( &ACHProcessor_ ); break; // ACHProcessor
      case 40002283: return ( &BankId_ ); break; // BankId
      case 40002294: return ( &CreditInfoLine1_ ); break; // CreditInfoLine1
      case 40002295: return ( &CreditInfoLine2_ ); break; // CreditInfoLine2
      case 40000285: return ( &InstName_ ); break; // InstName
      case 40002167: return ( &BankAddr1_ ); break; // BankAddr1
      case 40002168: return ( &BankAddr2_ ); break; // BankAddr2
      case 40002169: return ( &BankAddr3_ ); break; // BankAddr3
      case 40002170: return ( &BankAddr4_ ); break; // BankAddr4
      case 40002171: return ( &BankAddr5_ ); break; // BankAddr5
      case 40002146: return ( &BankContact_ ); break; // BankContact
      case 40006693: return ( &BankCntry_ ); break; // BankCntry
      case 40006694: return ( &BankPstl_ ); break; // BankPstl
      case 40000642: return ( &PayReason1_ ); break; // PayReason1
      case 40000643: return ( &PayReason2_ ); break; // PayReason2
      case 40003095: return ( &PayMethod_ ); break; // PayMethod
      case 40000956: return ( &BankAcctVer_ ); break; // BankAcctVer
      case 40006779: return ( &CommitMstrVer_ ); break; // CommitMstrVer
      case 40006932: return ( &NextDrawDate_ ); break; // NextDrawDate
      case 40002445: return ( &NextProcessDate_ ); break; // NextProcessDate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0434_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0434_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0434_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 46 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &AccountNum_; break;
            case 7: aFlds_[7] = &RunMode_; break;
            case 8: aFlds_[8] = &PACDeff_; break;
            case 9: aFlds_[9] = &AcctCommitMstrUUID_; break;
            case 10: aFlds_[10] = &CommitmentUUID_; break;
            case 11: aFlds_[11] = &CommitmentCode_; break;
            case 12: aFlds_[12] = &CommitAmt_; break;
            case 13: aFlds_[13] = &CommitDeff_; break;
            case 14: aFlds_[14] = &PACID_; break;
            case 15: aFlds_[15] = &InstCode_; break;
            case 16: aFlds_[16] = &SwiftCode_; break;
            case 17: aFlds_[17] = &RefNumber_; break;
            case 18: aFlds_[18] = &TransitNo_; break;
            case 19: aFlds_[19] = &BankAcctNum_; break;
            case 20: aFlds_[20] = &BankAcctName_; break;
            case 21: aFlds_[21] = &SourceOfBankAcct_; break;
            case 22: aFlds_[22] = &BankAcctCurrency_; break;
            case 23: aFlds_[23] = &BankAcctType_; break;
            case 24: aFlds_[24] = &BankType_; break;
            case 25: aFlds_[25] = &BankIdNum_; break;
            case 26: aFlds_[26] = &ACHProcessor_; break;
            case 27: aFlds_[27] = &BankId_; break;
            case 28: aFlds_[28] = &CreditInfoLine1_; break;
            case 29: aFlds_[29] = &CreditInfoLine2_; break;
            case 30: aFlds_[30] = &InstName_; break;
            case 31: aFlds_[31] = &BankAddr1_; break;
            case 32: aFlds_[32] = &BankAddr2_; break;
            case 33: aFlds_[33] = &BankAddr3_; break;
            case 34: aFlds_[34] = &BankAddr4_; break;
            case 35: aFlds_[35] = &BankAddr5_; break;
            case 36: aFlds_[36] = &BankContact_; break;
            case 37: aFlds_[37] = &BankCntry_; break;
            case 38: aFlds_[38] = &BankPstl_; break;
            case 39: aFlds_[39] = &PayReason1_; break;
            case 40: aFlds_[40] = &PayReason2_; break;
            case 41: aFlds_[41] = &PayMethod_; break;
            case 42: aFlds_[42] = &BankAcctVer_; break;
            case 43: aFlds_[43] = &CommitMstrVer_; break;
            case 44: aFlds_[44] = &NextDrawDate_; break;
            case 45: aFlds_[45] = &NextProcessDate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0434_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0434_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0434_REQ::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0434_REQ::getDefinedByteLength( void ) const
{
   return( 1999 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0434_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0434_REQ::fieldExists( id );
}

bool dsi_DSTC0434_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40000040: return( true );
      case 40000990: return( true );
      case 40006755: return( true );
      case 40006734: return( true );
      case 40006735: return( true );
      case 40006736: return( true );
      case 40006744: return( true );
      case 40006738: return( true );
      case 40006754: return( true );
      case 40000244: return( true );
      case 40000245: return( true );
      case 40000246: return( true );
      case 40000247: return( true );
      case 40000248: return( true );
      case 40000249: return( true );
      case 40000250: return( true );
      case 40000251: return( true );
      case 40000253: return( true );
      case 40002299: return( true );
      case 40002301: return( true );
      case 40002150: return( true );
      case 40002283: return( true );
      case 40002294: return( true );
      case 40002295: return( true );
      case 40000285: return( true );
      case 40002167: return( true );
      case 40002168: return( true );
      case 40002169: return( true );
      case 40002170: return( true );
      case 40002171: return( true );
      case 40002146: return( true );
      case 40006693: return( true );
      case 40006694: return( true );
      case 40000642: return( true );
      case 40000643: return( true );
      case 40003095: return( true );
      case 40000956: return( true );
      case 40006779: return( true );
      case 40006932: return( true );
      case 40002445: return( true );
   }
   return false;
}

