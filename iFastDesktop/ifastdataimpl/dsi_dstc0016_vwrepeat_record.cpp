// BFDataImpl implementation file for DataSet DSTC0016.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:58 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0016_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0016_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0016_VWRepeat_Record() { return new dsi_DSTC0016_VWRepeat_Record; }

dsi_DSTC0016_VWRepeat_Record::dsi_DSTC0016_VWRepeat_Record()
: BFDataImpl( 40000339 )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, FundToCode_( ifds::FundToCode, &ifds::s_FldProp_FundToCode )
, ClassToCode_( ifds::ClassToCode, &ifds::s_FldProp_ClassToCode )
, AllocPercent_( ifds::AllocPercent, &ifds::s_FldProp_AllocPercent )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, DistributionPayType_( ifds::DistributionPayType, &ifds::s_FldProp_DistributionPayType )
, PayTypeDesc_( ifds::PayTypeDesc, &ifds::s_FldProp_PayTypeDesc )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, CurrencyName_( ifds::CurrencyName, &ifds::s_FldProp_CurrencyName )
, InstCode_( ifds::InstCode, &ifds::s_FldProp_InstCode )
, SwiftCode_( ifds::SwiftCode, &ifds::s_FldProp_SwiftCode )
, RefNumber_( ifds::RefNumber, &ifds::s_FldProp_RefNumber )
, TransitNo_( ifds::TransitNo, &ifds::s_FldProp_TransitNo )
, BankAcctNum_( ifds::BankAcctNum, &ifds::s_FldProp_BankAcctNum )
, BankAcctName_( ifds::BankAcctName, &ifds::s_FldProp_BankAcctName )
, PayReason1_( ifds::PayReason1, &ifds::s_FldProp_PayReason1 )
, BankAcctType_( ifds::BankAcctType, &ifds::s_FldProp_BankAcctType )
, BankAcctTypeDesc_( ifds::BankAcctTypeDesc, &ifds::s_FldProp_BankAcctTypeDesc )
, InstName_( ifds::InstName, &ifds::s_FldProp_InstName )
, BankDetlVer_( ifds::BankDetlVer, &ifds::s_FldProp_BankDetlVer )
, BankDetlRid_( ifds::BankDetlRid, &ifds::s_FldProp_BankDetlRid )
, DistribDetlVer_( ifds::DistribDetlVer, &ifds::s_FldProp_DistribDetlVer )
, DistribDetlRid_( ifds::DistribDetlRid, &ifds::s_FldProp_DistribDetlRid )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, TransTypeDesc_( ifds::TransTypeDesc, &ifds::s_FldProp_TransTypeDesc )
, CorrespBankId_( ifds::CorrespBankId, &ifds::s_FldProp_CorrespBankId )
, BankIdType_( ifds::BankIdType, &ifds::s_FldProp_BankIdType )
, BankIdTypeCB_( ifds::BankIdTypeCB, &ifds::s_FldProp_BankIdTypeCB )
, BankIdValue_( ifds::BankIdValue, &ifds::s_FldProp_BankIdValue )
, BankIdValueCB_( ifds::BankIdValueCB, &ifds::s_FldProp_BankIdValueCB )
, FFC_( ifds::FFC, &ifds::s_FldProp_FFC )
, FFC1_( ifds::FFC1, &ifds::s_FldProp_FFC1 )
, ACHProcessor_( ifds::ACHProcessor, &ifds::s_FldProp_ACHProcessor )
, BankContactCB_( ifds::BankContactCB, &ifds::s_FldProp_BankContactCB )
, BankCountryCB_( ifds::BankCountryCB, &ifds::s_FldProp_BankCountryCB )
, BankPostalCB_( ifds::BankPostalCB, &ifds::s_FldProp_BankPostalCB )
, BankAddrCB1_( ifds::BankAddrCB1, &ifds::s_FldProp_BankAddrCB1 )
, BankAddrCB2_( ifds::BankAddrCB2, &ifds::s_FldProp_BankAddrCB2 )
, BankAddrCB3_( ifds::BankAddrCB3, &ifds::s_FldProp_BankAddrCB3 )
, BankAddrCB4_( ifds::BankAddrCB4, &ifds::s_FldProp_BankAddrCB4 )
, BankAddrCB5_( ifds::BankAddrCB5, &ifds::s_FldProp_BankAddrCB5 )
, BankAddr1_( ifds::BankAddr1, &ifds::s_FldProp_BankAddr1 )
, BankAddr2_( ifds::BankAddr2, &ifds::s_FldProp_BankAddr2 )
, BankAddr3_( ifds::BankAddr3, &ifds::s_FldProp_BankAddr3 )
, BankAddr4_( ifds::BankAddr4, &ifds::s_FldProp_BankAddr4 )
, BankAddr5_( ifds::BankAddr5, &ifds::s_FldProp_BankAddr5 )
, BankContact_( ifds::BankContact, &ifds::s_FldProp_BankContact )
, BankPostal_( ifds::BankPostal, &ifds::s_FldProp_BankPostal )
, TransitNoCB_( ifds::TransitNoCB, &ifds::s_FldProp_TransitNoCB )
, InstNameCB_( ifds::InstNameCB, &ifds::s_FldProp_InstNameCB )
, BankId_( ifds::BankId, &ifds::s_FldProp_BankId )
, BankCountry_( ifds::BankCountry, &ifds::s_FldProp_BankCountry )
, AddrCode_( ifds::AddrCode, &ifds::s_FldProp_AddrCode )
, PayMethod_( ifds::PayMethod, &ifds::s_FldProp_PayMethod )
, PayReason2_( ifds::PayReason2, &ifds::s_FldProp_PayReason2 )
, AcctDistribOpt_( ifds::AcctDistribOpt, &ifds::s_FldProp_AcctDistribOpt )
, AcctDistribCurrencyOption_( ifds::AcctDistribCurrencyOption, &ifds::s_FldProp_AcctDistribCurrencyOption )
, DistribGBCD_( ifds::DistribGBCD, &ifds::s_FldProp_DistribGBCD )
, VerifyStat_( ifds::VerifyStat, &ifds::s_FldProp_VerifyStat )
, DistribRate_( ifds::DistribRate, &ifds::s_FldProp_DistribRate )
{
   cFields_ = 65;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0016_VWRepeat_Record::~dsi_DSTC0016_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0016_VWRepeat_Record::clone()
{
   dsi_DSTC0016_VWRepeat_Record* p = new dsi_DSTC0016_VWRepeat_Record;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->EffectiveDate_ = EffectiveDate_;
   p->FundToCode_ = FundToCode_;
   p->ClassToCode_ = ClassToCode_;
   p->AllocPercent_ = AllocPercent_;
   p->ProcessDate_ = ProcessDate_;
   p->Username_ = Username_;
   p->DistributionPayType_ = DistributionPayType_;
   p->PayTypeDesc_ = PayTypeDesc_;
   p->Currency_ = Currency_;
   p->CurrencyName_ = CurrencyName_;
   p->InstCode_ = InstCode_;
   p->SwiftCode_ = SwiftCode_;
   p->RefNumber_ = RefNumber_;
   p->TransitNo_ = TransitNo_;
   p->BankAcctNum_ = BankAcctNum_;
   p->BankAcctName_ = BankAcctName_;
   p->PayReason1_ = PayReason1_;
   p->BankAcctType_ = BankAcctType_;
   p->BankAcctTypeDesc_ = BankAcctTypeDesc_;
   p->InstName_ = InstName_;
   p->BankDetlVer_ = BankDetlVer_;
   p->BankDetlRid_ = BankDetlRid_;
   p->DistribDetlVer_ = DistribDetlVer_;
   p->DistribDetlRid_ = DistribDetlRid_;
   p->ModUser_ = ModUser_;
   p->ModDate_ = ModDate_;
   p->TransType_ = TransType_;
   p->TransTypeDesc_ = TransTypeDesc_;
   p->CorrespBankId_ = CorrespBankId_;
   p->BankIdType_ = BankIdType_;
   p->BankIdTypeCB_ = BankIdTypeCB_;
   p->BankIdValue_ = BankIdValue_;
   p->BankIdValueCB_ = BankIdValueCB_;
   p->FFC_ = FFC_;
   p->FFC1_ = FFC1_;
   p->ACHProcessor_ = ACHProcessor_;
   p->BankContactCB_ = BankContactCB_;
   p->BankCountryCB_ = BankCountryCB_;
   p->BankPostalCB_ = BankPostalCB_;
   p->BankAddrCB1_ = BankAddrCB1_;
   p->BankAddrCB2_ = BankAddrCB2_;
   p->BankAddrCB3_ = BankAddrCB3_;
   p->BankAddrCB4_ = BankAddrCB4_;
   p->BankAddrCB5_ = BankAddrCB5_;
   p->BankAddr1_ = BankAddr1_;
   p->BankAddr2_ = BankAddr2_;
   p->BankAddr3_ = BankAddr3_;
   p->BankAddr4_ = BankAddr4_;
   p->BankAddr5_ = BankAddr5_;
   p->BankContact_ = BankContact_;
   p->BankPostal_ = BankPostal_;
   p->TransitNoCB_ = TransitNoCB_;
   p->InstNameCB_ = InstNameCB_;
   p->BankId_ = BankId_;
   p->BankCountry_ = BankCountry_;
   p->AddrCode_ = AddrCode_;
   p->PayMethod_ = PayMethod_;
   p->PayReason2_ = PayReason2_;
   p->AcctDistribOpt_ = AcctDistribOpt_;
   p->AcctDistribCurrencyOption_ = AcctDistribCurrencyOption_;
   p->DistribGBCD_ = DistribGBCD_;
   p->VerifyStat_ = VerifyStat_;
   p->DistribRate_ = DistribRate_;
   return(p);
}

BFDataField* dsi_DSTC0016_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000340: return ( &FundToCode_ ); break; // FundToCode
      case 40000341: return ( &ClassToCode_ ); break; // ClassToCode
      case 40000342: return ( &AllocPercent_ ); break; // AllocPercent
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40001194: return ( &DistributionPayType_ ); break; // DistributionPayType
      case 40000243: return ( &PayTypeDesc_ ); break; // PayTypeDesc
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40000181: return ( &CurrencyName_ ); break; // CurrencyName
      case 40000244: return ( &InstCode_ ); break; // InstCode
      case 40000245: return ( &SwiftCode_ ); break; // SwiftCode
      case 40000246: return ( &RefNumber_ ); break; // RefNumber
      case 40000247: return ( &TransitNo_ ); break; // TransitNo
      case 40000248: return ( &BankAcctNum_ ); break; // BankAcctNum
      case 40000249: return ( &BankAcctName_ ); break; // BankAcctName
      case 40000642: return ( &PayReason1_ ); break; // PayReason1
      case 40000253: return ( &BankAcctType_ ); break; // BankAcctType
      case 40000254: return ( &BankAcctTypeDesc_ ); break; // BankAcctTypeDesc
      case 40000285: return ( &InstName_ ); break; // InstName
      case 40000913: return ( &BankDetlVer_ ); break; // BankDetlVer
      case 40000948: return ( &BankDetlRid_ ); break; // BankDetlRid
      case 40000949: return ( &DistribDetlVer_ ); break; // DistribDetlVer
      case 40000950: return ( &DistribDetlRid_ ); break; // DistribDetlRid
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40000337: return ( &TransTypeDesc_ ); break; // TransTypeDesc
      case 40002181: return ( &CorrespBankId_ ); break; // CorrespBankId
      case 40002119: return ( &BankIdType_ ); break; // BankIdType
      case 40002121: return ( &BankIdTypeCB_ ); break; // BankIdTypeCB
      case 40002123: return ( &BankIdValue_ ); break; // BankIdValue
      case 40002124: return ( &BankIdValueCB_ ); break; // BankIdValueCB
      case 40002148: return ( &FFC_ ); break; // FFC
      case 40002166: return ( &FFC1_ ); break; // FFC1
      case 40002150: return ( &ACHProcessor_ ); break; // ACHProcessor
      case 40002147: return ( &BankContactCB_ ); break; // BankContactCB
      case 40002145: return ( &BankCountryCB_ ); break; // BankCountryCB
      case 40002143: return ( &BankPostalCB_ ); break; // BankPostalCB
      case 40002172: return ( &BankAddrCB1_ ); break; // BankAddrCB1
      case 40002173: return ( &BankAddrCB2_ ); break; // BankAddrCB2
      case 40002174: return ( &BankAddrCB3_ ); break; // BankAddrCB3
      case 40002175: return ( &BankAddrCB4_ ); break; // BankAddrCB4
      case 40002176: return ( &BankAddrCB5_ ); break; // BankAddrCB5
      case 40002167: return ( &BankAddr1_ ); break; // BankAddr1
      case 40002168: return ( &BankAddr2_ ); break; // BankAddr2
      case 40002169: return ( &BankAddr3_ ); break; // BankAddr3
      case 40002170: return ( &BankAddr4_ ); break; // BankAddr4
      case 40002171: return ( &BankAddr5_ ); break; // BankAddr5
      case 40002146: return ( &BankContact_ ); break; // BankContact
      case 40002142: return ( &BankPostal_ ); break; // BankPostal
      case 40002125: return ( &TransitNoCB_ ); break; // TransitNoCB
      case 40002152: return ( &InstNameCB_ ); break; // InstNameCB
      case 40002283: return ( &BankId_ ); break; // BankId
      case 40002144: return ( &BankCountry_ ); break; // BankCountry
      case 40000277: return ( &AddrCode_ ); break; // AddrCode
      case 40003095: return ( &PayMethod_ ); break; // PayMethod
      case 40000643: return ( &PayReason2_ ); break; // PayReason2
      case 40005951: return ( &AcctDistribOpt_ ); break; // AcctDistribOpt
      case 40005954: return ( &AcctDistribCurrencyOption_ ); break; // AcctDistribCurrencyOption
      case 40006049: return ( &DistribGBCD_ ); break; // DistribGBCD
      case 40006046: return ( &VerifyStat_ ); break; // VerifyStat
      case 40007294: return ( &DistribRate_ ); break; // DistribRate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0016_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0016_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0016_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 65 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FundCode_; break;
            case 1: aFlds_[1] = &ClassCode_; break;
            case 2: aFlds_[2] = &EffectiveDate_; break;
            case 3: aFlds_[3] = &FundToCode_; break;
            case 4: aFlds_[4] = &ClassToCode_; break;
            case 5: aFlds_[5] = &AllocPercent_; break;
            case 6: aFlds_[6] = &ProcessDate_; break;
            case 7: aFlds_[7] = &Username_; break;
            case 8: aFlds_[8] = &DistributionPayType_; break;
            case 9: aFlds_[9] = &PayTypeDesc_; break;
            case 10: aFlds_[10] = &Currency_; break;
            case 11: aFlds_[11] = &CurrencyName_; break;
            case 12: aFlds_[12] = &InstCode_; break;
            case 13: aFlds_[13] = &SwiftCode_; break;
            case 14: aFlds_[14] = &RefNumber_; break;
            case 15: aFlds_[15] = &TransitNo_; break;
            case 16: aFlds_[16] = &BankAcctNum_; break;
            case 17: aFlds_[17] = &BankAcctName_; break;
            case 18: aFlds_[18] = &PayReason1_; break;
            case 19: aFlds_[19] = &BankAcctType_; break;
            case 20: aFlds_[20] = &BankAcctTypeDesc_; break;
            case 21: aFlds_[21] = &InstName_; break;
            case 22: aFlds_[22] = &BankDetlVer_; break;
            case 23: aFlds_[23] = &BankDetlRid_; break;
            case 24: aFlds_[24] = &DistribDetlVer_; break;
            case 25: aFlds_[25] = &DistribDetlRid_; break;
            case 26: aFlds_[26] = &ModUser_; break;
            case 27: aFlds_[27] = &ModDate_; break;
            case 28: aFlds_[28] = &TransType_; break;
            case 29: aFlds_[29] = &TransTypeDesc_; break;
            case 30: aFlds_[30] = &CorrespBankId_; break;
            case 31: aFlds_[31] = &BankIdType_; break;
            case 32: aFlds_[32] = &BankIdTypeCB_; break;
            case 33: aFlds_[33] = &BankIdValue_; break;
            case 34: aFlds_[34] = &BankIdValueCB_; break;
            case 35: aFlds_[35] = &FFC_; break;
            case 36: aFlds_[36] = &FFC1_; break;
            case 37: aFlds_[37] = &ACHProcessor_; break;
            case 38: aFlds_[38] = &BankContactCB_; break;
            case 39: aFlds_[39] = &BankCountryCB_; break;
            case 40: aFlds_[40] = &BankPostalCB_; break;
            case 41: aFlds_[41] = &BankAddrCB1_; break;
            case 42: aFlds_[42] = &BankAddrCB2_; break;
            case 43: aFlds_[43] = &BankAddrCB3_; break;
            case 44: aFlds_[44] = &BankAddrCB4_; break;
            case 45: aFlds_[45] = &BankAddrCB5_; break;
            case 46: aFlds_[46] = &BankAddr1_; break;
            case 47: aFlds_[47] = &BankAddr2_; break;
            case 48: aFlds_[48] = &BankAddr3_; break;
            case 49: aFlds_[49] = &BankAddr4_; break;
            case 50: aFlds_[50] = &BankAddr5_; break;
            case 51: aFlds_[51] = &BankContact_; break;
            case 52: aFlds_[52] = &BankPostal_; break;
            case 53: aFlds_[53] = &TransitNoCB_; break;
            case 54: aFlds_[54] = &InstNameCB_; break;
            case 55: aFlds_[55] = &BankId_; break;
            case 56: aFlds_[56] = &BankCountry_; break;
            case 57: aFlds_[57] = &AddrCode_; break;
            case 58: aFlds_[58] = &PayMethod_; break;
            case 59: aFlds_[59] = &PayReason2_; break;
            case 60: aFlds_[60] = &AcctDistribOpt_; break;
            case 61: aFlds_[61] = &AcctDistribCurrencyOption_; break;
            case 62: aFlds_[62] = &DistribGBCD_; break;
            case 63: aFlds_[63] = &VerifyStat_; break;
            case 64: aFlds_[64] = &DistribRate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0016_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0016_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0016_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0016_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 3061 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0016_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0016_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0016_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000327: return( true );
      case 40000340: return( true );
      case 40000341: return( true );
      case 40000342: return( true );
      case 40000216: return( true );
      case 40000117: return( true );
      case 40001194: return( true );
      case 40000243: return( true );
      case 40000180: return( true );
      case 40000181: return( true );
      case 40000244: return( true );
      case 40000245: return( true );
      case 40000246: return( true );
      case 40000247: return( true );
      case 40000248: return( true );
      case 40000249: return( true );
      case 40000642: return( true );
      case 40000253: return( true );
      case 40000254: return( true );
      case 40000285: return( true );
      case 40000913: return( true );
      case 40000948: return( true );
      case 40000949: return( true );
      case 40000950: return( true );
      case 40000218: return( true );
      case 40000217: return( true );
      case 40000095: return( true );
      case 40000337: return( true );
      case 40002181: return( true );
      case 40002119: return( true );
      case 40002121: return( true );
      case 40002123: return( true );
      case 40002124: return( true );
      case 40002148: return( true );
      case 40002166: return( true );
      case 40002150: return( true );
      case 40002147: return( true );
      case 40002145: return( true );
      case 40002143: return( true );
      case 40002172: return( true );
      case 40002173: return( true );
      case 40002174: return( true );
      case 40002175: return( true );
      case 40002176: return( true );
      case 40002167: return( true );
      case 40002168: return( true );
      case 40002169: return( true );
      case 40002170: return( true );
      case 40002171: return( true );
      case 40002146: return( true );
      case 40002142: return( true );
      case 40002125: return( true );
      case 40002152: return( true );
      case 40002283: return( true );
      case 40002144: return( true );
      case 40000277: return( true );
      case 40003095: return( true );
      case 40000643: return( true );
      case 40005951: return( true );
      case 40005954: return( true );
      case 40006049: return( true );
      case 40006046: return( true );
      case 40007294: return( true );
   }
   return false;
}

