// BFDataImpl implementation file for DataSet DSTC0455.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0455_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0455_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0455_VWRepeat_Record() { return new dsi_DSTC0455_VWRepeat_Record; }

dsi_DSTC0455_VWRepeat_Record::dsi_DSTC0455_VWRepeat_Record()
: BFDataImpl( 40007214 )
, FldName_( ifds::FldName, &ifds::s_FldProp_FldName )
, KeyField1_( ifds::KeyField1, &ifds::s_FldProp_KeyField1 )
, KeyField2_( ifds::KeyField2, &ifds::s_FldProp_KeyField2 )
, KeyField3_( ifds::KeyField3, &ifds::s_FldProp_KeyField3 )
, KeyField4_( ifds::KeyField4, &ifds::s_FldProp_KeyField4 )
, KeyField5_( ifds::KeyField5, &ifds::s_FldProp_KeyField5 )
, DefValue_( ifds::DefValue, &ifds::s_FldProp_DefValue )
, StatCode_( ifds::StatCode, &ifds::s_FldProp_StatCode )
{
   cFields_ = 8;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0455_VWRepeat_Record::~dsi_DSTC0455_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0455_VWRepeat_Record::clone()
{
   dsi_DSTC0455_VWRepeat_Record* p = new dsi_DSTC0455_VWRepeat_Record;
   p->FldName_ = FldName_;
   p->KeyField1_ = KeyField1_;
   p->KeyField2_ = KeyField2_;
   p->KeyField3_ = KeyField3_;
   p->KeyField4_ = KeyField4_;
   p->KeyField5_ = KeyField5_;
   p->DefValue_ = DefValue_;
   p->StatCode_ = StatCode_;
   return(p);
}

BFDataField* dsi_DSTC0455_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40007197: return ( &FldName_ ); break; // FldName
      case 40007203: return ( &KeyField1_ ); break; // KeyField1
      case 40007204: return ( &KeyField2_ ); break; // KeyField2
      case 40007205: return ( &KeyField3_ ); break; // KeyField3
      case 40007206: return ( &KeyField4_ ); break; // KeyField4
      case 40007207: return ( &KeyField5_ ); break; // KeyField5
      case 40007198: return ( &DefValue_ ); break; // DefValue
      case 40007208: return ( &StatCode_ ); break; // StatCode
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0455_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0455_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0455_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 8 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FldName_; break;
            case 1: aFlds_[1] = &KeyField1_; break;
            case 2: aFlds_[2] = &KeyField2_; break;
            case 3: aFlds_[3] = &KeyField3_; break;
            case 4: aFlds_[4] = &KeyField4_; break;
            case 5: aFlds_[5] = &KeyField5_; break;
            case 6: aFlds_[6] = &DefValue_; break;
            case 7: aFlds_[7] = &StatCode_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0455_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0455_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0455_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 500 );
}

unsigned long dsi_DSTC0455_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 920 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0455_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0455_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0455_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40007197: return( true );
      case 40007203: return( true );
      case 40007204: return( true );
      case 40007205: return( true );
      case 40007206: return( true );
      case 40007207: return( true );
      case 40007198: return( true );
      case 40007208: return( true );
   }
   return false;
}

