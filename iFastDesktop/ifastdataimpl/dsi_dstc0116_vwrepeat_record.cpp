// BFDataImpl implementation file for DataSet DSTC0116.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0116_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0116_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0116_VWRepeat_Record() { return new dsi_DSTC0116_VWRepeat_Record; }

dsi_DSTC0116_VWRepeat_Record::dsi_DSTC0116_VWRepeat_Record()
: BFDataImpl( 40001889 )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BrokerName_( ifds::BrokerName, &ifds::s_FldProp_BrokerName )
, RegAddrCode_( ifds::RegAddrCode, &ifds::s_FldProp_RegAddrCode )
, Addr11Line1_( ifds::Addr11Line1, &ifds::s_FldProp_Addr11Line1 )
, Addr11Line2_( ifds::Addr11Line2, &ifds::s_FldProp_Addr11Line2 )
, Addr11Line3_( ifds::Addr11Line3, &ifds::s_FldProp_Addr11Line3 )
, Addr11Line4_( ifds::Addr11Line4, &ifds::s_FldProp_Addr11Line4 )
, Addr11Line5_( ifds::Addr11Line5, &ifds::s_FldProp_Addr11Line5 )
, AddrCntryCode_( ifds::AddrCntryCode, &ifds::s_FldProp_AddrCntryCode )
, PostalCode_( ifds::PostalCode, &ifds::s_FldProp_PostalCode )
, Default_( ifds::Default, &ifds::s_FldProp_Default )
, TaxType_( ifds::TaxType, &ifds::s_FldProp_TaxType )
{
   cFields_ = 12;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0116_VWRepeat_Record::~dsi_DSTC0116_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0116_VWRepeat_Record::clone()
{
   dsi_DSTC0116_VWRepeat_Record* p = new dsi_DSTC0116_VWRepeat_Record;
   p->BrokerCode_ = BrokerCode_;
   p->BrokerName_ = BrokerName_;
   p->RegAddrCode_ = RegAddrCode_;
   p->Addr11Line1_ = Addr11Line1_;
   p->Addr11Line2_ = Addr11Line2_;
   p->Addr11Line3_ = Addr11Line3_;
   p->Addr11Line4_ = Addr11Line4_;
   p->Addr11Line5_ = Addr11Line5_;
   p->AddrCntryCode_ = AddrCntryCode_;
   p->PostalCode_ = PostalCode_;
   p->Default_ = Default_;
   p->TaxType_ = TaxType_;
   return(p);
}

BFDataField* dsi_DSTC0116_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000210: return ( &BrokerName_ ); break; // BrokerName
      case 40000993: return ( &RegAddrCode_ ); break; // RegAddrCode
      case 40000144: return ( &Addr11Line1_ ); break; // Addr11Line1
      case 40000145: return ( &Addr11Line2_ ); break; // Addr11Line2
      case 40000146: return ( &Addr11Line3_ ); break; // Addr11Line3
      case 40000147: return ( &Addr11Line4_ ); break; // Addr11Line4
      case 40000148: return ( &Addr11Line5_ ); break; // Addr11Line5
      case 40000299: return ( &AddrCntryCode_ ); break; // AddrCntryCode
      case 40000143: return ( &PostalCode_ ); break; // PostalCode
      case 40001891: return ( &Default_ ); break; // Default
      case 40000134: return ( &TaxType_ ); break; // TaxType
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0116_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0116_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0116_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 12 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &BrokerCode_; break;
            case 1: aFlds_[1] = &BrokerName_; break;
            case 2: aFlds_[2] = &RegAddrCode_; break;
            case 3: aFlds_[3] = &Addr11Line1_; break;
            case 4: aFlds_[4] = &Addr11Line2_; break;
            case 5: aFlds_[5] = &Addr11Line3_; break;
            case 6: aFlds_[6] = &Addr11Line4_; break;
            case 7: aFlds_[7] = &Addr11Line5_; break;
            case 8: aFlds_[8] = &AddrCntryCode_; break;
            case 9: aFlds_[9] = &PostalCode_; break;
            case 10: aFlds_[10] = &Default_; break;
            case 11: aFlds_[11] = &TaxType_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0116_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0116_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0116_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0116_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 610 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0116_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0116_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0116_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000044: return( true );
      case 40000210: return( true );
      case 40000993: return( true );
      case 40000144: return( true );
      case 40000145: return( true );
      case 40000146: return( true );
      case 40000147: return( true );
      case 40000148: return( true );
      case 40000299: return( true );
      case 40000143: return( true );
      case 40001891: return( true );
      case 40000134: return( true );
   }
   return false;
}

