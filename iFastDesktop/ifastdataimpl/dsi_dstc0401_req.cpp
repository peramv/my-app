// BFDataImpl implementation file for DataSet DSTC0401.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0401_req.h"


// This function creates an instance of dsi_DSTC0401_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0401_REQ() { return new dsi_DSTC0401_REQ; }

dsi_DSTC0401_REQ::dsi_DSTC0401_REQ()
: BFDataImpl( 40006064 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, TransNum_( ifds::TransNum, &ifds::s_FldProp_TransNum )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, TransType_( ifds::TransType, &ifds::s_FldProp_TransType )
, TradeDate_( ifds::TradeDate, &ifds::s_FldProp_TradeDate )
, SettleDate_( ifds::SettleDate, &ifds::s_FldProp_SettleDate )
, Amount_( ifds::Amount, &ifds::s_FldProp_Amount )
, AmountType_( ifds::AmountType, &ifds::s_FldProp_AmountType )
, SettleCurrency_( ifds::SettleCurrency, &ifds::s_FldProp_SettleCurrency )
, OrderType_( ifds::OrderType, &ifds::s_FldProp_OrderType )
, TransId_( ifds::TransId, &ifds::s_FldProp_TransId )
, ExchRate_( ifds::ExchRate, &ifds::s_FldProp_ExchRate )
, RedCode_( ifds::RedCode, &ifds::s_FldProp_RedCode )
, AccountTo_( ifds::AccountTo, &ifds::s_FldProp_AccountTo )
, PriceCode_( ifds::PriceCode, &ifds::s_FldProp_PriceCode )
, PriceInCode_( ifds::PriceInCode, &ifds::s_FldProp_PriceInCode )
{
   cFields_ = 23;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0401_REQ::~dsi_DSTC0401_REQ()
{
}

BFDataImpl* dsi_DSTC0401_REQ::clone()
{
   dsi_DSTC0401_REQ* p = new dsi_DSTC0401_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->TransNum_ = TransNum_;
   p->AccountNum_ = AccountNum_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->TransType_ = TransType_;
   p->TradeDate_ = TradeDate_;
   p->SettleDate_ = SettleDate_;
   p->Amount_ = Amount_;
   p->AmountType_ = AmountType_;
   p->SettleCurrency_ = SettleCurrency_;
   p->OrderType_ = OrderType_;
   p->TransId_ = TransId_;
   p->ExchRate_ = ExchRate_;
   p->RedCode_ = RedCode_;
   p->AccountTo_ = AccountTo_;
   p->PriceCode_ = PriceCode_;
   p->PriceInCode_ = PriceInCode_;
   return(p);
}

BFDataField* dsi_DSTC0401_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40000096: return ( &TransNum_ ); break; // TransNum
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000095: return ( &TransType_ ); break; // TransType
      case 40000097: return ( &TradeDate_ ); break; // TradeDate
      case 40000348: return ( &SettleDate_ ); break; // SettleDate
      case 40000231: return ( &Amount_ ); break; // Amount
      case 40000232: return ( &AmountType_ ); break; // AmountType
      case 40000455: return ( &SettleCurrency_ ); break; // SettleCurrency
      case 40000431: return ( &OrderType_ ); break; // OrderType
      case 40000063: return ( &TransId_ ); break; // TransId
      case 40000456: return ( &ExchRate_ ); break; // ExchRate
      case 40000435: return ( &RedCode_ ); break; // RedCode
      case 40000646: return ( &AccountTo_ ); break; // AccountTo
      case 40007751: return ( &PriceCode_ ); break; // PriceCode
      case 40007875: return ( &PriceInCode_ ); break; // PriceInCode
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0401_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0401_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0401_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 23 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &TransNum_; break;
            case 7: aFlds_[7] = &AccountNum_; break;
            case 8: aFlds_[8] = &FundCode_; break;
            case 9: aFlds_[9] = &ClassCode_; break;
            case 10: aFlds_[10] = &TransType_; break;
            case 11: aFlds_[11] = &TradeDate_; break;
            case 12: aFlds_[12] = &SettleDate_; break;
            case 13: aFlds_[13] = &Amount_; break;
            case 14: aFlds_[14] = &AmountType_; break;
            case 15: aFlds_[15] = &SettleCurrency_; break;
            case 16: aFlds_[16] = &OrderType_; break;
            case 17: aFlds_[17] = &TransId_; break;
            case 18: aFlds_[18] = &ExchRate_; break;
            case 19: aFlds_[19] = &RedCode_; break;
            case 20: aFlds_[20] = &AccountTo_; break;
            case 21: aFlds_[21] = &PriceCode_; break;
            case 22: aFlds_[22] = &PriceInCode_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0401_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0401_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0401_REQ::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0401_REQ::getDefinedByteLength( void ) const
{
   return( 1167 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0401_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0401_REQ::fieldExists( id );
}

bool dsi_DSTC0401_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40000096: return( true );
      case 40000040: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000095: return( true );
      case 40000097: return( true );
      case 40000348: return( true );
      case 40000231: return( true );
      case 40000232: return( true );
      case 40000455: return( true );
      case 40000431: return( true );
      case 40000063: return( true );
      case 40000456: return( true );
      case 40000435: return( true );
      case 40000646: return( true );
      case 40007751: return ( true );
      case 40007875: return ( true );
   }
   return false;
}

