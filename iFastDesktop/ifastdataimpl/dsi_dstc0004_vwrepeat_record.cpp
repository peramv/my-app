// BFDataImpl implementation file for DataSet DSTC0004.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Tuesday, January 23, 2018 10:42:09


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0004_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0004_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0004_VWRepeat_Record() { return new dsi_DSTC0004_VWRepeat_Record; }

dsi_DSTC0004_VWRepeat_Record::dsi_DSTC0004_VWRepeat_Record()
: BFDataImpl( 40000171 )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, BeneficialOwner_( ifds::BeneficialOwner, &ifds::s_FldProp_BeneficialOwner )
, AltAccount_( ifds::AltAccount, &ifds::s_FldProp_AltAccount )
, AcctType_( ifds::AcctType, &ifds::s_FldProp_AcctType )
, AcctTypeDesc_( ifds::AcctTypeDesc, &ifds::s_FldProp_AcctTypeDesc )
, TaxType_( ifds::TaxType, &ifds::s_FldProp_TaxType )
, TaxTypeDesc_( ifds::TaxTypeDesc, &ifds::s_FldProp_TaxTypeDesc )
, RecipientType_( ifds::RecipientType, &ifds::s_FldProp_RecipientType )
, RecipientTypeDesc_( ifds::RecipientTypeDesc, &ifds::s_FldProp_RecipientTypeDesc )
, AcctDesignation_( ifds::AcctDesignation, &ifds::s_FldProp_AcctDesignation )
, AcctDesignationDesc_( ifds::AcctDesignationDesc, &ifds::s_FldProp_AcctDesignationDesc )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, CurrencyName_( ifds::CurrencyName, &ifds::s_FldProp_CurrencyName )
, XrefNum_( ifds::XrefNum, &ifds::s_FldProp_XrefNum )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, Slsrep_( ifds::Slsrep, &ifds::s_FldProp_Slsrep )
, InterCode_( ifds::InterCode, &ifds::s_FldProp_InterCode )
, InterAccount_( ifds::InterAccount, &ifds::s_FldProp_InterAccount )
, AcctStatus_( ifds::AcctStatus, &ifds::s_FldProp_AcctStatus )
, AcctStatusDesc_( ifds::AcctStatusDesc, &ifds::s_FldProp_AcctStatusDesc )
, DateOfReg_( ifds::DateOfReg, &ifds::s_FldProp_DateOfReg )
, RRSPFee_( ifds::RRSPFee, &ifds::s_FldProp_RRSPFee )
, RRSPFeeDesc_( ifds::RRSPFeeDesc, &ifds::s_FldProp_RRSPFeeDesc )
, AMSCode_( ifds::AMSCode, &ifds::s_FldProp_AMSCode )
, PensionJuris_( ifds::PensionJuris, &ifds::s_FldProp_PensionJuris )
, PensionJurisDesc_( ifds::PensionJurisDesc, &ifds::s_FldProp_PensionJurisDesc )
, StopPurchase_( ifds::StopPurchase, &ifds::s_FldProp_StopPurchase )
, StopXferIn_( ifds::StopXferIn, &ifds::s_FldProp_StopXferIn )
, StopXferOut_( ifds::StopXferOut, &ifds::s_FldProp_StopXferOut )
, StopRed_( ifds::StopRed, &ifds::s_FldProp_StopRed )
, FeeWaived_( ifds::FeeWaived, &ifds::s_FldProp_FeeWaived )
, MarketMail_( ifds::MarketMail, &ifds::s_FldProp_MarketMail )
, Unseizable_( ifds::Unseizable, &ifds::s_FldProp_Unseizable )
, RegCompleted_( ifds::RegCompleted, &ifds::s_FldProp_RegCompleted )
, SupConf_( ifds::SupConf, &ifds::s_FldProp_SupConf )
, SupEmpConf_( ifds::SupEmpConf, &ifds::s_FldProp_SupEmpConf )
, InTrustFor_( ifds::InTrustFor, &ifds::s_FldProp_InTrustFor )
, Escrow_( ifds::Escrow, &ifds::s_FldProp_Escrow )
, AcctGroup_( ifds::AcctGroup, &ifds::s_FldProp_AcctGroup )
, AcctGroupName_( ifds::AcctGroupName, &ifds::s_FldProp_AcctGroupName )
, BrokerName_( ifds::BrokerName, &ifds::s_FldProp_BrokerName )
, BranchName_( ifds::BranchName, &ifds::s_FldProp_BranchName )
, SlsrepName_( ifds::SlsrepName, &ifds::s_FldProp_SlsrepName )
, SlsrepAltName_( ifds::SlsrepAltName, &ifds::s_FldProp_SlsrepAltName )
, AccountBalance_( ifds::AccountBalance, &ifds::s_FldProp_AccountBalance )
, ShrNum_( ifds::ShrNum, &ifds::s_FldProp_ShrNum )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, AcctMstrVer_( ifds::AcctMstrVer, &ifds::s_FldProp_AcctMstrVer )
, AcctMstrRid_( ifds::AcctMstrRid, &ifds::s_FldProp_AcctMstrRid )
, Employee_( ifds::Employee, &ifds::s_FldProp_Employee )
, MinWithAge_( ifds::MinWithAge, &ifds::s_FldProp_MinWithAge )
, ExistSIN_( ifds::ExistSIN, &ifds::s_FldProp_ExistSIN )
, ValidSIN_( ifds::ValidSIN, &ifds::s_FldProp_ValidSIN )
, ValidTaxJuris_( ifds::ValidTaxJuris, &ifds::s_FldProp_ValidTaxJuris )
, ExistBenAddr_( ifds::ExistBenAddr, &ifds::s_FldProp_ExistBenAddr )
, HoldMail_( ifds::HoldMail, &ifds::s_FldProp_HoldMail )
, ExistEscrow_( ifds::ExistEscrow, &ifds::s_FldProp_ExistEscrow )
, ExistBeneficiary_( ifds::ExistBeneficiary, &ifds::s_FldProp_ExistBeneficiary )
, ExistAlloc_( ifds::ExistAlloc, &ifds::s_FldProp_ExistAlloc )
, OutWireOrd_( ifds::OutWireOrd, &ifds::s_FldProp_OutWireOrd )
, SlsRepActive_( ifds::SlsRepActive, &ifds::s_FldProp_SlsRepActive )
, ClosingContr_( ifds::ClosingContr, &ifds::s_FldProp_ClosingContr )
, ContrMatured_( ifds::ContrMatured, &ifds::s_FldProp_ContrMatured )
, Age69_( ifds::Age69, &ifds::s_FldProp_Age69 )
, DeathClaim_( ifds::DeathClaim, &ifds::s_FldProp_DeathClaim )
, AddAcctFlag_( ifds::AddAcctFlag, &ifds::s_FldProp_AddAcctFlag )
, PendingTrade_( ifds::PendingTrade, &ifds::s_FldProp_PendingTrade )
, Certificates_( ifds::Certificates, &ifds::s_FldProp_Certificates )
, SystemTrsfr_( ifds::SystemTrsfr, &ifds::s_FldProp_SystemTrsfr )
, PAC_( ifds::PAC, &ifds::s_FldProp_PAC )
, SWP_( ifds::SWP, &ifds::s_FldProp_SWP )
, AcctAlloc_( ifds::AcctAlloc, &ifds::s_FldProp_AcctAlloc )
, ClanPlan_( ifds::ClanPlan, &ifds::s_FldProp_ClanPlan )
, UnsettledTrn_( ifds::UnsettledTrn, &ifds::s_FldProp_UnsettledTrn )
, TransFound_( ifds::TransFound, &ifds::s_FldProp_TransFound )
, FirstEffective_( ifds::FirstEffective, &ifds::s_FldProp_FirstEffective )
, MaxApplies_( ifds::MaxApplies, &ifds::s_FldProp_MaxApplies )
, RRIFQualified_( ifds::RRIFQualified, &ifds::s_FldProp_RRIFQualified )
, LegMinWithAge_( ifds::LegMinWithAge, &ifds::s_FldProp_LegMinWithAge )
, LockedIn_( ifds::LockedIn, &ifds::s_FldProp_LockedIn )
, FedJurisAllowed_( ifds::FedJurisAllowed, &ifds::s_FldProp_FedJurisAllowed )
, MinAge_( ifds::MinAge, &ifds::s_FldProp_MinAge )
, MaxAge_( ifds::MaxAge, &ifds::s_FldProp_MaxAge )
, TaxTypeRules_( ifds::TaxTypeRules, &ifds::s_FldProp_TaxTypeRules )
, DefTaxTypeRules_( ifds::DefTaxTypeRules, &ifds::s_FldProp_DefTaxTypeRules )
, FCConfig_( ifds::FCConfig, &ifds::s_FldProp_FCConfig )
, StopFCrebal_( ifds::StopFCrebal, &ifds::s_FldProp_StopFCrebal )
, FCOverrides_( ifds::FCOverrides, &ifds::s_FldProp_FCOverrides )
, AllLocked_( ifds::AllLocked, &ifds::s_FldProp_AllLocked )
, AcctLocked_( ifds::AcctLocked, &ifds::s_FldProp_AcctLocked )
, SelfDirected_( ifds::SelfDirected, &ifds::s_FldProp_SelfDirected )
, PlanType_( ifds::PlanType, &ifds::s_FldProp_PlanType )
, ValidSpSIN_( ifds::ValidSpSIN, &ifds::s_FldProp_ValidSpSIN )
, RIFExist_( ifds::RIFExist, &ifds::s_FldProp_RIFExist )
, DeathStat_( ifds::DeathStat, &ifds::s_FldProp_DeathStat )
, ACBExist_( ifds::ACBExist, &ifds::s_FldProp_ACBExist )
, InterestAccrExist_( ifds::InterestAccrExist, &ifds::s_FldProp_InterestAccrExist )
, DistributionExist_( ifds::DistributionExist, &ifds::s_FldProp_DistributionExist )
, ChequeExist_( ifds::ChequeExist, &ifds::s_FldProp_ChequeExist )
, ContractExist_( ifds::ContractExist, &ifds::s_FldProp_ContractExist )
, OutstLLP_( ifds::OutstLLP, &ifds::s_FldProp_OutstLLP )
, SocialCode_( ifds::SocialCode, &ifds::s_FldProp_SocialCode )
, SocialCodeDesc_( ifds::SocialCodeDesc, &ifds::s_FldProp_SocialCodeDesc )
, SavePlanExist_( ifds::SavePlanExist, &ifds::s_FldProp_SavePlanExist )
, ProdCode_( ifds::ProdCode, &ifds::s_FldProp_ProdCode )
, AcctCommExists_( ifds::AcctCommExists, &ifds::s_FldProp_AcctCommExists )
, GSTExempt_( ifds::GSTExempt, &ifds::s_FldProp_GSTExempt )
, AcctFeesExist_( ifds::AcctFeesExist, &ifds::s_FldProp_AcctFeesExist )
, ApplyPST_( ifds::ApplyPST, &ifds::s_FldProp_ApplyPST )
, Unisex_( ifds::Unisex, &ifds::s_FldProp_Unisex )
, SexDistinct_( ifds::SexDistinct, &ifds::s_FldProp_SexDistinct )
, BankChrgs_( ifds::BankChrgs, &ifds::s_FldProp_BankChrgs )
, ConsolidEFT_( ifds::ConsolidEFT, &ifds::s_FldProp_ConsolidEFT )
, PensionJurisExists_( ifds::PensionJurisExists, &ifds::s_FldProp_PensionJurisExists )
, FirstSettleDate_( ifds::FirstSettleDate, &ifds::s_FldProp_FirstSettleDate )
, AMSROCode_( ifds::AMSROCode, &ifds::s_FldProp_AMSROCode )
, MgmtFeePayOption_( ifds::MgmtFeePayOption, &ifds::s_FldProp_MgmtFeePayOption )
, CreatedToday_( ifds::CreatedToday, &ifds::s_FldProp_CreatedToday )
, ProtContractExists_( ifds::ProtContractExists, &ifds::s_FldProp_ProtContractExists )
, AcctCategoryExist_( ifds::AcctCategoryExist, &ifds::s_FldProp_AcctCategoryExist )
, ChargeERFee_( ifds::ChargeERFee, &ifds::s_FldProp_ChargeERFee )
, ChargeSTTRFee_( ifds::ChargeSTTRFee, &ifds::s_FldProp_ChargeSTTRFee )
, UseBrokerMF_( ifds::UseBrokerMF, &ifds::s_FldProp_UseBrokerMF )
, StopAMSRebalancing_( ifds::StopAMSRebalancing, &ifds::s_FldProp_StopAMSRebalancing )
, AcctPurpose_( ifds::AcctPurpose, &ifds::s_FldProp_AcctPurpose )
, AdditionalInfo_( ifds::AdditionalInfo, &ifds::s_FldProp_AdditionalInfo )
, BusinessNo_( ifds::BusinessNo, &ifds::s_FldProp_BusinessNo )
, MemorablePlace_( ifds::MemorablePlace, &ifds::s_FldProp_MemorablePlace )
, MemorableWord_( ifds::MemorableWord, &ifds::s_FldProp_MemorableWord )
, MemorableDate_( ifds::MemorableDate, &ifds::s_FldProp_MemorableDate )
, PensionLegCode_( ifds::PensionLegCode, &ifds::s_FldProp_PensionLegCode )
, TelFaxAgreement_( ifds::TelFaxAgreement, &ifds::s_FldProp_TelFaxAgreement )
, ClearingID_( ifds::ClearingID, &ifds::s_FldProp_ClearingID )
, SettleLocExist_( ifds::SettleLocExist, &ifds::s_FldProp_SettleLocExist )
, DTAType_( ifds::DTAType, &ifds::s_FldProp_DTAType )
, Networkcontrolind_( ifds::Networkcontrolind, &ifds::s_FldProp_Networkcontrolind )
, ClearingFirm_( ifds::ClearingFirm, &ifds::s_FldProp_ClearingFirm )
, LSIFPAC_( ifds::LSIFPAC, &ifds::s_FldProp_LSIFPAC )
, HighestEntityRisk_( ifds::HighestEntityRisk, &ifds::s_FldProp_HighestEntityRisk )
, StopRedSettle_( ifds::StopRedSettle, &ifds::s_FldProp_StopRedSettle )
, RegistrationInfo_( ifds::RegistrationInfo, &ifds::s_FldProp_RegistrationInfo )
, FeeModelCode_( ifds::FeeModelCode, &ifds::s_FldProp_FeeModelCode )
, DSCFeeLevel_( ifds::DSCFeeLevel, &ifds::s_FldProp_DSCFeeLevel )
, LastEffectiveDate_( ifds::LastEffectiveDate, &ifds::s_FldProp_LastEffectiveDate )
, AcctCutOffTimeExists_( ifds::AcctCutOffTimeExists, &ifds::s_FldProp_AcctCutOffTimeExists )
, AgentForFirm_( ifds::AgentForFirm, &ifds::s_FldProp_AgentForFirm )
, TPA_( ifds::TPA, &ifds::s_FldProp_TPA )
, ParticipantID_( ifds::ParticipantID, &ifds::s_FldProp_ParticipantID )
, NetworkID_( ifds::NetworkID, &ifds::s_FldProp_NetworkID )
, ExistAssignee_( ifds::ExistAssignee, &ifds::s_FldProp_ExistAssignee )
, ConsolTypePW_( ifds::ConsolTypePW, &ifds::s_FldProp_ConsolTypePW )
, FundLimitOvrdExist_( ifds::FundLimitOvrdExist, &ifds::s_FldProp_FundLimitOvrdExist )
, IsNSCDividend_( ifds::IsNSCDividend, &ifds::s_FldProp_IsNSCDividend )
, ConsolTypeID_( ifds::ConsolTypeID, &ifds::s_FldProp_ConsolTypeID )
, PendingPrivate_( ifds::PendingPrivate, &ifds::s_FldProp_PendingPrivate )
, AccountClosingReason_( ifds::AccountClosingReason, &ifds::s_FldProp_AccountClosingReason )
, ActiveAMSExists_( ifds::ActiveAMSExists, &ifds::s_FldProp_ActiveAMSExists )
, SiblingOnly_( ifds::SiblingOnly, &ifds::s_FldProp_SiblingOnly )
, Affluent_( ifds::Affluent, &ifds::s_FldProp_Affluent )
, MgmtFeeId_( ifds::MgmtFeeId, &ifds::s_FldProp_MgmtFeeId )
, MgmFeeType_( ifds::MgmFeeType, &ifds::s_FldProp_MgmFeeType )
, MgmtFeeRbtId_( ifds::MgmtFeeRbtId, &ifds::s_FldProp_MgmtFeeRbtId )
, MgmtFeeRbtType_( ifds::MgmtFeeRbtType, &ifds::s_FldProp_MgmtFeeRbtType )
, LinkMFR_( ifds::LinkMFR, &ifds::s_FldProp_LinkMFR )
, AcctAMSExist_( ifds::AcctAMSExist, &ifds::s_FldProp_AcctAMSExist )
, InvoiceModelID_( ifds::InvoiceModelID, &ifds::s_FldProp_InvoiceModelID )
, ActiveCert_( ifds::ActiveCert, &ifds::s_FldProp_ActiveCert )
, MinWaived_( ifds::MinWaived, &ifds::s_FldProp_MinWaived )
, HoldDivPymt_( ifds::HoldDivPymt, &ifds::s_FldProp_HoldDivPymt )
, DOTAdnd_( ifds::DOTAdnd, &ifds::s_FldProp_DOTAdnd )
, SettlementRuleExist_( ifds::SettlementRuleExist, &ifds::s_FldProp_SettlementRuleExist )
, TaxTypeSchedule_( ifds::TaxTypeSchedule, &ifds::s_FldProp_TaxTypeSchedule )
, AcctActivityExists_( ifds::AcctActivityExists, &ifds::s_FldProp_AcctActivityExists )
, StopReason_( ifds::StopReason, &ifds::s_FldProp_StopReason )
, AdditionalStopReason_( ifds::AdditionalStopReason, &ifds::s_FldProp_AdditionalStopReason )
, TypeOfInvestor_( ifds::TypeOfInvestor, &ifds::s_FldProp_TypeOfInvestor )
, InvestingOnBehalf_( ifds::InvestingOnBehalf, &ifds::s_FldProp_InvestingOnBehalf )
, ComplianceCode_( ifds::ComplianceCode, &ifds::s_FldProp_ComplianceCode )
, DocListExists_( ifds::DocListExists, &ifds::s_FldProp_DocListExists )
, UnitRoundMethod_( ifds::UnitRoundMethod, &ifds::s_FldProp_UnitRoundMethod )
, UnLockGrossAmt_( ifds::UnLockGrossAmt, &ifds::s_FldProp_UnLockGrossAmt )
, UnLockDeff_( ifds::UnLockDeff, &ifds::s_FldProp_UnLockDeff )
, RtnMailStageList_( ifds::RtnMailStageList, &ifds::s_FldProp_RtnMailStageList )
, StaleChqStageList_( ifds::StaleChqStageList, &ifds::s_FldProp_StaleChqStageList )
, StopNFU_( ifds::StopNFU, &ifds::s_FldProp_StopNFU )
, ExemptPeriod_( ifds::ExemptPeriod, &ifds::s_FldProp_ExemptPeriod )
, NextMFRProcessDate_( ifds::NextMFRProcessDate, &ifds::s_FldProp_NextMFRProcessDate )
, IsMFRAccount_( ifds::IsMFRAccount, &ifds::s_FldProp_IsMFRAccount )
, IsClosedCountryResident_( ifds::IsClosedCountryResident, &ifds::s_FldProp_IsClosedCountryResident )
, IARuleSetup_( ifds::IARuleSetup, &ifds::s_FldProp_IARuleSetup )
, EntityUnverifiedExist_( ifds::EntityUnverifiedExist, &ifds::s_FldProp_EntityUnverifiedExist )
, GrandFathered_( ifds::GrandFathered, &ifds::s_FldProp_GrandFathered )
, RESPBenefDeleted_( ifds::RESPBenefDeleted, &ifds::s_FldProp_RESPBenefDeleted )
, RESPAcctInfoExists_( ifds::RESPAcctInfoExists, &ifds::s_FldProp_RESPAcctInfoExists )
, Pre98Contrib_( ifds::Pre98Contrib, &ifds::s_FldProp_Pre98Contrib )
, AIPWithdrawalExists_( ifds::AIPWithdrawalExists, &ifds::s_FldProp_AIPWithdrawalExists )
, OrigPlanDeff_( ifds::OrigPlanDeff, &ifds::s_FldProp_OrigPlanDeff )
, IsGWOContractExist_( ifds::IsGWOContractExist, &ifds::s_FldProp_IsGWOContractExist )
, AcctGuarGuardExists_( ifds::AcctGuarGuardExists, &ifds::s_FldProp_AcctGuarGuardExists )
, RESPQCResidentFound_( ifds::RESPQCResidentFound, &ifds::s_FldProp_RESPQCResidentFound )
, GovAmendmentExist_( ifds::GovAmendmentExist, &ifds::s_FldProp_GovAmendmentExist )
, IsAcctRunCuratorFile_( ifds::IsAcctRunCuratorFile, &ifds::s_FldProp_IsAcctRunCuratorFile )
, HasAcctBeenUnFrozen_( ifds::HasAcctBeenUnFrozen, &ifds::s_FldProp_HasAcctBeenUnFrozen )
, StaleChqExists_( ifds::StaleChqExists, &ifds::s_FldProp_StaleChqExists )
, RemittedChqExists_( ifds::RemittedChqExists, &ifds::s_FldProp_RemittedChqExists )
, RemittedChqStageList_( ifds::RemittedChqStageList, &ifds::s_FldProp_RemittedChqStageList )
, ConsolTypeED_( ifds::ConsolTypeED, &ifds::s_FldProp_ConsolTypeED )
, InceptionDate_( ifds::InceptionDate, &ifds::s_FldProp_InceptionDate )
, ProdPortfolioUUID_( ifds::ProdPortfolioUUID, &ifds::s_FldProp_ProdPortfolioUUID )
, ProdPortfolioPlanUUID_( ifds::ProdPortfolioPlanUUID, &ifds::s_FldProp_ProdPortfolioPlanUUID )
, UnclmRemitDate_( ifds::UnclmRemitDate, &ifds::s_FldProp_UnclmRemitDate )
, NSCCSocialCode_( ifds::NSCCSocialCode, &ifds::s_FldProp_NSCCSocialCode )
, HasGIAHolding_( ifds::HasGIAHolding, &ifds::s_FldProp_HasGIAHolding )
, CanHaveCashSweep_( ifds::CanHaveCashSweep, &ifds::s_FldProp_CanHaveCashSweep )
, CanHaveMatInstr_( ifds::CanHaveMatInstr, &ifds::s_FldProp_CanHaveMatInstr )
, CashSweepExists_( ifds::CashSweepExists, &ifds::s_FldProp_CashSweepExists )
, MatIntExists_( ifds::MatIntExists, &ifds::s_FldProp_MatIntExists )
, OrgType_( ifds::OrgType, &ifds::s_FldProp_OrgType )
, SubOrgType_( ifds::SubOrgType, &ifds::s_FldProp_SubOrgType )
, TerritoryCode_( ifds::TerritoryCode, &ifds::s_FldProp_TerritoryCode )
, CommitmentStatus_( ifds::CommitmentStatus, &ifds::s_FldProp_CommitmentStatus )
, LifeAnnuityExist_( ifds::LifeAnnuityExist, &ifds::s_FldProp_LifeAnnuityExist )
, StopAdjDate_( ifds::StopAdjDate, &ifds::s_FldProp_StopAdjDate )
, NonFinConfirm_( ifds::NonFinConfirm, &ifds::s_FldProp_NonFinConfirm )
, SettleCurrency_( ifds::SettleCurrency, &ifds::s_FldProp_SettleCurrency )
, RegAgentCode_( ifds::RegAgentCode, &ifds::s_FldProp_RegAgentCode )
, GWLWAAvailOptions_( ifds::GWLWAAvailOptions, &ifds::s_FldProp_GWLWAAvailOptions )
, T5AnniversaryDate_( ifds::T5AnniversaryDate, &ifds::s_FldProp_T5AnniversaryDate )
, SWPGLOpt_( ifds::SWPGLOpt, &ifds::s_FldProp_SWPGLOpt )
, RRIFGLOpt_( ifds::RRIFGLOpt, &ifds::s_FldProp_RRIFGLOpt )
, TaxableTrustDate_( ifds::TaxableTrustDate, &ifds::s_FldProp_TaxableTrustDate )
, InitialDate_( ifds::InitialDate, &ifds::s_FldProp_InitialDate )
, InitialMarketValue_( ifds::InitialMarketValue, &ifds::s_FldProp_InitialMarketValue )
, NetTransAmt_( ifds::NetTransAmt, &ifds::s_FldProp_NetTransAmt )
, NetTransAmtAsOfDate_( ifds::NetTransAmtAsOfDate, &ifds::s_FldProp_NetTransAmtAsOfDate )
, AcctFeeModelAssociated_( ifds::AcctFeeModelAssociated, &ifds::s_FldProp_AcctFeeModelAssociated )
, ShrOutputType_( ifds::ShrOutputType, &ifds::s_FldProp_ShrOutputType )
, AnnuitantYoungerAge_( ifds::AnnuitantYoungerAge, &ifds::s_FldProp_AnnuitantYoungerAge )
, AcctIdentifierExist_( ifds::AcctIdentifierExist, &ifds::s_FldProp_AcctIdentifierExist )
, AcctRegulatoryExist_( ifds::AcctRegulatoryExist, &ifds::s_FldProp_AcctRegulatoryExist )
, EntRegDetlExist_( ifds::EntRegDetlExist, &ifds::s_FldProp_EntRegDetlExist )
, PendingFATCASrch_( ifds::PendingFATCASrch, &ifds::s_FldProp_PendingFATCASrch )
, AcctCIDElig_( ifds::AcctCIDElig, &ifds::s_FldProp_AcctCIDElig )
, TFRExists_( ifds::TFRExists, &ifds::s_FldProp_TFRExists )
, AdvisorFeeExist_( ifds::AdvisorFeeExist, &ifds::s_FldProp_AdvisorFeeExist )
, InvestorClassification_( ifds::InvestorClassification, &ifds::s_FldProp_InvestorClassification )
, AIFMDInvestorCategory_( ifds::AIFMDInvestorCategory, &ifds::s_FldProp_AIFMDInvestorCategory )
, AccountGroupExist_( ifds::AccountGroupExist, &ifds::s_FldProp_AccountGroupExist )
, PrivateWealthAcct_( ifds::PrivateWealthAcct, &ifds::s_FldProp_PrivateWealthAcct )
, PrivateWealthOptOut_( ifds::PrivateWealthOptOut, &ifds::s_FldProp_PrivateWealthOptOut )
, TaxFormsAppl_( ifds::TaxFormsAppl, &ifds::s_FldProp_TaxFormsAppl )
, AggregationType_( ifds::AggregationType, &ifds::s_FldProp_AggregationType )
, MoneyInExist_( ifds::MoneyInExist, &ifds::s_FldProp_MoneyInExist )
, MailHouseholdID_( ifds::MailHouseholdID, &ifds::s_FldProp_MailHouseholdID )
, RegisteredTransfers_( ifds::RegisteredTransfers, &ifds::s_FldProp_RegisteredTransfers )
, AcctDelState_( ifds::AcctDelState, &ifds::s_FldProp_AcctDelState )
, IsRegExtrAcct_( ifds::IsRegExtrAcct, &ifds::s_FldProp_IsRegExtrAcct )
, AcctTaxModel_( ifds::AcctTaxModel, &ifds::s_FldProp_AcctTaxModel )
, TermEntryExist_( ifds::TermEntryExist, &ifds::s_FldProp_TermEntryExist )
, DistrAcctTypeDetl_( ifds::DistrAcctTypeDetl, &ifds::s_FldProp_DistrAcctTypeDetl )
{
    cFields_ = 265;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0004_VWRepeat_Record::~dsi_DSTC0004_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0004_VWRepeat_Record::clone()
{
    dsi_DSTC0004_VWRepeat_Record* p = new dsi_DSTC0004_VWRepeat_Record;
    p->AccountNum_ = AccountNum_;
    p->BeneficialOwner_ = BeneficialOwner_;
    p->AltAccount_ = AltAccount_;
    p->AcctType_ = AcctType_;
    p->AcctTypeDesc_ = AcctTypeDesc_;
    p->TaxType_ = TaxType_;
    p->TaxTypeDesc_ = TaxTypeDesc_;
    p->RecipientType_ = RecipientType_;
    p->RecipientTypeDesc_ = RecipientTypeDesc_;
    p->AcctDesignation_ = AcctDesignation_;
    p->AcctDesignationDesc_ = AcctDesignationDesc_;
    p->Currency_ = Currency_;
    p->CurrencyName_ = CurrencyName_;
    p->XrefNum_ = XrefNum_;
    p->BrokerCode_ = BrokerCode_;
    p->BranchCode_ = BranchCode_;
    p->Slsrep_ = Slsrep_;
    p->InterCode_ = InterCode_;
    p->InterAccount_ = InterAccount_;
    p->AcctStatus_ = AcctStatus_;
    p->AcctStatusDesc_ = AcctStatusDesc_;
    p->DateOfReg_ = DateOfReg_;
    p->RRSPFee_ = RRSPFee_;
    p->RRSPFeeDesc_ = RRSPFeeDesc_;
    p->AMSCode_ = AMSCode_;
    p->PensionJuris_ = PensionJuris_;
    p->PensionJurisDesc_ = PensionJurisDesc_;
    p->StopPurchase_ = StopPurchase_;
    p->StopXferIn_ = StopXferIn_;
    p->StopXferOut_ = StopXferOut_;
    p->StopRed_ = StopRed_;
    p->FeeWaived_ = FeeWaived_;
    p->MarketMail_ = MarketMail_;
    p->Unseizable_ = Unseizable_;
    p->RegCompleted_ = RegCompleted_;
    p->SupConf_ = SupConf_;
    p->SupEmpConf_ = SupEmpConf_;
    p->InTrustFor_ = InTrustFor_;
    p->Escrow_ = Escrow_;
    p->AcctGroup_ = AcctGroup_;
    p->AcctGroupName_ = AcctGroupName_;
    p->BrokerName_ = BrokerName_;
    p->BranchName_ = BranchName_;
    p->SlsrepName_ = SlsrepName_;
    p->SlsrepAltName_ = SlsrepAltName_;
    p->AccountBalance_ = AccountBalance_;
    p->ShrNum_ = ShrNum_;
    p->EffectiveDate_ = EffectiveDate_;
    p->ProcessDate_ = ProcessDate_;
    p->ModDate_ = ModDate_;
    p->Username_ = Username_;
    p->ModUser_ = ModUser_;
    p->AcctMstrVer_ = AcctMstrVer_;
    p->AcctMstrRid_ = AcctMstrRid_;
    p->Employee_ = Employee_;
    p->MinWithAge_ = MinWithAge_;
    p->ExistSIN_ = ExistSIN_;
    p->ValidSIN_ = ValidSIN_;
    p->ValidTaxJuris_ = ValidTaxJuris_;
    p->ExistBenAddr_ = ExistBenAddr_;
    p->HoldMail_ = HoldMail_;
    p->ExistEscrow_ = ExistEscrow_;
    p->ExistBeneficiary_ = ExistBeneficiary_;
    p->ExistAlloc_ = ExistAlloc_;
    p->OutWireOrd_ = OutWireOrd_;
    p->SlsRepActive_ = SlsRepActive_;
    p->ClosingContr_ = ClosingContr_;
    p->ContrMatured_ = ContrMatured_;
    p->Age69_ = Age69_;
    p->DeathClaim_ = DeathClaim_;
    p->AddAcctFlag_ = AddAcctFlag_;
    p->PendingTrade_ = PendingTrade_;
    p->Certificates_ = Certificates_;
    p->SystemTrsfr_ = SystemTrsfr_;
    p->PAC_ = PAC_;
    p->SWP_ = SWP_;
    p->AcctAlloc_ = AcctAlloc_;
    p->ClanPlan_ = ClanPlan_;
    p->UnsettledTrn_ = UnsettledTrn_;
    p->TransFound_ = TransFound_;
    p->FirstEffective_ = FirstEffective_;
    p->MaxApplies_ = MaxApplies_;
    p->RRIFQualified_ = RRIFQualified_;
    p->LegMinWithAge_ = LegMinWithAge_;
    p->LockedIn_ = LockedIn_;
    p->FedJurisAllowed_ = FedJurisAllowed_;
    p->MinAge_ = MinAge_;
    p->MaxAge_ = MaxAge_;
    p->TaxTypeRules_ = TaxTypeRules_;
    p->DefTaxTypeRules_ = DefTaxTypeRules_;
    p->FCConfig_ = FCConfig_;
    p->StopFCrebal_ = StopFCrebal_;
    p->FCOverrides_ = FCOverrides_;
    p->AllLocked_ = AllLocked_;
    p->AcctLocked_ = AcctLocked_;
    p->SelfDirected_ = SelfDirected_;
    p->PlanType_ = PlanType_;
    p->ValidSpSIN_ = ValidSpSIN_;
    p->RIFExist_ = RIFExist_;
    p->DeathStat_ = DeathStat_;
    p->ACBExist_ = ACBExist_;
    p->InterestAccrExist_ = InterestAccrExist_;
    p->DistributionExist_ = DistributionExist_;
    p->ChequeExist_ = ChequeExist_;
    p->ContractExist_ = ContractExist_;
    p->OutstLLP_ = OutstLLP_;
    p->SocialCode_ = SocialCode_;
    p->SocialCodeDesc_ = SocialCodeDesc_;
    p->SavePlanExist_ = SavePlanExist_;
    p->ProdCode_ = ProdCode_;
    p->AcctCommExists_ = AcctCommExists_;
    p->GSTExempt_ = GSTExempt_;
    p->AcctFeesExist_ = AcctFeesExist_;
    p->ApplyPST_ = ApplyPST_;
    p->Unisex_ = Unisex_;
    p->SexDistinct_ = SexDistinct_;
    p->BankChrgs_ = BankChrgs_;
    p->ConsolidEFT_ = ConsolidEFT_;
    p->PensionJurisExists_ = PensionJurisExists_;
    p->FirstSettleDate_ = FirstSettleDate_;
    p->AMSROCode_ = AMSROCode_;
    p->MgmtFeePayOption_ = MgmtFeePayOption_;
    p->CreatedToday_ = CreatedToday_;
    p->ProtContractExists_ = ProtContractExists_;
    p->AcctCategoryExist_ = AcctCategoryExist_;
    p->ChargeERFee_ = ChargeERFee_;
    p->ChargeSTTRFee_ = ChargeSTTRFee_;
    p->UseBrokerMF_ = UseBrokerMF_;
    p->StopAMSRebalancing_ = StopAMSRebalancing_;
    p->AcctPurpose_ = AcctPurpose_;
    p->AdditionalInfo_ = AdditionalInfo_;
    p->BusinessNo_ = BusinessNo_;
    p->MemorablePlace_ = MemorablePlace_;
    p->MemorableWord_ = MemorableWord_;
    p->MemorableDate_ = MemorableDate_;
    p->PensionLegCode_ = PensionLegCode_;
    p->TelFaxAgreement_ = TelFaxAgreement_;
    p->ClearingID_ = ClearingID_;
    p->SettleLocExist_ = SettleLocExist_;
    p->DTAType_ = DTAType_;
    p->Networkcontrolind_ = Networkcontrolind_;
    p->ClearingFirm_ = ClearingFirm_;
    p->LSIFPAC_ = LSIFPAC_;
    p->HighestEntityRisk_ = HighestEntityRisk_;
    p->StopRedSettle_ = StopRedSettle_;
    p->RegistrationInfo_ = RegistrationInfo_;
    p->FeeModelCode_ = FeeModelCode_;
    p->DSCFeeLevel_ = DSCFeeLevel_;
    p->LastEffectiveDate_ = LastEffectiveDate_;
    p->AcctCutOffTimeExists_ = AcctCutOffTimeExists_;
    p->AgentForFirm_ = AgentForFirm_;
    p->TPA_ = TPA_;
    p->ParticipantID_ = ParticipantID_;
    p->NetworkID_ = NetworkID_;
    p->ExistAssignee_ = ExistAssignee_;
    p->ConsolTypePW_ = ConsolTypePW_;
    p->FundLimitOvrdExist_ = FundLimitOvrdExist_;
    p->IsNSCDividend_ = IsNSCDividend_;
    p->ConsolTypeID_ = ConsolTypeID_;
    p->PendingPrivate_ = PendingPrivate_;
    p->AccountClosingReason_ = AccountClosingReason_;
    p->ActiveAMSExists_ = ActiveAMSExists_;
    p->SiblingOnly_ = SiblingOnly_;
    p->Affluent_ = Affluent_;
    p->MgmtFeeId_ = MgmtFeeId_;
    p->MgmFeeType_ = MgmFeeType_;
    p->MgmtFeeRbtId_ = MgmtFeeRbtId_;
    p->MgmtFeeRbtType_ = MgmtFeeRbtType_;
    p->LinkMFR_ = LinkMFR_;
    p->AcctAMSExist_ = AcctAMSExist_;
    p->InvoiceModelID_ = InvoiceModelID_;
    p->ActiveCert_ = ActiveCert_;
    p->MinWaived_ = MinWaived_;
    p->HoldDivPymt_ = HoldDivPymt_;
    p->DOTAdnd_ = DOTAdnd_;
    p->SettlementRuleExist_ = SettlementRuleExist_;
    p->TaxTypeSchedule_ = TaxTypeSchedule_;
    p->AcctActivityExists_ = AcctActivityExists_;
    p->StopReason_ = StopReason_;
    p->AdditionalStopReason_ = AdditionalStopReason_;
    p->TypeOfInvestor_ = TypeOfInvestor_;
    p->InvestingOnBehalf_ = InvestingOnBehalf_;
    p->ComplianceCode_ = ComplianceCode_;
    p->DocListExists_ = DocListExists_;
    p->UnitRoundMethod_ = UnitRoundMethod_;
    p->UnLockGrossAmt_ = UnLockGrossAmt_;
    p->UnLockDeff_ = UnLockDeff_;
    p->RtnMailStageList_ = RtnMailStageList_;
    p->StaleChqStageList_ = StaleChqStageList_;
    p->StopNFU_ = StopNFU_;
    p->ExemptPeriod_ = ExemptPeriod_;
    p->NextMFRProcessDate_ = NextMFRProcessDate_;
    p->IsMFRAccount_ = IsMFRAccount_;
    p->IsClosedCountryResident_ = IsClosedCountryResident_;
    p->IARuleSetup_ = IARuleSetup_;
    p->EntityUnverifiedExist_ = EntityUnverifiedExist_;
    p->GrandFathered_ = GrandFathered_;
    p->RESPBenefDeleted_ = RESPBenefDeleted_;
    p->RESPAcctInfoExists_ = RESPAcctInfoExists_;
    p->Pre98Contrib_ = Pre98Contrib_;
    p->AIPWithdrawalExists_ = AIPWithdrawalExists_;
    p->OrigPlanDeff_ = OrigPlanDeff_;
    p->IsGWOContractExist_ = IsGWOContractExist_;
    p->AcctGuarGuardExists_ = AcctGuarGuardExists_;
    p->RESPQCResidentFound_ = RESPQCResidentFound_;
    p->GovAmendmentExist_ = GovAmendmentExist_;
    p->IsAcctRunCuratorFile_ = IsAcctRunCuratorFile_;
    p->HasAcctBeenUnFrozen_ = HasAcctBeenUnFrozen_;
    p->StaleChqExists_ = StaleChqExists_;
    p->RemittedChqExists_ = RemittedChqExists_;
    p->RemittedChqStageList_ = RemittedChqStageList_;
    p->ConsolTypeED_ = ConsolTypeED_;
    p->InceptionDate_ = InceptionDate_;
    p->ProdPortfolioUUID_ = ProdPortfolioUUID_;
    p->ProdPortfolioPlanUUID_ = ProdPortfolioPlanUUID_;
    p->UnclmRemitDate_ = UnclmRemitDate_;
    p->NSCCSocialCode_ = NSCCSocialCode_;
    p->HasGIAHolding_ = HasGIAHolding_;
    p->CanHaveCashSweep_ = CanHaveCashSweep_;
    p->CanHaveMatInstr_ = CanHaveMatInstr_;
    p->CashSweepExists_ = CashSweepExists_;
    p->MatIntExists_ = MatIntExists_;
    p->OrgType_ = OrgType_;
    p->SubOrgType_ = SubOrgType_;
    p->TerritoryCode_ = TerritoryCode_;
    p->CommitmentStatus_ = CommitmentStatus_;
    p->LifeAnnuityExist_ = LifeAnnuityExist_;
    p->StopAdjDate_ = StopAdjDate_;
    p->NonFinConfirm_ = NonFinConfirm_;
    p->SettleCurrency_ = SettleCurrency_;
    p->RegAgentCode_ = RegAgentCode_;
    p->GWLWAAvailOptions_ = GWLWAAvailOptions_;
    p->T5AnniversaryDate_ = T5AnniversaryDate_;
    p->SWPGLOpt_ = SWPGLOpt_;
    p->RRIFGLOpt_ = RRIFGLOpt_;
    p->TaxableTrustDate_ = TaxableTrustDate_;
    p->InitialDate_ = InitialDate_;
    p->InitialMarketValue_ = InitialMarketValue_;
    p->NetTransAmt_ = NetTransAmt_;
    p->NetTransAmtAsOfDate_ = NetTransAmtAsOfDate_;
    p->AcctFeeModelAssociated_ = AcctFeeModelAssociated_;
    p->ShrOutputType_ = ShrOutputType_;
    p->AnnuitantYoungerAge_ = AnnuitantYoungerAge_;
    p->AcctIdentifierExist_ = AcctIdentifierExist_;
    p->AcctRegulatoryExist_ = AcctRegulatoryExist_;
    p->EntRegDetlExist_ = EntRegDetlExist_;
    p->PendingFATCASrch_ = PendingFATCASrch_;
    p->AcctCIDElig_ = AcctCIDElig_;
    p->TFRExists_ = TFRExists_;
    p->AdvisorFeeExist_ = AdvisorFeeExist_;
    p->InvestorClassification_ = InvestorClassification_;
    p->AIFMDInvestorCategory_ = AIFMDInvestorCategory_;
    p->AccountGroupExist_ = AccountGroupExist_;
    p->PrivateWealthAcct_ = PrivateWealthAcct_;
    p->PrivateWealthOptOut_ = PrivateWealthOptOut_;
    p->TaxFormsAppl_ = TaxFormsAppl_;
    p->AggregationType_ = AggregationType_;
    p->MoneyInExist_ = MoneyInExist_;
    p->MailHouseholdID_ = MailHouseholdID_;
    p->RegisteredTransfers_ = RegisteredTransfers_;
    p->AcctDelState_ = AcctDelState_;
    p->IsRegExtrAcct_ = IsRegExtrAcct_;
    p->AcctTaxModel_ = AcctTaxModel_;
    p->TermEntryExist_ = TermEntryExist_;
    p->DistrAcctTypeDetl_ = DistrAcctTypeDetl_;
    return(p);
}

BFDataField* dsi_DSTC0004_VWRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000040: return ( &AccountNum_ ); break; // AccountNum
        case 40000172: return ( &BeneficialOwner_ ); break; // BeneficialOwner
        case 40000173: return ( &AltAccount_ ); break; // AltAccount
        case 40000174: return ( &AcctType_ ); break; // AcctType
        case 40000175: return ( &AcctTypeDesc_ ); break; // AcctTypeDesc
        case 40000134: return ( &TaxType_ ); break; // TaxType
        case 40000135: return ( &TaxTypeDesc_ ); break; // TaxTypeDesc
        case 40000176: return ( &RecipientType_ ); break; // RecipientType
        case 40000177: return ( &RecipientTypeDesc_ ); break; // RecipientTypeDesc
        case 40000178: return ( &AcctDesignation_ ); break; // AcctDesignation
        case 40000179: return ( &AcctDesignationDesc_ ); break; // AcctDesignationDesc
        case 40000180: return ( &Currency_ ); break; // Currency
        case 40000181: return ( &CurrencyName_ ); break; // CurrencyName
        case 40000182: return ( &XrefNum_ ); break; // XrefNum
        case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
        case 40000045: return ( &BranchCode_ ); break; // BranchCode
        case 40000185: return ( &Slsrep_ ); break; // Slsrep
        case 40000186: return ( &InterCode_ ); break; // InterCode
        case 40000187: return ( &InterAccount_ ); break; // InterAccount
        case 40000188: return ( &AcctStatus_ ); break; // AcctStatus
        case 40000189: return ( &AcctStatusDesc_ ); break; // AcctStatusDesc
        case 40000190: return ( &DateOfReg_ ); break; // DateOfReg
        case 40000191: return ( &RRSPFee_ ); break; // RRSPFee
        case 40000192: return ( &RRSPFeeDesc_ ); break; // RRSPFeeDesc
        case 40000193: return ( &AMSCode_ ); break; // AMSCode
        case 40000194: return ( &PensionJuris_ ); break; // PensionJuris
        case 40000195: return ( &PensionJurisDesc_ ); break; // PensionJurisDesc
        case 40000699: return ( &StopPurchase_ ); break; // StopPurchase
        case 40000197: return ( &StopXferIn_ ); break; // StopXferIn
        case 40000198: return ( &StopXferOut_ ); break; // StopXferOut
        case 40000593: return ( &StopRed_ ); break; // StopRed
        case 40000200: return ( &FeeWaived_ ); break; // FeeWaived
        case 40000201: return ( &MarketMail_ ); break; // MarketMail
        case 40000202: return ( &Unseizable_ ); break; // Unseizable
        case 40000203: return ( &RegCompleted_ ); break; // RegCompleted
        case 40000204: return ( &SupConf_ ); break; // SupConf
        case 40000205: return ( &SupEmpConf_ ); break; // SupEmpConf
        case 40000206: return ( &InTrustFor_ ); break; // InTrustFor
        case 40000207: return ( &Escrow_ ); break; // Escrow
        case 40000208: return ( &AcctGroup_ ); break; // AcctGroup
        case 40000209: return ( &AcctGroupName_ ); break; // AcctGroupName
        case 40000210: return ( &BrokerName_ ); break; // BrokerName
        case 40000211: return ( &BranchName_ ); break; // BranchName
        case 40000212: return ( &SlsrepName_ ); break; // SlsrepName
        case 40000213: return ( &SlsrepAltName_ ); break; // SlsrepAltName
        case 40000396: return ( &AccountBalance_ ); break; // AccountBalance
        case 40000114: return ( &ShrNum_ ); break; // ShrNum
        case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
        case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
        case 40000217: return ( &ModDate_ ); break; // ModDate
        case 40000117: return ( &Username_ ); break; // Username
        case 40000218: return ( &ModUser_ ); break; // ModUser
        case 40000909: return ( &AcctMstrVer_ ); break; // AcctMstrVer
        case 40000910: return ( &AcctMstrRid_ ); break; // AcctMstrRid
        case 40001117: return ( &Employee_ ); break; // Employee
        case 40001358: return ( &MinWithAge_ ); break; // MinWithAge
        case 40001359: return ( &ExistSIN_ ); break; // ExistSIN
        case 40001137: return ( &ValidSIN_ ); break; // ValidSIN
        case 40001360: return ( &ValidTaxJuris_ ); break; // ValidTaxJuris
        case 40001361: return ( &ExistBenAddr_ ); break; // ExistBenAddr
        case 40000814: return ( &HoldMail_ ); break; // HoldMail
        case 40001362: return ( &ExistEscrow_ ); break; // ExistEscrow
        case 40001363: return ( &ExistBeneficiary_ ); break; // ExistBeneficiary
        case 40001364: return ( &ExistAlloc_ ); break; // ExistAlloc
        case 40001365: return ( &OutWireOrd_ ); break; // OutWireOrd
        case 40001366: return ( &SlsRepActive_ ); break; // SlsRepActive
        case 40001367: return ( &ClosingContr_ ); break; // ClosingContr
        case 40001368: return ( &ContrMatured_ ); break; // ContrMatured
        case 40001369: return ( &Age69_ ); break; // Age69
        case 40001370: return ( &DeathClaim_ ); break; // DeathClaim
        case 40001118: return ( &AddAcctFlag_ ); break; // AddAcctFlag
        case 40000589: return ( &PendingTrade_ ); break; // PendingTrade
        case 40000591: return ( &Certificates_ ); break; // Certificates
        case 40000597: return ( &SystemTrsfr_ ); break; // SystemTrsfr
        case 40000598: return ( &PAC_ ); break; // PAC
        case 40000599: return ( &SWP_ ); break; // SWP
        case 40000600: return ( &AcctAlloc_ ); break; // AcctAlloc
        case 40000601: return ( &ClanPlan_ ); break; // ClanPlan
        case 40000867: return ( &UnsettledTrn_ ); break; // UnsettledTrn
        case 40001333: return ( &TransFound_ ); break; // TransFound
        case 40001371: return ( &FirstEffective_ ); break; // FirstEffective
        case 40001755: return ( &MaxApplies_ ); break; // MaxApplies
        case 40001756: return ( &RRIFQualified_ ); break; // RRIFQualified
        case 40001757: return ( &LegMinWithAge_ ); break; // LegMinWithAge
        case 40001244: return ( &LockedIn_ ); break; // LockedIn
        case 40001246: return ( &FedJurisAllowed_ ); break; // FedJurisAllowed
        case 40001758: return ( &MinAge_ ); break; // MinAge
        case 40001759: return ( &MaxAge_ ); break; // MaxAge
        case 40001760: return ( &TaxTypeRules_ ); break; // TaxTypeRules
        case 40001761: return ( &DefTaxTypeRules_ ); break; // DefTaxTypeRules
        case 40001773: return ( &FCConfig_ ); break; // FCConfig
        case 40001774: return ( &StopFCrebal_ ); break; // StopFCrebal
        case 40001775: return ( &FCOverrides_ ); break; // FCOverrides
        case 40001776: return ( &AllLocked_ ); break; // AllLocked
        case 40001777: return ( &AcctLocked_ ); break; // AcctLocked
        case 40001243: return ( &SelfDirected_ ); break; // SelfDirected
        case 40000839: return ( &PlanType_ ); break; // PlanType
        case 40001899: return ( &ValidSpSIN_ ); break; // ValidSpSIN
        case 40001900: return ( &RIFExist_ ); break; // RIFExist
        case 40001903: return ( &DeathStat_ ); break; // DeathStat
        case 40001992: return ( &ACBExist_ ); break; // ACBExist
        case 40001995: return ( &InterestAccrExist_ ); break; // InterestAccrExist
        case 40001993: return ( &DistributionExist_ ); break; // DistributionExist
        case 40001994: return ( &ChequeExist_ ); break; // ChequeExist
        case 40002024: return ( &ContractExist_ ); break; // ContractExist
        case 40002132: return ( &OutstLLP_ ); break; // OutstLLP
        case 40002187: return ( &SocialCode_ ); break; // SocialCode
        case 40002189: return ( &SocialCodeDesc_ ); break; // SocialCodeDesc
        case 40002553: return ( &SavePlanExist_ ); break; // SavePlanExist
        case 40002782: return ( &ProdCode_ ); break; // ProdCode
        case 40002789: return ( &AcctCommExists_ ); break; // AcctCommExists
        case 40002901: return ( &GSTExempt_ ); break; // GSTExempt
        case 40003001: return ( &AcctFeesExist_ ); break; // AcctFeesExist
        case 40003002: return ( &ApplyPST_ ); break; // ApplyPST
        case 40003083: return ( &Unisex_ ); break; // Unisex
        case 40003084: return ( &SexDistinct_ ); break; // SexDistinct
        case 40003100: return ( &BankChrgs_ ); break; // BankChrgs
        case 40003123: return ( &ConsolidEFT_ ); break; // ConsolidEFT
        case 40003196: return ( &PensionJurisExists_ ); break; // PensionJurisExists
        case 40003454: return ( &FirstSettleDate_ ); break; // FirstSettleDate
        case 40003529: return ( &AMSROCode_ ); break; // AMSROCode
        case 40003530: return ( &MgmtFeePayOption_ ); break; // MgmtFeePayOption
        case 40003683: return ( &CreatedToday_ ); break; // CreatedToday
        case 40003684: return ( &ProtContractExists_ ); break; // ProtContractExists
        case 40003693: return ( &AcctCategoryExist_ ); break; // AcctCategoryExist
        case 40003826: return ( &ChargeERFee_ ); break; // ChargeERFee
        case 40003827: return ( &ChargeSTTRFee_ ); break; // ChargeSTTRFee
        case 40003890: return ( &UseBrokerMF_ ); break; // UseBrokerMF
        case 40003894: return ( &StopAMSRebalancing_ ); break; // StopAMSRebalancing
        case 40004009: return ( &AcctPurpose_ ); break; // AcctPurpose
        case 40004010: return ( &AdditionalInfo_ ); break; // AdditionalInfo
        case 40004011: return ( &BusinessNo_ ); break; // BusinessNo
        case 40004019: return ( &MemorablePlace_ ); break; // MemorablePlace
        case 40004020: return ( &MemorableWord_ ); break; // MemorableWord
        case 40004021: return ( &MemorableDate_ ); break; // MemorableDate
        case 40004093: return ( &PensionLegCode_ ); break; // PensionLegCode
        case 40004137: return ( &TelFaxAgreement_ ); break; // TelFaxAgreement
        case 40004302: return ( &ClearingID_ ); break; // ClearingID
        case 40004303: return ( &SettleLocExist_ ); break; // SettleLocExist
        case 40004168: return ( &DTAType_ ); break; // DTAType
        case 40004418: return ( &Networkcontrolind_ ); break; // Networkcontrolind
        case 40004420: return ( &ClearingFirm_ ); break; // ClearingFirm
        case 40004439: return ( &LSIFPAC_ ); break; // LSIFPAC
        case 40004436: return ( &HighestEntityRisk_ ); break; // HighestEntityRisk
        case 40004571: return ( &StopRedSettle_ ); break; // StopRedSettle
        case 40004572: return ( &RegistrationInfo_ ); break; // RegistrationInfo
        case 40004584: return ( &FeeModelCode_ ); break; // FeeModelCode
        case 40005123: return ( &DSCFeeLevel_ ); break; // DSCFeeLevel
        case 40004047: return ( &LastEffectiveDate_ ); break; // LastEffectiveDate
        case 40005203: return ( &AcctCutOffTimeExists_ ); break; // AcctCutOffTimeExists
        case 40005212: return ( &AgentForFirm_ ); break; // AgentForFirm
        case 40005213: return ( &TPA_ ); break; // TPA
        case 40004978: return ( &ParticipantID_ ); break; // ParticipantID
        case 40003522: return ( &NetworkID_ ); break; // NetworkID
        case 40005466: return ( &ExistAssignee_ ); break; // ExistAssignee
        case 40005568: return ( &ConsolTypePW_ ); break; // ConsolTypePW
        case 40005556: return ( &FundLimitOvrdExist_ ); break; // FundLimitOvrdExist
        case 40005562: return ( &IsNSCDividend_ ); break; // IsNSCDividend
        case 40005563: return ( &ConsolTypeID_ ); break; // ConsolTypeID
        case 40005627: return ( &PendingPrivate_ ); break; // PendingPrivate
        case 40005649: return ( &AccountClosingReason_ ); break; // AccountClosingReason
        case 40005664: return ( &ActiveAMSExists_ ); break; // ActiveAMSExists
        case 40005670: return ( &SiblingOnly_ ); break; // SiblingOnly
        case 40005677: return ( &Affluent_ ); break; // Affluent
        case 40005678: return ( &MgmtFeeId_ ); break; // MgmtFeeId
        case 40005680: return ( &MgmFeeType_ ); break; // MgmFeeType
        case 40005682: return ( &MgmtFeeRbtId_ ); break; // MgmtFeeRbtId
        case 40005683: return ( &MgmtFeeRbtType_ ); break; // MgmtFeeRbtType
        case 40005701: return ( &LinkMFR_ ); break; // LinkMFR
        case 40005707: return ( &AcctAMSExist_ ); break; // AcctAMSExist
        case 40005711: return ( &InvoiceModelID_ ); break; // InvoiceModelID
        case 40005714: return ( &ActiveCert_ ); break; // ActiveCert
        case 40005722: return ( &MinWaived_ ); break; // MinWaived
        case 40005743: return ( &HoldDivPymt_ ); break; // HoldDivPymt
        case 40005749: return ( &DOTAdnd_ ); break; // DOTAdnd
        case 40005772: return ( &SettlementRuleExist_ ); break; // SettlementRuleExist
        case 40005778: return ( &TaxTypeSchedule_ ); break; // TaxTypeSchedule
        case 40005783: return ( &AcctActivityExists_ ); break; // AcctActivityExists
        case 40005790: return ( &StopReason_ ); break; // StopReason
        case 40005791: return ( &AdditionalStopReason_ ); break; // AdditionalStopReason
        case 40005792: return ( &TypeOfInvestor_ ); break; // TypeOfInvestor
        case 40005793: return ( &InvestingOnBehalf_ ); break; // InvestingOnBehalf
        case 40005797: return ( &ComplianceCode_ ); break; // ComplianceCode
        case 40005807: return ( &DocListExists_ ); break; // DocListExists
        case 40005816: return ( &UnitRoundMethod_ ); break; // UnitRoundMethod
        case 40005776: return ( &UnLockGrossAmt_ ); break; // UnLockGrossAmt
        case 40005775: return ( &UnLockDeff_ ); break; // UnLockDeff
        case 40006352: return ( &RtnMailStageList_ ); break; // RtnMailStageList
        case 40006347: return ( &StaleChqStageList_ ); break; // StaleChqStageList
        case 40005925: return ( &StopNFU_ ); break; // StopNFU
        case 40005957: return ( &ExemptPeriod_ ); break; // ExemptPeriod
        case 40005973: return ( &NextMFRProcessDate_ ); break; // NextMFRProcessDate
        case 40005975: return ( &IsMFRAccount_ ); break; // IsMFRAccount
        case 40005984: return ( &IsClosedCountryResident_ ); break; // IsClosedCountryResident
        case 40005993: return ( &IARuleSetup_ ); break; // IARuleSetup
        case 40006048: return ( &EntityUnverifiedExist_ ); break; // EntityUnverifiedExist
        case 40006080: return ( &GrandFathered_ ); break; // GrandFathered
        case 40006081: return ( &RESPBenefDeleted_ ); break; // RESPBenefDeleted
        case 40006171: return ( &RESPAcctInfoExists_ ); break; // RESPAcctInfoExists
        case 40006083: return ( &Pre98Contrib_ ); break; // Pre98Contrib
        case 40006176: return ( &AIPWithdrawalExists_ ); break; // AIPWithdrawalExists
        case 40006275: return ( &OrigPlanDeff_ ); break; // OrigPlanDeff
        case 40006287: return ( &IsGWOContractExist_ ); break; // IsGWOContractExist
        case 40006311: return ( &AcctGuarGuardExists_ ); break; // AcctGuarGuardExists
        case 40006312: return ( &RESPQCResidentFound_ ); break; // RESPQCResidentFound
        case 40006330: return ( &GovAmendmentExist_ ); break; // GovAmendmentExist
        case 40006344: return ( &IsAcctRunCuratorFile_ ); break; // IsAcctRunCuratorFile
        case 40006345: return ( &HasAcctBeenUnFrozen_ ); break; // HasAcctBeenUnFrozen
        case 40006346: return ( &StaleChqExists_ ); break; // StaleChqExists
        case 40006348: return ( &RemittedChqExists_ ); break; // RemittedChqExists
        case 40006350: return ( &RemittedChqStageList_ ); break; // RemittedChqStageList
        case 40006355: return ( &ConsolTypeED_ ); break; // ConsolTypeED
        case 40006185: return ( &InceptionDate_ ); break; // InceptionDate
        case 40006390: return ( &ProdPortfolioUUID_ ); break; // ProdPortfolioUUID
        case 40006391: return ( &ProdPortfolioPlanUUID_ ); break; // ProdPortfolioPlanUUID
        case 40005893: return ( &UnclmRemitDate_ ); break; // UnclmRemitDate
        case 40006420: return ( &NSCCSocialCode_ ); break; // NSCCSocialCode
        case 40006466: return ( &HasGIAHolding_ ); break; // HasGIAHolding
        case 40006573: return ( &CanHaveCashSweep_ ); break; // CanHaveCashSweep
        case 40006574: return ( &CanHaveMatInstr_ ); break; // CanHaveMatInstr
        case 40006575: return ( &CashSweepExists_ ); break; // CashSweepExists
        case 40006576: return ( &MatIntExists_ ); break; // MatIntExists
        case 40006661: return ( &OrgType_ ); break; // OrgType
        case 40006662: return ( &SubOrgType_ ); break; // SubOrgType
        case 40006681: return ( &TerritoryCode_ ); break; // TerritoryCode
        case 40006730: return ( &CommitmentStatus_ ); break; // CommitmentStatus
        case 40006728: return ( &LifeAnnuityExist_ ); break; // LifeAnnuityExist
        case 40006876: return ( &StopAdjDate_ ); break; // StopAdjDate
        case 40006844: return ( &NonFinConfirm_ ); break; // NonFinConfirm
        case 40000455: return ( &SettleCurrency_ ); break; // SettleCurrency
        case 40006872: return ( &RegAgentCode_ ); break; // RegAgentCode
        case 40006905: return ( &GWLWAAvailOptions_ ); break; // GWLWAAvailOptions
        case 40006912: return ( &T5AnniversaryDate_ ); break; // T5AnniversaryDate
        case 40006910: return ( &SWPGLOpt_ ); break; // SWPGLOpt
        case 40006911: return ( &RRIFGLOpt_ ); break; // RRIFGLOpt
        case 40006942: return ( &TaxableTrustDate_ ); break; // TaxableTrustDate
        case 40007012: return ( &InitialDate_ ); break; // InitialDate
        case 40007013: return ( &InitialMarketValue_ ); break; // InitialMarketValue
        case 40007014: return ( &NetTransAmt_ ); break; // NetTransAmt
        case 40007015: return ( &NetTransAmtAsOfDate_ ); break; // NetTransAmtAsOfDate
        case 40007024: return ( &AcctFeeModelAssociated_ ); break; // AcctFeeModelAssociated
        case 40007034: return ( &ShrOutputType_ ); break; // ShrOutputType
        case 40007131: return ( &AnnuitantYoungerAge_ ); break; // AnnuitantYoungerAge
        case 40007138: return ( &AcctIdentifierExist_ ); break; // AcctIdentifierExist
        case 40007139: return ( &AcctRegulatoryExist_ ); break; // AcctRegulatoryExist
        case 40007257: return ( &EntRegDetlExist_ ); break; // EntRegDetlExist
        case 40007258: return ( &PendingFATCASrch_ ); break; // PendingFATCASrch
        case 40007382: return ( &AcctCIDElig_ ); break; // AcctCIDElig
        case 40007386: return ( &TFRExists_ ); break; // TFRExists
        case 40007246: return ( &AdvisorFeeExist_ ); break; // AdvisorFeeExist
        case 40007400: return ( &InvestorClassification_ ); break; // InvestorClassification
        case 40007401: return ( &AIFMDInvestorCategory_ ); break; // AIFMDInvestorCategory
        case 40007430: return ( &AccountGroupExist_ ); break; // AccountGroupExist
        case 40007431: return ( &PrivateWealthAcct_ ); break; // PrivateWealthAcct
        case 40007432: return ( &PrivateWealthOptOut_ ); break; // PrivateWealthOptOut
        case 40007428: return ( &TaxFormsAppl_ ); break; // TaxFormsAppl
        case 40007493: return ( &AggregationType_ ); break; // AggregationType
        case 40007511: return ( &MoneyInExist_ ); break; // MoneyInExist
        case 40007524: return ( &MailHouseholdID_ ); break; // MailHouseholdID
        case 40007700: return ( &RegisteredTransfers_ ); break; // RegisteredTransfers
        case 40007788: return ( &AcctDelState_ ); break; // AcctDelState
        case 40007798: return ( &IsRegExtrAcct_ ); break; // IsRegExtrAcct
        case 40007799: return ( &AcctTaxModel_ ); break; // AcctTaxModel
        case 40007860: return ( &TermEntryExist_ ); break; // TermEntryExist
        case 40007930: return ( &DistrAcctTypeDetl_ ); break; // DistrAcctTypeDetl
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0004_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0004_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0004_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 265 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &AccountNum_; break;
                case 1: aFlds_[1] = &BeneficialOwner_; break;
                case 2: aFlds_[2] = &AltAccount_; break;
                case 3: aFlds_[3] = &AcctType_; break;
                case 4: aFlds_[4] = &AcctTypeDesc_; break;
                case 5: aFlds_[5] = &TaxType_; break;
                case 6: aFlds_[6] = &TaxTypeDesc_; break;
                case 7: aFlds_[7] = &RecipientType_; break;
                case 8: aFlds_[8] = &RecipientTypeDesc_; break;
                case 9: aFlds_[9] = &AcctDesignation_; break;
                case 10: aFlds_[10] = &AcctDesignationDesc_; break;
                case 11: aFlds_[11] = &Currency_; break;
                case 12: aFlds_[12] = &CurrencyName_; break;
                case 13: aFlds_[13] = &XrefNum_; break;
                case 14: aFlds_[14] = &BrokerCode_; break;
                case 15: aFlds_[15] = &BranchCode_; break;
                case 16: aFlds_[16] = &Slsrep_; break;
                case 17: aFlds_[17] = &InterCode_; break;
                case 18: aFlds_[18] = &InterAccount_; break;
                case 19: aFlds_[19] = &AcctStatus_; break;
                case 20: aFlds_[20] = &AcctStatusDesc_; break;
                case 21: aFlds_[21] = &DateOfReg_; break;
                case 22: aFlds_[22] = &RRSPFee_; break;
                case 23: aFlds_[23] = &RRSPFeeDesc_; break;
                case 24: aFlds_[24] = &AMSCode_; break;
                case 25: aFlds_[25] = &PensionJuris_; break;
                case 26: aFlds_[26] = &PensionJurisDesc_; break;
                case 27: aFlds_[27] = &StopPurchase_; break;
                case 28: aFlds_[28] = &StopXferIn_; break;
                case 29: aFlds_[29] = &StopXferOut_; break;
                case 30: aFlds_[30] = &StopRed_; break;
                case 31: aFlds_[31] = &FeeWaived_; break;
                case 32: aFlds_[32] = &MarketMail_; break;
                case 33: aFlds_[33] = &Unseizable_; break;
                case 34: aFlds_[34] = &RegCompleted_; break;
                case 35: aFlds_[35] = &SupConf_; break;
                case 36: aFlds_[36] = &SupEmpConf_; break;
                case 37: aFlds_[37] = &InTrustFor_; break;
                case 38: aFlds_[38] = &Escrow_; break;
                case 39: aFlds_[39] = &AcctGroup_; break;
                case 40: aFlds_[40] = &AcctGroupName_; break;
                case 41: aFlds_[41] = &BrokerName_; break;
                case 42: aFlds_[42] = &BranchName_; break;
                case 43: aFlds_[43] = &SlsrepName_; break;
                case 44: aFlds_[44] = &SlsrepAltName_; break;
                case 45: aFlds_[45] = &AccountBalance_; break;
                case 46: aFlds_[46] = &ShrNum_; break;
                case 47: aFlds_[47] = &EffectiveDate_; break;
                case 48: aFlds_[48] = &ProcessDate_; break;
                case 49: aFlds_[49] = &ModDate_; break;
                case 50: aFlds_[50] = &Username_; break;
                case 51: aFlds_[51] = &ModUser_; break;
                case 52: aFlds_[52] = &AcctMstrVer_; break;
                case 53: aFlds_[53] = &AcctMstrRid_; break;
                case 54: aFlds_[54] = &Employee_; break;
                case 55: aFlds_[55] = &MinWithAge_; break;
                case 56: aFlds_[56] = &ExistSIN_; break;
                case 57: aFlds_[57] = &ValidSIN_; break;
                case 58: aFlds_[58] = &ValidTaxJuris_; break;
                case 59: aFlds_[59] = &ExistBenAddr_; break;
                case 60: aFlds_[60] = &HoldMail_; break;
                case 61: aFlds_[61] = &ExistEscrow_; break;
                case 62: aFlds_[62] = &ExistBeneficiary_; break;
                case 63: aFlds_[63] = &ExistAlloc_; break;
                case 64: aFlds_[64] = &OutWireOrd_; break;
                case 65: aFlds_[65] = &SlsRepActive_; break;
                case 66: aFlds_[66] = &ClosingContr_; break;
                case 67: aFlds_[67] = &ContrMatured_; break;
                case 68: aFlds_[68] = &Age69_; break;
                case 69: aFlds_[69] = &DeathClaim_; break;
                case 70: aFlds_[70] = &AddAcctFlag_; break;
                case 71: aFlds_[71] = &PendingTrade_; break;
                case 72: aFlds_[72] = &Certificates_; break;
                case 73: aFlds_[73] = &SystemTrsfr_; break;
                case 74: aFlds_[74] = &PAC_; break;
                case 75: aFlds_[75] = &SWP_; break;
                case 76: aFlds_[76] = &AcctAlloc_; break;
                case 77: aFlds_[77] = &ClanPlan_; break;
                case 78: aFlds_[78] = &UnsettledTrn_; break;
                case 79: aFlds_[79] = &TransFound_; break;
                case 80: aFlds_[80] = &FirstEffective_; break;
                case 81: aFlds_[81] = &MaxApplies_; break;
                case 82: aFlds_[82] = &RRIFQualified_; break;
                case 83: aFlds_[83] = &LegMinWithAge_; break;
                case 84: aFlds_[84] = &LockedIn_; break;
                case 85: aFlds_[85] = &FedJurisAllowed_; break;
                case 86: aFlds_[86] = &MinAge_; break;
                case 87: aFlds_[87] = &MaxAge_; break;
                case 88: aFlds_[88] = &TaxTypeRules_; break;
                case 89: aFlds_[89] = &DefTaxTypeRules_; break;
                case 90: aFlds_[90] = &FCConfig_; break;
                case 91: aFlds_[91] = &StopFCrebal_; break;
                case 92: aFlds_[92] = &FCOverrides_; break;
                case 93: aFlds_[93] = &AllLocked_; break;
                case 94: aFlds_[94] = &AcctLocked_; break;
                case 95: aFlds_[95] = &SelfDirected_; break;
                case 96: aFlds_[96] = &PlanType_; break;
                case 97: aFlds_[97] = &ValidSpSIN_; break;
                case 98: aFlds_[98] = &RIFExist_; break;
                case 99: aFlds_[99] = &DeathStat_; break;
                case 100: aFlds_[100] = &ACBExist_; break;
                case 101: aFlds_[101] = &InterestAccrExist_; break;
                case 102: aFlds_[102] = &DistributionExist_; break;
                case 103: aFlds_[103] = &ChequeExist_; break;
                case 104: aFlds_[104] = &ContractExist_; break;
                case 105: aFlds_[105] = &OutstLLP_; break;
                case 106: aFlds_[106] = &SocialCode_; break;
                case 107: aFlds_[107] = &SocialCodeDesc_; break;
                case 108: aFlds_[108] = &SavePlanExist_; break;
                case 109: aFlds_[109] = &ProdCode_; break;
                case 110: aFlds_[110] = &AcctCommExists_; break;
                case 111: aFlds_[111] = &GSTExempt_; break;
                case 112: aFlds_[112] = &AcctFeesExist_; break;
                case 113: aFlds_[113] = &ApplyPST_; break;
                case 114: aFlds_[114] = &Unisex_; break;
                case 115: aFlds_[115] = &SexDistinct_; break;
                case 116: aFlds_[116] = &BankChrgs_; break;
                case 117: aFlds_[117] = &ConsolidEFT_; break;
                case 118: aFlds_[118] = &PensionJurisExists_; break;
                case 119: aFlds_[119] = &FirstSettleDate_; break;
                case 120: aFlds_[120] = &AMSROCode_; break;
                case 121: aFlds_[121] = &MgmtFeePayOption_; break;
                case 122: aFlds_[122] = &CreatedToday_; break;
                case 123: aFlds_[123] = &ProtContractExists_; break;
                case 124: aFlds_[124] = &AcctCategoryExist_; break;
                case 125: aFlds_[125] = &ChargeERFee_; break;
                case 126: aFlds_[126] = &ChargeSTTRFee_; break;
                case 127: aFlds_[127] = &UseBrokerMF_; break;
                case 128: aFlds_[128] = &StopAMSRebalancing_; break;
                case 129: aFlds_[129] = &AcctPurpose_; break;
                case 130: aFlds_[130] = &AdditionalInfo_; break;
                case 131: aFlds_[131] = &BusinessNo_; break;
                case 132: aFlds_[132] = &MemorablePlace_; break;
                case 133: aFlds_[133] = &MemorableWord_; break;
                case 134: aFlds_[134] = &MemorableDate_; break;
                case 135: aFlds_[135] = &PensionLegCode_; break;
                case 136: aFlds_[136] = &TelFaxAgreement_; break;
                case 137: aFlds_[137] = &ClearingID_; break;
                case 138: aFlds_[138] = &SettleLocExist_; break;
                case 139: aFlds_[139] = &DTAType_; break;
                case 140: aFlds_[140] = &Networkcontrolind_; break;
                case 141: aFlds_[141] = &ClearingFirm_; break;
                case 142: aFlds_[142] = &LSIFPAC_; break;
                case 143: aFlds_[143] = &HighestEntityRisk_; break;
                case 144: aFlds_[144] = &StopRedSettle_; break;
                case 145: aFlds_[145] = &RegistrationInfo_; break;
                case 146: aFlds_[146] = &FeeModelCode_; break;
                case 147: aFlds_[147] = &DSCFeeLevel_; break;
                case 148: aFlds_[148] = &LastEffectiveDate_; break;
                case 149: aFlds_[149] = &AcctCutOffTimeExists_; break;
                case 150: aFlds_[150] = &AgentForFirm_; break;
                case 151: aFlds_[151] = &TPA_; break;
                case 152: aFlds_[152] = &ParticipantID_; break;
                case 153: aFlds_[153] = &NetworkID_; break;
                case 154: aFlds_[154] = &ExistAssignee_; break;
                case 155: aFlds_[155] = &ConsolTypePW_; break;
                case 156: aFlds_[156] = &FundLimitOvrdExist_; break;
                case 157: aFlds_[157] = &IsNSCDividend_; break;
                case 158: aFlds_[158] = &ConsolTypeID_; break;
                case 159: aFlds_[159] = &PendingPrivate_; break;
                case 160: aFlds_[160] = &AccountClosingReason_; break;
                case 161: aFlds_[161] = &ActiveAMSExists_; break;
                case 162: aFlds_[162] = &SiblingOnly_; break;
                case 163: aFlds_[163] = &Affluent_; break;
                case 164: aFlds_[164] = &MgmtFeeId_; break;
                case 165: aFlds_[165] = &MgmFeeType_; break;
                case 166: aFlds_[166] = &MgmtFeeRbtId_; break;
                case 167: aFlds_[167] = &MgmtFeeRbtType_; break;
                case 168: aFlds_[168] = &LinkMFR_; break;
                case 169: aFlds_[169] = &AcctAMSExist_; break;
                case 170: aFlds_[170] = &InvoiceModelID_; break;
                case 171: aFlds_[171] = &ActiveCert_; break;
                case 172: aFlds_[172] = &MinWaived_; break;
                case 173: aFlds_[173] = &HoldDivPymt_; break;
                case 174: aFlds_[174] = &DOTAdnd_; break;
                case 175: aFlds_[175] = &SettlementRuleExist_; break;
                case 176: aFlds_[176] = &TaxTypeSchedule_; break;
                case 177: aFlds_[177] = &AcctActivityExists_; break;
                case 178: aFlds_[178] = &StopReason_; break;
                case 179: aFlds_[179] = &AdditionalStopReason_; break;
                case 180: aFlds_[180] = &TypeOfInvestor_; break;
                case 181: aFlds_[181] = &InvestingOnBehalf_; break;
                case 182: aFlds_[182] = &ComplianceCode_; break;
                case 183: aFlds_[183] = &DocListExists_; break;
                case 184: aFlds_[184] = &UnitRoundMethod_; break;
                case 185: aFlds_[185] = &UnLockGrossAmt_; break;
                case 186: aFlds_[186] = &UnLockDeff_; break;
                case 187: aFlds_[187] = &RtnMailStageList_; break;
                case 188: aFlds_[188] = &StaleChqStageList_; break;
                case 189: aFlds_[189] = &StopNFU_; break;
                case 190: aFlds_[190] = &ExemptPeriod_; break;
                case 191: aFlds_[191] = &NextMFRProcessDate_; break;
                case 192: aFlds_[192] = &IsMFRAccount_; break;
                case 193: aFlds_[193] = &IsClosedCountryResident_; break;
                case 194: aFlds_[194] = &IARuleSetup_; break;
                case 195: aFlds_[195] = &EntityUnverifiedExist_; break;
                case 196: aFlds_[196] = &GrandFathered_; break;
                case 197: aFlds_[197] = &RESPBenefDeleted_; break;
                case 198: aFlds_[198] = &RESPAcctInfoExists_; break;
                case 199: aFlds_[199] = &Pre98Contrib_; break;
                case 200: aFlds_[200] = &AIPWithdrawalExists_; break;
                case 201: aFlds_[201] = &OrigPlanDeff_; break;
                case 202: aFlds_[202] = &IsGWOContractExist_; break;
                case 203: aFlds_[203] = &AcctGuarGuardExists_; break;
                case 204: aFlds_[204] = &RESPQCResidentFound_; break;
                case 205: aFlds_[205] = &GovAmendmentExist_; break;
                case 206: aFlds_[206] = &IsAcctRunCuratorFile_; break;
                case 207: aFlds_[207] = &HasAcctBeenUnFrozen_; break;
                case 208: aFlds_[208] = &StaleChqExists_; break;
                case 209: aFlds_[209] = &RemittedChqExists_; break;
                case 210: aFlds_[210] = &RemittedChqStageList_; break;
                case 211: aFlds_[211] = &ConsolTypeED_; break;
                case 212: aFlds_[212] = &InceptionDate_; break;
                case 213: aFlds_[213] = &ProdPortfolioUUID_; break;
                case 214: aFlds_[214] = &ProdPortfolioPlanUUID_; break;
                case 215: aFlds_[215] = &UnclmRemitDate_; break;
                case 216: aFlds_[216] = &NSCCSocialCode_; break;
                case 217: aFlds_[217] = &HasGIAHolding_; break;
                case 218: aFlds_[218] = &CanHaveCashSweep_; break;
                case 219: aFlds_[219] = &CanHaveMatInstr_; break;
                case 220: aFlds_[220] = &CashSweepExists_; break;
                case 221: aFlds_[221] = &MatIntExists_; break;
                case 222: aFlds_[222] = &OrgType_; break;
                case 223: aFlds_[223] = &SubOrgType_; break;
                case 224: aFlds_[224] = &TerritoryCode_; break;
                case 225: aFlds_[225] = &CommitmentStatus_; break;
                case 226: aFlds_[226] = &LifeAnnuityExist_; break;
                case 227: aFlds_[227] = &StopAdjDate_; break;
                case 228: aFlds_[228] = &NonFinConfirm_; break;
                case 229: aFlds_[229] = &SettleCurrency_; break;
                case 230: aFlds_[230] = &RegAgentCode_; break;
                case 231: aFlds_[231] = &GWLWAAvailOptions_; break;
                case 232: aFlds_[232] = &T5AnniversaryDate_; break;
                case 233: aFlds_[233] = &SWPGLOpt_; break;
                case 234: aFlds_[234] = &RRIFGLOpt_; break;
                case 235: aFlds_[235] = &TaxableTrustDate_; break;
                case 236: aFlds_[236] = &InitialDate_; break;
                case 237: aFlds_[237] = &InitialMarketValue_; break;
                case 238: aFlds_[238] = &NetTransAmt_; break;
                case 239: aFlds_[239] = &NetTransAmtAsOfDate_; break;
                case 240: aFlds_[240] = &AcctFeeModelAssociated_; break;
                case 241: aFlds_[241] = &ShrOutputType_; break;
                case 242: aFlds_[242] = &AnnuitantYoungerAge_; break;
                case 243: aFlds_[243] = &AcctIdentifierExist_; break;
                case 244: aFlds_[244] = &AcctRegulatoryExist_; break;
                case 245: aFlds_[245] = &EntRegDetlExist_; break;
                case 246: aFlds_[246] = &PendingFATCASrch_; break;
                case 247: aFlds_[247] = &AcctCIDElig_; break;
                case 248: aFlds_[248] = &TFRExists_; break;
                case 249: aFlds_[249] = &AdvisorFeeExist_; break;
                case 250: aFlds_[250] = &InvestorClassification_; break;
                case 251: aFlds_[251] = &AIFMDInvestorCategory_; break;
                case 252: aFlds_[252] = &AccountGroupExist_; break;
                case 253: aFlds_[253] = &PrivateWealthAcct_; break;
                case 254: aFlds_[254] = &PrivateWealthOptOut_; break;
                case 255: aFlds_[255] = &TaxFormsAppl_; break;
                case 256: aFlds_[256] = &AggregationType_; break;
                case 257: aFlds_[257] = &MoneyInExist_; break;
                case 258: aFlds_[258] = &MailHouseholdID_; break;
                case 259: aFlds_[259] = &RegisteredTransfers_; break;
                case 260: aFlds_[260] = &AcctDelState_; break;
                case 261: aFlds_[261] = &IsRegExtrAcct_; break;
                case 262: aFlds_[262] = &AcctTaxModel_; break;
                case 263: aFlds_[263] = &TermEntryExist_; break;
                case 264: aFlds_[264] = &DistrAcctTypeDetl_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0004_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0004_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0004_VWRepeat_Record::getLargestDefinedField( void ) const
{
    return( 200 );
}

unsigned long dsi_DSTC0004_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 6688 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0004_VWRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0004_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0004_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000040: return ( true );
        case 40000172: return ( true );
        case 40000173: return ( true );
        case 40000174: return ( true );
        case 40000175: return ( true );
        case 40000134: return ( true );
        case 40000135: return ( true );
        case 40000176: return ( true );
        case 40000177: return ( true );
        case 40000178: return ( true );
        case 40000179: return ( true );
        case 40000180: return ( true );
        case 40000181: return ( true );
        case 40000182: return ( true );
        case 40000044: return ( true );
        case 40000045: return ( true );
        case 40000185: return ( true );
        case 40000186: return ( true );
        case 40000187: return ( true );
        case 40000188: return ( true );
        case 40000189: return ( true );
        case 40000190: return ( true );
        case 40000191: return ( true );
        case 40000192: return ( true );
        case 40000193: return ( true );
        case 40000194: return ( true );
        case 40000195: return ( true );
        case 40000699: return ( true );
        case 40000197: return ( true );
        case 40000198: return ( true );
        case 40000593: return ( true );
        case 40000200: return ( true );
        case 40000201: return ( true );
        case 40000202: return ( true );
        case 40000203: return ( true );
        case 40000204: return ( true );
        case 40000205: return ( true );
        case 40000206: return ( true );
        case 40000207: return ( true );
        case 40000208: return ( true );
        case 40000209: return ( true );
        case 40000210: return ( true );
        case 40000211: return ( true );
        case 40000212: return ( true );
        case 40000213: return ( true );
        case 40000396: return ( true );
        case 40000114: return ( true );
        case 40000327: return ( true );
        case 40000216: return ( true );
        case 40000217: return ( true );
        case 40000117: return ( true );
        case 40000218: return ( true );
        case 40000909: return ( true );
        case 40000910: return ( true );
        case 40001117: return ( true );
        case 40001358: return ( true );
        case 40001359: return ( true );
        case 40001137: return ( true );
        case 40001360: return ( true );
        case 40001361: return ( true );
        case 40000814: return ( true );
        case 40001362: return ( true );
        case 40001363: return ( true );
        case 40001364: return ( true );
        case 40001365: return ( true );
        case 40001366: return ( true );
        case 40001367: return ( true );
        case 40001368: return ( true );
        case 40001369: return ( true );
        case 40001370: return ( true );
        case 40001118: return ( true );
        case 40000589: return ( true );
        case 40000591: return ( true );
        case 40000597: return ( true );
        case 40000598: return ( true );
        case 40000599: return ( true );
        case 40000600: return ( true );
        case 40000601: return ( true );
        case 40000867: return ( true );
        case 40001333: return ( true );
        case 40001371: return ( true );
        case 40001755: return ( true );
        case 40001756: return ( true );
        case 40001757: return ( true );
        case 40001244: return ( true );
        case 40001246: return ( true );
        case 40001758: return ( true );
        case 40001759: return ( true );
        case 40001760: return ( true );
        case 40001761: return ( true );
        case 40001773: return ( true );
        case 40001774: return ( true );
        case 40001775: return ( true );
        case 40001776: return ( true );
        case 40001777: return ( true );
        case 40001243: return ( true );
        case 40000839: return ( true );
        case 40001899: return ( true );
        case 40001900: return ( true );
        case 40001903: return ( true );
        case 40001992: return ( true );
        case 40001995: return ( true );
        case 40001993: return ( true );
        case 40001994: return ( true );
        case 40002024: return ( true );
        case 40002132: return ( true );
        case 40002187: return ( true );
        case 40002189: return ( true );
        case 40002553: return ( true );
        case 40002782: return ( true );
        case 40002789: return ( true );
        case 40002901: return ( true );
        case 40003001: return ( true );
        case 40003002: return ( true );
        case 40003083: return ( true );
        case 40003084: return ( true );
        case 40003100: return ( true );
        case 40003123: return ( true );
        case 40003196: return ( true );
        case 40003454: return ( true );
        case 40003529: return ( true );
        case 40003530: return ( true );
        case 40003683: return ( true );
        case 40003684: return ( true );
        case 40003693: return ( true );
        case 40003826: return ( true );
        case 40003827: return ( true );
        case 40003890: return ( true );
        case 40003894: return ( true );
        case 40004009: return ( true );
        case 40004010: return ( true );
        case 40004011: return ( true );
        case 40004019: return ( true );
        case 40004020: return ( true );
        case 40004021: return ( true );
        case 40004093: return ( true );
        case 40004137: return ( true );
        case 40004302: return ( true );
        case 40004303: return ( true );
        case 40004168: return ( true );
        case 40004418: return ( true );
        case 40004420: return ( true );
        case 40004439: return ( true );
        case 40004436: return ( true );
        case 40004571: return ( true );
        case 40004572: return ( true );
        case 40004584: return ( true );
        case 40005123: return ( true );
        case 40004047: return ( true );
        case 40005203: return ( true );
        case 40005212: return ( true );
        case 40005213: return ( true );
        case 40004978: return ( true );
        case 40003522: return ( true );
        case 40005466: return ( true );
        case 40005568: return ( true );
        case 40005556: return ( true );
        case 40005562: return ( true );
        case 40005563: return ( true );
        case 40005627: return ( true );
        case 40005649: return ( true );
        case 40005664: return ( true );
        case 40005670: return ( true );
        case 40005677: return ( true );
        case 40005678: return ( true );
        case 40005680: return ( true );
        case 40005682: return ( true );
        case 40005683: return ( true );
        case 40005701: return ( true );
        case 40005707: return ( true );
        case 40005711: return ( true );
        case 40005714: return ( true );
        case 40005722: return ( true );
        case 40005743: return ( true );
        case 40005749: return ( true );
        case 40005772: return ( true );
        case 40005778: return ( true );
        case 40005783: return ( true );
        case 40005790: return ( true );
        case 40005791: return ( true );
        case 40005792: return ( true );
        case 40005793: return ( true );
        case 40005797: return ( true );
        case 40005807: return ( true );
        case 40005816: return ( true );
        case 40005776: return ( true );
        case 40005775: return ( true );
        case 40006352: return ( true );
        case 40006347: return ( true );
        case 40005925: return ( true );
        case 40005957: return ( true );
        case 40005973: return ( true );
        case 40005975: return ( true );
        case 40005984: return ( true );
        case 40005993: return ( true );
        case 40006048: return ( true );
        case 40006080: return ( true );
        case 40006081: return ( true );
        case 40006171: return ( true );
        case 40006083: return ( true );
        case 40006176: return ( true );
        case 40006275: return ( true );
        case 40006287: return ( true );
        case 40006311: return ( true );
        case 40006312: return ( true );
        case 40006330: return ( true );
        case 40006344: return ( true );
        case 40006345: return ( true );
        case 40006346: return ( true );
        case 40006348: return ( true );
        case 40006350: return ( true );
        case 40006355: return ( true );
        case 40006185: return ( true );
        case 40006390: return ( true );
        case 40006391: return ( true );
        case 40005893: return ( true );
        case 40006420: return ( true );
        case 40006466: return ( true );
        case 40006573: return ( true );
        case 40006574: return ( true );
        case 40006575: return ( true );
        case 40006576: return ( true );
        case 40006661: return ( true );
        case 40006662: return ( true );
        case 40006681: return ( true );
        case 40006730: return ( true );
        case 40006728: return ( true );
        case 40006876: return ( true );
        case 40006844: return ( true );
        case 40000455: return ( true );
        case 40006872: return ( true );
        case 40006905: return ( true );
        case 40006912: return ( true );
        case 40006910: return ( true );
        case 40006911: return ( true );
        case 40006942: return ( true );
        case 40007012: return ( true );
        case 40007013: return ( true );
        case 40007014: return ( true );
        case 40007015: return ( true );
        case 40007024: return ( true );
        case 40007034: return ( true );
        case 40007131: return ( true );
        case 40007138: return ( true );
        case 40007139: return ( true );
        case 40007257: return ( true );
        case 40007258: return ( true );
        case 40007382: return ( true );
        case 40007386: return ( true );
        case 40007246: return ( true );
        case 40007400: return ( true );
        case 40007401: return ( true );
        case 40007430: return ( true );
        case 40007431: return ( true );
        case 40007432: return ( true );
        case 40007428: return ( true );
        case 40007493: return ( true );
        case 40007511: return ( true );
        case 40007524: return ( true );
        case 40007700: return ( true );
        case 40007788: return ( true );
        case 40007798: return ( true );
        case 40007799: return ( true );
        case 40007860: return ( true );
        case 40007930: return ( true );
    }
    return false;
}

