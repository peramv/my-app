// BFDataImpl implementation file for DataSet DSTC0474.REQ
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Friday, November 04, 2016 12:05:43


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0474_req.h"


// This function creates an instance of dsi_DSTC0474_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0474_REQ() { return new dsi_DSTC0474_REQ; }

dsi_DSTC0474_REQ::dsi_DSTC0474_REQ()
: BFDataImpl( 40007688, 40007692 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, RunMode_( ifds::RunMode, &ifds::s_FldProp_RunMode )
, RegTransferMstrUUID_( ifds::RegTransferMstrUUID, &ifds::s_FldProp_RegTransferMstrUUID )
, RegTransferStatus_( ifds::RegTransferStatus, &ifds::s_FldProp_RegTransferStatus )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, ExternalInstitution_( ifds::ExternalInstitution, &ifds::s_FldProp_ExternalInstitution )
, ExternalInstitutionName_( ifds::ExternalInstitutionName, &ifds::s_FldProp_ExternalInstitutionName )
, ExternalInstitutionAcct_( ifds::ExternalInstitutionAcct, &ifds::s_FldProp_ExternalInstitutionAcct )
, ExpectedAmt_( ifds::ExpectedAmt, &ifds::s_FldProp_ExpectedAmt )
, ActualAmount_( ifds::ActualAmount, &ifds::s_FldProp_ActualAmount )
, AmountTypeAlloc_( ifds::AmountTypeAlloc, &ifds::s_FldProp_AmountTypeAlloc )
, InitiationDate_( ifds::InitiationDate, &ifds::s_FldProp_InitiationDate )
, ClosedDate_( ifds::ClosedDate, &ifds::s_FldProp_ClosedDate )
, Version_( ifds::Version, &ifds::s_FldProp_Version )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
    cFields_ = 24;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0474_REQ::~dsi_DSTC0474_REQ()
{
}

BFDataImpl* dsi_DSTC0474_REQ::clone()
{
    dsi_DSTC0474_REQ* p = new dsi_DSTC0474_REQ;
    p->SessionId_ = SessionId_;
    p->User_Id_ = User_Id_;
    p->LanguageCode_ = LanguageCode_;
    p->CompanyId_ = CompanyId_;
    p->Track_ = Track_;
    p->Activity_ = Activity_;
    p->RunMode_ = RunMode_;
    p->RegTransferMstrUUID_ = RegTransferMstrUUID_;
    p->RegTransferStatus_ = RegTransferStatus_;
    p->AccountNum_ = AccountNum_;
    p->ExternalInstitution_ = ExternalInstitution_;
    p->ExternalInstitutionName_ = ExternalInstitutionName_;
    p->ExternalInstitutionAcct_ = ExternalInstitutionAcct_;
    p->ExpectedAmt_ = ExpectedAmt_;
    p->ActualAmount_ = ActualAmount_;
    p->AmountTypeAlloc_ = AmountTypeAlloc_;
    p->InitiationDate_ = InitiationDate_;
    p->ClosedDate_ = ClosedDate_;
    p->Version_ = Version_;
    p->ModDate_ = ModDate_;
    p->ModUser_ = ModUser_;
    p->ProcessDate_ = ProcessDate_;
    p->Username_ = Username_;
    p->RepeatCount_ = RepeatCount_;
    return(p);
}

BFDataField* dsi_DSTC0474_REQ::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000005: return ( &SessionId_ ); break; // SessionId
        case 40000002: return ( &User_Id_ ); break; // User_Id
        case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
        case 40000031: return ( &CompanyId_ ); break; // CompanyId
        case 40002065: return ( &Track_ ); break; // Track
        case 40002066: return ( &Activity_ ); break; // Activity
        case 40000990: return ( &RunMode_ ); break; // RunMode
        case 40007675: return ( &RegTransferMstrUUID_ ); break; // RegTransferMstrUUID
        case 40007677: return ( &RegTransferStatus_ ); break; // RegTransferStatus
        case 40000040: return ( &AccountNum_ ); break; // AccountNum
        case 40007614: return ( &ExternalInstitution_ ); break; // ExternalInstitution
        case 40007678: return ( &ExternalInstitutionName_ ); break; // ExternalInstitutionName
        case 40007679: return ( &ExternalInstitutionAcct_ ); break; // ExternalInstitutionAcct
        case 40006825: return ( &ExpectedAmt_ ); break; // ExpectedAmt
        case 40007689: return ( &ActualAmount_ ); break; // ActualAmount
        case 40004131: return ( &AmountTypeAlloc_ ); break; // AmountTypeAlloc
        case 40007680: return ( &InitiationDate_ ); break; // InitiationDate
        case 40007681: return ( &ClosedDate_ ); break; // ClosedDate
        case 40003739: return ( &Version_ ); break; // Version
        case 40000217: return ( &ModDate_ ); break; // ModDate
        case 40000218: return ( &ModUser_ ); break; // ModUser
        case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
        case 40000117: return ( &Username_ ); break; // Username
        case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0474_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0474_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0474_REQ::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 24 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &SessionId_; break;
                case 1: aFlds_[1] = &User_Id_; break;
                case 2: aFlds_[2] = &LanguageCode_; break;
                case 3: aFlds_[3] = &CompanyId_; break;
                case 4: aFlds_[4] = &Track_; break;
                case 5: aFlds_[5] = &Activity_; break;
                case 6: aFlds_[6] = &RunMode_; break;
                case 7: aFlds_[7] = &RegTransferMstrUUID_; break;
                case 8: aFlds_[8] = &RegTransferStatus_; break;
                case 9: aFlds_[9] = &AccountNum_; break;
                case 10: aFlds_[10] = &ExternalInstitution_; break;
                case 11: aFlds_[11] = &ExternalInstitutionName_; break;
                case 12: aFlds_[12] = &ExternalInstitutionAcct_; break;
                case 13: aFlds_[13] = &ExpectedAmt_; break;
                case 14: aFlds_[14] = &ActualAmount_; break;
                case 15: aFlds_[15] = &AmountTypeAlloc_; break;
                case 16: aFlds_[16] = &InitiationDate_; break;
                case 17: aFlds_[17] = &ClosedDate_; break;
                case 18: aFlds_[18] = &Version_; break;
                case 19: aFlds_[19] = &ModDate_; break;
                case 20: aFlds_[20] = &ModUser_; break;
                case 21: aFlds_[21] = &ProcessDate_; break;
                case 22: aFlds_[22] = &Username_; break;
                case 23: aFlds_[23] = &RepeatCount_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0474_REQ::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0474_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0474_REQ::getLargestDefinedField( void ) const
{
    return( 60 );
}

unsigned long dsi_DSTC0474_REQ::getDefinedByteLength( void ) const
{
    return( 918 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0474_REQ::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0474_REQ::fieldExists( id );
}

bool dsi_DSTC0474_REQ::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000005: return ( true );
        case 40000002: return ( true );
        case 40000030: return ( true );
        case 40000031: return ( true );
        case 40002065: return ( true );
        case 40002066: return ( true );
        case 40000990: return ( true );
        case 40007675: return ( true );
        case 40007677: return ( true );
        case 40000040: return ( true );
        case 40007614: return ( true );
        case 40007678: return ( true );
        case 40007679: return ( true );
        case 40006825: return ( true );
        case 40007689: return ( true );
        case 40004131: return ( true );
        case 40007680: return ( true );
        case 40007681: return ( true );
        case 40003739: return ( true );
        case 40000217: return ( true );
        case 40000218: return ( true );
        case 40000216: return ( true );
        case 40000117: return ( true );
        case 40000120: return ( true );
    }
    return false;
}

