// BFDataImpl implementation file for DataSet DSTC0450.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0450_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0450_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0450_VWRepeat_Record() { return new dsi_DSTC0450_VWRepeat_Record; }

dsi_DSTC0450_VWRepeat_Record::dsi_DSTC0450_VWRepeat_Record()
: BFDataImpl( 40007156 )
, FinInstRegDetlUUID_( ifds::FinInstRegDetlUUID, &ifds::s_FldProp_FinInstRegDetlUUID )
, FILevel_( ifds::FILevel, &ifds::s_FldProp_FILevel )
, FICode_( ifds::FICode, &ifds::s_FldProp_FICode )
, FICategory_( ifds::FICategory, &ifds::s_FldProp_FICategory )
, ComplyRule_( ifds::ComplyRule, &ifds::s_FldProp_ComplyRule )
, ComplyCode_( ifds::ComplyCode, &ifds::s_FldProp_ComplyCode )
, Description_( ifds::Description, &ifds::s_FldProp_Description )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
{
   cFields_ = 9;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0450_VWRepeat_Record::~dsi_DSTC0450_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0450_VWRepeat_Record::clone()
{
   dsi_DSTC0450_VWRepeat_Record* p = new dsi_DSTC0450_VWRepeat_Record;
   p->FinInstRegDetlUUID_ = FinInstRegDetlUUID_;
   p->FILevel_ = FILevel_;
   p->FICode_ = FICode_;
   p->FICategory_ = FICategory_;
   p->ComplyRule_ = ComplyRule_;
   p->ComplyCode_ = ComplyCode_;
   p->Description_ = Description_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   return(p);
}

BFDataField* dsi_DSTC0450_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40007142: return ( &FinInstRegDetlUUID_ ); break; // FinInstRegDetlUUID
      case 40007143: return ( &FILevel_ ); break; // FILevel
      case 40007144: return ( &FICode_ ); break; // FICode
      case 40007145: return ( &FICategory_ ); break; // FICategory
      case 40005822: return ( &ComplyRule_ ); break; // ComplyRule
      case 40005989: return ( &ComplyCode_ ); break; // ComplyCode
      case 40002905: return ( &Description_ ); break; // Description
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0450_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0450_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0450_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 9 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &FinInstRegDetlUUID_; break;
            case 1: aFlds_[1] = &FILevel_; break;
            case 2: aFlds_[2] = &FICode_; break;
            case 3: aFlds_[3] = &FICategory_; break;
            case 4: aFlds_[4] = &ComplyRule_; break;
            case 5: aFlds_[5] = &ComplyCode_; break;
            case 6: aFlds_[6] = &Description_; break;
            case 7: aFlds_[7] = &EffectiveDate_; break;
            case 8: aFlds_[8] = &StopDate_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0450_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0450_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0450_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 60 );
}

unsigned long dsi_DSTC0450_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 290 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0450_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0450_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0450_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40007142: return( true );
      case 40007143: return( true );
      case 40007144: return( true );
      case 40007145: return( true );
      case 40005822: return( true );
      case 40005989: return( true );
      case 40002905: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
   }
   return false;
}

