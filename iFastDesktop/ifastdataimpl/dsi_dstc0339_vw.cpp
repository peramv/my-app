// BFDataImpl implementation file for DataSet DSTC0339.VW
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Tuesday, January 16, 2018 20:27:06


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0339_vw.h"


// This function creates an instance of dsi_DSTC0339_VW
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0339_VW() { return new dsi_DSTC0339_VW; }

dsi_DSTC0339_VW::dsi_DSTC0339_VW()
: BFDataImpl( 40005086, 40005085 )
, MoreAvailable_( ifds::MoreAvailable, &ifds::s_FldProp_MoreAvailable )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, DilutionAmount_( ifds::DilutionAmount, &ifds::s_FldProp_DilutionAmount )
, RefundAmount_( ifds::RefundAmount, &ifds::s_FldProp_RefundAmount )
, RefundCurrency_( ifds::RefundCurrency, &ifds::s_FldProp_RefundCurrency )
, RefundFXRate_( ifds::RefundFXRate, &ifds::s_FldProp_RefundFXRate )
, RefundPayType_( ifds::RefundPayType, &ifds::s_FldProp_RefundPayType )
, RefundOption_( ifds::RefundOption, &ifds::s_FldProp_RefundOption )
, DilutionAvail_( ifds::DilutionAvail, &ifds::s_FldProp_DilutionAvail )
, SettleNetwork_( ifds::SettleNetwork, &ifds::s_FldProp_SettleNetwork )
, DilutionLinkNum_( ifds::DilutionLinkNum, &ifds::s_FldProp_DilutionLinkNum )
, RepeatCount_( ifds::RepeatCount, &ifds::s_FldProp_RepeatCount )
{
    cFields_ = 12;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0339_VW::~dsi_DSTC0339_VW()
{
}

BFDataImpl* dsi_DSTC0339_VW::clone()
{
    dsi_DSTC0339_VW* p = new dsi_DSTC0339_VW;
    p->MoreAvailable_ = MoreAvailable_;
    p->NextKey_ = NextKey_;
    p->DilutionAmount_ = DilutionAmount_;
    p->RefundAmount_ = RefundAmount_;
    p->RefundCurrency_ = RefundCurrency_;
    p->RefundFXRate_ = RefundFXRate_;
    p->RefundPayType_ = RefundPayType_;
    p->RefundOption_ = RefundOption_;
    p->DilutionAvail_ = DilutionAvail_;
    p->SettleNetwork_ = SettleNetwork_;
    p->DilutionLinkNum_ = DilutionLinkNum_;
    p->RepeatCount_ = RepeatCount_;
    return(p);
}

BFDataField* dsi_DSTC0339_VW::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000126: return ( &MoreAvailable_ ); break; // MoreAvailable
        case 40000029: return ( &NextKey_ ); break; // NextKey
        case 40006868: return ( &DilutionAmount_ ); break; // DilutionAmount
        case 40006869: return ( &RefundAmount_ ); break; // RefundAmount
        case 40006871: return ( &RefundCurrency_ ); break; // RefundCurrency
        case 40006870: return ( &RefundFXRate_ ); break; // RefundFXRate
        case 40006866: return ( &RefundPayType_ ); break; // RefundPayType
        case 40006867: return ( &RefundOption_ ); break; // RefundOption
        case 40006892: return ( &DilutionAvail_ ); break; // DilutionAvail
        case 40007321: return ( &SettleNetwork_ ); break; // SettleNetwork
        case 40007850: return ( &DilutionLinkNum_ ); break; // DilutionLinkNum
        case 40000120: return ( &RepeatCount_ ); break; // RepeatCount
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0339_VW::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0339_VW* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0339_VW::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 12 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &MoreAvailable_; break;
                case 1: aFlds_[1] = &NextKey_; break;
                case 2: aFlds_[2] = &DilutionAmount_; break;
                case 3: aFlds_[3] = &RefundAmount_; break;
                case 4: aFlds_[4] = &RefundCurrency_; break;
                case 5: aFlds_[5] = &RefundFXRate_; break;
                case 6: aFlds_[6] = &RefundPayType_; break;
                case 7: aFlds_[7] = &RefundOption_; break;
                case 8: aFlds_[8] = &DilutionAvail_; break;
                case 9: aFlds_[9] = &SettleNetwork_; break;
                case 10: aFlds_[10] = &DilutionLinkNum_; break;
                case 11: aFlds_[11] = &RepeatCount_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0339_VW::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0339_VW* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0339_VW::getLargestDefinedField( void ) const
{
    return( 100 );
}

unsigned long dsi_DSTC0339_VW::getDefinedByteLength( void ) const
{
    return( 486 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0339_VW::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0339_VW::fieldExists( id );
}

bool dsi_DSTC0339_VW::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000126: return ( true );
        case 40000029: return ( true );
        case 40006868: return ( true );
        case 40006869: return ( true );
        case 40006871: return ( true );
        case 40006870: return ( true );
        case 40006866: return ( true );
        case 40006867: return ( true );
        case 40006892: return ( true );
        case 40007321: return ( true );
        case 40007850: return ( true );
        case 40000120: return ( true );
    }
    return false;
}

