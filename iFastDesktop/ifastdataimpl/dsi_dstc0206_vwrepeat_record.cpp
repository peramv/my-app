// BFDataImpl implementation file for DataSet DSTC0206.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0206_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0206_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0206_VWRepeat_Record() { return new dsi_DSTC0206_VWRepeat_Record; }

dsi_DSTC0206_VWRepeat_Record::dsi_DSTC0206_VWRepeat_Record()
: BFDataImpl( 40003128 )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, PurchaseTotal_( ifds::PurchaseTotal, &ifds::s_FldProp_PurchaseTotal )
, RedemptTotal_( ifds::RedemptTotal, &ifds::s_FldProp_RedemptTotal )
, NetTotal_( ifds::NetTotal, &ifds::s_FldProp_NetTotal )
, CountTotal_( ifds::CountTotal, &ifds::s_FldProp_CountTotal )
, EligibleRedempTotal_( ifds::EligibleRedempTotal, &ifds::s_FldProp_EligibleRedempTotal )
, EligibleNetTotal_( ifds::EligibleNetTotal, &ifds::s_FldProp_EligibleNetTotal )
, EligibleCount_( ifds::EligibleCount, &ifds::s_FldProp_EligibleCount )
, ExchangeInTotal_( ifds::ExchangeInTotal, &ifds::s_FldProp_ExchangeInTotal )
, ExchangeOutTotal_( ifds::ExchangeOutTotal, &ifds::s_FldProp_ExchangeOutTotal )
, TransferInTotal_( ifds::TransferInTotal, &ifds::s_FldProp_TransferInTotal )
, TransferOutTotal_( ifds::TransferOutTotal, &ifds::s_FldProp_TransferOutTotal )
{
   cFields_ = 12;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0206_VWRepeat_Record::~dsi_DSTC0206_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0206_VWRepeat_Record::clone()
{
   dsi_DSTC0206_VWRepeat_Record* p = new dsi_DSTC0206_VWRepeat_Record;
   p->Currency_ = Currency_;
   p->PurchaseTotal_ = PurchaseTotal_;
   p->RedemptTotal_ = RedemptTotal_;
   p->NetTotal_ = NetTotal_;
   p->CountTotal_ = CountTotal_;
   p->EligibleRedempTotal_ = EligibleRedempTotal_;
   p->EligibleNetTotal_ = EligibleNetTotal_;
   p->EligibleCount_ = EligibleCount_;
   p->ExchangeInTotal_ = ExchangeInTotal_;
   p->ExchangeOutTotal_ = ExchangeOutTotal_;
   p->TransferInTotal_ = TransferInTotal_;
   p->TransferOutTotal_ = TransferOutTotal_;
   return(p);
}

BFDataField* dsi_DSTC0206_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000180: return ( &Currency_ ); break; // Currency
      case 40001921: return ( &PurchaseTotal_ ); break; // PurchaseTotal
      case 40003129: return ( &RedemptTotal_ ); break; // RedemptTotal
      case 40003130: return ( &NetTotal_ ); break; // NetTotal
      case 40003131: return ( &CountTotal_ ); break; // CountTotal
      case 40004576: return ( &EligibleRedempTotal_ ); break; // EligibleRedempTotal
      case 40004577: return ( &EligibleNetTotal_ ); break; // EligibleNetTotal
      case 40004578: return ( &EligibleCount_ ); break; // EligibleCount
      case 40005578: return ( &ExchangeInTotal_ ); break; // ExchangeInTotal
      case 40005579: return ( &ExchangeOutTotal_ ); break; // ExchangeOutTotal
      case 40005580: return ( &TransferInTotal_ ); break; // TransferInTotal
      case 40005581: return ( &TransferOutTotal_ ); break; // TransferOutTotal
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0206_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0206_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0206_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 12 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &Currency_; break;
            case 1: aFlds_[1] = &PurchaseTotal_; break;
            case 2: aFlds_[2] = &RedemptTotal_; break;
            case 3: aFlds_[3] = &NetTotal_; break;
            case 4: aFlds_[4] = &CountTotal_; break;
            case 5: aFlds_[5] = &EligibleRedempTotal_; break;
            case 6: aFlds_[6] = &EligibleNetTotal_; break;
            case 7: aFlds_[7] = &EligibleCount_; break;
            case 8: aFlds_[8] = &ExchangeInTotal_; break;
            case 9: aFlds_[9] = &ExchangeOutTotal_; break;
            case 10: aFlds_[10] = &TransferInTotal_; break;
            case 11: aFlds_[11] = &TransferOutTotal_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0206_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0206_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0206_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0206_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 580 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0206_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0206_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0206_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000180: return( true );
      case 40001921: return( true );
      case 40003129: return( true );
      case 40003130: return( true );
      case 40003131: return( true );
      case 40004576: return( true );
      case 40004577: return( true );
      case 40004578: return( true );
      case 40005578: return( true );
      case 40005579: return( true );
      case 40005580: return( true );
      case 40005581: return( true );
   }
   return false;
}

