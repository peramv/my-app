// BFDataImpl implementation file for DataSet DSTC0056.VWRepeat_Record
// ViewsGenerator: This file was generated by ViewsGenerator - Version 1.0.0.0
// ViewsGenerator: Generated on : Monday, November 14, 2016 22:14:55


#include "stdafx.h"
#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0056_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0056_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0056_VWRepeat_Record() { return new dsi_DSTC0056_VWRepeat_Record; }

dsi_DSTC0056_VWRepeat_Record::dsi_DSTC0056_VWRepeat_Record()
: BFDataImpl( 40000687 )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, ClassE_( ifds::ClassE, &ifds::s_FldProp_ClassE )
, ClassF_( ifds::ClassF, &ifds::s_FldProp_ClassF )
, AdditionalDays_( ifds::AdditionalDays, &ifds::s_FldProp_AdditionalDays )
, MinInitPurAmt_( ifds::MinInitPurAmt, &ifds::s_FldProp_MinInitPurAmt )
, MinSubPurAmt_( ifds::MinSubPurAmt, &ifds::s_FldProp_MinSubPurAmt )
, MinInitRedAmt_( ifds::MinInitRedAmt, &ifds::s_FldProp_MinInitRedAmt )
, MinSubRedAmt_( ifds::MinSubRedAmt, &ifds::s_FldProp_MinSubRedAmt )
, MinPAC_( ifds::MinPAC, &ifds::s_FldProp_MinPAC )
, MinSWP_( ifds::MinSWP, &ifds::s_FldProp_MinSWP )
, MinFndClsBal_( ifds::MinFndClsBal, &ifds::s_FldProp_MinFndClsBal )
, MinAcctBal_( ifds::MinAcctBal, &ifds::s_FldProp_MinAcctBal )
, StopPurchase_( ifds::StopPurchase, &ifds::s_FldProp_StopPurchase )
, StopRed_( ifds::StopRed, &ifds::s_FldProp_StopRed )
, StopXferIn_( ifds::StopXferIn, &ifds::s_FldProp_StopXferIn )
, StopXferOut_( ifds::StopXferOut, &ifds::s_FldProp_StopXferOut )
, OverrideDSCAllow_( ifds::OverrideDSCAllow, &ifds::s_FldProp_OverrideDSCAllow )
, FixedPrice_( ifds::FixedPrice, &ifds::s_FldProp_FixedPrice )
, FixedRate_( ifds::FixedRate, &ifds::s_FldProp_FixedRate )
, Currency_( ifds::Currency, &ifds::s_FldProp_Currency )
, CurrencyName_( ifds::CurrencyName, &ifds::s_FldProp_CurrencyName )
, LastValDate_( ifds::LastValDate, &ifds::s_FldProp_LastValDate )
, LastDivDate_( ifds::LastDivDate, &ifds::s_FldProp_LastDivDate )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, CusipNum_( ifds::CusipNum, &ifds::s_FldProp_CusipNum )
, Baycom_( ifds::Baycom, &ifds::s_FldProp_Baycom )
, RSPflag_( ifds::RSPflag, &ifds::s_FldProp_RSPflag )
, RIFflag_( ifds::RIFflag, &ifds::s_FldProp_RIFflag )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, LoadType_( ifds::LoadType, &ifds::s_FldProp_LoadType )
, Domestic_( ifds::Domestic, &ifds::s_FldProp_Domestic )
, WireElig_( ifds::WireElig, &ifds::s_FldProp_WireElig )
, NextSettleDate_( ifds::NextSettleDate, &ifds::s_FldProp_NextSettleDate )
, NextValDate_( ifds::NextValDate, &ifds::s_FldProp_NextValDate )
, AMSFund_( ifds::AMSFund, &ifds::s_FldProp_AMSFund )
, UnitsPrecision_( ifds::UnitsPrecision, &ifds::s_FldProp_UnitsPrecision )
, FeeCurrency_( ifds::FeeCurrency, &ifds::s_FldProp_FeeCurrency )
, InventoryTrac_( ifds::InventoryTrac, &ifds::s_FldProp_InventoryTrac )
, SplitComm_( ifds::SplitComm, &ifds::s_FldProp_SplitComm )
, Active_( ifds::Active, &ifds::s_FldProp_Active )
, ISINNumber_( ifds::ISINNumber, &ifds::s_FldProp_ISINNumber )
, SplitCommPur_( ifds::SplitCommPur, &ifds::s_FldProp_SplitCommPur )
, SplitCommPAC_( ifds::SplitCommPAC, &ifds::s_FldProp_SplitCommPAC )
, SplitCommRed_( ifds::SplitCommRed, &ifds::s_FldProp_SplitCommRed )
, SplitCommSWP_( ifds::SplitCommSWP, &ifds::s_FldProp_SplitCommSWP )
, SplitCommTrfln_( ifds::SplitCommTrfln, &ifds::s_FldProp_SplitCommTrfln )
, SplitCommExIn_( ifds::SplitCommExIn, &ifds::s_FldProp_SplitCommExIn )
, ExchInFeeExist_( ifds::ExchInFeeExist, &ifds::s_FldProp_ExchInFeeExist )
, AsPensionEligibleQ4_( ifds::AsPensionEligibleQ4, &ifds::s_FldProp_AsPensionEligibleQ4 )
, AsPensionEligibleOth_( ifds::AsPensionEligibleOth, &ifds::s_FldProp_AsPensionEligibleOth )
, ESoPEligible_( ifds::ESoPEligible, &ifds::s_FldProp_ESoPEligible )
, LastNightRun_( ifds::LastNightRun, &ifds::s_FldProp_LastNightRun )
, NextNightRun_( ifds::NextNightRun, &ifds::s_FldProp_NextNightRun )
, ContractType_( ifds::ContractType, &ifds::s_FldProp_ContractType )
, MgtFeeElig_( ifds::MgtFeeElig, &ifds::s_FldProp_MgtFeeElig )
, MgtFeeRbtElig_( ifds::MgtFeeRbtElig, &ifds::s_FldProp_MgtFeeRbtElig )
, CompanyCode_( ifds::CompanyCode, &ifds::s_FldProp_CompanyCode )
, LastMgmtFeeDate_( ifds::LastMgmtFeeDate, &ifds::s_FldProp_LastMgmtFeeDate )
, LastMFRebateDate_( ifds::LastMFRebateDate, &ifds::s_FldProp_LastMFRebateDate )
, StopPAC_( ifds::StopPAC, &ifds::s_FldProp_StopPAC )
, StopSWP_( ifds::StopSWP, &ifds::s_FldProp_StopSWP )
, StopSysGenTrnfrIn_( ifds::StopSysGenTrnfrIn, &ifds::s_FldProp_StopSysGenTrnfrIn )
, StopSysGenTrfrOut_( ifds::StopSysGenTrfrOut, &ifds::s_FldProp_StopSysGenTrfrOut )
, StopPACEWI_( ifds::StopPACEWI, &ifds::s_FldProp_StopPACEWI )
, StopSWPEWI_( ifds::StopSWPEWI, &ifds::s_FldProp_StopSWPEWI )
, StopSysGenTrnfrInEWI_( ifds::StopSysGenTrnfrInEWI, &ifds::s_FldProp_StopSysGenTrnfrInEWI )
, StopSysGenTrfrOutEWI_( ifds::StopSysGenTrfrOutEWI, &ifds::s_FldProp_StopSysGenTrfrOutEWI )
, FCTransferElig_( ifds::FCTransferElig, &ifds::s_FldProp_FCTransferElig )
, MarginEligible_( ifds::MarginEligible, &ifds::s_FldProp_MarginEligible )
, IndexCode_( ifds::IndexCode, &ifds::s_FldProp_IndexCode )
, DCAFFund_( ifds::DCAFFund, &ifds::s_FldProp_DCAFFund )
, WrapFund_( ifds::WrapFund, &ifds::s_FldProp_WrapFund )
, ProcessDiv_( ifds::ProcessDiv, &ifds::s_FldProp_ProcessDiv )
, LastIntAccDate_( ifds::LastIntAccDate, &ifds::s_FldProp_LastIntAccDate )
, NSCCCompliant_( ifds::NSCCCompliant, &ifds::s_FldProp_NSCCCompliant )
, AMSEligible_( ifds::AMSEligible, &ifds::s_FldProp_AMSEligible )
, StopCommissionRebate_( ifds::StopCommissionRebate, &ifds::s_FldProp_StopCommissionRebate )
, FundWKN_( ifds::FundWKN, &ifds::s_FldProp_FundWKN )
, FundISIN_( ifds::FundISIN, &ifds::s_FldProp_FundISIN )
, ValidSettleCurr_( ifds::ValidSettleCurr, &ifds::s_FldProp_ValidSettleCurr )
, UnitsCal_( ifds::UnitsCal, &ifds::s_FldProp_UnitsCal )
, FirstScopeDate_( ifds::FirstScopeDate, &ifds::s_FldProp_FirstScopeDate )
, FirstLookThruDate_( ifds::FirstLookThruDate, &ifds::s_FldProp_FirstLookThruDate )
, CustomScheduleList_( ifds::CustomScheduleList, &ifds::s_FldProp_CustomScheduleList )
, DftOrdType_( ifds::DftOrdType, &ifds::s_FldProp_DftOrdType )
, FundLoadGrp_( ifds::FundLoadGrp, &ifds::s_FldProp_FundLoadGrp )
, FOFFund_( ifds::FOFFund, &ifds::s_FldProp_FOFFund )
, FundStatus_( ifds::FundStatus, &ifds::s_FldProp_FundStatus )
, FundStatusDate_( ifds::FundStatusDate, &ifds::s_FldProp_FundStatusDate )
, UnitRoundMethod_( ifds::UnitRoundMethod, &ifds::s_FldProp_UnitRoundMethod )
, FundSubCat_( ifds::FundSubCat, &ifds::s_FldProp_FundSubCat )
, ERISAProhibited_( ifds::ERISAProhibited, &ifds::s_FldProp_ERISAProhibited )
, CombinedLoadType_( ifds::CombinedLoadType, &ifds::s_FldProp_CombinedLoadType )
, AMSModelType_( ifds::AMSModelType, &ifds::s_FldProp_AMSModelType )
, G1G2TrackType_( ifds::G1G2TrackType, &ifds::s_FldProp_G1G2TrackType )
, Fund_ID_Values_( ifds::Fund_ID_Values, &ifds::s_FldProp_Fund_ID_Values )
, RolloverExchangeAppl_( ifds::RolloverExchangeAppl, &ifds::s_FldProp_RolloverExchangeAppl )
, RolloverExchangeToFundClass_( ifds::RolloverExchangeToFundClass, &ifds::s_FldProp_RolloverExchangeToFundClass )
, RolloverExchangeAmountType_( ifds::RolloverExchangeAmountType, &ifds::s_FldProp_RolloverExchangeAmountType )
, GAVApply_( ifds::GAVApply, &ifds::s_FldProp_GAVApply )
, RoundFlag_( ifds::RoundFlag, &ifds::s_FldProp_RoundFlag )
, FundClassSheduleAvailable_( ifds::FundClassSheduleAvailable, &ifds::s_FldProp_FundClassSheduleAvailable )
, GrossOrNet_( ifds::GrossOrNet, &ifds::s_FldProp_GrossOrNet )
, SoftCapLvl_( ifds::SoftCapLvl, &ifds::s_FldProp_SoftCapLvl )
, FundLFC_( ifds::FundLFC, &ifds::s_FldProp_FundLFC )
, AmountInventoryAppl_( ifds::AmountInventoryAppl, &ifds::s_FldProp_AmountInventoryAppl )
, PriceTypes_( ifds::PriceTypes, &ifds::s_FldProp_PriceTypes )
, LiqRedFeeExist_( ifds::LiqRedFeeExist, &ifds::s_FldProp_LiqRedFeeExist )
{
    cFields_ = 110;
    memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0056_VWRepeat_Record::~dsi_DSTC0056_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0056_VWRepeat_Record::clone()
{
    dsi_DSTC0056_VWRepeat_Record* p = new dsi_DSTC0056_VWRepeat_Record;
    p->FundCode_ = FundCode_;
    p->ClassCode_ = ClassCode_;
    p->ClassE_ = ClassE_;
    p->ClassF_ = ClassF_;
    p->AdditionalDays_ = AdditionalDays_;
    p->MinInitPurAmt_ = MinInitPurAmt_;
    p->MinSubPurAmt_ = MinSubPurAmt_;
    p->MinInitRedAmt_ = MinInitRedAmt_;
    p->MinSubRedAmt_ = MinSubRedAmt_;
    p->MinPAC_ = MinPAC_;
    p->MinSWP_ = MinSWP_;
    p->MinFndClsBal_ = MinFndClsBal_;
    p->MinAcctBal_ = MinAcctBal_;
    p->StopPurchase_ = StopPurchase_;
    p->StopRed_ = StopRed_;
    p->StopXferIn_ = StopXferIn_;
    p->StopXferOut_ = StopXferOut_;
    p->OverrideDSCAllow_ = OverrideDSCAllow_;
    p->FixedPrice_ = FixedPrice_;
    p->FixedRate_ = FixedRate_;
    p->Currency_ = Currency_;
    p->CurrencyName_ = CurrencyName_;
    p->LastValDate_ = LastValDate_;
    p->LastDivDate_ = LastDivDate_;
    p->EffectiveDate_ = EffectiveDate_;
    p->ProcessDate_ = ProcessDate_;
    p->CusipNum_ = CusipNum_;
    p->Baycom_ = Baycom_;
    p->RSPflag_ = RSPflag_;
    p->RIFflag_ = RIFflag_;
    p->StopDate_ = StopDate_;
    p->LoadType_ = LoadType_;
    p->Domestic_ = Domestic_;
    p->WireElig_ = WireElig_;
    p->NextSettleDate_ = NextSettleDate_;
    p->NextValDate_ = NextValDate_;
    p->AMSFund_ = AMSFund_;
    p->UnitsPrecision_ = UnitsPrecision_;
    p->FeeCurrency_ = FeeCurrency_;
    p->InventoryTrac_ = InventoryTrac_;
    p->SplitComm_ = SplitComm_;
    p->Active_ = Active_;
    p->ISINNumber_ = ISINNumber_;
    p->SplitCommPur_ = SplitCommPur_;
    p->SplitCommPAC_ = SplitCommPAC_;
    p->SplitCommRed_ = SplitCommRed_;
    p->SplitCommSWP_ = SplitCommSWP_;
    p->SplitCommTrfln_ = SplitCommTrfln_;
    p->SplitCommExIn_ = SplitCommExIn_;
    p->ExchInFeeExist_ = ExchInFeeExist_;
    p->AsPensionEligibleQ4_ = AsPensionEligibleQ4_;
    p->AsPensionEligibleOth_ = AsPensionEligibleOth_;
    p->ESoPEligible_ = ESoPEligible_;
    p->LastNightRun_ = LastNightRun_;
    p->NextNightRun_ = NextNightRun_;
    p->ContractType_ = ContractType_;
    p->MgtFeeElig_ = MgtFeeElig_;
    p->MgtFeeRbtElig_ = MgtFeeRbtElig_;
    p->CompanyCode_ = CompanyCode_;
    p->LastMgmtFeeDate_ = LastMgmtFeeDate_;
    p->LastMFRebateDate_ = LastMFRebateDate_;
    p->StopPAC_ = StopPAC_;
    p->StopSWP_ = StopSWP_;
    p->StopSysGenTrnfrIn_ = StopSysGenTrnfrIn_;
    p->StopSysGenTrfrOut_ = StopSysGenTrfrOut_;
    p->StopPACEWI_ = StopPACEWI_;
    p->StopSWPEWI_ = StopSWPEWI_;
    p->StopSysGenTrnfrInEWI_ = StopSysGenTrnfrInEWI_;
    p->StopSysGenTrfrOutEWI_ = StopSysGenTrfrOutEWI_;
    p->FCTransferElig_ = FCTransferElig_;
    p->MarginEligible_ = MarginEligible_;
    p->IndexCode_ = IndexCode_;
    p->DCAFFund_ = DCAFFund_;
    p->WrapFund_ = WrapFund_;
    p->ProcessDiv_ = ProcessDiv_;
    p->LastIntAccDate_ = LastIntAccDate_;
    p->NSCCCompliant_ = NSCCCompliant_;
    p->AMSEligible_ = AMSEligible_;
    p->StopCommissionRebate_ = StopCommissionRebate_;
    p->FundWKN_ = FundWKN_;
    p->FundISIN_ = FundISIN_;
    p->ValidSettleCurr_ = ValidSettleCurr_;
    p->UnitsCal_ = UnitsCal_;
    p->FirstScopeDate_ = FirstScopeDate_;
    p->FirstLookThruDate_ = FirstLookThruDate_;
    p->CustomScheduleList_ = CustomScheduleList_;
    p->DftOrdType_ = DftOrdType_;
    p->FundLoadGrp_ = FundLoadGrp_;
    p->FOFFund_ = FOFFund_;
    p->FundStatus_ = FundStatus_;
    p->FundStatusDate_ = FundStatusDate_;
    p->UnitRoundMethod_ = UnitRoundMethod_;
    p->FundSubCat_ = FundSubCat_;
    p->ERISAProhibited_ = ERISAProhibited_;
    p->CombinedLoadType_ = CombinedLoadType_;
    p->AMSModelType_ = AMSModelType_;
    p->G1G2TrackType_ = G1G2TrackType_;
    p->Fund_ID_Values_ = Fund_ID_Values_;
    p->RolloverExchangeAppl_ = RolloverExchangeAppl_;
    p->RolloverExchangeToFundClass_ = RolloverExchangeToFundClass_;
    p->RolloverExchangeAmountType_ = RolloverExchangeAmountType_;
    p->GAVApply_ = GAVApply_;
    p->RoundFlag_ = RoundFlag_;
    p->FundClassSheduleAvailable_ = FundClassSheduleAvailable_;
    p->GrossOrNet_ = GrossOrNet_;
    p->SoftCapLvl_ = SoftCapLvl_;
    p->FundLFC_ = FundLFC_;
    p->AmountInventoryAppl_ = AmountInventoryAppl_;
    p->PriceTypes_ = PriceTypes_;
    p->LiqRedFeeExist_ = LiqRedFeeExist_;
    return(p);
}

BFDataField* dsi_DSTC0056_VWRepeat_Record::getElement( const BFFieldId& id )
{
    switch( id.getId() ) {
        case 40000049: return ( &FundCode_ ); break; // FundCode
        case 40000050: return ( &ClassCode_ ); break; // ClassCode
        case 40000688: return ( &ClassE_ ); break; // ClassE
        case 40000689: return ( &ClassF_ ); break; // ClassF
        case 40000690: return ( &AdditionalDays_ ); break; // AdditionalDays
        case 40000691: return ( &MinInitPurAmt_ ); break; // MinInitPurAmt
        case 40000692: return ( &MinSubPurAmt_ ); break; // MinSubPurAmt
        case 40000693: return ( &MinInitRedAmt_ ); break; // MinInitRedAmt
        case 40000694: return ( &MinSubRedAmt_ ); break; // MinSubRedAmt
        case 40000695: return ( &MinPAC_ ); break; // MinPAC
        case 40000696: return ( &MinSWP_ ); break; // MinSWP
        case 40000697: return ( &MinFndClsBal_ ); break; // MinFndClsBal
        case 40000698: return ( &MinAcctBal_ ); break; // MinAcctBal
        case 40000699: return ( &StopPurchase_ ); break; // StopPurchase
        case 40000593: return ( &StopRed_ ); break; // StopRed
        case 40000197: return ( &StopXferIn_ ); break; // StopXferIn
        case 40000198: return ( &StopXferOut_ ); break; // StopXferOut
        case 40000703: return ( &OverrideDSCAllow_ ); break; // OverrideDSCAllow
        case 40000704: return ( &FixedPrice_ ); break; // FixedPrice
        case 40000705: return ( &FixedRate_ ); break; // FixedRate
        case 40000180: return ( &Currency_ ); break; // Currency
        case 40000181: return ( &CurrencyName_ ); break; // CurrencyName
        case 40000706: return ( &LastValDate_ ); break; // LastValDate
        case 40000707: return ( &LastDivDate_ ); break; // LastDivDate
        case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
        case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
        case 40000755: return ( &CusipNum_ ); break; // CusipNum
        case 40000958: return ( &Baycom_ ); break; // Baycom
        case 40000959: return ( &RSPflag_ ); break; // RSPflag
        case 40000961: return ( &RIFflag_ ); break; // RIFflag
        case 40000279: return ( &StopDate_ ); break; // StopDate
        case 40000960: return ( &LoadType_ ); break; // LoadType
        case 40000980: return ( &Domestic_ ); break; // Domestic
        case 40000979: return ( &WireElig_ ); break; // WireElig
        case 40001413: return ( &NextSettleDate_ ); break; // NextSettleDate
        case 40001414: return ( &NextValDate_ ); break; // NextValDate
        case 40001762: return ( &AMSFund_ ); break; // AMSFund
        case 40001790: return ( &UnitsPrecision_ ); break; // UnitsPrecision
        case 40000237: return ( &FeeCurrency_ ); break; // FeeCurrency
        case 40002133: return ( &InventoryTrac_ ); break; // InventoryTrac
        case 40001150: return ( &SplitComm_ ); break; // SplitComm
        case 40000222: return ( &Active_ ); break; // Active
        case 40002284: return ( &ISINNumber_ ); break; // ISINNumber
        case 40002490: return ( &SplitCommPur_ ); break; // SplitCommPur
        case 40002491: return ( &SplitCommPAC_ ); break; // SplitCommPAC
        case 40002492: return ( &SplitCommRed_ ); break; // SplitCommRed
        case 40002493: return ( &SplitCommSWP_ ); break; // SplitCommSWP
        case 40002494: return ( &SplitCommTrfln_ ); break; // SplitCommTrfln
        case 40002505: return ( &SplitCommExIn_ ); break; // SplitCommExIn
        case 40002601: return ( &ExchInFeeExist_ ); break; // ExchInFeeExist
        case 40002750: return ( &AsPensionEligibleQ4_ ); break; // AsPensionEligibleQ4
        case 40002751: return ( &AsPensionEligibleOth_ ); break; // AsPensionEligibleOth
        case 40002753: return ( &ESoPEligible_ ); break; // ESoPEligible
        case 40002790: return ( &LastNightRun_ ); break; // LastNightRun
        case 40002791: return ( &NextNightRun_ ); break; // NextNightRun
        case 40001385: return ( &ContractType_ ); break; // ContractType
        case 40002903: return ( &MgtFeeElig_ ); break; // MgtFeeElig
        case 40002904: return ( &MgtFeeRbtElig_ ); break; // MgtFeeRbtElig
        case 40002245: return ( &CompanyCode_ ); break; // CompanyCode
        case 40003014: return ( &LastMgmtFeeDate_ ); break; // LastMgmtFeeDate
        case 40003015: return ( &LastMFRebateDate_ ); break; // LastMFRebateDate
        case 40003533: return ( &StopPAC_ ); break; // StopPAC
        case 40003027: return ( &StopSWP_ ); break; // StopSWP
        case 40003535: return ( &StopSysGenTrnfrIn_ ); break; // StopSysGenTrnfrIn
        case 40003536: return ( &StopSysGenTrfrOut_ ); break; // StopSysGenTrfrOut
        case 40003537: return ( &StopPACEWI_ ); break; // StopPACEWI
        case 40003538: return ( &StopSWPEWI_ ); break; // StopSWPEWI
        case 40003539: return ( &StopSysGenTrnfrInEWI_ ); break; // StopSysGenTrnfrInEWI
        case 40003540: return ( &StopSysGenTrfrOutEWI_ ); break; // StopSysGenTrfrOutEWI
        case 40003596: return ( &FCTransferElig_ ); break; // FCTransferElig
        case 40003597: return ( &MarginEligible_ ); break; // MarginEligible
        case 40003658: return ( &IndexCode_ ); break; // IndexCode
        case 40003719: return ( &DCAFFund_ ); break; // DCAFFund
        case 40003763: return ( &WrapFund_ ); break; // WrapFund
        case 40004198: return ( &ProcessDiv_ ); break; // ProcessDiv
        case 40004410: return ( &LastIntAccDate_ ); break; // LastIntAccDate
        case 40004419: return ( &NSCCCompliant_ ); break; // NSCCCompliant
        case 40004434: return ( &AMSEligible_ ); break; // AMSEligible
        case 40004503: return ( &StopCommissionRebate_ ); break; // StopCommissionRebate
        case 40004586: return ( &FundWKN_ ); break; // FundWKN
        case 40004587: return ( &FundISIN_ ); break; // FundISIN
        case 40004593: return ( &ValidSettleCurr_ ); break; // ValidSettleCurr
        case 40004594: return ( &UnitsCal_ ); break; // UnitsCal
        case 40005363: return ( &FirstScopeDate_ ); break; // FirstScopeDate
        case 40005364: return ( &FirstLookThruDate_ ); break; // FirstLookThruDate
        case 40005439: return ( &CustomScheduleList_ ); break; // CustomScheduleList
        case 40005577: return ( &DftOrdType_ ); break; // DftOrdType
        case 40003000: return ( &FundLoadGrp_ ); break; // FundLoadGrp
        case 40005624: return ( &FOFFund_ ); break; // FOFFund
        case 40000965: return ( &FundStatus_ ); break; // FundStatus
        case 40005657: return ( &FundStatusDate_ ); break; // FundStatusDate
        case 40005816: return ( &UnitRoundMethod_ ); break; // UnitRoundMethod
        case 40005994: return ( &FundSubCat_ ); break; // FundSubCat
        case 40006652: return ( &ERISAProhibited_ ); break; // ERISAProhibited
        case 40006941: return ( &CombinedLoadType_ ); break; // CombinedLoadType
        case 40007123: return ( &AMSModelType_ ); break; // AMSModelType
        case 40007119: return ( &G1G2TrackType_ ); break; // G1G2TrackType
        case 40007175: return ( &Fund_ID_Values_ ); break; // Fund_ID_Values
        case 40007240: return ( &RolloverExchangeAppl_ ); break; // RolloverExchangeAppl
        case 40007242: return ( &RolloverExchangeToFundClass_ ); break; // RolloverExchangeToFundClass
        case 40007241: return ( &RolloverExchangeAmountType_ ); break; // RolloverExchangeAmountType
        case 40007332: return ( &GAVApply_ ); break; // GAVApply
        case 40000474: return ( &RoundFlag_ ); break; // RoundFlag
        case 40007489: return ( &FundClassSheduleAvailable_ ); break; // FundClassSheduleAvailable
        case 40000234: return ( &GrossOrNet_ ); break; // GrossOrNet
        case 40007598: return ( &SoftCapLvl_ ); break; // SoftCapLvl
        case 40007635: return ( &FundLFC_ ); break; // FundLFC
        case 40007698: return ( &AmountInventoryAppl_ ); break; // AmountInventoryAppl
        case 40007834: return ( &PriceTypes_ ); break; // PriceTypes
        case 40007918: return ( &LiqRedFeeExist_ ); break; // LiqRedFeeExist
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0056_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0056_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0056_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
    if ( iField >=0 && iField < 110 )
    {
        BFDataField* pField = aFlds_[iField];
        if( NULL == pField )
        {
            switch(iField)
            {
                case 0: aFlds_[0] = &FundCode_; break;
                case 1: aFlds_[1] = &ClassCode_; break;
                case 2: aFlds_[2] = &ClassE_; break;
                case 3: aFlds_[3] = &ClassF_; break;
                case 4: aFlds_[4] = &AdditionalDays_; break;
                case 5: aFlds_[5] = &MinInitPurAmt_; break;
                case 6: aFlds_[6] = &MinSubPurAmt_; break;
                case 7: aFlds_[7] = &MinInitRedAmt_; break;
                case 8: aFlds_[8] = &MinSubRedAmt_; break;
                case 9: aFlds_[9] = &MinPAC_; break;
                case 10: aFlds_[10] = &MinSWP_; break;
                case 11: aFlds_[11] = &MinFndClsBal_; break;
                case 12: aFlds_[12] = &MinAcctBal_; break;
                case 13: aFlds_[13] = &StopPurchase_; break;
                case 14: aFlds_[14] = &StopRed_; break;
                case 15: aFlds_[15] = &StopXferIn_; break;
                case 16: aFlds_[16] = &StopXferOut_; break;
                case 17: aFlds_[17] = &OverrideDSCAllow_; break;
                case 18: aFlds_[18] = &FixedPrice_; break;
                case 19: aFlds_[19] = &FixedRate_; break;
                case 20: aFlds_[20] = &Currency_; break;
                case 21: aFlds_[21] = &CurrencyName_; break;
                case 22: aFlds_[22] = &LastValDate_; break;
                case 23: aFlds_[23] = &LastDivDate_; break;
                case 24: aFlds_[24] = &EffectiveDate_; break;
                case 25: aFlds_[25] = &ProcessDate_; break;
                case 26: aFlds_[26] = &CusipNum_; break;
                case 27: aFlds_[27] = &Baycom_; break;
                case 28: aFlds_[28] = &RSPflag_; break;
                case 29: aFlds_[29] = &RIFflag_; break;
                case 30: aFlds_[30] = &StopDate_; break;
                case 31: aFlds_[31] = &LoadType_; break;
                case 32: aFlds_[32] = &Domestic_; break;
                case 33: aFlds_[33] = &WireElig_; break;
                case 34: aFlds_[34] = &NextSettleDate_; break;
                case 35: aFlds_[35] = &NextValDate_; break;
                case 36: aFlds_[36] = &AMSFund_; break;
                case 37: aFlds_[37] = &UnitsPrecision_; break;
                case 38: aFlds_[38] = &FeeCurrency_; break;
                case 39: aFlds_[39] = &InventoryTrac_; break;
                case 40: aFlds_[40] = &SplitComm_; break;
                case 41: aFlds_[41] = &Active_; break;
                case 42: aFlds_[42] = &ISINNumber_; break;
                case 43: aFlds_[43] = &SplitCommPur_; break;
                case 44: aFlds_[44] = &SplitCommPAC_; break;
                case 45: aFlds_[45] = &SplitCommRed_; break;
                case 46: aFlds_[46] = &SplitCommSWP_; break;
                case 47: aFlds_[47] = &SplitCommTrfln_; break;
                case 48: aFlds_[48] = &SplitCommExIn_; break;
                case 49: aFlds_[49] = &ExchInFeeExist_; break;
                case 50: aFlds_[50] = &AsPensionEligibleQ4_; break;
                case 51: aFlds_[51] = &AsPensionEligibleOth_; break;
                case 52: aFlds_[52] = &ESoPEligible_; break;
                case 53: aFlds_[53] = &LastNightRun_; break;
                case 54: aFlds_[54] = &NextNightRun_; break;
                case 55: aFlds_[55] = &ContractType_; break;
                case 56: aFlds_[56] = &MgtFeeElig_; break;
                case 57: aFlds_[57] = &MgtFeeRbtElig_; break;
                case 58: aFlds_[58] = &CompanyCode_; break;
                case 59: aFlds_[59] = &LastMgmtFeeDate_; break;
                case 60: aFlds_[60] = &LastMFRebateDate_; break;
                case 61: aFlds_[61] = &StopPAC_; break;
                case 62: aFlds_[62] = &StopSWP_; break;
                case 63: aFlds_[63] = &StopSysGenTrnfrIn_; break;
                case 64: aFlds_[64] = &StopSysGenTrfrOut_; break;
                case 65: aFlds_[65] = &StopPACEWI_; break;
                case 66: aFlds_[66] = &StopSWPEWI_; break;
                case 67: aFlds_[67] = &StopSysGenTrnfrInEWI_; break;
                case 68: aFlds_[68] = &StopSysGenTrfrOutEWI_; break;
                case 69: aFlds_[69] = &FCTransferElig_; break;
                case 70: aFlds_[70] = &MarginEligible_; break;
                case 71: aFlds_[71] = &IndexCode_; break;
                case 72: aFlds_[72] = &DCAFFund_; break;
                case 73: aFlds_[73] = &WrapFund_; break;
                case 74: aFlds_[74] = &ProcessDiv_; break;
                case 75: aFlds_[75] = &LastIntAccDate_; break;
                case 76: aFlds_[76] = &NSCCCompliant_; break;
                case 77: aFlds_[77] = &AMSEligible_; break;
                case 78: aFlds_[78] = &StopCommissionRebate_; break;
                case 79: aFlds_[79] = &FundWKN_; break;
                case 80: aFlds_[80] = &FundISIN_; break;
                case 81: aFlds_[81] = &ValidSettleCurr_; break;
                case 82: aFlds_[82] = &UnitsCal_; break;
                case 83: aFlds_[83] = &FirstScopeDate_; break;
                case 84: aFlds_[84] = &FirstLookThruDate_; break;
                case 85: aFlds_[85] = &CustomScheduleList_; break;
                case 86: aFlds_[86] = &DftOrdType_; break;
                case 87: aFlds_[87] = &FundLoadGrp_; break;
                case 88: aFlds_[88] = &FOFFund_; break;
                case 89: aFlds_[89] = &FundStatus_; break;
                case 90: aFlds_[90] = &FundStatusDate_; break;
                case 91: aFlds_[91] = &UnitRoundMethod_; break;
                case 92: aFlds_[92] = &FundSubCat_; break;
                case 93: aFlds_[93] = &ERISAProhibited_; break;
                case 94: aFlds_[94] = &CombinedLoadType_; break;
                case 95: aFlds_[95] = &AMSModelType_; break;
                case 96: aFlds_[96] = &G1G2TrackType_; break;
                case 97: aFlds_[97] = &Fund_ID_Values_; break;
                case 98: aFlds_[98] = &RolloverExchangeAppl_; break;
                case 99: aFlds_[99] = &RolloverExchangeToFundClass_; break;
                case 100: aFlds_[100] = &RolloverExchangeAmountType_; break;
                case 101: aFlds_[101] = &GAVApply_; break;
                case 102: aFlds_[102] = &RoundFlag_; break;
                case 103: aFlds_[103] = &FundClassSheduleAvailable_; break;
                case 104: aFlds_[104] = &GrossOrNet_; break;
                case 105: aFlds_[105] = &SoftCapLvl_; break;
                case 106: aFlds_[106] = &FundLFC_; break;
                case 107: aFlds_[107] = &AmountInventoryAppl_; break;
                case 108: aFlds_[108] = &PriceTypes_; break;
                case 109: aFlds_[109] = &LiqRedFeeExist_; break;
            }
            pField = aFlds_[iField];
            if( NULL == pField ) return( NULL );
        }
        return( pField );
    }
    return( NULL );
}

const BFDataField* dsi_DSTC0056_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
    return( ( const_cast< dsi_DSTC0056_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0056_VWRepeat_Record::getLargestDefinedField( void ) const
{
    return( 1000 );
}

unsigned long dsi_DSTC0056_VWRepeat_Record::getDefinedByteLength( void ) const
{
    return( 3770 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0056_VWRepeat_Record::exists( const BFFieldId& id ) const
{
    return dsi_DSTC0056_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0056_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
    switch( id.getId() )
    {
        case 40000049: return ( true );
        case 40000050: return ( true );
        case 40000688: return ( true );
        case 40000689: return ( true );
        case 40000690: return ( true );
        case 40000691: return ( true );
        case 40000692: return ( true );
        case 40000693: return ( true );
        case 40000694: return ( true );
        case 40000695: return ( true );
        case 40000696: return ( true );
        case 40000697: return ( true );
        case 40000698: return ( true );
        case 40000699: return ( true );
        case 40000593: return ( true );
        case 40000197: return ( true );
        case 40000198: return ( true );
        case 40000703: return ( true );
        case 40000704: return ( true );
        case 40000705: return ( true );
        case 40000180: return ( true );
        case 40000181: return ( true );
        case 40000706: return ( true );
        case 40000707: return ( true );
        case 40000327: return ( true );
        case 40000216: return ( true );
        case 40000755: return ( true );
        case 40000958: return ( true );
        case 40000959: return ( true );
        case 40000961: return ( true );
        case 40000279: return ( true );
        case 40000960: return ( true );
        case 40000980: return ( true );
        case 40000979: return ( true );
        case 40001413: return ( true );
        case 40001414: return ( true );
        case 40001762: return ( true );
        case 40001790: return ( true );
        case 40000237: return ( true );
        case 40002133: return ( true );
        case 40001150: return ( true );
        case 40000222: return ( true );
        case 40002284: return ( true );
        case 40002490: return ( true );
        case 40002491: return ( true );
        case 40002492: return ( true );
        case 40002493: return ( true );
        case 40002494: return ( true );
        case 40002505: return ( true );
        case 40002601: return ( true );
        case 40002750: return ( true );
        case 40002751: return ( true );
        case 40002753: return ( true );
        case 40002790: return ( true );
        case 40002791: return ( true );
        case 40001385: return ( true );
        case 40002903: return ( true );
        case 40002904: return ( true );
        case 40002245: return ( true );
        case 40003014: return ( true );
        case 40003015: return ( true );
        case 40003533: return ( true );
        case 40003027: return ( true );
        case 40003535: return ( true );
        case 40003536: return ( true );
        case 40003537: return ( true );
        case 40003538: return ( true );
        case 40003539: return ( true );
        case 40003540: return ( true );
        case 40003596: return ( true );
        case 40003597: return ( true );
        case 40003658: return ( true );
        case 40003719: return ( true );
        case 40003763: return ( true );
        case 40004198: return ( true );
        case 40004410: return ( true );
        case 40004419: return ( true );
        case 40004434: return ( true );
        case 40004503: return ( true );
        case 40004586: return ( true );
        case 40004587: return ( true );
        case 40004593: return ( true );
        case 40004594: return ( true );
        case 40005363: return ( true );
        case 40005364: return ( true );
        case 40005439: return ( true );
        case 40005577: return ( true );
        case 40003000: return ( true );
        case 40005624: return ( true );
        case 40000965: return ( true );
        case 40005657: return ( true );
        case 40005816: return ( true );
        case 40005994: return ( true );
        case 40006652: return ( true );
        case 40006941: return ( true );
        case 40007123: return ( true );
        case 40007119: return ( true );
        case 40007175: return ( true );
        case 40007240: return ( true );
        case 40007242: return ( true );
        case 40007241: return ( true );
        case 40007332: return ( true );
        case 40000474: return ( true );
        case 40007489: return ( true );
        case 40000234: return ( true );
        case 40007598: return ( true );
        case 40007635: return ( true );
        case 40007698: return ( true );
        case 40007834: return ( true );
        case 40007918: return ( true );
    }
    return false;
}

