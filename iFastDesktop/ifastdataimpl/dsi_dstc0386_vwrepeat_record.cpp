// BFDataImpl implementation file for DataSet DSTC0386.VWRepeat_Record
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0386_vwrepeat_record.h"


// This function creates an instance of dsi_DSTC0386_VWRepeat_Record
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0386_VWRepeat_Record() { return new dsi_DSTC0386_VWRepeat_Record; }

dsi_DSTC0386_VWRepeat_Record::dsi_DSTC0386_VWRepeat_Record()
: BFDataImpl( 40005764 )
, RuleType_( ifds::RuleType, &ifds::s_FldProp_RuleType )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, OverrideAmt_( ifds::OverrideAmt, &ifds::s_FldProp_OverrideAmt )
, OverrideLogical_( ifds::OverrideLogical, &ifds::s_FldProp_OverrideLogical )
, OverrideChar_( ifds::OverrideChar, &ifds::s_FldProp_OverrideChar )
, ProcessDate_( ifds::ProcessDate, &ifds::s_FldProp_ProcessDate )
, Username_( ifds::Username, &ifds::s_FldProp_Username )
, ModDate_( ifds::ModDate, &ifds::s_FldProp_ModDate )
, ModUser_( ifds::ModUser, &ifds::s_FldProp_ModUser )
, AcctControlsID_( ifds::AcctControlsID, &ifds::s_FldProp_AcctControlsID )
, AcctControlsVer_( ifds::AcctControlsVer, &ifds::s_FldProp_AcctControlsVer )
, rxAcctControlsRID_( ifds::rxAcctControlsRID, &ifds::s_FldProp_rxAcctControlsRID )
, FundGroup_( ifds::FundGroup, &ifds::s_FldProp_FundGroup )
{
   cFields_ = 16;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0386_VWRepeat_Record::~dsi_DSTC0386_VWRepeat_Record()
{
}

BFDataImpl* dsi_DSTC0386_VWRepeat_Record::clone()
{
   dsi_DSTC0386_VWRepeat_Record* p = new dsi_DSTC0386_VWRepeat_Record;
   p->RuleType_ = RuleType_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->EffectiveDate_ = EffectiveDate_;
   p->StopDate_ = StopDate_;
   p->OverrideAmt_ = OverrideAmt_;
   p->OverrideLogical_ = OverrideLogical_;
   p->OverrideChar_ = OverrideChar_;
   p->ProcessDate_ = ProcessDate_;
   p->Username_ = Username_;
   p->ModDate_ = ModDate_;
   p->ModUser_ = ModUser_;
   p->AcctControlsID_ = AcctControlsID_;
   p->AcctControlsVer_ = AcctControlsVer_;
   p->rxAcctControlsRID_ = rxAcctControlsRID_;
   p->FundGroup_ = FundGroup_;
   return(p);
}

BFDataField* dsi_DSTC0386_VWRepeat_Record::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40003775: return ( &RuleType_ ); break; // RuleType
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40000445: return ( &OverrideAmt_ ); break; // OverrideAmt
      case 40004074: return ( &OverrideLogical_ ); break; // OverrideLogical
      case 40005752: return ( &OverrideChar_ ); break; // OverrideChar
      case 40000216: return ( &ProcessDate_ ); break; // ProcessDate
      case 40000117: return ( &Username_ ); break; // Username
      case 40000217: return ( &ModDate_ ); break; // ModDate
      case 40000218: return ( &ModUser_ ); break; // ModUser
      case 40005759: return ( &AcctControlsID_ ); break; // AcctControlsID
      case 40005760: return ( &AcctControlsVer_ ); break; // AcctControlsVer
      case 40005770: return ( &rxAcctControlsRID_ ); break; // rxAcctControlsRID
	  case 40002031: return ( &FundGroup_ ); break; // FundGroup      
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0386_VWRepeat_Record::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0386_VWRepeat_Record* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0386_VWRepeat_Record::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 16 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &RuleType_; break;
            case 1: aFlds_[1] = &FundCode_; break;
            case 2: aFlds_[2] = &ClassCode_; break;
            case 3: aFlds_[3] = &EffectiveDate_; break;
            case 4: aFlds_[4] = &StopDate_; break;
            case 5: aFlds_[5] = &OverrideAmt_; break;
            case 6: aFlds_[6] = &OverrideLogical_; break;
            case 7: aFlds_[7] = &OverrideChar_; break;
            case 8: aFlds_[8] = &ProcessDate_; break;
            case 9: aFlds_[9] = &Username_; break;
            case 10: aFlds_[10] = &ModDate_; break;
            case 11: aFlds_[11] = &ModUser_; break;
            case 12: aFlds_[12] = &AcctControlsID_; break;
            case 13: aFlds_[13] = &AcctControlsVer_; break;
            case 14: aFlds_[14] = &rxAcctControlsRID_; break;
            case 15: aFlds_[15] = &FundGroup_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0386_VWRepeat_Record::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0386_VWRepeat_Record* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0386_VWRepeat_Record::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0386_VWRepeat_Record::getDefinedByteLength( void ) const
{
   return( 729 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0386_VWRepeat_Record::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0386_VWRepeat_Record::fieldExists( id );
}

bool dsi_DSTC0386_VWRepeat_Record::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40003775: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000327: return( true );
      case 40000279: return( true );
      case 40000445: return( true );
      case 40004074: return( true );
      case 40005752: return( true );
      case 40000216: return( true );
      case 40000117: return( true );
      case 40000217: return( true );
      case 40000218: return( true );
      case 40005759: return( true );
      case 40005760: return( true );
      case 40005770: return( true );
      case 40002031: return ( true );
   }
   return false;
}

