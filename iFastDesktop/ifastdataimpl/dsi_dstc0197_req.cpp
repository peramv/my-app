// BFDataImpl implementation file for DataSet DSTC0197.REQ
// TIMBUK3: This file was generated by Timbuk3 - Version 2.4.1
// TIMBUK3: Generated on : Mon Aug 24 15:59:59 2015


#include "stdafx.h"




#include <bfdata/bfdataimpl.hpp>
#include "dsi_dstc0197_req.h"


// This function creates an instance of dsi_DSTC0197_REQ
// The function is required by the factory class as that class may choke the compiler
// with excessive symbols if all of the required header files needed to be #include'd
BFDataImpl* create_dsi_DSTC0197_REQ() { return new dsi_DSTC0197_REQ; }

dsi_DSTC0197_REQ::dsi_DSTC0197_REQ()
: BFDataImpl( 40002932 )
, SessionId_( ifds::SessionId, &ifds::s_FldProp_SessionId )
, User_Id_( ifds::User_Id, &ifds::s_FldProp_User_Id )
, LanguageCode_( ifds::LanguageCode, &ifds::s_FldProp_LanguageCode )
, CompanyId_( ifds::CompanyId, &ifds::s_FldProp_CompanyId )
, Track_( ifds::Track, &ifds::s_FldProp_Track )
, Activity_( ifds::Activity, &ifds::s_FldProp_Activity )
, FeeCode_( ifds::FeeCode, &ifds::s_FldProp_FeeCode )
, FundCode_( ifds::FundCode, &ifds::s_FldProp_FundCode )
, ClassCode_( ifds::ClassCode, &ifds::s_FldProp_ClassCode )
, EffectiveDate_( ifds::EffectiveDate, &ifds::s_FldProp_EffectiveDate )
, NextKey_( ifds::NextKey, &ifds::s_FldProp_NextKey )
, OverrideRepeats_( ifds::OverrideRepeats, &ifds::s_FldProp_OverrideRepeats )
, CommGroup_( ifds::CommGroup, &ifds::s_FldProp_CommGroup )
, AccountNum_( ifds::AccountNum, &ifds::s_FldProp_AccountNum )
, FamilyCode_( ifds::FamilyCode, &ifds::s_FldProp_FamilyCode )
, FundFromCode_( ifds::FundFromCode, &ifds::s_FldProp_FundFromCode )
, ClassFromCode_( ifds::ClassFromCode, &ifds::s_FldProp_ClassFromCode )
, StopDate_( ifds::StopDate, &ifds::s_FldProp_StopDate )
, BrokerCode_( ifds::BrokerCode, &ifds::s_FldProp_BrokerCode )
, BranchCode_( ifds::BranchCode, &ifds::s_FldProp_BranchCode )
, SlsrepCode_( ifds::SlsrepCode, &ifds::s_FldProp_SlsrepCode )
, ShGroup_( ifds::ShGroup, &ifds::s_FldProp_ShGroup )
, ValidateType_( ifds::ValidateType, &ifds::s_FldProp_ValidateType )
, FeeID_( ifds::FeeID, &ifds::s_FldProp_FeeID )
, ExclFeeCode_( ifds::ExclFeeCode, &ifds::s_FldProp_ExclFeeCode )
, FeeModelCode_( ifds::FeeModelCode, &ifds::s_FldProp_FeeModelCode )
, DistributionChannel_( ifds::DistributionChannel, &ifds::s_FldProp_DistributionChannel )
{
   cFields_ = 27;
   memset( &aFlds_[0], 0x00, sizeof( aFlds_ ) );
}

dsi_DSTC0197_REQ::~dsi_DSTC0197_REQ()
{
}

BFDataImpl* dsi_DSTC0197_REQ::clone()
{
   dsi_DSTC0197_REQ* p = new dsi_DSTC0197_REQ;
   p->SessionId_ = SessionId_;
   p->User_Id_ = User_Id_;
   p->LanguageCode_ = LanguageCode_;
   p->CompanyId_ = CompanyId_;
   p->Track_ = Track_;
   p->Activity_ = Activity_;
   p->FeeCode_ = FeeCode_;
   p->FundCode_ = FundCode_;
   p->ClassCode_ = ClassCode_;
   p->EffectiveDate_ = EffectiveDate_;
   p->NextKey_ = NextKey_;
   p->OverrideRepeats_ = OverrideRepeats_;
   p->CommGroup_ = CommGroup_;
   p->AccountNum_ = AccountNum_;
   p->FamilyCode_ = FamilyCode_;
   p->FundFromCode_ = FundFromCode_;
   p->ClassFromCode_ = ClassFromCode_;
   p->StopDate_ = StopDate_;
   p->BrokerCode_ = BrokerCode_;
   p->BranchCode_ = BranchCode_;
   p->SlsrepCode_ = SlsrepCode_;
   p->ShGroup_ = ShGroup_;
   p->ValidateType_ = ValidateType_;
   p->FeeID_ = FeeID_;
   p->ExclFeeCode_ = ExclFeeCode_;
   p->FeeModelCode_ = FeeModelCode_;
   p->DistributionChannel_ = DistributionChannel_;
   return(p);
}

BFDataField* dsi_DSTC0197_REQ::getElement( const BFFieldId& id )
{
   switch( id.getId() ) {
      case 40000005: return ( &SessionId_ ); break; // SessionId
      case 40000002: return ( &User_Id_ ); break; // User_Id
      case 40000030: return ( &LanguageCode_ ); break; // LanguageCode
      case 40000031: return ( &CompanyId_ ); break; // CompanyId
      case 40002065: return ( &Track_ ); break; // Track
      case 40002066: return ( &Activity_ ); break; // Activity
      case 40002917: return ( &FeeCode_ ); break; // FeeCode
      case 40000049: return ( &FundCode_ ); break; // FundCode
      case 40000050: return ( &ClassCode_ ); break; // ClassCode
      case 40000327: return ( &EffectiveDate_ ); break; // EffectiveDate
      case 40000029: return ( &NextKey_ ); break; // NextKey
      case 40002139: return ( &OverrideRepeats_ ); break; // OverrideRepeats
      case 40003519: return ( &CommGroup_ ); break; // CommGroup
      case 40000040: return ( &AccountNum_ ); break; // AccountNum
      case 40000802: return ( &FamilyCode_ ); break; // FamilyCode
      case 40002915: return ( &FundFromCode_ ); break; // FundFromCode
      case 40002916: return ( &ClassFromCode_ ); break; // ClassFromCode
      case 40000279: return ( &StopDate_ ); break; // StopDate
      case 40000044: return ( &BrokerCode_ ); break; // BrokerCode
      case 40000045: return ( &BranchCode_ ); break; // BranchCode
      case 40000656: return ( &SlsrepCode_ ); break; // SlsrepCode
      case 40003574: return ( &ShGroup_ ); break; // ShGroup
      case 40003549: return ( &ValidateType_ ); break; // ValidateType
      case 40003567: return ( &FeeID_ ); break; // FeeID
      case 40004415: return ( &ExclFeeCode_ ); break; // ExclFeeCode
      case 40004584: return ( &FeeModelCode_ ); break; // FeeModelCode
      case 40006421: return ( &DistributionChannel_ ); break; // DistributionChannel
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0197_REQ::getElement( const BFFieldId& id ) const
{
   return( ( const_cast< dsi_DSTC0197_REQ* >(this) )->getElement( id ) );
}

BFDataField* dsi_DSTC0197_REQ::getElementByIndex( unsigned int iField )
{
   if ( iField >=0 && iField < 27 )
   {
      BFDataField* pField = aFlds_[iField];
      if( NULL == pField )
      {
         switch(iField)
         {
            case 0: aFlds_[0] = &SessionId_; break;
            case 1: aFlds_[1] = &User_Id_; break;
            case 2: aFlds_[2] = &LanguageCode_; break;
            case 3: aFlds_[3] = &CompanyId_; break;
            case 4: aFlds_[4] = &Track_; break;
            case 5: aFlds_[5] = &Activity_; break;
            case 6: aFlds_[6] = &FeeCode_; break;
            case 7: aFlds_[7] = &FundCode_; break;
            case 8: aFlds_[8] = &ClassCode_; break;
            case 9: aFlds_[9] = &EffectiveDate_; break;
            case 10: aFlds_[10] = &NextKey_; break;
            case 11: aFlds_[11] = &OverrideRepeats_; break;
            case 12: aFlds_[12] = &CommGroup_; break;
            case 13: aFlds_[13] = &AccountNum_; break;
            case 14: aFlds_[14] = &FamilyCode_; break;
            case 15: aFlds_[15] = &FundFromCode_; break;
            case 16: aFlds_[16] = &ClassFromCode_; break;
            case 17: aFlds_[17] = &StopDate_; break;
            case 18: aFlds_[18] = &BrokerCode_; break;
            case 19: aFlds_[19] = &BranchCode_; break;
            case 20: aFlds_[20] = &SlsrepCode_; break;
            case 21: aFlds_[21] = &ShGroup_; break;
            case 22: aFlds_[22] = &ValidateType_; break;
            case 23: aFlds_[23] = &FeeID_; break;
            case 24: aFlds_[24] = &ExclFeeCode_; break;
            case 25: aFlds_[25] = &FeeModelCode_; break;
            case 26: aFlds_[26] = &DistributionChannel_; break;
         }
         pField = aFlds_[iField];
         if( NULL == pField ) return( NULL );
      }
      return( pField );
   }
   return( NULL );
}

const BFDataField* dsi_DSTC0197_REQ::getElementByIndex( unsigned int iField ) const
{
   return( ( const_cast< dsi_DSTC0197_REQ* >(this) )->getElementByIndex( iField ) );
}

unsigned long dsi_DSTC0197_REQ::getLargestDefinedField( void ) const
{
   return( 200 );
}

unsigned long dsi_DSTC0197_REQ::getDefinedByteLength( void ) const
{
   return( 1530 * sizeof( I_CHAR ) );
}

bool dsi_DSTC0197_REQ::exists( const BFFieldId& id ) const
{
   return dsi_DSTC0197_REQ::fieldExists( id );
}

bool dsi_DSTC0197_REQ::fieldExists( const BFFieldId& id )
{
   switch( id.getId() )
   {
      case 40000005: return( true );
      case 40000002: return( true );
      case 40000030: return( true );
      case 40000031: return( true );
      case 40002065: return( true );
      case 40002066: return( true );
      case 40002917: return( true );
      case 40000049: return( true );
      case 40000050: return( true );
      case 40000327: return( true );
      case 40000029: return( true );
      case 40002139: return( true );
      case 40003519: return( true );
      case 40000040: return( true );
      case 40000802: return( true );
      case 40002915: return( true );
      case 40002916: return( true );
      case 40000279: return( true );
      case 40000044: return( true );
      case 40000045: return( true );
      case 40000656: return( true );
      case 40003574: return( true );
      case 40003549: return( true );
      case 40003567: return( true );
      case 40004415: return( true );
      case 40004584: return( true );
      case 40006421: return( true );
   }
   return false;
}

