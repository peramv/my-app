
/*
 * This file was generated by the SOM Compiler.
 * FileName: h:\somnt\include\somcm.xh.
 * Generated using:
 *     SOM Precompiler somipc: Development
 *     SOM Emitter emitxh.dll: Development
 */

/*
 * 
 *    COMPONENT_NAME: somk
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    Change History
 *    95/11/08  MC    -This is the SOM2.5 version of the class manager
 *                     being used for the SOM2.1 port to NT.
 *   SOMClassMgr: System Object Model class manager
 */


#ifndef SOM_SOMClassMgr_xh
#define SOM_SOMClassMgr_xh

class SOMClassMgr;

#define SOMClassMgr_MajorVersion 1
#define SOMClassMgr_MinorVersion 4

/* C++ SOM defs */
#include <somcls.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef SOMClassMgr_API
#define SOMClassMgr_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Repository;
typedef
SOMClass* SOMClassMgr_SOMClassArray;

/*
 *  Used for SOM 1.0 binary compatibility
 */
#ifndef _IDL_SEQUENCE_SOMClass_defined
#define _IDL_SEQUENCE_SOMClass_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    SOMClass **_buffer;
} _IDL_SEQUENCE_SOMClass;
#endif /* _IDL_SEQUENCE_SOMClass_defined */ 

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_SOMClassArray
    #ifdef SOMClassArray
        #undef SOMClassArray
        #define SOMTGD_SOMClassArray 1
    #else
        #define SOMClassArray SOMClassMgr_SOMClassArray
    #endif /* SOMClassArray */
#endif /* SOMTGD_SOMClassArray */
#endif /* SOM_DONT_USE_SHORT_NAMES */

#ifndef SOM_DONT_USE_SHORT_NAMES
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMClassMgr Class */
SOMEXTERN
#if (defined(SOM_Module_somcm_Source) || defined(SOMClassMgr_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_SOMClassMgr))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK SOMClassMgrNewClass(
		integer4,
		integer4 );

/* The API to the SOMClassMgr class object, and the methods it introduces. */
SOMEXTERN struct SOMClassMgrClassDataStructure {
	SOMClass *classObject;
	somMToken somFindClsInFile;
	somMToken somFindClass;
	somMToken somClassFromId;
	somMToken somRegisterClass;
	somMToken somUnregisterClass;
	somMToken somLocateClassFile;
	somMToken somLoadClassFile;
	somMToken somUnloadClassFile;
	somMToken somGetInitFunction;
	somMToken somMergeInto;
	somMToken somGetRelatedClasses;
	somMToken somSubstituteClass;
	somMToken _get_somInterfaceRepository;
	somMToken _set_somInterfaceRepository;
	somMToken _get_somRegisteredClasses;
	somMToken somBeginPersistentClasses;
	somMToken somEndPersistentClasses;
	somMToken somcmPrivate1;
	somMToken somcmPrivate2;
	somMToken somRegisterClassLibrary;
	somMToken somJoinAffinityGroup;
	somMToken somUnregisterClassLibrary;
}
#if !(defined(SOM_Module_somcm_Source) || defined(SOMClassMgr_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_SOMClassMgr))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK SOMClassMgrClassData;
#define _SOMClassMgr SOMClassMgrClassData.classObject

/* The API to parentMtabs for SOMClassMgr, and the instance data it introduces. */
SOMEXTERN struct SOMClassMgrCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_somcm_Source) || defined(SOMClassMgr_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_SOMClassMgr))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK SOMClassMgrCClassData;

/*
 * -- Typedefs for SOMClassMgr Method Procedures
 */
extern "C" {
typedef SOMClass*   SOMLINK somTP_SOMClassMgr_somLoadClassFile(SOMClassMgr *somSelf,
		somId classId,
		long majorVersion,
		long minorVersion,
		string file);
typedef somTP_SOMClassMgr_somLoadClassFile *somTD_SOMClassMgr_somLoadClassFile;
typedef string   SOMLINK somTP_SOMClassMgr_somLocateClassFile(SOMClassMgr *somSelf,
		somId classId,
		long majorVersion,
		long minorVersion);
typedef somTP_SOMClassMgr_somLocateClassFile *somTD_SOMClassMgr_somLocateClassFile;
typedef void   SOMLINK somTP_SOMClassMgr_somRegisterClass(SOMClassMgr *somSelf,
		SOMClass* classObj);
typedef somTP_SOMClassMgr_somRegisterClass *somTD_SOMClassMgr_somRegisterClass;
typedef void   SOMLINK somTP_SOMClassMgr_somRegisterClassLibrary(SOMClassMgr *somSelf,
		string libraryName,
		somMethodPtr libraryInitRtn);
typedef somTP_SOMClassMgr_somRegisterClassLibrary *somTD_SOMClassMgr_somRegisterClassLibrary;
typedef void   SOMLINK somTP_SOMClassMgr_somUnregisterClassLibrary(SOMClassMgr *somSelf,
		string libraryName);
typedef somTP_SOMClassMgr_somUnregisterClassLibrary *somTD_SOMClassMgr_somUnregisterClassLibrary;
typedef long   SOMLINK somTP_SOMClassMgr_somUnloadClassFile(SOMClassMgr *somSelf,
		SOMClass* classObj);
typedef somTP_SOMClassMgr_somUnloadClassFile *somTD_SOMClassMgr_somUnloadClassFile;
typedef long   SOMLINK somTP_SOMClassMgr_somUnregisterClass(SOMClassMgr *somSelf,
		SOMClass* classObj);
typedef somTP_SOMClassMgr_somUnregisterClass *somTD_SOMClassMgr_somUnregisterClass;
typedef void   SOMLINK somTP_SOMClassMgr_somBeginPersistentClasses(SOMClassMgr *somSelf);
typedef somTP_SOMClassMgr_somBeginPersistentClasses *somTD_SOMClassMgr_somBeginPersistentClasses;
typedef void   SOMLINK somTP_SOMClassMgr_somEndPersistentClasses(SOMClassMgr *somSelf);
typedef somTP_SOMClassMgr_somEndPersistentClasses *somTD_SOMClassMgr_somEndPersistentClasses;
typedef boolean   SOMLINK somTP_SOMClassMgr_somJoinAffinityGroup(SOMClassMgr *somSelf,
		SOMClass* newClass,
		SOMClass* affClass);
typedef somTP_SOMClassMgr_somJoinAffinityGroup *somTD_SOMClassMgr_somJoinAffinityGroup;
typedef string   SOMLINK somTP_SOMClassMgr_somGetInitFunction(SOMClassMgr *somSelf);
typedef somTP_SOMClassMgr_somGetInitFunction *somTD_SOMClassMgr_somGetInitFunction;
typedef Repository*   SOMLINK somTP_SOMClassMgr__get_somInterfaceRepository(SOMClassMgr *somSelf);
typedef somTP_SOMClassMgr__get_somInterfaceRepository *somTD_SOMClassMgr__get_somInterfaceRepository;
typedef void   SOMLINK somTP_SOMClassMgr__set_somInterfaceRepository(SOMClassMgr *somSelf,
		Repository* somInterfaceRepository);
typedef somTP_SOMClassMgr__set_somInterfaceRepository *somTD_SOMClassMgr__set_somInterfaceRepository;
typedef _IDL_SEQUENCE_SOMClass   SOMLINK somTP_SOMClassMgr__get_somRegisteredClasses(SOMClassMgr *somSelf);
typedef somTP_SOMClassMgr__get_somRegisteredClasses *somTD_SOMClassMgr__get_somRegisteredClasses;
typedef SOMClassMgr_SOMClassArray   SOMLINK somTP_SOMClassMgr_somGetRelatedClasses(SOMClassMgr *somSelf,
		SOMClass* classObj);
typedef somTP_SOMClassMgr_somGetRelatedClasses *somTD_SOMClassMgr_somGetRelatedClasses;
typedef SOMClass*   SOMLINK somTP_SOMClassMgr_somClassFromId(SOMClassMgr *somSelf,
		somId classId);
typedef somTP_SOMClassMgr_somClassFromId *somTD_SOMClassMgr_somClassFromId;
typedef SOMClass*   SOMLINK somTP_SOMClassMgr_somFindClass(SOMClassMgr *somSelf,
		somId classId,
		long majorVersion,
		long minorVersion);
typedef somTP_SOMClassMgr_somFindClass *somTD_SOMClassMgr_somFindClass;
typedef SOMClass*   SOMLINK somTP_SOMClassMgr_somFindClsInFile(SOMClassMgr *somSelf,
		somId classId,
		long majorVersion,
		long minorVersion,
		string file);
typedef somTP_SOMClassMgr_somFindClsInFile *somTD_SOMClassMgr_somFindClsInFile;
typedef void   SOMLINK somTP_SOMClassMgr_somMergeInto(SOMClassMgr *somSelf,
		SOMObject* targetObj);
typedef somTP_SOMClassMgr_somMergeInto *somTD_SOMClassMgr_somMergeInto;
typedef long   SOMLINK somTP_SOMClassMgr_somSubstituteClass(SOMClassMgr *somSelf,
		string origClassName,
		string newClassName);
typedef somTP_SOMClassMgr_somSubstituteClass *somTD_SOMClassMgr_somSubstituteClass;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_SOMClassMgr_somDefaultInit(SOMClassMgr *somSelf,
		somInitCtrl* ctrl);
typedef somTP_SOMClassMgr_somDefaultInit *somTD_SOMClassMgr_somDefaultInit;
typedef void   SOMLINK somTP_SOMClassMgr_somDestruct(SOMClassMgr *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_SOMClassMgr_somDestruct *somTD_SOMClassMgr_somDestruct;
typedef void   SOMLINK somTP_SOMClassMgr_somDefaultCopyInit(SOMClassMgr *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMClassMgr_somDefaultCopyInit *somTD_SOMClassMgr_somDefaultCopyInit;
typedef SOMClassMgr*   SOMLINK somTP_SOMClassMgr_somDefaultAssign(SOMClassMgr *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMClassMgr_somDefaultAssign *somTD_SOMClassMgr_somDefaultAssign;
typedef void   SOMLINK somTP_SOMClassMgr_somDefaultConstCopyInit(SOMClassMgr *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMClassMgr_somDefaultConstCopyInit *somTD_SOMClassMgr_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMClassMgr_somDefaultVCopyInit(SOMClassMgr *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMClassMgr_somDefaultVCopyInit *somTD_SOMClassMgr_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMClassMgr_somDefaultConstVCopyInit(SOMClassMgr *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMClassMgr_somDefaultConstVCopyInit *somTD_SOMClassMgr_somDefaultConstVCopyInit;
typedef SOMClassMgr*   SOMLINK somTP_SOMClassMgr_somDefaultConstAssign(SOMClassMgr *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMClassMgr_somDefaultConstAssign *somTD_SOMClassMgr_somDefaultConstAssign;
typedef SOMClassMgr*   SOMLINK somTP_SOMClassMgr_somDefaultVAssign(SOMClassMgr *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMClassMgr_somDefaultVAssign *somTD_SOMClassMgr_somDefaultVAssign;
typedef SOMClassMgr*   SOMLINK somTP_SOMClassMgr_somDefaultConstVAssign(SOMClassMgr *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMClassMgr_somDefaultConstVAssign *somTD_SOMClassMgr_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMClassMgr_somInit(SOMClassMgr *somSelf);
typedef somTP_SOMClassMgr_somInit *somTD_SOMClassMgr_somInit;
typedef void   SOMLINK somTP_SOMClassMgr_somFree(SOMClassMgr *somSelf);
typedef somTP_SOMClassMgr_somFree *somTD_SOMClassMgr_somFree;
typedef void   SOMLINK somTP_SOMClassMgr_somUninit(SOMClassMgr *somSelf);
typedef somTP_SOMClassMgr_somUninit *somTD_SOMClassMgr_somUninit;
typedef SOMClass*   SOMLINK somTP_SOMClassMgr_somGetClass(SOMClassMgr *somSelf);
typedef somTP_SOMClassMgr_somGetClass *somTD_SOMClassMgr_somGetClass;
typedef string   SOMLINK somTP_SOMClassMgr_somGetClassName(SOMClassMgr *somSelf);
typedef somTP_SOMClassMgr_somGetClassName *somTD_SOMClassMgr_somGetClassName;
typedef long   SOMLINK somTP_SOMClassMgr_somGetSize(SOMClassMgr *somSelf);
typedef somTP_SOMClassMgr_somGetSize *somTD_SOMClassMgr_somGetSize;
typedef boolean   SOMLINK somTP_SOMClassMgr_somIsA(SOMClassMgr *somSelf,
		SOMClass* aClassObj);
typedef somTP_SOMClassMgr_somIsA *somTD_SOMClassMgr_somIsA;
typedef boolean   SOMLINK somTP_SOMClassMgr_somIsInstanceOf(SOMClassMgr *somSelf,
		SOMClass* aClassObj);
typedef somTP_SOMClassMgr_somIsInstanceOf *somTD_SOMClassMgr_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMClassMgr_somRespondsTo(SOMClassMgr *somSelf,
		somId mId);
typedef somTP_SOMClassMgr_somRespondsTo *somTD_SOMClassMgr_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMClassMgr_somDispatch(SOMClassMgr *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_SOMClassMgr_somDispatch *somTD_SOMClassMgr_somDispatch;
typedef boolean   SOMLINK somTP_SOMClassMgr_somClassDispatch(SOMClassMgr *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_SOMClassMgr_somClassDispatch *somTD_SOMClassMgr_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMClassMgr_somCastObj(SOMClassMgr *somSelf,
		SOMClass* cls);
typedef somTP_SOMClassMgr_somCastObj *somTD_SOMClassMgr_somCastObj;
typedef boolean   SOMLINK somTP_SOMClassMgr_somResetObj(SOMClassMgr *somSelf);
typedef somTP_SOMClassMgr_somResetObj *somTD_SOMClassMgr_somResetObj;
typedef SOMObject*   SOMLINK somTP_SOMClassMgr_somPrintSelf(SOMClassMgr *somSelf);
typedef somTP_SOMClassMgr_somPrintSelf *somTD_SOMClassMgr_somPrintSelf;
typedef void   SOMLINK somTP_SOMClassMgr_somDumpSelf(SOMClassMgr *somSelf,
		long level);
typedef somTP_SOMClassMgr_somDumpSelf *somTD_SOMClassMgr_somDumpSelf;
typedef void   SOMLINK somTP_SOMClassMgr_somDumpSelfInt(SOMClassMgr *somSelf,
		long level);
typedef somTP_SOMClassMgr_somDumpSelfInt *somTD_SOMClassMgr_somDumpSelfInt;
}

#endif /* SOMClassMgr_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for SOMClassMgr
 */
class SOMClassMgr : public SOMObject
{
public:

// SOMClassMgr::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMClassMgr) SOMClassMgrNewClass(SOMClassMgr_MajorVersion,SOMClassMgr_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMClassMgr,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMClassMgr));
}

// SOMClassMgr::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMClassMgr()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMClassMgrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMClassMgr(SOMClassMgr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMClassMgrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMClassMgr(const SOMClassMgr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMClassMgrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: somLoadClassFile */
SOMClass*   somLoadClassFile(somId classId,
		long majorVersion,
		long minorVersion,
		string file)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somLoadClassFile)
	(this,classId,majorVersion,minorVersion,file);
}


/* method: somLocateClassFile */
string   somLocateClassFile(somId classId,
		long majorVersion,
		long minorVersion)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somLocateClassFile)
	(this,classId,majorVersion,minorVersion);
}


/* method: somRegisterClass */
void   somRegisterClass(SOMClass* classObj)
{
   SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somRegisterClass)
	(this,classObj);
}


/* method: somRegisterClassLibrary */
void   somRegisterClassLibrary(string libraryName,
		somMethodPtr libraryInitRtn)
{
   SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somRegisterClassLibrary)
	(this,libraryName,libraryInitRtn);
}


/* method: somUnregisterClassLibrary */
void   somUnregisterClassLibrary(string libraryName)
{
   SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somUnregisterClassLibrary)
	(this,libraryName);
}


/* method: somUnloadClassFile */
long   somUnloadClassFile(SOMClass* classObj)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somUnloadClassFile)
	(this,classObj);
}


/* method: somUnregisterClass */
long   somUnregisterClass(SOMClass* classObj)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somUnregisterClass)
	(this,classObj);
}


/* method: somBeginPersistentClasses */
void   somBeginPersistentClasses()
{
   SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somBeginPersistentClasses)
	(this);
}


/* method: somEndPersistentClasses */
void   somEndPersistentClasses()
{
   SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somEndPersistentClasses)
	(this);
}


/* method: somJoinAffinityGroup */
boolean   somJoinAffinityGroup(SOMClass* newClass,
		SOMClass* affClass)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somJoinAffinityGroup)
	(this,newClass,affClass);
}


/* method: somGetInitFunction */
string   somGetInitFunction()
{
   return SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somGetInitFunction)
	(this);
}


/* method: _get_somInterfaceRepository */
Repository*   _get_somInterfaceRepository()
{
   return SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,_get_somInterfaceRepository)
	(this);
}


/* method: _set_somInterfaceRepository */
void   _set_somInterfaceRepository(Repository* somInterfaceRepository)
{
   SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,_set_somInterfaceRepository)
	(this,somInterfaceRepository);
}


/* method: _get_somRegisteredClasses */
_IDL_SEQUENCE_SOMClass   _get_somRegisteredClasses()
{
   return SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,_get_somRegisteredClasses)
	(this);
}


/* method: somGetRelatedClasses */
SOMClassMgr_SOMClassArray   somGetRelatedClasses(SOMClass* classObj)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somGetRelatedClasses)
	(this,classObj);
}


/* method: somClassFromId */
SOMClass*   somClassFromId(somId classId)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somClassFromId)
	(this,classId);
}


/* method: somFindClass */
SOMClass*   somFindClass(somId classId,
		long majorVersion,
		long minorVersion)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somFindClass)
	(this,classId,majorVersion,minorVersion);
}


/* method: somFindClsInFile */
SOMClass*   somFindClsInFile(somId classId,
		long majorVersion,
		long minorVersion,
		string file)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somFindClsInFile)
	(this,classId,majorVersion,minorVersion,file);
}


/* method: somMergeInto */
void   somMergeInto(SOMObject* targetObj)
{
   SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somMergeInto)
	(this,targetObj);
}


/* method: somSubstituteClass */
long   somSubstituteClass(string origClassName,
		string newClassName)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMClassMgr,somSubstituteClass)
	(this,origClassName,newClassName);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,SOMClassMgr,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,SOMClassMgr,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMClassMgr,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMClassMgr*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMClassMgr,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMClassMgr,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMClassMgr,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMClassMgr*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMClassMgr*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMClassMgr*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,SOMClassMgr,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,SOMClassMgr,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,SOMClassMgr,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,SOMClassMgr,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,SOMClassMgr,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,SOMClassMgr,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   SOMClassMgr_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,SOMClassMgr,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMClassMgr,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   SOMClassMgr_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,SOMClassMgr,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMClassMgr,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,SOMClassMgr,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,SOMClassMgr,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,SOMClassMgr,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,SOMClassMgr,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,SOMClassMgr,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMClassMgr */



#endif       /* SOM_SOMClassMgr_xh */
