
#ifndef SOM_AWDRepository_xh
#define SOM_AWDRepository_xh

class AWDRepository;

#define AWDRepository_MajorVersion 2
#define AWDRepository_MinorVersion 3

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef AWDRepository_API
#define AWDRepository_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class AWDCommon;
class AWDString;
class StoredObjectList;

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDRepository Class */
SOMEXTERN
#if (defined(SOM_Module_awdrepo_Source) || defined(AWDRepository_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDRepository))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDRepositoryNewClass(
		integer4,
		integer4 );

/* The API to the AWDRepository class object, and the methods it introduces. */
SOMEXTERN struct AWDRepositoryClassDataStructure {
	SOMClass *classObject;
	somMToken isValidHandle;
	somMToken store;
	somMToken restore;
	somMToken count;
	somMToken setup;
	somMToken getClassName;
	somMToken shutDown;
	somMToken startUp;
	somMToken setSemTimeout;
	somMToken getSemTimeout;
	unsigned long *semTimeout;
}
#if !(defined(SOM_Module_awdrepo_Source) || defined(AWDRepository_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDRepository))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDRepositoryClassData;
#define _AWDRepository AWDRepositoryClassData.classObject

/* The API to parentMtabs for AWDRepository, and the instance data it introduces. */
SOMEXTERN struct AWDRepositoryCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_awdrepo_Source) || defined(AWDRepository_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDRepository))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDRepositoryCClassData;

/*
 * -- Typedefs for AWDRepository Method Procedures
 */
extern "C" {
typedef boolean   SOMLINK somTP_AWDRepository_isValidHandle(AWDRepository *somSelf, Environment *ev,
		unsigned long handle);
typedef somTP_AWDRepository_isValidHandle *somTD_AWDRepository_isValidHandle;
typedef unsigned long   SOMLINK somTP_AWDRepository_store(AWDRepository *somSelf, Environment *ev,
		AWDCommon* obj);
typedef somTP_AWDRepository_store *somTD_AWDRepository_store;
typedef boolean   SOMLINK somTP_AWDRepository_restore(AWDRepository *somSelf, Environment *ev,
		unsigned long handle,
		AWDCommon* obj);
typedef somTP_AWDRepository_restore *somTD_AWDRepository_restore;
typedef unsigned long   SOMLINK somTP_AWDRepository_count(AWDRepository *somSelf, Environment *ev);
typedef somTP_AWDRepository_count *somTD_AWDRepository_count;
typedef void   SOMLINK somTP_AWDRepository_setup(AWDRepository *somSelf, Environment *ev);
typedef somTP_AWDRepository_setup *somTD_AWDRepository_setup;
typedef char*   SOMLINK somTP_AWDRepository_getClassName(AWDRepository *somSelf, Environment *ev,
		unsigned long handle,
		AWDString* str);
typedef somTP_AWDRepository_getClassName *somTD_AWDRepository_getClassName;
typedef void   SOMLINK somTP_AWDRepository_shutDown(AWDRepository *somSelf, Environment *ev);
typedef somTP_AWDRepository_shutDown *somTD_AWDRepository_shutDown;
typedef void   SOMLINK somTP_AWDRepository_startUp(AWDRepository *somSelf, Environment *ev);
typedef somTP_AWDRepository_startUp *somTD_AWDRepository_startUp;
typedef void   SOMLINK somTP_AWDRepository_setSemTimeout(AWDRepository *somSelf, Environment *ev,
		unsigned long millisecs);
typedef somTP_AWDRepository_setSemTimeout *somTD_AWDRepository_setSemTimeout;
typedef unsigned long   SOMLINK somTP_AWDRepository_getSemTimeout(AWDRepository *somSelf, Environment *ev);
typedef somTP_AWDRepository_getSemTimeout *somTD_AWDRepository_getSemTimeout;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_AWDRepository_somDefaultInit(AWDRepository *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDRepository_somDefaultInit *somTD_AWDRepository_somDefaultInit;
typedef void   SOMLINK somTP_AWDRepository_somDestruct(AWDRepository *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDRepository_somDestruct *somTD_AWDRepository_somDestruct;
typedef void   SOMLINK somTP_AWDRepository_somDefaultCopyInit(AWDRepository *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRepository_somDefaultCopyInit *somTD_AWDRepository_somDefaultCopyInit;
typedef AWDRepository*   SOMLINK somTP_AWDRepository_somDefaultAssign(AWDRepository *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRepository_somDefaultAssign *somTD_AWDRepository_somDefaultAssign;
typedef void   SOMLINK somTP_AWDRepository_somDefaultConstCopyInit(AWDRepository *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRepository_somDefaultConstCopyInit *somTD_AWDRepository_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDRepository_somDefaultVCopyInit(AWDRepository *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRepository_somDefaultVCopyInit *somTD_AWDRepository_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDRepository_somDefaultConstVCopyInit(AWDRepository *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRepository_somDefaultConstVCopyInit *somTD_AWDRepository_somDefaultConstVCopyInit;
typedef AWDRepository*   SOMLINK somTP_AWDRepository_somDefaultConstAssign(AWDRepository *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRepository_somDefaultConstAssign *somTD_AWDRepository_somDefaultConstAssign;
typedef AWDRepository*   SOMLINK somTP_AWDRepository_somDefaultVAssign(AWDRepository *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRepository_somDefaultVAssign *somTD_AWDRepository_somDefaultVAssign;
typedef AWDRepository*   SOMLINK somTP_AWDRepository_somDefaultConstVAssign(AWDRepository *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRepository_somDefaultConstVAssign *somTD_AWDRepository_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDRepository_somInit(AWDRepository *somSelf);
typedef somTP_AWDRepository_somInit *somTD_AWDRepository_somInit;
typedef void   SOMLINK somTP_AWDRepository_somFree(AWDRepository *somSelf);
typedef somTP_AWDRepository_somFree *somTD_AWDRepository_somFree;
typedef void   SOMLINK somTP_AWDRepository_somUninit(AWDRepository *somSelf);
typedef somTP_AWDRepository_somUninit *somTD_AWDRepository_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDRepository_somGetClass(AWDRepository *somSelf);
typedef somTP_AWDRepository_somGetClass *somTD_AWDRepository_somGetClass;
typedef string   SOMLINK somTP_AWDRepository_somGetClassName(AWDRepository *somSelf);
typedef somTP_AWDRepository_somGetClassName *somTD_AWDRepository_somGetClassName;
typedef long   SOMLINK somTP_AWDRepository_somGetSize(AWDRepository *somSelf);
typedef somTP_AWDRepository_somGetSize *somTD_AWDRepository_somGetSize;
typedef boolean   SOMLINK somTP_AWDRepository_somIsA(AWDRepository *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDRepository_somIsA *somTD_AWDRepository_somIsA;
typedef boolean   SOMLINK somTP_AWDRepository_somIsInstanceOf(AWDRepository *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDRepository_somIsInstanceOf *somTD_AWDRepository_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDRepository_somRespondsTo(AWDRepository *somSelf,
		somId mId);
typedef somTP_AWDRepository_somRespondsTo *somTD_AWDRepository_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDRepository_somDispatch(AWDRepository *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDRepository_somDispatch *somTD_AWDRepository_somDispatch;
typedef boolean   SOMLINK somTP_AWDRepository_somClassDispatch(AWDRepository *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDRepository_somClassDispatch *somTD_AWDRepository_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDRepository_somCastObj(AWDRepository *somSelf,
		SOMClass* cls);
typedef somTP_AWDRepository_somCastObj *somTD_AWDRepository_somCastObj;
typedef boolean   SOMLINK somTP_AWDRepository_somResetObj(AWDRepository *somSelf);
typedef somTP_AWDRepository_somResetObj *somTD_AWDRepository_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDRepository_somPrintSelf(AWDRepository *somSelf);
typedef somTP_AWDRepository_somPrintSelf *somTD_AWDRepository_somPrintSelf;
typedef void   SOMLINK somTP_AWDRepository_somDumpSelf(AWDRepository *somSelf,
		long level);
typedef somTP_AWDRepository_somDumpSelf *somTD_AWDRepository_somDumpSelf;
typedef void   SOMLINK somTP_AWDRepository_somDumpSelfInt(AWDRepository *somSelf,
		long level);
typedef somTP_AWDRepository_somDumpSelfInt *somTD_AWDRepository_somDumpSelfInt;
}

#endif /* AWDRepository_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDRepository
 */
class AWDRepository : public SOMObject
{
public:

// AWDRepository::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDRepository) AWDRepositoryNewClass(AWDRepository_MajorVersion,AWDRepository_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDRepository,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDRepository));
}

// AWDRepository::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDRepository()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDRepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDRepository(AWDRepository* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDRepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDRepository(const AWDRepository* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDRepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: isValidHandle */
boolean   isValidHandle(Environment *ev,
		unsigned long handle)
{
   return SOM_ResolveD(this,AWDRepository,AWDRepository,isValidHandle)
	(this, ev,handle);
}


/* method: store */
unsigned long   store(Environment *ev,
		AWDCommon* obj)
{
   return SOM_ResolveD(this,AWDRepository,AWDRepository,store)
	(this, ev,obj);
}


/* method: restore */
boolean   restore(Environment *ev,
		unsigned long handle,
		AWDCommon* obj)
{
   return SOM_ResolveD(this,AWDRepository,AWDRepository,restore)
	(this, ev,handle,obj);
}


/* method: count */
unsigned long   count(Environment *ev)
{
   return SOM_ResolveD(this,AWDRepository,AWDRepository,count)
	(this, ev);
}


/* method: setup */
void   setup(Environment *ev)
{
   SOM_ResolveD(this,AWDRepository,AWDRepository,setup)
	(this, ev);
}


/* method: getClassName */
char*   getClassName(Environment *ev,
		unsigned long handle,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDRepository,AWDRepository,getClassName)
	(this, ev,handle,str);
}


/* method: shutDown */
void   shutDown(Environment *ev)
{
   SOM_ResolveD(this,AWDRepository,AWDRepository,shutDown)
	(this, ev);
}


/* method: startUp */
void   startUp(Environment *ev)
{
   SOM_ResolveD(this,AWDRepository,AWDRepository,startUp)
	(this, ev);
}


/* method: setSemTimeout */
void   setSemTimeout(Environment *ev,
		unsigned long millisecs)
{
   SOM_ResolveD(this,AWDRepository,AWDRepository,setSemTimeout)
	(this, ev,millisecs);
}


/* method: getSemTimeout */
unsigned long   getSemTimeout(Environment *ev)
{
   return SOM_ResolveD(this,AWDRepository,AWDRepository,getSemTimeout)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDRepository,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDRepository,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDRepository,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDRepository*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDRepository,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDRepository,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDRepository,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDRepository,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDRepository*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDRepository,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDRepository*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDRepository,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDRepository*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDRepository,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDRepository,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDRepository,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDRepository,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDRepository,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDRepository,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDRepository,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDRepository,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDRepository,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDRepository,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDRepository_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDRepository,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDRepository,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDRepository_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDRepository,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDRepository,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDRepository,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDRepository,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDRepository,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDRepository,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDRepository,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDRepository */



#endif       /* SOM_AWDRepository_xh */
