
#ifndef SOM_AWDData_xh
#define SOM_AWDData_xh

class AWDData;

#define AWDData_MajorVersion 2
#define AWDData_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "acbl0049.xh"

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_ACBL0049Record_xh
#include <acbl0049.xh>
#endif

#ifndef AWDData_API
#define AWDData_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class somf_MLinkable;
class AWDConnection;
class AWDException;
class AWDVisitor;
class IndexRetriever;
class AWDApplication;

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDData Class */
SOMEXTERN
#if (defined(SOM_Module_datadict_Source) || defined(AWDData_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDData))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDDataNewClass(
		integer4,
		integer4 );

/* The API to the AWDData class object, and the methods it introduces. */
SOMEXTERN struct AWDDataClassDataStructure {
	SOMClass *classObject;
	somMToken setNextInHashList;
	somMToken nextInHashList;
}
#if !(defined(SOM_Module_datadict_Source) || defined(AWDData_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDData))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDDataClassData;
#define _AWDData AWDDataClassData.classObject

/* The API to parentMtabs for AWDData, and the instance data it introduces. */
SOMEXTERN struct AWDDataCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_datadict_Source) || defined(AWDData_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDData))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDDataCClassData;

/*
 * -- Typedefs for AWDData Method Procedures
 */
extern "C" {
typedef void   SOMLINK somTP_AWDData_setNextInHashList(AWDData *somSelf, Environment *ev,
		AWDData* next);
typedef somTP_AWDData_setNextInHashList *somTD_AWDData_setNextInHashList;
typedef AWDData*   SOMLINK somTP_AWDData_nextInHashList(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_nextInHashList *somTD_AWDData_nextInHashList;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef string   SOMLINK somTP_AWDData_name(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_name *somTD_AWDData_name;
typedef ACBL0049_FIELD_FORMAT   SOMLINK somTP_AWDData_format(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_format *somTD_AWDData_format;
typedef unsigned short   SOMLINK somTP_AWDData_length(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_length *somTD_AWDData_length;
typedef unsigned short   SOMLINK somTP_AWDData_decimals(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_decimals *somTD_AWDData_decimals;
typedef string   SOMLINK somTP_AWDData_mask(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_mask *somTD_AWDData_mask;
typedef string   SOMLINK somTP_AWDData_fldclass(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_fldclass *somTD_AWDData_fldclass;
typedef boolean   SOMLINK somTP_AWDData_isRequired(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_isRequired *somTD_AWDData_isRequired;
typedef ACBL0049_FIELD_TYPE   SOMLINK somTP_AWDData_fldType(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_fldType *somTD_AWDData_fldType;
typedef string   SOMLINK somTP_AWDData_preProcedure(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_preProcedure *somTD_AWDData_preProcedure;
typedef string   SOMLINK somTP_AWDData_preLibrary(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_preLibrary *somTD_AWDData_preLibrary;
typedef string   SOMLINK somTP_AWDData_postProcedure(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_postProcedure *somTD_AWDData_postProcedure;
typedef string   SOMLINK somTP_AWDData_postLibrary(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_postLibrary *somTD_AWDData_postLibrary;
typedef string   SOMLINK somTP_AWDData_validProcedure(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_validProcedure *somTD_AWDData_validProcedure;
typedef string   SOMLINK somTP_AWDData_validLibrary(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_validLibrary *somTD_AWDData_validLibrary;
typedef string   SOMLINK somTP_AWDData_listProcedure(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_listProcedure *somTD_AWDData_listProcedure;
typedef string   SOMLINK somTP_AWDData_listLibrary(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_listLibrary *somTD_AWDData_listLibrary;
typedef unsigned short   SOMLINK somTP_AWDData_uniqueness(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_uniqueness *somTD_AWDData_uniqueness;
typedef boolean   SOMLINK somTP_AWDData_isPartofGroup(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_isPartofGroup *somTD_AWDData_isPartofGroup;
typedef string   SOMLINK somTP_AWDData_groupName(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_groupName *somTD_AWDData_groupName;
typedef unsigned short   SOMLINK somTP_AWDData_groupSequence(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_groupSequence *somTD_AWDData_groupSequence;
typedef string   SOMLINK somTP_AWDData_v14Name(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_v14Name *somTD_AWDData_v14Name;
typedef string   SOMLINK somTP_AWDData_v21Name(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_v21Name *somTD_AWDData_v21Name;
typedef boolean   SOMLINK somTP_AWDData_isIndexed(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_isIndexed *somTD_AWDData_isIndexed;
typedef unsigned short   SOMLINK somTP_AWDData_indexNumber(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_indexNumber *somTD_AWDData_indexNumber;
typedef boolean   SOMLINK somTP_AWDData_isWorkField(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_isWorkField *somTD_AWDData_isWorkField;
typedef boolean   SOMLINK somTP_AWDData_isSourceField(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_isSourceField *somTD_AWDData_isSourceField;
typedef boolean   SOMLINK somTP_AWDData_isFolderField(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_isFolderField *somTD_AWDData_isFolderField;
typedef string   SOMLINK somTP_AWDData_mediumName(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_mediumName *somTD_AWDData_mediumName;
typedef string   SOMLINK somTP_AWDData_helpText(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_helpText *somTD_AWDData_helpText;
typedef void   SOMLINK somTP_AWDData_setInfo(AWDData *somSelf, Environment *ev,
		ACBL0049Record_PAWDFIELD pRecord);
typedef somTP_AWDData_setInfo *somTD_AWDData_setInfo;
typedef void   SOMLINK somTP_AWDData_withNonFormattedBuffer(AWDData *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		ACBL0049Record_PAWDFIELD pRecord);
typedef somTP_AWDData_withNonFormattedBuffer *somTD_AWDData_withNonFormattedBuffer;
typedef void   SOMLINK somTP_AWDData_somDefaultInit(AWDData *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDData_somDefaultInit *somTD_AWDData_somDefaultInit;
typedef void   SOMLINK somTP_AWDData_somDestruct(AWDData *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDData_somDestruct *somTD_AWDData_somDestruct;
typedef void*   SOMLINK somTP_AWDData_buffer(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_buffer *somTD_AWDData_buffer;
typedef void   SOMLINK somTP_AWDData_setBuffer(AWDData *somSelf, Environment *ev,
		void* pv);
typedef somTP_AWDData_setBuffer *somTD_AWDData_setBuffer;
typedef somf_MLinkable*   SOMLINK somTP_AWDData_somfMLinkableInit(AWDData *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_AWDData_somfMLinkableInit *somTD_AWDData_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_AWDData_somfGetNext(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_somfGetNext *somTD_AWDData_somfGetNext;
typedef void   SOMLINK somTP_AWDData_somfSetNext(AWDData *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDData_somfSetNext *somTD_AWDData_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_AWDData_somfGetPrevious(AWDData *somSelf, Environment *ev);
typedef somTP_AWDData_somfGetPrevious *somTD_AWDData_somfGetPrevious;
typedef void   SOMLINK somTP_AWDData_somfSetPrevious(AWDData *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDData_somfSetPrevious *somTD_AWDData_somfSetPrevious;
typedef void   SOMLINK somTP_AWDData_somInit(AWDData *somSelf);
typedef somTP_AWDData_somInit *somTD_AWDData_somInit;
typedef void   SOMLINK somTP_AWDData_somDefaultCopyInit(AWDData *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDData_somDefaultCopyInit *somTD_AWDData_somDefaultCopyInit;
typedef AWDData*   SOMLINK somTP_AWDData_somDefaultAssign(AWDData *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDData_somDefaultAssign *somTD_AWDData_somDefaultAssign;
typedef void   SOMLINK somTP_AWDData_somDefaultConstCopyInit(AWDData *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDData_somDefaultConstCopyInit *somTD_AWDData_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDData_somDefaultVCopyInit(AWDData *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDData_somDefaultVCopyInit *somTD_AWDData_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDData_somDefaultConstVCopyInit(AWDData *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDData_somDefaultConstVCopyInit *somTD_AWDData_somDefaultConstVCopyInit;
typedef AWDData*   SOMLINK somTP_AWDData_somDefaultConstAssign(AWDData *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDData_somDefaultConstAssign *somTD_AWDData_somDefaultConstAssign;
typedef AWDData*   SOMLINK somTP_AWDData_somDefaultVAssign(AWDData *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDData_somDefaultVAssign *somTD_AWDData_somDefaultVAssign;
typedef AWDData*   SOMLINK somTP_AWDData_somDefaultConstVAssign(AWDData *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDData_somDefaultConstVAssign *somTD_AWDData_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDData_somFree(AWDData *somSelf);
typedef somTP_AWDData_somFree *somTD_AWDData_somFree;
typedef void   SOMLINK somTP_AWDData_somUninit(AWDData *somSelf);
typedef somTP_AWDData_somUninit *somTD_AWDData_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDData_somGetClass(AWDData *somSelf);
typedef somTP_AWDData_somGetClass *somTD_AWDData_somGetClass;
typedef string   SOMLINK somTP_AWDData_somGetClassName(AWDData *somSelf);
typedef somTP_AWDData_somGetClassName *somTD_AWDData_somGetClassName;
typedef long   SOMLINK somTP_AWDData_somGetSize(AWDData *somSelf);
typedef somTP_AWDData_somGetSize *somTD_AWDData_somGetSize;
typedef boolean   SOMLINK somTP_AWDData_somIsA(AWDData *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDData_somIsA *somTD_AWDData_somIsA;
typedef boolean   SOMLINK somTP_AWDData_somIsInstanceOf(AWDData *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDData_somIsInstanceOf *somTD_AWDData_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDData_somRespondsTo(AWDData *somSelf,
		somId mId);
typedef somTP_AWDData_somRespondsTo *somTD_AWDData_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDData_somDispatch(AWDData *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDData_somDispatch *somTD_AWDData_somDispatch;
typedef boolean   SOMLINK somTP_AWDData_somClassDispatch(AWDData *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDData_somClassDispatch *somTD_AWDData_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDData_somCastObj(AWDData *somSelf,
		SOMClass* cls);
typedef somTP_AWDData_somCastObj *somTD_AWDData_somCastObj;
typedef boolean   SOMLINK somTP_AWDData_somResetObj(AWDData *somSelf);
typedef somTP_AWDData_somResetObj *somTD_AWDData_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDData_somPrintSelf(AWDData *somSelf);
typedef somTP_AWDData_somPrintSelf *somTD_AWDData_somPrintSelf;
typedef void   SOMLINK somTP_AWDData_somDumpSelf(AWDData *somSelf,
		long level);
typedef somTP_AWDData_somDumpSelf *somTD_AWDData_somDumpSelf;
typedef void   SOMLINK somTP_AWDData_somDumpSelfInt(AWDData *somSelf,
		long level);
typedef somTP_AWDData_somDumpSelfInt *somTD_AWDData_somDumpSelfInt;
}

#endif /* AWDData_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDData
 */
class AWDData : public ACBL0049Record
{
public:

// AWDData::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDData) AWDDataNewClass(AWDData_MajorVersion,AWDData_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDData,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDData));
}

// AWDData::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDData()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDDataCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDData(AWDData* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDDataCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDData(const AWDData* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDDataCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: setNextInHashList */
void   setNextInHashList(Environment *ev,
		AWDData* next)
{
   SOM_ResolveD(this,AWDData,AWDData,setNextInHashList)
	(this, ev,next);
}


/* method: nextInHashList */
AWDData*   nextInHashList(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,AWDData,nextInHashList)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: name */
string   name(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,name)
	(this, ev);
}


/* method: format */
ACBL0049_FIELD_FORMAT   format(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,format)
	(this, ev);
}


/* method: length */
unsigned short   length(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,length)
	(this, ev);
}


/* method: decimals */
unsigned short   decimals(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,decimals)
	(this, ev);
}


/* method: mask */
string   mask(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,mask)
	(this, ev);
}


/* method: fldclass */
string   fldclass(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,fldclass)
	(this, ev);
}


/* method: isRequired */
boolean   isRequired(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,isRequired)
	(this, ev);
}


/* method: fldType */
ACBL0049_FIELD_TYPE   fldType(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,fldType)
	(this, ev);
}


/* method: preProcedure */
string   preProcedure(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,preProcedure)
	(this, ev);
}


/* method: preLibrary */
string   preLibrary(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,preLibrary)
	(this, ev);
}


/* method: postProcedure */
string   postProcedure(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,postProcedure)
	(this, ev);
}


/* method: postLibrary */
string   postLibrary(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,postLibrary)
	(this, ev);
}


/* method: validProcedure */
string   validProcedure(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,validProcedure)
	(this, ev);
}


/* method: validLibrary */
string   validLibrary(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,validLibrary)
	(this, ev);
}


/* method: listProcedure */
string   listProcedure(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,listProcedure)
	(this, ev);
}


/* method: listLibrary */
string   listLibrary(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,listLibrary)
	(this, ev);
}


/* method: uniqueness */
unsigned short   uniqueness(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,uniqueness)
	(this, ev);
}


/* method: isPartofGroup */
boolean   isPartofGroup(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,isPartofGroup)
	(this, ev);
}


/* method: groupName */
string   groupName(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,groupName)
	(this, ev);
}


/* method: groupSequence */
unsigned short   groupSequence(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,groupSequence)
	(this, ev);
}


/* method: v14Name */
string   v14Name(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,v14Name)
	(this, ev);
}


/* method: v21Name */
string   v21Name(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,v21Name)
	(this, ev);
}


/* method: isIndexed */
boolean   isIndexed(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,isIndexed)
	(this, ev);
}


/* method: indexNumber */
unsigned short   indexNumber(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,indexNumber)
	(this, ev);
}


/* method: isWorkField */
boolean   isWorkField(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,isWorkField)
	(this, ev);
}


/* method: isSourceField */
boolean   isSourceField(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,isSourceField)
	(this, ev);
}


/* method: isFolderField */
boolean   isFolderField(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,isFolderField)
	(this, ev);
}


/* method: mediumName */
string   mediumName(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,mediumName)
	(this, ev);
}


/* method: helpText */
string   helpText(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,ACBL0049Record,helpText)
	(this, ev);
}


/* method: setInfo */
void   setInfo(Environment *ev,
		ACBL0049Record_PAWDFIELD pRecord)
{
   SOM_ResolveD(this,AWDData,ACBL0049Record,setInfo)
	(this, ev,pRecord);
}


/* initializer method: withNonFormattedBuffer */
void   withNonFormattedBuffer(Environment *ev,
		somInitCtrl* ctrl,
		ACBL0049Record_PAWDFIELD pRecord)
{
   SOM_ResolveD(this,AWDData,ACBL0049Record,withNonFormattedBuffer)
	(this, ev,ctrl,pRecord);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDData,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDData,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: buffer */
void*   buffer(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,RECORD,buffer)
	(this, ev);
}


/* method: setBuffer */
void   setBuffer(Environment *ev,
		void* pv)
{
   SOM_ResolveD(this,AWDData,RECORD,setBuffer)
	(this, ev,pv);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,AWDData,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDData,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,AWDData,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDData,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDData,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDData,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDData*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDData,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDData,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDData,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDData,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDData*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDData,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDData*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDData,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDData*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDData,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDData,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDData,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDData,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDData,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDData,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDData,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDData,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDData,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDData_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDData,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDData,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDData_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDData,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDData,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDData,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDData,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDData,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDData,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDData,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDData */



#endif       /* SOM_AWDData_xh */

#ifndef SOM_AWDDictionary_xh
#define SOM_AWDDictionary_xh

class AWDDictionary;

#define AWDDictionary_MajorVersion 2
#define AWDDictionary_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "somlist.xh"

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMList_xh
#include <somlist.xh>
#endif

#ifndef AWDDictionary_API
#define AWDDictionary_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDDictionary Class */
SOMEXTERN
#if (defined(SOM_Module_datadict_Source) || defined(AWDDictionary_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDDictionary))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDDictionaryNewClass(
		integer4,
		integer4 );

/* The API to the AWDDictionary class object, and the methods it introduces. */
SOMEXTERN struct AWDDictionaryClassDataStructure {
	SOMClass *classObject;
	somMToken count;
	somMToken get;
	somMToken indexData;
	somMToken addToHashTable;
	somMToken getHashIndex;
}
#if !(defined(SOM_Module_datadict_Source) || defined(AWDDictionary_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDDictionary))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDDictionaryClassData;
#define _AWDDictionary AWDDictionaryClassData.classObject

/* The API to parentMtabs for AWDDictionary, and the instance data it introduces. */
SOMEXTERN struct AWDDictionaryCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_datadict_Source) || defined(AWDDictionary_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDDictionary))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDDictionaryCClassData;

/*
 * -- Typedefs for AWDDictionary Method Procedures
 */
extern "C" {
typedef AWDData*   SOMLINK somTP_AWDDictionary_get(AWDDictionary *somSelf, Environment *ev,
		string aName);
typedef somTP_AWDDictionary_get *somTD_AWDDictionary_get;
typedef AWDData*   SOMLINK somTP_AWDDictionary_indexData(AWDDictionary *somSelf, Environment *ev,
		unsigned short usindex);
typedef somTP_AWDDictionary_indexData *somTD_AWDDictionary_indexData;
typedef unsigned long   SOMLINK somTP_AWDDictionary_count(AWDDictionary *somSelf, Environment *ev);
typedef somTP_AWDDictionary_count *somTD_AWDDictionary_count;
typedef void   SOMLINK somTP_AWDDictionary_addToHashTable(AWDDictionary *somSelf, Environment *ev,
		AWDData* data);
typedef somTP_AWDDictionary_addToHashTable *somTD_AWDDictionary_addToHashTable;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_AWDDictionary_deleteAll(AWDDictionary *somSelf, Environment *ev);
typedef somTP_AWDDictionary_deleteAll *somTD_AWDDictionary_deleteAll;
typedef boolean   SOMLINK somTP_AWDDictionary_forAll(AWDDictionary *somSelf, Environment *ev,
		void* pfn,
		void* pData,
		somf_MLinkable** pLastObject);
typedef somTP_AWDDictionary_forAll *somTD_AWDDictionary_forAll;
typedef boolean   SOMLINK somTP_AWDDictionary_visitAll(AWDDictionary *somSelf, Environment *ev,
		AWDVisitor* visitor);
typedef somTP_AWDDictionary_visitAll *somTD_AWDDictionary_visitAll;
typedef boolean   SOMLINK somTP_AWDDictionary_invariantOK(AWDDictionary *somSelf, Environment *ev);
typedef somTP_AWDDictionary_invariantOK *somTD_AWDDictionary_invariantOK;
typedef void   SOMLINK somTP_AWDDictionary_somDefaultInit(AWDDictionary *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDDictionary_somDefaultInit *somTD_AWDDictionary_somDefaultInit;
typedef void   SOMLINK somTP_AWDDictionary_somDestruct(AWDDictionary *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDDictionary_somDestruct *somTD_AWDDictionary_somDestruct;
typedef unsigned long   SOMLINK somTP_AWDDictionary_somfCount(AWDDictionary *somSelf, Environment *ev);
typedef somTP_AWDDictionary_somfCount *somTD_AWDDictionary_somfCount;
typedef void   SOMLINK somTP_AWDDictionary_somfRemove(AWDDictionary *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDDictionary_somfRemove *somTD_AWDDictionary_somfRemove;
typedef void   SOMLINK somTP_AWDDictionary_somfRemoveAll(AWDDictionary *somSelf, Environment *ev);
typedef somTP_AWDDictionary_somfRemoveAll *somTD_AWDDictionary_somfRemoveAll;
typedef somf_MLinkable*   SOMLINK somTP_AWDDictionary_somfRemoveFirst(AWDDictionary *somSelf, Environment *ev);
typedef somTP_AWDDictionary_somfRemoveFirst *somTD_AWDDictionary_somfRemoveFirst;
typedef somf_MLinkable*   SOMLINK somTP_AWDDictionary_somfRemoveLast(AWDDictionary *somSelf, Environment *ev);
typedef somTP_AWDDictionary_somfRemoveLast *somTD_AWDDictionary_somfRemoveLast;
typedef void   SOMLINK somTP_AWDDictionary_somfAddBefore(AWDDictionary *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_AWDDictionary_somfAddBefore *somTD_AWDDictionary_somfAddBefore;
typedef void   SOMLINK somTP_AWDDictionary_somfAddAfter(AWDDictionary *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_AWDDictionary_somfAddAfter *somTD_AWDDictionary_somfAddAfter;
typedef void   SOMLINK somTP_AWDDictionary_somfAddFirst(AWDDictionary *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_AWDDictionary_somfAddFirst *somTD_AWDDictionary_somfAddFirst;
typedef void   SOMLINK somTP_AWDDictionary_somfAddLast(AWDDictionary *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_AWDDictionary_somfAddLast *somTD_AWDDictionary_somfAddLast;
typedef somf_MLinkable*   SOMLINK somTP_AWDDictionary_somfAfter(AWDDictionary *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_AWDDictionary_somfAfter *somTD_AWDDictionary_somfAfter;
typedef somf_MLinkable*   SOMLINK somTP_AWDDictionary_somfBefore(AWDDictionary *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_AWDDictionary_somfBefore *somTD_AWDDictionary_somfBefore;
typedef somf_MLinkable*   SOMLINK somTP_AWDDictionary_somfFirst(AWDDictionary *somSelf, Environment *ev);
typedef somTP_AWDDictionary_somfFirst *somTD_AWDDictionary_somfFirst;
typedef somf_MLinkable*   SOMLINK somTP_AWDDictionary_somfLast(AWDDictionary *somSelf, Environment *ev);
typedef somTP_AWDDictionary_somfLast *somTD_AWDDictionary_somfLast;
typedef void   SOMLINK somTP_AWDDictionary_somInit(AWDDictionary *somSelf);
typedef somTP_AWDDictionary_somInit *somTD_AWDDictionary_somInit;
typedef void   SOMLINK somTP_AWDDictionary_somUninit(AWDDictionary *somSelf);
typedef somTP_AWDDictionary_somUninit *somTD_AWDDictionary_somUninit;
typedef void   SOMLINK somTP_AWDDictionary_somDefaultCopyInit(AWDDictionary *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDDictionary_somDefaultCopyInit *somTD_AWDDictionary_somDefaultCopyInit;
typedef AWDDictionary*   SOMLINK somTP_AWDDictionary_somDefaultAssign(AWDDictionary *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDDictionary_somDefaultAssign *somTD_AWDDictionary_somDefaultAssign;
typedef void   SOMLINK somTP_AWDDictionary_somDefaultConstCopyInit(AWDDictionary *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDDictionary_somDefaultConstCopyInit *somTD_AWDDictionary_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDDictionary_somDefaultVCopyInit(AWDDictionary *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDDictionary_somDefaultVCopyInit *somTD_AWDDictionary_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDDictionary_somDefaultConstVCopyInit(AWDDictionary *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDDictionary_somDefaultConstVCopyInit *somTD_AWDDictionary_somDefaultConstVCopyInit;
typedef AWDDictionary*   SOMLINK somTP_AWDDictionary_somDefaultConstAssign(AWDDictionary *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDDictionary_somDefaultConstAssign *somTD_AWDDictionary_somDefaultConstAssign;
typedef AWDDictionary*   SOMLINK somTP_AWDDictionary_somDefaultVAssign(AWDDictionary *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDDictionary_somDefaultVAssign *somTD_AWDDictionary_somDefaultVAssign;
typedef AWDDictionary*   SOMLINK somTP_AWDDictionary_somDefaultConstVAssign(AWDDictionary *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDDictionary_somDefaultConstVAssign *somTD_AWDDictionary_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDDictionary_somFree(AWDDictionary *somSelf);
typedef somTP_AWDDictionary_somFree *somTD_AWDDictionary_somFree;
typedef SOMClass*   SOMLINK somTP_AWDDictionary_somGetClass(AWDDictionary *somSelf);
typedef somTP_AWDDictionary_somGetClass *somTD_AWDDictionary_somGetClass;
typedef string   SOMLINK somTP_AWDDictionary_somGetClassName(AWDDictionary *somSelf);
typedef somTP_AWDDictionary_somGetClassName *somTD_AWDDictionary_somGetClassName;
typedef long   SOMLINK somTP_AWDDictionary_somGetSize(AWDDictionary *somSelf);
typedef somTP_AWDDictionary_somGetSize *somTD_AWDDictionary_somGetSize;
typedef boolean   SOMLINK somTP_AWDDictionary_somIsA(AWDDictionary *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDDictionary_somIsA *somTD_AWDDictionary_somIsA;
typedef boolean   SOMLINK somTP_AWDDictionary_somIsInstanceOf(AWDDictionary *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDDictionary_somIsInstanceOf *somTD_AWDDictionary_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDDictionary_somRespondsTo(AWDDictionary *somSelf,
		somId mId);
typedef somTP_AWDDictionary_somRespondsTo *somTD_AWDDictionary_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDDictionary_somDispatch(AWDDictionary *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDDictionary_somDispatch *somTD_AWDDictionary_somDispatch;
typedef boolean   SOMLINK somTP_AWDDictionary_somClassDispatch(AWDDictionary *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDDictionary_somClassDispatch *somTD_AWDDictionary_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDDictionary_somCastObj(AWDDictionary *somSelf,
		SOMClass* cls);
typedef somTP_AWDDictionary_somCastObj *somTD_AWDDictionary_somCastObj;
typedef boolean   SOMLINK somTP_AWDDictionary_somResetObj(AWDDictionary *somSelf);
typedef somTP_AWDDictionary_somResetObj *somTD_AWDDictionary_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDDictionary_somPrintSelf(AWDDictionary *somSelf);
typedef somTP_AWDDictionary_somPrintSelf *somTD_AWDDictionary_somPrintSelf;
typedef void   SOMLINK somTP_AWDDictionary_somDumpSelf(AWDDictionary *somSelf,
		long level);
typedef somTP_AWDDictionary_somDumpSelf *somTD_AWDDictionary_somDumpSelf;
typedef void   SOMLINK somTP_AWDDictionary_somDumpSelfInt(AWDDictionary *somSelf,
		long level);
typedef somTP_AWDDictionary_somDumpSelfInt *somTD_AWDDictionary_somDumpSelfInt;
}

#endif /* AWDDictionary_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDDictionary
 */
class AWDDictionary : public SOMList
{
public:

// AWDDictionary::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDDictionary) AWDDictionaryNewClass(AWDDictionary_MajorVersion,AWDDictionary_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDDictionary,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDDictionary));
}

// AWDDictionary::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDDictionary()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDDictionaryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDDictionary(AWDDictionary* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDDictionaryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDDictionary(const AWDDictionary* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDDictionaryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: get */
AWDData*   get(Environment *ev,
		string aName)
{
   return SOM_ResolveD(this,AWDDictionary,AWDDictionary,get)
	(this, ev,aName);
}


/* method: indexData */
AWDData*   indexData(Environment *ev,
		unsigned short usindex)
{
   return SOM_ResolveD(this,AWDDictionary,AWDDictionary,indexData)
	(this, ev,usindex);
}


/* method: count */
unsigned long   count(Environment *ev)
{
   return SOM_ResolveD(this,AWDDictionary,AWDDictionary,count)
	(this, ev);
}


/* method: addToHashTable */
void   addToHashTable(Environment *ev,
		AWDData* data)
{
   SOM_ResolveD(this,AWDDictionary,AWDDictionary,addToHashTable)
	(this, ev,data);
}


/*
 * Reintroduce inherited methods
 */

/* method: deleteAll */
boolean   deleteAll(Environment *ev)
{
   return SOM_ResolveD(this,AWDDictionary,SOMList,deleteAll)
	(this, ev);
}


/* method: forAll */
boolean   forAll(Environment *ev,
		void* pfn,
		void* pData,
		somf_MLinkable** pLastObject)
{
   return SOM_ResolveD(this,AWDDictionary,SOMList,forAll)
	(this, ev,pfn,pData,pLastObject);
}


/* method: visitAll */
boolean   visitAll(Environment *ev,
		AWDVisitor* visitor)
{
   return SOM_ResolveD(this,AWDDictionary,SOMList,visitAll)
	(this, ev,visitor);
}


/* method: invariantOK */
boolean   invariantOK(Environment *ev)
{
   return SOM_ResolveD(this,AWDDictionary,SOMList,invariantOK)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDDictionary,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDDictionary,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfCount */
unsigned long   somfCount(Environment *ev)
{
   return SOM_ResolveD(this,AWDDictionary,somf_TPrimitiveLinkedList,somfCount)
	(this, ev);
}


/* method: somfRemove */
void   somfRemove(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDDictionary,somf_TPrimitiveLinkedList,somfRemove)
	(this, ev,aLink);
}


/* method: somfRemoveAll */
void   somfRemoveAll(Environment *ev)
{
   SOM_ResolveD(this,AWDDictionary,somf_TPrimitiveLinkedList,somfRemoveAll)
	(this, ev);
}


/* method: somfRemoveFirst */
somf_MLinkable*   somfRemoveFirst(Environment *ev)
{
   return SOM_ResolveD(this,AWDDictionary,somf_TPrimitiveLinkedList,somfRemoveFirst)
	(this, ev);
}


/* method: somfRemoveLast */
somf_MLinkable*   somfRemoveLast(Environment *ev)
{
   return SOM_ResolveD(this,AWDDictionary,somf_TPrimitiveLinkedList,somfRemoveLast)
	(this, ev);
}


/* method: somfAddBefore */
void   somfAddBefore(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,AWDDictionary,somf_TPrimitiveLinkedList,somfAddBefore)
	(this, ev,existing,obj);
}


/* method: somfAddAfter */
void   somfAddAfter(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,AWDDictionary,somf_TPrimitiveLinkedList,somfAddAfter)
	(this, ev,existing,obj);
}


/* method: somfAddFirst */
void   somfAddFirst(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,AWDDictionary,somf_TPrimitiveLinkedList,somfAddFirst)
	(this, ev,obj);
}


/* method: somfAddLast */
void   somfAddLast(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,AWDDictionary,somf_TPrimitiveLinkedList,somfAddLast)
	(this, ev,obj);
}


/* method: somfAfter */
somf_MLinkable*   somfAfter(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,AWDDictionary,somf_TPrimitiveLinkedList,somfAfter)
	(this, ev,existingobj);
}


/* method: somfBefore */
somf_MLinkable*   somfBefore(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,AWDDictionary,somf_TPrimitiveLinkedList,somfBefore)
	(this, ev,existingobj);
}


/* method: somfFirst */
somf_MLinkable*   somfFirst(Environment *ev)
{
   return SOM_ResolveD(this,AWDDictionary,somf_TPrimitiveLinkedList,somfFirst)
	(this, ev);
}


/* method: somfLast */
somf_MLinkable*   somfLast(Environment *ev)
{
   return SOM_ResolveD(this,AWDDictionary,somf_TPrimitiveLinkedList,somfLast)
	(this, ev);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDDictionary,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDDictionary,SOMObject,somUninit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDDictionary,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDDictionary*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDDictionary,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDDictionary,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDDictionary,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDDictionary,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDDictionary*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDDictionary,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDDictionary*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDDictionary,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDDictionary*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDDictionary,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDDictionary,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDDictionary,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDDictionary,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDDictionary,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDDictionary,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDDictionary,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDDictionary,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDDictionary_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDDictionary,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDDictionary,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDDictionary_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDDictionary,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDDictionary,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDDictionary,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDDictionary,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDDictionary,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDDictionary,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDDictionary,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDDictionary */



#endif       /* SOM_AWDDictionary_xh */

#ifndef SOM_IndexRetriever_xh
#define SOM_IndexRetriever_xh

class IndexRetriever;

#define IndexRetriever_MajorVersion 2
#define IndexRetriever_MinorVersion 3

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDVisitor_xh
#include <somlist.xh>
#endif

#ifndef IndexRetriever_API
#define IndexRetriever_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the IndexRetriever Class */
SOMEXTERN
#if (defined(SOM_Module_datadict_Source) || defined(IndexRetriever_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_IndexRetriever))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK IndexRetrieverNewClass(
		integer4,
		integer4 );

/* The API to the IndexRetriever class object, and the methods it introduces. */
SOMEXTERN struct IndexRetrieverClassDataStructure {
	SOMClass *classObject;
	somMToken index1;
	somMToken index2;
	somMToken index3;
	somMToken index4;
	somMToken indexData;
}
#if !(defined(SOM_Module_datadict_Source) || defined(IndexRetriever_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_IndexRetriever))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK IndexRetrieverClassData;
#define _IndexRetriever IndexRetrieverClassData.classObject

/* The API to parentMtabs for IndexRetriever, and the instance data it introduces. */
SOMEXTERN struct IndexRetrieverCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_datadict_Source) || defined(IndexRetriever_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_IndexRetriever))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK IndexRetrieverCClassData;

/*
 * -- Typedefs for IndexRetriever Method Procedures
 */
extern "C" {
typedef AWDData*   SOMLINK somTP_IndexRetriever_index1(IndexRetriever *somSelf, Environment *ev);
typedef somTP_IndexRetriever_index1 *somTD_IndexRetriever_index1;
typedef AWDData*   SOMLINK somTP_IndexRetriever_index2(IndexRetriever *somSelf, Environment *ev);
typedef somTP_IndexRetriever_index2 *somTD_IndexRetriever_index2;
typedef AWDData*   SOMLINK somTP_IndexRetriever_index3(IndexRetriever *somSelf, Environment *ev);
typedef somTP_IndexRetriever_index3 *somTD_IndexRetriever_index3;
typedef AWDData*   SOMLINK somTP_IndexRetriever_index4(IndexRetriever *somSelf, Environment *ev);
typedef somTP_IndexRetriever_index4 *somTD_IndexRetriever_index4;
typedef AWDData*   SOMLINK somTP_IndexRetriever_indexData(IndexRetriever *somSelf, Environment *ev,
		unsigned short usindex);
typedef somTP_IndexRetriever_indexData *somTD_IndexRetriever_indexData;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_IndexRetriever_visit(IndexRetriever *somSelf, Environment *ev,
		somf_MLinkable* node);
typedef somTP_IndexRetriever_visit *somTD_IndexRetriever_visit;
typedef void   SOMLINK somTP_IndexRetriever_somDefaultInit(IndexRetriever *somSelf,
		somInitCtrl* ctrl);
typedef somTP_IndexRetriever_somDefaultInit *somTD_IndexRetriever_somDefaultInit;
typedef void   SOMLINK somTP_IndexRetriever_somDestruct(IndexRetriever *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_IndexRetriever_somDestruct *somTD_IndexRetriever_somDestruct;
typedef void   SOMLINK somTP_IndexRetriever_somDefaultCopyInit(IndexRetriever *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_IndexRetriever_somDefaultCopyInit *somTD_IndexRetriever_somDefaultCopyInit;
typedef IndexRetriever*   SOMLINK somTP_IndexRetriever_somDefaultAssign(IndexRetriever *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_IndexRetriever_somDefaultAssign *somTD_IndexRetriever_somDefaultAssign;
typedef void   SOMLINK somTP_IndexRetriever_somDefaultConstCopyInit(IndexRetriever *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_IndexRetriever_somDefaultConstCopyInit *somTD_IndexRetriever_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_IndexRetriever_somDefaultVCopyInit(IndexRetriever *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_IndexRetriever_somDefaultVCopyInit *somTD_IndexRetriever_somDefaultVCopyInit;
typedef void   SOMLINK somTP_IndexRetriever_somDefaultConstVCopyInit(IndexRetriever *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_IndexRetriever_somDefaultConstVCopyInit *somTD_IndexRetriever_somDefaultConstVCopyInit;
typedef IndexRetriever*   SOMLINK somTP_IndexRetriever_somDefaultConstAssign(IndexRetriever *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_IndexRetriever_somDefaultConstAssign *somTD_IndexRetriever_somDefaultConstAssign;
typedef IndexRetriever*   SOMLINK somTP_IndexRetriever_somDefaultVAssign(IndexRetriever *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_IndexRetriever_somDefaultVAssign *somTD_IndexRetriever_somDefaultVAssign;
typedef IndexRetriever*   SOMLINK somTP_IndexRetriever_somDefaultConstVAssign(IndexRetriever *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_IndexRetriever_somDefaultConstVAssign *somTD_IndexRetriever_somDefaultConstVAssign;
typedef void   SOMLINK somTP_IndexRetriever_somInit(IndexRetriever *somSelf);
typedef somTP_IndexRetriever_somInit *somTD_IndexRetriever_somInit;
typedef void   SOMLINK somTP_IndexRetriever_somFree(IndexRetriever *somSelf);
typedef somTP_IndexRetriever_somFree *somTD_IndexRetriever_somFree;
typedef void   SOMLINK somTP_IndexRetriever_somUninit(IndexRetriever *somSelf);
typedef somTP_IndexRetriever_somUninit *somTD_IndexRetriever_somUninit;
typedef SOMClass*   SOMLINK somTP_IndexRetriever_somGetClass(IndexRetriever *somSelf);
typedef somTP_IndexRetriever_somGetClass *somTD_IndexRetriever_somGetClass;
typedef string   SOMLINK somTP_IndexRetriever_somGetClassName(IndexRetriever *somSelf);
typedef somTP_IndexRetriever_somGetClassName *somTD_IndexRetriever_somGetClassName;
typedef long   SOMLINK somTP_IndexRetriever_somGetSize(IndexRetriever *somSelf);
typedef somTP_IndexRetriever_somGetSize *somTD_IndexRetriever_somGetSize;
typedef boolean   SOMLINK somTP_IndexRetriever_somIsA(IndexRetriever *somSelf,
		SOMClass* aClassObj);
typedef somTP_IndexRetriever_somIsA *somTD_IndexRetriever_somIsA;
typedef boolean   SOMLINK somTP_IndexRetriever_somIsInstanceOf(IndexRetriever *somSelf,
		SOMClass* aClassObj);
typedef somTP_IndexRetriever_somIsInstanceOf *somTD_IndexRetriever_somIsInstanceOf;
typedef boolean   SOMLINK somTP_IndexRetriever_somRespondsTo(IndexRetriever *somSelf,
		somId mId);
typedef somTP_IndexRetriever_somRespondsTo *somTD_IndexRetriever_somRespondsTo;
typedef boolean   SOMLINK somTP_IndexRetriever_somDispatch(IndexRetriever *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_IndexRetriever_somDispatch *somTD_IndexRetriever_somDispatch;
typedef boolean   SOMLINK somTP_IndexRetriever_somClassDispatch(IndexRetriever *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_IndexRetriever_somClassDispatch *somTD_IndexRetriever_somClassDispatch;
typedef boolean   SOMLINK somTP_IndexRetriever_somCastObj(IndexRetriever *somSelf,
		SOMClass* cls);
typedef somTP_IndexRetriever_somCastObj *somTD_IndexRetriever_somCastObj;
typedef boolean   SOMLINK somTP_IndexRetriever_somResetObj(IndexRetriever *somSelf);
typedef somTP_IndexRetriever_somResetObj *somTD_IndexRetriever_somResetObj;
typedef SOMObject*   SOMLINK somTP_IndexRetriever_somPrintSelf(IndexRetriever *somSelf);
typedef somTP_IndexRetriever_somPrintSelf *somTD_IndexRetriever_somPrintSelf;
typedef void   SOMLINK somTP_IndexRetriever_somDumpSelf(IndexRetriever *somSelf,
		long level);
typedef somTP_IndexRetriever_somDumpSelf *somTD_IndexRetriever_somDumpSelf;
typedef void   SOMLINK somTP_IndexRetriever_somDumpSelfInt(IndexRetriever *somSelf,
		long level);
typedef somTP_IndexRetriever_somDumpSelfInt *somTD_IndexRetriever_somDumpSelfInt;
}

#endif /* IndexRetriever_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for IndexRetriever
 */
class IndexRetriever : public AWDVisitor
{
public:

// IndexRetriever::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_IndexRetriever) IndexRetrieverNewClass(IndexRetriever_MajorVersion,IndexRetriever_MinorVersion);
   return (void*)
      SOM_Resolve(_IndexRetriever,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_IndexRetriever));
}

// IndexRetriever::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

IndexRetriever()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (IndexRetrieverCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

IndexRetriever(IndexRetriever* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (IndexRetrieverCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

IndexRetriever(const IndexRetriever* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (IndexRetrieverCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: index1 */
AWDData*   index1(Environment *ev)
{
   return SOM_ResolveD(this,IndexRetriever,IndexRetriever,index1)
	(this, ev);
}


/* method: index2 */
AWDData*   index2(Environment *ev)
{
   return SOM_ResolveD(this,IndexRetriever,IndexRetriever,index2)
	(this, ev);
}


/* method: index3 */
AWDData*   index3(Environment *ev)
{
   return SOM_ResolveD(this,IndexRetriever,IndexRetriever,index3)
	(this, ev);
}


/* method: index4 */
AWDData*   index4(Environment *ev)
{
   return SOM_ResolveD(this,IndexRetriever,IndexRetriever,index4)
	(this, ev);
}


/* method: indexData */
AWDData*   indexData(Environment *ev,
		unsigned short usindex)
{
   return SOM_ResolveD(this,IndexRetriever,IndexRetriever,indexData)
	(this, ev,usindex);
}


/*
 * Reintroduce inherited methods
 */

/* method: visit */
boolean   visit(Environment *ev,
		somf_MLinkable* node)
{
   return SOM_ResolveD(this,IndexRetriever,AWDVisitor,visit)
	(this, ev,node);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,IndexRetriever,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,IndexRetriever,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,IndexRetriever,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
IndexRetriever*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,IndexRetriever,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,IndexRetriever,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,IndexRetriever,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,IndexRetriever,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
IndexRetriever*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,IndexRetriever,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
IndexRetriever*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,IndexRetriever,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
IndexRetriever*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,IndexRetriever,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,IndexRetriever,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,IndexRetriever,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,IndexRetriever,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,IndexRetriever,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,IndexRetriever,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,IndexRetriever,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,IndexRetriever,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,IndexRetriever,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,IndexRetriever,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   IndexRetriever_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,IndexRetriever,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,IndexRetriever,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   IndexRetriever_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,IndexRetriever,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,IndexRetriever,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,IndexRetriever,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,IndexRetriever,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,IndexRetriever,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,IndexRetriever,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,IndexRetriever,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* IndexRetriever */



#endif       /* SOM_IndexRetriever_xh */
