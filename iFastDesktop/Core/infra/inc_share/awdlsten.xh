
#ifndef SOM_AWDListener_xh
#define SOM_AWDListener_xh

class AWDListener;

#define AWDListener_MajorVersion 2
#define AWDListener_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <somobj.xh>
#include "awdapp.xh"
#include "awdevent.xh"
#include "awdmsgq.xh"
#include "awdlsten.xh"

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef AWDListener_API
#define AWDListener_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class AWDApplication;
class AWDMessageQueue;
class AWDEvent;
class AWDEventSem;
typedef unsigned long AWDListener_FILTER;
#define AWDListener_FILTER_UNDEFINED 1UL
#define AWDListener_FILTER_SYSTEM_MSGS 2UL
#define AWDListener_FILTER_USER_MSGS 3UL
#define AWDListener_FILTER_PUBLIC_MSGS 4UL
#define AWDListener_FILTER_PRIVATE_MSGS 5UL
#define AWDListener_FILTER_PUBLIC_SYSTEM_MSGS 6UL
#define AWDListener_FILTER_PUBLIC_USER_MSGS 7UL
#define AWDListener_FILTER_PRIVATE_SYSTEM_MSGS 8UL
#define AWDListener_FILTER_PRIVATE_USER_MSGS 9UL
#define AWDListener_DEFAULT_PRIVATEQ_SIZE 100 /* 100 */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_FILTER
    #ifdef FILTER
        #undef FILTER
        #define SOMTGD_FILTER 1
    #else
        #define FILTER AWDListener_FILTER
    #endif /* FILTER */
#endif /* SOMTGD_FILTER */
#ifndef SOMTGD_DEFAULT_PRIVATEQ_SIZE
    #ifdef DEFAULT_PRIVATEQ_SIZE
        #undef DEFAULT_PRIVATEQ_SIZE
        #define SOMTGD_DEFAULT_PRIVATEQ_SIZE 1
    #else
        #define DEFAULT_PRIVATEQ_SIZE AWDListener_DEFAULT_PRIVATEQ_SIZE
    #endif /* DEFAULT_PRIVATEQ_SIZE */
#endif /* SOMTGD_DEFAULT_PRIVATEQ_SIZE */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDListener Class */
SOMEXTERN
#if (defined(SOM_Module_awdlsten_Source) || defined(AWDListener_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDListener))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDListenerNewClass(
		integer4,
		integer4 );

/* The API to the AWDListener class object, and the methods it introduces. */
SOMEXTERN struct AWDListenerClassDataStructure {
	SOMClass *classObject;
	somMToken callback;
	somMToken callbackData;
	somMToken count;
	somMToken createThread;
	somMToken event;
	somMToken initialize;
	somMToken killThread;
	somMToken lastEvent;
	somMToken listenFor;
	somMToken listenForMessage;
	somMToken resumeThread;
	somMToken setCallback;
	somMToken setCallbackData;
	somMToken setLastEvent;
	somMToken sleep;
	somMToken start;
	somMToken stop;
	somMToken suspendThread;
	somMToken withCallback;
	somMToken withCallbackAndData;
	somMToken withCallbackAndInterval;
	somMToken withCallbackAndStart;
	somMToken withCallbackDataAndFilterId;
	somMToken withCallbackDataAndStart;
	somMToken withCallbackDataFilterIdAndStart;
	somMToken setPollingInterval;
	somMToken withCallbackAndStartAndInterval;
	somMToken listenTo;
	somMToken withCallbackAndPrivateQ;
	somMToken withCallbackDataAndPrivateQ;
	somMToken withCallbackDataStartAndPrivateQ;
	somMToken withCallbackDataPrivateQAndSize;
	somMToken withCallbackDataStartPrivateQAndSize;
	somMToken flushMessageQueue;
	somMToken removeFromPrivateQ;
	somMToken getSemSuspend;
	somMToken getSemThreadDead;
	somMToken haraKiriTime;
}
#if !(defined(SOM_Module_awdlsten_Source) || defined(AWDListener_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDListener))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDListenerClassData;
#define _AWDListener AWDListenerClassData.classObject

/* The API to parentMtabs for AWDListener, and the instance data it introduces. */
SOMEXTERN struct AWDListenerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_awdlsten_Source) || defined(AWDListener_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDListener))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDListenerCClassData;

/*
 * -- Typedefs for AWDListener Method Procedures
 */
extern "C" {
typedef void*   SOMLINK somTP_AWDListener_callback(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_callback *somTD_AWDListener_callback;
typedef void*   SOMLINK somTP_AWDListener_callbackData(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_callbackData *somTD_AWDListener_callbackData;
typedef unsigned long   SOMLINK somTP_AWDListener_count(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_count *somTD_AWDListener_count;
typedef void   SOMLINK somTP_AWDListener_createThread(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_createThread *somTD_AWDListener_createThread;
typedef void   SOMLINK somTP_AWDListener_event(AWDListener *somSelf, Environment *ev,
		AWDEvent** returnEvent);
typedef somTP_AWDListener_event *somTD_AWDListener_event;
typedef void   SOMLINK somTP_AWDListener_flushMessageQueue(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_flushMessageQueue *somTD_AWDListener_flushMessageQueue;
typedef AWDEventSem*   SOMLINK somTP_AWDListener_getSemSuspend(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_getSemSuspend *somTD_AWDListener_getSemSuspend;
typedef AWDEventSem*   SOMLINK somTP_AWDListener_getSemThreadDead(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_getSemThreadDead *somTD_AWDListener_getSemThreadDead;
typedef boolean   SOMLINK somTP_AWDListener_haraKiriTime(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_haraKiriTime *somTD_AWDListener_haraKiriTime;
typedef void   SOMLINK somTP_AWDListener_initialize(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_initialize *somTD_AWDListener_initialize;
typedef void   SOMLINK somTP_AWDListener_killThread(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_killThread *somTD_AWDListener_killThread;
typedef unsigned long   SOMLINK somTP_AWDListener_lastEvent(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_lastEvent *somTD_AWDListener_lastEvent;
typedef void   SOMLINK somTP_AWDListener_listenFor(AWDListener *somSelf, Environment *ev,
		AWDListener_FILTER filter);
typedef somTP_AWDListener_listenFor *somTD_AWDListener_listenFor;
typedef void   SOMLINK somTP_AWDListener_listenForMessage(AWDListener *somSelf, Environment *ev,
		unsigned long msgFilterId);
typedef somTP_AWDListener_listenForMessage *somTD_AWDListener_listenForMessage;
typedef void   SOMLINK somTP_AWDListener_listenTo(AWDListener *somSelf, Environment *ev,
		string msgQName);
typedef somTP_AWDListener_listenTo *somTD_AWDListener_listenTo;
typedef void   SOMLINK somTP_AWDListener_resumeThread(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_resumeThread *somTD_AWDListener_resumeThread;
typedef boolean   SOMLINK somTP_AWDListener_removeFromPrivateQ(AWDListener *somSelf, Environment *ev,
		AWDEvent* pEvent);
typedef somTP_AWDListener_removeFromPrivateQ *somTD_AWDListener_removeFromPrivateQ;
typedef void   SOMLINK somTP_AWDListener_setCallback(AWDListener *somSelf, Environment *ev,
		void* pfnCallback);
typedef somTP_AWDListener_setCallback *somTD_AWDListener_setCallback;
typedef void   SOMLINK somTP_AWDListener_setCallbackData(AWDListener *somSelf, Environment *ev,
		void* pvData);
typedef somTP_AWDListener_setCallbackData *somTD_AWDListener_setCallbackData;
typedef void   SOMLINK somTP_AWDListener_setLastEvent(AWDListener *somSelf, Environment *ev,
		unsigned long internalId);
typedef somTP_AWDListener_setLastEvent *somTD_AWDListener_setLastEvent;
typedef void   SOMLINK somTP_AWDListener_setPollingInterval(AWDListener *somSelf, Environment *ev,
		unsigned long ulTimeSlice);
typedef somTP_AWDListener_setPollingInterval *somTD_AWDListener_setPollingInterval;
typedef void   SOMLINK somTP_AWDListener_sleep(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_sleep *somTD_AWDListener_sleep;
typedef void   SOMLINK somTP_AWDListener_start(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_start *somTD_AWDListener_start;
typedef void   SOMLINK somTP_AWDListener_stop(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_stop *somTD_AWDListener_stop;
typedef void   SOMLINK somTP_AWDListener_suspendThread(AWDListener *somSelf, Environment *ev);
typedef somTP_AWDListener_suspendThread *somTD_AWDListener_suspendThread;
typedef void   SOMLINK somTP_AWDListener_withCallback(AWDListener *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback);
typedef somTP_AWDListener_withCallback *somTD_AWDListener_withCallback;
typedef void   SOMLINK somTP_AWDListener_withCallbackAndData(AWDListener *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData);
typedef somTP_AWDListener_withCallbackAndData *somTD_AWDListener_withCallbackAndData;
typedef void   SOMLINK somTP_AWDListener_withCallbackAndInterval(AWDListener *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		unsigned long ulTimeSlice);
typedef somTP_AWDListener_withCallbackAndInterval *somTD_AWDListener_withCallbackAndInterval;
typedef void   SOMLINK somTP_AWDListener_withCallbackAndPrivateQ(AWDListener *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		string msgQName);
typedef somTP_AWDListener_withCallbackAndPrivateQ *somTD_AWDListener_withCallbackAndPrivateQ;
typedef void   SOMLINK somTP_AWDListener_withCallbackAndStart(AWDListener *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		boolean start);
typedef somTP_AWDListener_withCallbackAndStart *somTD_AWDListener_withCallbackAndStart;
typedef void   SOMLINK somTP_AWDListener_withCallbackAndStartAndInterval(AWDListener *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		boolean start,
		unsigned long ulTimeSlice);
typedef somTP_AWDListener_withCallbackAndStartAndInterval *somTD_AWDListener_withCallbackAndStartAndInterval;
typedef void   SOMLINK somTP_AWDListener_withCallbackDataAndFilterId(AWDListener *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData,
		unsigned long filterId);
typedef somTP_AWDListener_withCallbackDataAndFilterId *somTD_AWDListener_withCallbackDataAndFilterId;
typedef void   SOMLINK somTP_AWDListener_withCallbackDataAndPrivateQ(AWDListener *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData,
		string msgQName);
typedef somTP_AWDListener_withCallbackDataAndPrivateQ *somTD_AWDListener_withCallbackDataAndPrivateQ;
typedef void   SOMLINK somTP_AWDListener_withCallbackDataAndStart(AWDListener *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData,
		boolean start);
typedef somTP_AWDListener_withCallbackDataAndStart *somTD_AWDListener_withCallbackDataAndStart;
typedef void   SOMLINK somTP_AWDListener_withCallbackDataFilterIdAndStart(AWDListener *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData,
		unsigned long filterId,
		boolean start);
typedef somTP_AWDListener_withCallbackDataFilterIdAndStart *somTD_AWDListener_withCallbackDataFilterIdAndStart;
typedef void   SOMLINK somTP_AWDListener_withCallbackDataStartAndPrivateQ(AWDListener *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData,
		boolean start,
		string msgQName);
typedef somTP_AWDListener_withCallbackDataStartAndPrivateQ *somTD_AWDListener_withCallbackDataStartAndPrivateQ;
typedef void   SOMLINK somTP_AWDListener_withCallbackDataPrivateQAndSize(AWDListener *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData,
		string msgQName,
		unsigned short usSize);
typedef somTP_AWDListener_withCallbackDataPrivateQAndSize *somTD_AWDListener_withCallbackDataPrivateQAndSize;
typedef void   SOMLINK somTP_AWDListener_withCallbackDataStartPrivateQAndSize(AWDListener *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData,
		boolean start,
		string msgQName,
		unsigned short usSize);
typedef somTP_AWDListener_withCallbackDataStartPrivateQAndSize *somTD_AWDListener_withCallbackDataStartPrivateQAndSize;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_AWDListener_somDefaultInit(AWDListener *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDListener_somDefaultInit *somTD_AWDListener_somDefaultInit;
typedef void   SOMLINK somTP_AWDListener_somDestruct(AWDListener *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDListener_somDestruct *somTD_AWDListener_somDestruct;
typedef void   SOMLINK somTP_AWDListener_somDefaultCopyInit(AWDListener *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDListener_somDefaultCopyInit *somTD_AWDListener_somDefaultCopyInit;
typedef AWDListener*   SOMLINK somTP_AWDListener_somDefaultAssign(AWDListener *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDListener_somDefaultAssign *somTD_AWDListener_somDefaultAssign;
typedef void   SOMLINK somTP_AWDListener_somDefaultConstCopyInit(AWDListener *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDListener_somDefaultConstCopyInit *somTD_AWDListener_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDListener_somDefaultVCopyInit(AWDListener *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDListener_somDefaultVCopyInit *somTD_AWDListener_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDListener_somDefaultConstVCopyInit(AWDListener *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDListener_somDefaultConstVCopyInit *somTD_AWDListener_somDefaultConstVCopyInit;
typedef AWDListener*   SOMLINK somTP_AWDListener_somDefaultConstAssign(AWDListener *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDListener_somDefaultConstAssign *somTD_AWDListener_somDefaultConstAssign;
typedef AWDListener*   SOMLINK somTP_AWDListener_somDefaultVAssign(AWDListener *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDListener_somDefaultVAssign *somTD_AWDListener_somDefaultVAssign;
typedef AWDListener*   SOMLINK somTP_AWDListener_somDefaultConstVAssign(AWDListener *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDListener_somDefaultConstVAssign *somTD_AWDListener_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDListener_somInit(AWDListener *somSelf);
typedef somTP_AWDListener_somInit *somTD_AWDListener_somInit;
typedef void   SOMLINK somTP_AWDListener_somFree(AWDListener *somSelf);
typedef somTP_AWDListener_somFree *somTD_AWDListener_somFree;
typedef void   SOMLINK somTP_AWDListener_somUninit(AWDListener *somSelf);
typedef somTP_AWDListener_somUninit *somTD_AWDListener_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDListener_somGetClass(AWDListener *somSelf);
typedef somTP_AWDListener_somGetClass *somTD_AWDListener_somGetClass;
typedef string   SOMLINK somTP_AWDListener_somGetClassName(AWDListener *somSelf);
typedef somTP_AWDListener_somGetClassName *somTD_AWDListener_somGetClassName;
typedef long   SOMLINK somTP_AWDListener_somGetSize(AWDListener *somSelf);
typedef somTP_AWDListener_somGetSize *somTD_AWDListener_somGetSize;
typedef boolean   SOMLINK somTP_AWDListener_somIsA(AWDListener *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDListener_somIsA *somTD_AWDListener_somIsA;
typedef boolean   SOMLINK somTP_AWDListener_somIsInstanceOf(AWDListener *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDListener_somIsInstanceOf *somTD_AWDListener_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDListener_somRespondsTo(AWDListener *somSelf,
		somId mId);
typedef somTP_AWDListener_somRespondsTo *somTD_AWDListener_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDListener_somDispatch(AWDListener *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDListener_somDispatch *somTD_AWDListener_somDispatch;
typedef boolean   SOMLINK somTP_AWDListener_somClassDispatch(AWDListener *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDListener_somClassDispatch *somTD_AWDListener_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDListener_somCastObj(AWDListener *somSelf,
		SOMClass* cls);
typedef somTP_AWDListener_somCastObj *somTD_AWDListener_somCastObj;
typedef boolean   SOMLINK somTP_AWDListener_somResetObj(AWDListener *somSelf);
typedef somTP_AWDListener_somResetObj *somTD_AWDListener_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDListener_somPrintSelf(AWDListener *somSelf);
typedef somTP_AWDListener_somPrintSelf *somTD_AWDListener_somPrintSelf;
typedef void   SOMLINK somTP_AWDListener_somDumpSelf(AWDListener *somSelf,
		long level);
typedef somTP_AWDListener_somDumpSelf *somTD_AWDListener_somDumpSelf;
typedef void   SOMLINK somTP_AWDListener_somDumpSelfInt(AWDListener *somSelf,
		long level);
typedef somTP_AWDListener_somDumpSelfInt *somTD_AWDListener_somDumpSelfInt;
}

#endif /* AWDListener_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDListener
 */
class AWDListener : public SOMObject
{
public:

// AWDListener::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDListener) AWDListenerNewClass(AWDListener_MajorVersion,AWDListener_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDListener,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDListener));
}

// AWDListener::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDListener()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDListenerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDListener(AWDListener* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDListenerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDListener(const AWDListener* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDListenerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDListener(Environment *ev,void* pfnCallback) 
{
   withCallback(ev,0,pfnCallback);
}

AWDListener(Environment *ev,void* pfnCallback,void* pvData) 
{
   withCallbackAndData(ev,0,pfnCallback,pvData);
}

AWDListener(Environment *ev,void* pfnCallback,unsigned long ulTimeSlice) 
{
   withCallbackAndInterval(ev,0,pfnCallback,ulTimeSlice);
}

AWDListener(Environment *ev,void* pfnCallback,string msgQName) 
{
   withCallbackAndPrivateQ(ev,0,pfnCallback,msgQName);
}

AWDListener(Environment *ev,void* pfnCallback,boolean start) 
{
   withCallbackAndStart(ev,0,pfnCallback,start);
}

AWDListener(Environment *ev,void* pfnCallback,boolean start,unsigned long ulTimeSlice) 
{
   withCallbackAndStartAndInterval(ev,0,pfnCallback,start,ulTimeSlice);
}

AWDListener(Environment *ev,void* pfnCallback,void* pvData,unsigned long filterId) 
{
   withCallbackDataAndFilterId(ev,0,pfnCallback,pvData,filterId);
}

AWDListener(Environment *ev,void* pfnCallback,void* pvData,string msgQName) 
{
   withCallbackDataAndPrivateQ(ev,0,pfnCallback,pvData,msgQName);
}

AWDListener(Environment *ev,void* pfnCallback,void* pvData,boolean start) 
{
   withCallbackDataAndStart(ev,0,pfnCallback,pvData,start);
}

AWDListener(Environment *ev,void* pfnCallback,void* pvData,unsigned long filterId,boolean start) 
{
   withCallbackDataFilterIdAndStart(ev,0,pfnCallback,pvData,filterId,start);
}

AWDListener(Environment *ev,void* pfnCallback,void* pvData,boolean start,string msgQName) 
{
   withCallbackDataStartAndPrivateQ(ev,0,pfnCallback,pvData,start,msgQName);
}

AWDListener(Environment *ev,void* pfnCallback,void* pvData,string msgQName,unsigned short usSize) 
{
   withCallbackDataPrivateQAndSize(ev,0,pfnCallback,pvData,msgQName,usSize);
}

AWDListener(Environment *ev,void* pfnCallback,void* pvData,boolean start,string msgQName,unsigned short usSize) 
{
   withCallbackDataStartPrivateQAndSize(ev,0,pfnCallback,pvData,start,msgQName,usSize);
}


/* method: callback */
void*   callback(Environment *ev)
{
   return SOM_ResolveD(this,AWDListener,AWDListener,callback)
	(this, ev);
}


/* method: callbackData */
void*   callbackData(Environment *ev)
{
   return SOM_ResolveD(this,AWDListener,AWDListener,callbackData)
	(this, ev);
}


/* method: count */
unsigned long   count(Environment *ev)
{
   return SOM_ResolveD(this,AWDListener,AWDListener,count)
	(this, ev);
}


/* method: createThread */
void   createThread(Environment *ev)
{
   SOM_ResolveD(this,AWDListener,AWDListener,createThread)
	(this, ev);
}


/* method: event */
void   event(Environment *ev,
		AWDEvent** returnEvent)
{
   SOM_ResolveD(this,AWDListener,AWDListener,event)
	(this, ev,returnEvent);
}


/* method: flushMessageQueue */
void   flushMessageQueue(Environment *ev)
{
   SOM_ResolveD(this,AWDListener,AWDListener,flushMessageQueue)
	(this, ev);
}


/* method: getSemSuspend */
AWDEventSem*   getSemSuspend(Environment *ev)
{
   return SOM_ResolveD(this,AWDListener,AWDListener,getSemSuspend)
	(this, ev);
}


/* method: getSemThreadDead */
AWDEventSem*   getSemThreadDead(Environment *ev)
{
   return SOM_ResolveD(this,AWDListener,AWDListener,getSemThreadDead)
	(this, ev);
}


/* method: haraKiriTime */
boolean   haraKiriTime(Environment *ev)
{
   return SOM_ResolveD(this,AWDListener,AWDListener,haraKiriTime)
	(this, ev);
}


/* method: initialize */
void   initialize(Environment *ev)
{
   SOM_ResolveD(this,AWDListener,AWDListener,initialize)
	(this, ev);
}


/* method: killThread */
void   killThread(Environment *ev)
{
   SOM_ResolveD(this,AWDListener,AWDListener,killThread)
	(this, ev);
}


/* method: lastEvent */
unsigned long   lastEvent(Environment *ev)
{
   return SOM_ResolveD(this,AWDListener,AWDListener,lastEvent)
	(this, ev);
}


/* method: listenFor */
void   listenFor(Environment *ev,
		AWDListener_FILTER filter)
{
   SOM_ResolveD(this,AWDListener,AWDListener,listenFor)
	(this, ev,filter);
}


/* method: listenForMessage */
void   listenForMessage(Environment *ev,
		unsigned long msgFilterId)
{
   SOM_ResolveD(this,AWDListener,AWDListener,listenForMessage)
	(this, ev,msgFilterId);
}


/* method: listenTo */
void   listenTo(Environment *ev,
		string msgQName)
{
   SOM_ResolveD(this,AWDListener,AWDListener,listenTo)
	(this, ev,msgQName);
}


/* method: resumeThread */
void   resumeThread(Environment *ev)
{
   SOM_ResolveD(this,AWDListener,AWDListener,resumeThread)
	(this, ev);
}


/* method: removeFromPrivateQ */
boolean   removeFromPrivateQ(Environment *ev,
		AWDEvent* pEvent)
{
   return SOM_ResolveD(this,AWDListener,AWDListener,removeFromPrivateQ)
	(this, ev,pEvent);
}


/* method: setCallback */
void   setCallback(Environment *ev,
		void* pfnCallback)
{
   SOM_ResolveD(this,AWDListener,AWDListener,setCallback)
	(this, ev,pfnCallback);
}


/* method: setCallbackData */
void   setCallbackData(Environment *ev,
		void* pvData)
{
   SOM_ResolveD(this,AWDListener,AWDListener,setCallbackData)
	(this, ev,pvData);
}


/* method: setLastEvent */
void   setLastEvent(Environment *ev,
		unsigned long internalId)
{
   SOM_ResolveD(this,AWDListener,AWDListener,setLastEvent)
	(this, ev,internalId);
}


/* method: setPollingInterval */
void   setPollingInterval(Environment *ev,
		unsigned long ulTimeSlice)
{
   SOM_ResolveD(this,AWDListener,AWDListener,setPollingInterval)
	(this, ev,ulTimeSlice);
}


/* method: sleep */
void   sleep(Environment *ev)
{
   SOM_ResolveD(this,AWDListener,AWDListener,sleep)
	(this, ev);
}


/* method: start */
void   start(Environment *ev)
{
   SOM_ResolveD(this,AWDListener,AWDListener,start)
	(this, ev);
}


/* method: stop */
void   stop(Environment *ev)
{
   SOM_ResolveD(this,AWDListener,AWDListener,stop)
	(this, ev);
}


/* method: suspendThread */
void   suspendThread(Environment *ev)
{
   SOM_ResolveD(this,AWDListener,AWDListener,suspendThread)
	(this, ev);
}


/* initializer method: withCallback */
void   withCallback(Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback)
{
   SOM_ResolveD(this,AWDListener,AWDListener,withCallback)
	(this, ev,ctrl,pfnCallback);
}


/* initializer method: withCallbackAndData */
void   withCallbackAndData(Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData)
{
   SOM_ResolveD(this,AWDListener,AWDListener,withCallbackAndData)
	(this, ev,ctrl,pfnCallback,pvData);
}


/* initializer method: withCallbackAndInterval */
void   withCallbackAndInterval(Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		unsigned long ulTimeSlice)
{
   SOM_ResolveD(this,AWDListener,AWDListener,withCallbackAndInterval)
	(this, ev,ctrl,pfnCallback,ulTimeSlice);
}


/* initializer method: withCallbackAndPrivateQ */
void   withCallbackAndPrivateQ(Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		string msgQName)
{
   SOM_ResolveD(this,AWDListener,AWDListener,withCallbackAndPrivateQ)
	(this, ev,ctrl,pfnCallback,msgQName);
}


/* initializer method: withCallbackAndStart */
void   withCallbackAndStart(Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		boolean start)
{
   SOM_ResolveD(this,AWDListener,AWDListener,withCallbackAndStart)
	(this, ev,ctrl,pfnCallback,start);
}


/* initializer method: withCallbackAndStartAndInterval */
void   withCallbackAndStartAndInterval(Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		boolean start,
		unsigned long ulTimeSlice)
{
   SOM_ResolveD(this,AWDListener,AWDListener,withCallbackAndStartAndInterval)
	(this, ev,ctrl,pfnCallback,start,ulTimeSlice);
}


/* initializer method: withCallbackDataAndFilterId */
void   withCallbackDataAndFilterId(Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData,
		unsigned long filterId)
{
   SOM_ResolveD(this,AWDListener,AWDListener,withCallbackDataAndFilterId)
	(this, ev,ctrl,pfnCallback,pvData,filterId);
}


/* initializer method: withCallbackDataAndPrivateQ */
void   withCallbackDataAndPrivateQ(Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData,
		string msgQName)
{
   SOM_ResolveD(this,AWDListener,AWDListener,withCallbackDataAndPrivateQ)
	(this, ev,ctrl,pfnCallback,pvData,msgQName);
}


/* initializer method: withCallbackDataAndStart */
void   withCallbackDataAndStart(Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData,
		boolean start)
{
   SOM_ResolveD(this,AWDListener,AWDListener,withCallbackDataAndStart)
	(this, ev,ctrl,pfnCallback,pvData,start);
}


/* initializer method: withCallbackDataFilterIdAndStart */
void   withCallbackDataFilterIdAndStart(Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData,
		unsigned long filterId,
		boolean start)
{
   SOM_ResolveD(this,AWDListener,AWDListener,withCallbackDataFilterIdAndStart)
	(this, ev,ctrl,pfnCallback,pvData,filterId,start);
}


/* initializer method: withCallbackDataStartAndPrivateQ */
void   withCallbackDataStartAndPrivateQ(Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData,
		boolean start,
		string msgQName)
{
   SOM_ResolveD(this,AWDListener,AWDListener,withCallbackDataStartAndPrivateQ)
	(this, ev,ctrl,pfnCallback,pvData,start,msgQName);
}


/* initializer method: withCallbackDataPrivateQAndSize */
void   withCallbackDataPrivateQAndSize(Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData,
		string msgQName,
		unsigned short usSize)
{
   SOM_ResolveD(this,AWDListener,AWDListener,withCallbackDataPrivateQAndSize)
	(this, ev,ctrl,pfnCallback,pvData,msgQName,usSize);
}


/* initializer method: withCallbackDataStartPrivateQAndSize */
void   withCallbackDataStartPrivateQAndSize(Environment *ev,
		somInitCtrl* ctrl,
		void* pfnCallback,
		void* pvData,
		boolean start,
		string msgQName,
		unsigned short usSize)
{
   SOM_ResolveD(this,AWDListener,AWDListener,withCallbackDataStartPrivateQAndSize)
	(this, ev,ctrl,pfnCallback,pvData,start,msgQName,usSize);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDListener,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDListener,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDListener,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDListener*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDListener,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDListener,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDListener,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDListener,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDListener*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDListener,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDListener*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDListener,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDListener*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDListener,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDListener,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDListener,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDListener,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDListener,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDListener,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDListener,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDListener,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDListener,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDListener,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDListener_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDListener,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDListener,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDListener_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDListener,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDListener,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDListener,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDListener,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDListener,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDListener,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDListener,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDListener */



#endif       /* SOM_AWDListener_xh */
