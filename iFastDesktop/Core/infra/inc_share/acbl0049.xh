
#ifndef SOM_ACBL0049_xh
#define SOM_ACBL0049_xh

class ACBL0049;

#define ACBL0049_MajorVersion 0
#define ACBL0049_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "view.xh"

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDView_xh
#include <view.xh>
#endif

#ifndef ACBL0049_API
#define ACBL0049_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class somf_MLinkable;
class AWDConnection;
class AWDException;
typedef unsigned long ACBL0049_FIELD_FORMAT;
#define ACBL0049_FORMAT_UNDEFINED 1UL
#define ACBL0049_FORMAT_NUMERIC 2UL
#define ACBL0049_FORMAT_ALPHA 3UL
#define ACBL0049_FORMAT_DATETIME 4UL
#define ACBL0049_FORMAT_NUMTEXT 5UL
#define ACBL0049_FORMAT_DATE 6UL
#define ACBL0049_FORMAT_TIME 7UL
#define ACBL0049_FORMAT_CURRENCY 8UL
typedef unsigned long ACBL0049_FIELD_TYPE;
#define ACBL0049_TYPE_UNDEFINED 1UL
#define ACBL0049_TYPE_AWD 2UL
#define ACBL0049_TYPE_LOB 3UL
#define ACBL0049_TYPE_DERIVED 4UL
#define ACBL0049_TYPE_REMOTE 5UL
#define ACBL0049_TYPE_GROUP 6UL
typedef
struct ACBL0049_ACBL0049OUTPUT {
char  return_code[7];
char  return_message[78];
char  view_complete;
} ACBL0049_ACBL0049OUTPUT;
typedef
struct ACBL0049_ACBL0049OUTPUT* ACBL0049_PACBL0049OUTPUT;
typedef
struct ACBL0049_ACBL0049INPUT {
char  countrycd[3];
char  fldtype;
char  cont_flag;
char  cont_fldtype;
char  cont_key[4];
} ACBL0049_ACBL0049INPUT;
typedef
struct ACBL0049_ACBL0049INPUT* ACBL0049_PACBL0049INPUT;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_FIELD_FORMAT
    #ifdef FIELD_FORMAT
        #undef FIELD_FORMAT
        #define SOMTGD_FIELD_FORMAT 1
    #else
        #define FIELD_FORMAT ACBL0049_FIELD_FORMAT
    #endif /* FIELD_FORMAT */
#endif /* SOMTGD_FIELD_FORMAT */
#ifndef SOMTGD_FIELD_TYPE
    #ifdef FIELD_TYPE
        #undef FIELD_TYPE
        #define SOMTGD_FIELD_TYPE 1
    #else
        #define FIELD_TYPE ACBL0049_FIELD_TYPE
    #endif /* FIELD_TYPE */
#endif /* SOMTGD_FIELD_TYPE */
#ifndef SOMTGD_ACBL0049OUTPUT
    #ifdef ACBL0049OUTPUT
        #undef ACBL0049OUTPUT
        #define SOMTGD_ACBL0049OUTPUT 1
    #else
        #define ACBL0049OUTPUT ACBL0049_ACBL0049OUTPUT
    #endif /* ACBL0049OUTPUT */
#endif /* SOMTGD_ACBL0049OUTPUT */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PACBL0049OUTPUT
    #ifdef PACBL0049OUTPUT
        #undef PACBL0049OUTPUT
        #define SOMTGD_PACBL0049OUTPUT 1
    #else
        #define PACBL0049OUTPUT ACBL0049_PACBL0049OUTPUT
    #endif /* PACBL0049OUTPUT */
#endif /* SOMTGD_PACBL0049OUTPUT */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#ifndef SOMTGD_ACBL0049INPUT
    #ifdef ACBL0049INPUT
        #undef ACBL0049INPUT
        #define SOMTGD_ACBL0049INPUT 1
    #else
        #define ACBL0049INPUT ACBL0049_ACBL0049INPUT
    #endif /* ACBL0049INPUT */
#endif /* SOMTGD_ACBL0049INPUT */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PACBL0049INPUT
    #ifdef PACBL0049INPUT
        #undef PACBL0049INPUT
        #define SOMTGD_PACBL0049INPUT 1
    #else
        #define PACBL0049INPUT ACBL0049_PACBL0049INPUT
    #endif /* PACBL0049INPUT */
#endif /* SOMTGD_PACBL0049INPUT */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the ACBL0049 Class */
SOMEXTERN
#if (defined(SOM_Module_acbl0049_Source) || defined(ACBL0049_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0049))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK ACBL0049NewClass(
		integer4,
		integer4 );

/* The API to the ACBL0049 class object, and the methods it introduces. */
SOMEXTERN struct ACBL0049ClassDataStructure {
	SOMClass *classObject;
	somMToken setFieldType;
	somMToken setFieldFormat;
	somMToken setContinuation;
	somMToken setContinuationName;
	somMToken withFieldType;
}
#if !(defined(SOM_Module_acbl0049_Source) || defined(ACBL0049_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0049))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0049ClassData;
#define _ACBL0049 ACBL0049ClassData.classObject

/* The API to parentMtabs for ACBL0049, and the instance data it introduces. */
SOMEXTERN struct ACBL0049CClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_acbl0049_Source) || defined(ACBL0049_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0049))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0049CClassData;

/*
 * -- Typedefs for ACBL0049 Method Procedures
 */
extern "C" {
typedef void   SOMLINK somTP_ACBL0049_setFieldType(ACBL0049 *somSelf, Environment *ev,
		ACBL0049_FIELD_TYPE fldtype);
typedef somTP_ACBL0049_setFieldType *somTD_ACBL0049_setFieldType;
typedef void   SOMLINK somTP_ACBL0049_setFieldFormat(ACBL0049 *somSelf, Environment *ev,
		ACBL0049_FIELD_FORMAT fldformat);
typedef somTP_ACBL0049_setFieldFormat *somTD_ACBL0049_setFieldFormat;
typedef void   SOMLINK somTP_ACBL0049_setContinuation(ACBL0049 *somSelf, Environment *ev,
		boolean fContinue);
typedef somTP_ACBL0049_setContinuation *somTD_ACBL0049_setContinuation;
typedef void   SOMLINK somTP_ACBL0049_setContinuationName(ACBL0049 *somSelf, Environment *ev,
		string pszDataName);
typedef somTP_ACBL0049_setContinuationName *somTD_ACBL0049_setContinuationName;
typedef void   SOMLINK somTP_ACBL0049_withFieldType(ACBL0049 *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		ACBL0049_FIELD_TYPE fldtype);
typedef somTP_ACBL0049_withFieldType *somTD_ACBL0049_withFieldType;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef string   SOMLINK somTP_ACBL0049_app(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_app *somTD_ACBL0049_app;
typedef void   SOMLINK somTP_ACBL0049_setApp(ACBL0049 *somSelf, Environment *ev,
		string app);
typedef somTP_ACBL0049_setApp *somTD_ACBL0049_setApp;
typedef string   SOMLINK somTP_ACBL0049_targetApp(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_targetApp *somTD_ACBL0049_targetApp;
typedef void   SOMLINK somTP_ACBL0049_setTargetApp(ACBL0049 *somSelf, Environment *ev,
		string target);
typedef somTP_ACBL0049_setTargetApp *somTD_ACBL0049_setTargetApp;
typedef string   SOMLINK somTP_ACBL0049_name(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_name *somTD_ACBL0049_name;
typedef void   SOMLINK somTP_ACBL0049_setName(ACBL0049 *somSelf, Environment *ev,
		string aName);
typedef somTP_ACBL0049_setName *somTD_ACBL0049_setName;
typedef unsigned long   SOMLINK somTP_ACBL0049_size(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_size *somTD_ACBL0049_size;
typedef void   SOMLINK somTP_ACBL0049_setSize(ACBL0049 *somSelf, Environment *ev,
		unsigned long size);
typedef somTP_ACBL0049_setSize *somTD_ACBL0049_setSize;
typedef void*   SOMLINK somTP_ACBL0049_sendData(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_sendData *somTD_ACBL0049_sendData;
typedef void   SOMLINK somTP_ACBL0049_setSendData(ACBL0049 *somSelf, Environment *ev,
		void* data);
typedef somTP_ACBL0049_setSendData *somTD_ACBL0049_setSendData;
typedef AWDView_view_type   SOMLINK somTP_ACBL0049_mode(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_mode *somTD_ACBL0049_mode;
typedef void   SOMLINK somTP_ACBL0049_setMode(ACBL0049 *somSelf, Environment *ev,
		AWDView_view_type viewtype);
typedef somTP_ACBL0049_setMode *somTD_ACBL0049_setMode;
typedef unsigned long   SOMLINK somTP_ACBL0049_hwndNotify(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_hwndNotify *somTD_ACBL0049_hwndNotify;
typedef void   SOMLINK somTP_ACBL0049_sethwndNotify(ACBL0049 *somSelf, Environment *ev,
		unsigned long hwndNotify);
typedef somTP_ACBL0049_sethwndNotify *somTD_ACBL0049_sethwndNotify;
typedef unsigned long   SOMLINK somTP_ACBL0049_returnMsg(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_returnMsg *somTD_ACBL0049_returnMsg;
typedef void   SOMLINK somTP_ACBL0049_setReturnMsg(ACBL0049 *somSelf, Environment *ev,
		unsigned long msg);
typedef somTP_ACBL0049_setReturnMsg *somTD_ACBL0049_setReturnMsg;
typedef void*   SOMLINK somTP_ACBL0049_pfnCallBack(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_pfnCallBack *somTD_ACBL0049_pfnCallBack;
typedef void   SOMLINK somTP_ACBL0049_setpfnCallBack(ACBL0049 *somSelf, Environment *ev,
		void* pfnCallback);
typedef somTP_ACBL0049_setpfnCallBack *somTD_ACBL0049_setpfnCallBack;
typedef unsigned long   SOMLINK somTP_ACBL0049_timeOut(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_timeOut *somTD_ACBL0049_timeOut;
typedef void   SOMLINK somTP_ACBL0049_setTimeOut(ACBL0049 *somSelf, Environment *ev,
		unsigned long timeout);
typedef somTP_ACBL0049_setTimeOut *somTD_ACBL0049_setTimeOut;
typedef string   SOMLINK somTP_ACBL0049_host(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_host *somTD_ACBL0049_host;
typedef void   SOMLINK somTP_ACBL0049_setHost(ACBL0049 *somSelf, Environment *ev,
		string host);
typedef somTP_ACBL0049_setHost *somTD_ACBL0049_setHost;
typedef long   SOMLINK somTP_ACBL0049_queue(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_queue *somTD_ACBL0049_queue;
typedef void   SOMLINK somTP_ACBL0049_setMessageQueue(ACBL0049 *somSelf, Environment *ev,
		long que);
typedef somTP_ACBL0049_setMessageQueue *somTD_ACBL0049_setMessageQueue;
typedef void*   SOMLINK somTP_ACBL0049_receiveData(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_receiveData *somTD_ACBL0049_receiveData;
typedef void   SOMLINK somTP_ACBL0049_setReceiveData(ACBL0049 *somSelf, Environment *ev,
		void* pRData);
typedef somTP_ACBL0049_setReceiveData *somTD_ACBL0049_setReceiveData;
typedef unsigned long   SOMLINK somTP_ACBL0049_numRepeats(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_numRepeats *somTD_ACBL0049_numRepeats;
typedef void   SOMLINK somTP_ACBL0049_setNumRepeats(ACBL0049 *somSelf, Environment *ev,
		unsigned long repeats);
typedef somTP_ACBL0049_setNumRepeats *somTD_ACBL0049_setNumRepeats;
typedef unsigned long   SOMLINK somTP_ACBL0049_fixedLength(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_fixedLength *somTD_ACBL0049_fixedLength;
typedef void   SOMLINK somTP_ACBL0049_setFixedLength(ACBL0049 *somSelf, Environment *ev,
		unsigned long length);
typedef somTP_ACBL0049_setFixedLength *somTD_ACBL0049_setFixedLength;
typedef unsigned long   SOMLINK somTP_ACBL0049_repeatLength(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_repeatLength *somTD_ACBL0049_repeatLength;
typedef void   SOMLINK somTP_ACBL0049_setRepeatLength(ACBL0049 *somSelf, Environment *ev,
		unsigned long length);
typedef somTP_ACBL0049_setRepeatLength *somTD_ACBL0049_setRepeatLength;
typedef unsigned long   SOMLINK somTP_ACBL0049_currentIndex(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_currentIndex *somTD_ACBL0049_currentIndex;
typedef void   SOMLINK somTP_ACBL0049_setCurrentIndex(ACBL0049 *somSelf, Environment *ev,
		unsigned long index);
typedef somTP_ACBL0049_setCurrentIndex *somTD_ACBL0049_setCurrentIndex;
typedef void*   SOMLINK somTP_ACBL0049_lastView(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_lastView *somTD_ACBL0049_lastView;
typedef void   SOMLINK somTP_ACBL0049_setLastView(ACBL0049 *somSelf, Environment *ev,
		void* pRData);
typedef somTP_ACBL0049_setLastView *somTD_ACBL0049_setLastView;
typedef void*   SOMLINK somTP_ACBL0049_startData(ACBL0049 *somSelf, Environment *ev,
		string app,
		string targetapp,
		string viewname,
		void* senddata,
		unsigned long size,
		AWDView_view_type mode,
		void* pfn,
		unsigned long timeout,
		unsigned long hwndnotify,
		unsigned long returnmsg,
		long queue,
		string host);
typedef somTP_ACBL0049_startData *somTD_ACBL0049_startData;
typedef void*   SOMLINK somTP_ACBL0049_start(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_start *somTD_ACBL0049_start;
typedef void*   SOMLINK somTP_ACBL0049_getRecord(ACBL0049 *somSelf, Environment *ev,
		void* pv,
		unsigned long userIndex,
		AWDView_index_type indexvalue);
typedef somTP_ACBL0049_getRecord *somTD_ACBL0049_getRecord;
typedef boolean   SOMLINK somTP_ACBL0049_check(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_check *somTD_ACBL0049_check;
typedef void   SOMLINK somTP_ACBL0049_checkForException(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_checkForException *somTD_ACBL0049_checkForException;
typedef void   SOMLINK somTP_ACBL0049_setException(ACBL0049 *somSelf, Environment *ev,
		unsigned short excType,
		string pszFile,
		unsigned short usLine,
		string pszMessage,
		unsigned short usReturnCd);
typedef somTP_ACBL0049_setException *somTD_ACBL0049_setException;
typedef void   SOMLINK somTP_ACBL0049_setViewMessage(ACBL0049 *somSelf, Environment *ev,
		string pszMessage);
typedef somTP_ACBL0049_setViewMessage *somTD_ACBL0049_setViewMessage;
typedef string   SOMLINK somTP_ACBL0049_viewMessage(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_viewMessage *somTD_ACBL0049_viewMessage;
typedef void*   SOMLINK somTP_ACBL0049_startString(ACBL0049 *somSelf, Environment *ev,
		string pszSetupString);
typedef somTP_ACBL0049_startString *somTD_ACBL0049_startString;
typedef boolean   SOMLINK somTP_ACBL0049_scanArgString(ACBL0049 *somSelf, Environment *ev,
		string pszSetupString,
		string pszKey,
		string pszValue,
		unsigned long* pcbValue);
typedef somTP_ACBL0049_scanArgString *somTD_ACBL0049_scanArgString;
typedef boolean   SOMLINK somTP_ACBL0049_isComplete(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_isComplete *somTD_ACBL0049_isComplete;
typedef void*   SOMLINK somTP_ACBL0049_restart(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_restart *somTD_ACBL0049_restart;
typedef void*   SOMLINK somTP_ACBL0049_resolveIndex(ACBL0049 *somSelf, Environment *ev,
		unsigned long* ulIndex);
typedef somTP_ACBL0049_resolveIndex *somTD_ACBL0049_resolveIndex;
typedef boolean   SOMLINK somTP_ACBL0049_addData(ACBL0049 *somSelf, Environment *ev,
		void* pRcvData,
		unsigned long ulNumberofRepeats);
typedef somTP_ACBL0049_addData *somTD_ACBL0049_addData;
typedef void*   SOMLINK somTP_ACBL0049_buffer(ACBL0049 *somSelf, Environment *ev,
		AWDView_index_type index,
		unsigned long theindex,
		unsigned long* pulRepeats);
typedef somTP_ACBL0049_buffer *somTD_ACBL0049_buffer;
typedef unsigned long   SOMLINK somTP_ACBL0049_errCode(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_errCode *somTD_ACBL0049_errCode;
typedef string   SOMLINK somTP_ACBL0049_errMsg(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_errMsg *somTD_ACBL0049_errMsg;
typedef AWDConnection*   SOMLINK somTP_ACBL0049_setConnection(ACBL0049 *somSelf, Environment *ev,
		AWDConnection* con);
typedef somTP_ACBL0049_setConnection *somTD_ACBL0049_setConnection;
typedef AWDConnection*   SOMLINK somTP_ACBL0049_localConnection(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_localConnection *somTD_ACBL0049_localConnection;
typedef void   SOMLINK somTP_ACBL0049_setAutoRestart(ACBL0049 *somSelf, Environment *ev,
		boolean flag);
typedef somTP_ACBL0049_setAutoRestart *somTD_ACBL0049_setAutoRestart;
typedef boolean   SOMLINK somTP_ACBL0049_isAutoRestart(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_isAutoRestart *somTD_ACBL0049_isAutoRestart;
typedef void   SOMLINK somTP_ACBL0049_reset(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_reset *somTD_ACBL0049_reset;
typedef boolean   SOMLINK somTP_ACBL0049_validateInput(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_validateInput *somTD_ACBL0049_validateInput;
typedef void   SOMLINK somTP_ACBL0049_setPersistent(ACBL0049 *somSelf, Environment *ev,
		boolean flag);
typedef somTP_ACBL0049_setPersistent *somTD_ACBL0049_setPersistent;
typedef boolean   SOMLINK somTP_ACBL0049_isPersistent(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_isPersistent *somTD_ACBL0049_isPersistent;
typedef void   SOMLINK somTP_ACBL0049_setInProcess(ACBL0049 *somSelf, Environment *ev,
		boolean flag);
typedef somTP_ACBL0049_setInProcess *somTD_ACBL0049_setInProcess;
typedef boolean   SOMLINK somTP_ACBL0049_isInProcess(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_isInProcess *somTD_ACBL0049_isInProcess;
typedef void   SOMLINK somTP_ACBL0049_setPrimaryRc(ACBL0049 *somSelf, Environment *ev,
		unsigned long rc);
typedef somTP_ACBL0049_setPrimaryRc *somTD_ACBL0049_setPrimaryRc;
typedef unsigned long   SOMLINK somTP_ACBL0049_primaryRc(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_primaryRc *somTD_ACBL0049_primaryRc;
typedef void   SOMLINK somTP_ACBL0049_setSecondaryRc(ACBL0049 *somSelf, Environment *ev,
		unsigned long rc);
typedef somTP_ACBL0049_setSecondaryRc *somTD_ACBL0049_setSecondaryRc;
typedef unsigned long   SOMLINK somTP_ACBL0049_secondaryRc(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_secondaryRc *somTD_ACBL0049_secondaryRc;
typedef void   SOMLINK somTP_ACBL0049_somDefaultInit(ACBL0049 *somSelf,
		somInitCtrl* ctrl);
typedef somTP_ACBL0049_somDefaultInit *somTD_ACBL0049_somDefaultInit;
typedef void   SOMLINK somTP_ACBL0049_somDestruct(ACBL0049 *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_ACBL0049_somDestruct *somTD_ACBL0049_somDestruct;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0049_somfMLinkableInit(ACBL0049 *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_ACBL0049_somfMLinkableInit *somTD_ACBL0049_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0049_somfGetNext(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_somfGetNext *somTD_ACBL0049_somfGetNext;
typedef void   SOMLINK somTP_ACBL0049_somfSetNext(ACBL0049 *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0049_somfSetNext *somTD_ACBL0049_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0049_somfGetPrevious(ACBL0049 *somSelf, Environment *ev);
typedef somTP_ACBL0049_somfGetPrevious *somTD_ACBL0049_somfGetPrevious;
typedef void   SOMLINK somTP_ACBL0049_somfSetPrevious(ACBL0049 *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0049_somfSetPrevious *somTD_ACBL0049_somfSetPrevious;
typedef void   SOMLINK somTP_ACBL0049_somInit(ACBL0049 *somSelf);
typedef somTP_ACBL0049_somInit *somTD_ACBL0049_somInit;
typedef void   SOMLINK somTP_ACBL0049_somDefaultCopyInit(ACBL0049 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049_somDefaultCopyInit *somTD_ACBL0049_somDefaultCopyInit;
typedef ACBL0049*   SOMLINK somTP_ACBL0049_somDefaultAssign(ACBL0049 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049_somDefaultAssign *somTD_ACBL0049_somDefaultAssign;
typedef void   SOMLINK somTP_ACBL0049_somDefaultConstCopyInit(ACBL0049 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049_somDefaultConstCopyInit *somTD_ACBL0049_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ACBL0049_somDefaultVCopyInit(ACBL0049 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049_somDefaultVCopyInit *somTD_ACBL0049_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ACBL0049_somDefaultConstVCopyInit(ACBL0049 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049_somDefaultConstVCopyInit *somTD_ACBL0049_somDefaultConstVCopyInit;
typedef ACBL0049*   SOMLINK somTP_ACBL0049_somDefaultConstAssign(ACBL0049 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049_somDefaultConstAssign *somTD_ACBL0049_somDefaultConstAssign;
typedef ACBL0049*   SOMLINK somTP_ACBL0049_somDefaultVAssign(ACBL0049 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049_somDefaultVAssign *somTD_ACBL0049_somDefaultVAssign;
typedef ACBL0049*   SOMLINK somTP_ACBL0049_somDefaultConstVAssign(ACBL0049 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049_somDefaultConstVAssign *somTD_ACBL0049_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ACBL0049_somFree(ACBL0049 *somSelf);
typedef somTP_ACBL0049_somFree *somTD_ACBL0049_somFree;
typedef void   SOMLINK somTP_ACBL0049_somUninit(ACBL0049 *somSelf);
typedef somTP_ACBL0049_somUninit *somTD_ACBL0049_somUninit;
typedef SOMClass*   SOMLINK somTP_ACBL0049_somGetClass(ACBL0049 *somSelf);
typedef somTP_ACBL0049_somGetClass *somTD_ACBL0049_somGetClass;
typedef string   SOMLINK somTP_ACBL0049_somGetClassName(ACBL0049 *somSelf);
typedef somTP_ACBL0049_somGetClassName *somTD_ACBL0049_somGetClassName;
typedef long   SOMLINK somTP_ACBL0049_somGetSize(ACBL0049 *somSelf);
typedef somTP_ACBL0049_somGetSize *somTD_ACBL0049_somGetSize;
typedef boolean   SOMLINK somTP_ACBL0049_somIsA(ACBL0049 *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0049_somIsA *somTD_ACBL0049_somIsA;
typedef boolean   SOMLINK somTP_ACBL0049_somIsInstanceOf(ACBL0049 *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0049_somIsInstanceOf *somTD_ACBL0049_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ACBL0049_somRespondsTo(ACBL0049 *somSelf,
		somId mId);
typedef somTP_ACBL0049_somRespondsTo *somTD_ACBL0049_somRespondsTo;
typedef boolean   SOMLINK somTP_ACBL0049_somDispatch(ACBL0049 *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0049_somDispatch *somTD_ACBL0049_somDispatch;
typedef boolean   SOMLINK somTP_ACBL0049_somClassDispatch(ACBL0049 *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0049_somClassDispatch *somTD_ACBL0049_somClassDispatch;
typedef boolean   SOMLINK somTP_ACBL0049_somCastObj(ACBL0049 *somSelf,
		SOMClass* cls);
typedef somTP_ACBL0049_somCastObj *somTD_ACBL0049_somCastObj;
typedef boolean   SOMLINK somTP_ACBL0049_somResetObj(ACBL0049 *somSelf);
typedef somTP_ACBL0049_somResetObj *somTD_ACBL0049_somResetObj;
typedef SOMObject*   SOMLINK somTP_ACBL0049_somPrintSelf(ACBL0049 *somSelf);
typedef somTP_ACBL0049_somPrintSelf *somTD_ACBL0049_somPrintSelf;
typedef void   SOMLINK somTP_ACBL0049_somDumpSelf(ACBL0049 *somSelf,
		long level);
typedef somTP_ACBL0049_somDumpSelf *somTD_ACBL0049_somDumpSelf;
typedef void   SOMLINK somTP_ACBL0049_somDumpSelfInt(ACBL0049 *somSelf,
		long level);
typedef somTP_ACBL0049_somDumpSelfInt *somTD_ACBL0049_somDumpSelfInt;
}

#endif /* ACBL0049_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for ACBL0049
 */
class ACBL0049 : public AWDView
{
public:

// ACBL0049::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ACBL0049) ACBL0049NewClass(ACBL0049_MajorVersion,ACBL0049_MinorVersion);
   return (void*)
      SOM_Resolve(_ACBL0049,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ACBL0049));
}

// ACBL0049::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ACBL0049()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0049CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ACBL0049(ACBL0049* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0049CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ACBL0049(const ACBL0049* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0049CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ACBL0049(Environment *ev,ACBL0049_FIELD_TYPE fldtype) 
{
   withFieldType(ev,0,fldtype);
}


/* method: setFieldType */
void   setFieldType(Environment *ev,
		ACBL0049_FIELD_TYPE fldtype)
{
   SOM_ResolveD(this,ACBL0049,ACBL0049,setFieldType)
	(this, ev,fldtype);
}


/* method: setFieldFormat */
void   setFieldFormat(Environment *ev,
		ACBL0049_FIELD_FORMAT fldformat)
{
   SOM_ResolveD(this,ACBL0049,ACBL0049,setFieldFormat)
	(this, ev,fldformat);
}


/* method: setContinuation */
void   setContinuation(Environment *ev,
		boolean fContinue)
{
   SOM_ResolveD(this,ACBL0049,ACBL0049,setContinuation)
	(this, ev,fContinue);
}


/* method: setContinuationName */
void   setContinuationName(Environment *ev,
		string pszDataName)
{
   SOM_ResolveD(this,ACBL0049,ACBL0049,setContinuationName)
	(this, ev,pszDataName);
}


/* initializer method: withFieldType */
void   withFieldType(Environment *ev,
		somInitCtrl* ctrl,
		ACBL0049_FIELD_TYPE fldtype)
{
   SOM_ResolveD(this,ACBL0049,ACBL0049,withFieldType)
	(this, ev,ctrl,fldtype);
}


/*
 * Reintroduce inherited methods
 */

/* method: app */
string   app(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,app)
	(this, ev);
}


/* method: setApp */
void   setApp(Environment *ev,
		string app)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setApp)
	(this, ev,app);
}


/* method: targetApp */
string   targetApp(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,targetApp)
	(this, ev);
}


/* method: setTargetApp */
void   setTargetApp(Environment *ev,
		string target)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setTargetApp)
	(this, ev,target);
}


/* method: name */
string   name(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,name)
	(this, ev);
}


/* method: setName */
void   setName(Environment *ev,
		string aName)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setName)
	(this, ev,aName);
}


/* method: size */
unsigned long   size(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,size)
	(this, ev);
}


/* method: setSize */
void   setSize(Environment *ev,
		unsigned long size)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setSize)
	(this, ev,size);
}


/* method: sendData */
void*   sendData(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,sendData)
	(this, ev);
}


/* method: setSendData */
void   setSendData(Environment *ev,
		void* data)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setSendData)
	(this, ev,data);
}


/* method: mode */
AWDView_view_type   mode(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,mode)
	(this, ev);
}


/* method: setMode */
void   setMode(Environment *ev,
		AWDView_view_type viewtype)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setMode)
	(this, ev,viewtype);
}


/* method: hwndNotify */
unsigned long   hwndNotify(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,hwndNotify)
	(this, ev);
}


/* method: sethwndNotify */
void   sethwndNotify(Environment *ev,
		unsigned long hwndNotify)
{
   SOM_ResolveD(this,ACBL0049,AWDView,sethwndNotify)
	(this, ev,hwndNotify);
}


/* method: returnMsg */
unsigned long   returnMsg(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,returnMsg)
	(this, ev);
}


/* method: setReturnMsg */
void   setReturnMsg(Environment *ev,
		unsigned long msg)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setReturnMsg)
	(this, ev,msg);
}


/* method: pfnCallBack */
void*   pfnCallBack(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,pfnCallBack)
	(this, ev);
}


/* method: setpfnCallBack */
void   setpfnCallBack(Environment *ev,
		void* pfnCallback)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setpfnCallBack)
	(this, ev,pfnCallback);
}


/* method: timeOut */
unsigned long   timeOut(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,timeOut)
	(this, ev);
}


/* method: setTimeOut */
void   setTimeOut(Environment *ev,
		unsigned long timeout)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setTimeOut)
	(this, ev,timeout);
}


/* method: host */
string   host(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,host)
	(this, ev);
}


/* method: setHost */
void   setHost(Environment *ev,
		string host)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setHost)
	(this, ev,host);
}


/* method: queue */
long   queue(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,queue)
	(this, ev);
}


/* method: setMessageQueue */
void   setMessageQueue(Environment *ev,
		long que)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setMessageQueue)
	(this, ev,que);
}


/* method: receiveData */
void*   receiveData(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,receiveData)
	(this, ev);
}


/* method: setReceiveData */
void   setReceiveData(Environment *ev,
		void* pRData)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setReceiveData)
	(this, ev,pRData);
}


/* method: numRepeats */
unsigned long   numRepeats(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,numRepeats)
	(this, ev);
}


/* method: setNumRepeats */
void   setNumRepeats(Environment *ev,
		unsigned long repeats)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setNumRepeats)
	(this, ev,repeats);
}


/* method: fixedLength */
unsigned long   fixedLength(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,fixedLength)
	(this, ev);
}


/* method: setFixedLength */
void   setFixedLength(Environment *ev,
		unsigned long length)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setFixedLength)
	(this, ev,length);
}


/* method: repeatLength */
unsigned long   repeatLength(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,repeatLength)
	(this, ev);
}


/* method: setRepeatLength */
void   setRepeatLength(Environment *ev,
		unsigned long length)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setRepeatLength)
	(this, ev,length);
}


/* method: currentIndex */
unsigned long   currentIndex(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,currentIndex)
	(this, ev);
}


/* method: setCurrentIndex */
void   setCurrentIndex(Environment *ev,
		unsigned long index)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setCurrentIndex)
	(this, ev,index);
}


/* method: lastView */
void*   lastView(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,lastView)
	(this, ev);
}


/* method: setLastView */
void   setLastView(Environment *ev,
		void* pRData)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setLastView)
	(this, ev,pRData);
}


/* method: startData */
void*   startData(Environment *ev,
		string app,
		string targetapp,
		string viewname,
		void* senddata,
		unsigned long size,
		AWDView_view_type mode,
		void* pfn,
		unsigned long timeout,
		unsigned long hwndnotify,
		unsigned long returnmsg,
		long queue,
		string host)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,startData)
	(this, ev,app,targetapp,viewname,senddata,size,mode,pfn,timeout,hwndnotify,returnmsg,queue,host);
}


/* method: start */
void*   start(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,start)
	(this, ev);
}


/* method: getRecord */
void*   getRecord(Environment *ev,
		void* pv,
		unsigned long userIndex,
		AWDView_index_type indexvalue)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,getRecord)
	(this, ev,pv,userIndex,indexvalue);
}


/* method: check */
boolean   check(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,check)
	(this, ev);
}


/* method: checkForException */
void   checkForException(Environment *ev)
{
   SOM_ResolveD(this,ACBL0049,AWDView,checkForException)
	(this, ev);
}


/* method: setException */
void   setException(Environment *ev,
		unsigned short excType,
		string pszFile,
		unsigned short usLine,
		string pszMessage,
		unsigned short usReturnCd)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setException)
	(this, ev,excType,pszFile,usLine,pszMessage,usReturnCd);
}


/* method: setViewMessage */
void   setViewMessage(Environment *ev,
		string pszMessage)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setViewMessage)
	(this, ev,pszMessage);
}


/* method: viewMessage */
string   viewMessage(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,viewMessage)
	(this, ev);
}


/* method: startString */
void*   startString(Environment *ev,
		string pszSetupString)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,startString)
	(this, ev,pszSetupString);
}


/* method: scanArgString */
boolean   scanArgString(Environment *ev,
		string pszSetupString,
		string pszKey,
		string pszValue,
		unsigned long* pcbValue)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,scanArgString)
	(this, ev,pszSetupString,pszKey,pszValue,pcbValue);
}


/* method: isComplete */
boolean   isComplete(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,isComplete)
	(this, ev);
}


/* method: restart */
void*   restart(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,restart)
	(this, ev);
}


/* method: resolveIndex */
void*   resolveIndex(Environment *ev,
		unsigned long* ulIndex)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,resolveIndex)
	(this, ev,ulIndex);
}


/* method: addData */
boolean   addData(Environment *ev,
		void* pRcvData,
		unsigned long ulNumberofRepeats)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,addData)
	(this, ev,pRcvData,ulNumberofRepeats);
}


/* method: buffer */
void*   buffer(Environment *ev,
		AWDView_index_type index,
		unsigned long theindex,
		unsigned long* pulRepeats)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,buffer)
	(this, ev,index,theindex,pulRepeats);
}


/* method: errCode */
unsigned long   errCode(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,errCode)
	(this, ev);
}


/* method: errMsg */
string   errMsg(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,errMsg)
	(this, ev);
}


/* method: setConnection */
AWDConnection*   setConnection(Environment *ev,
		AWDConnection* con)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,setConnection)
	(this, ev,con);
}


/* method: localConnection */
AWDConnection*   localConnection(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,localConnection)
	(this, ev);
}


/* method: setAutoRestart */
void   setAutoRestart(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setAutoRestart)
	(this, ev,flag);
}


/* method: isAutoRestart */
boolean   isAutoRestart(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,isAutoRestart)
	(this, ev);
}


/* method: reset */
void   reset(Environment *ev)
{
   SOM_ResolveD(this,ACBL0049,AWDView,reset)
	(this, ev);
}


/* method: validateInput */
boolean   validateInput(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,validateInput)
	(this, ev);
}


/* method: setPersistent */
void   setPersistent(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setPersistent)
	(this, ev,flag);
}


/* method: isPersistent */
boolean   isPersistent(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,isPersistent)
	(this, ev);
}


/* method: setInProcess */
void   setInProcess(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setInProcess)
	(this, ev,flag);
}


/* method: isInProcess */
boolean   isInProcess(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,isInProcess)
	(this, ev);
}


/* method: setPrimaryRc */
void   setPrimaryRc(Environment *ev,
		unsigned long rc)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setPrimaryRc)
	(this, ev,rc);
}


/* method: primaryRc */
unsigned long   primaryRc(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,primaryRc)
	(this, ev);
}


/* method: setSecondaryRc */
void   setSecondaryRc(Environment *ev,
		unsigned long rc)
{
   SOM_ResolveD(this,ACBL0049,AWDView,setSecondaryRc)
	(this, ev,rc);
}


/* method: secondaryRc */
unsigned long   secondaryRc(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,AWDView,secondaryRc)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0049,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0049,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,ACBL0049,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0049,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0049,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,ACBL0049,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0049,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ACBL0049*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0049,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0049,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0049,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0049,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ACBL0049*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0049,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ACBL0049*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0049,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ACBL0049*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0049,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ACBL0049,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ACBL0049,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,ACBL0049,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,ACBL0049,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,ACBL0049,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0049,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0049,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,ACBL0049,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   ACBL0049_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0049,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0049,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   ACBL0049_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0049,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0049,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,ACBL0049,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,ACBL0049,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,ACBL0049,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ACBL0049,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ACBL0049,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ACBL0049 */



#endif       /* SOM_ACBL0049_xh */

#ifndef SOM_ACBL0049Record_xh
#define SOM_ACBL0049Record_xh

class ACBL0049Record;

#define ACBL0049Record_MajorVersion 0
#define ACBL0049Record_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_RECORD_xh
#include <view.xh>
#endif

#ifndef ACBL0049Record_API
#define ACBL0049Record_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
typedef
struct ACBL0049Record_AWDFIELD {
char  dataname[4];
char  fldformat;
char  fldlength[3];
char  decimals[3];
char  fldmask[75];
char  fldclass[10];
char  reqflag;
char  fldtype;
char  preproc[33];
char  predll[8];
char  postproc[33];
char  postdll[8];
char  validproc[33];
char  validdll[8];
char  listproc[33];
char  listdll[8];
char  uniqueness;
char  groupflag;
char  groupname[4];
char  groupseq;
char  v14name[10];
char  v21name[10];
char  inxflag;
char  inxfldname[10];
char  csdflags[5];
char  mediumname[20];
char  helptext[78];
} ACBL0049Record_AWDFIELD;
typedef
struct ACBL0049Record_AWDFIELD* ACBL0049Record_PAWDFIELD;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_AWDFIELD
    #ifdef AWDFIELD
        #undef AWDFIELD
        #define SOMTGD_AWDFIELD 1
    #else
        #define AWDFIELD ACBL0049Record_AWDFIELD
    #endif /* AWDFIELD */
#endif /* SOMTGD_AWDFIELD */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PAWDFIELD
    #ifdef PAWDFIELD
        #undef PAWDFIELD
        #define SOMTGD_PAWDFIELD 1
    #else
        #define PAWDFIELD ACBL0049Record_PAWDFIELD
    #endif /* PAWDFIELD */
#endif /* SOMTGD_PAWDFIELD */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the ACBL0049Record Class */
SOMEXTERN
#if (defined(SOM_Module_acbl0049_Source) || defined(ACBL0049Record_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0049Record))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK ACBL0049RecordNewClass(
		integer4,
		integer4 );

/* The API to the ACBL0049Record class object, and the methods it introduces. */
SOMEXTERN struct ACBL0049RecordClassDataStructure {
	SOMClass *classObject;
	somMToken name;
	somMToken format;
	somMToken length;
	somMToken decimals;
	somMToken mask;
	somMToken fldclass;
	somMToken isRequired;
	somMToken fldType;
	somMToken preProcedure;
	somMToken preLibrary;
	somMToken postProcedure;
	somMToken postLibrary;
	somMToken validProcedure;
	somMToken validLibrary;
	somMToken listProcedure;
	somMToken listLibrary;
	somMToken uniqueness;
	somMToken isPartofGroup;
	somMToken groupName;
	somMToken groupSequence;
	somMToken v14Name;
	somMToken v21Name;
	somMToken isIndexed;
	somMToken indexNumber;
	somMToken isWorkField;
	somMToken isSourceField;
	somMToken isFolderField;
	somMToken mediumName;
	somMToken helpText;
	somMToken withNonFormattedBuffer;
	somMToken setInfo;
}
#if !(defined(SOM_Module_acbl0049_Source) || defined(ACBL0049Record_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0049Record))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0049RecordClassData;
#define _ACBL0049Record ACBL0049RecordClassData.classObject

/* The API to parentMtabs for ACBL0049Record, and the instance data it introduces. */
SOMEXTERN struct ACBL0049RecordCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_acbl0049_Source) || defined(ACBL0049Record_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0049Record))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0049RecordCClassData;

/*
 * -- Typedefs for ACBL0049Record Method Procedures
 */
extern "C" {
typedef string   SOMLINK somTP_ACBL0049Record_name(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_name *somTD_ACBL0049Record_name;
typedef ACBL0049_FIELD_FORMAT   SOMLINK somTP_ACBL0049Record_format(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_format *somTD_ACBL0049Record_format;
typedef unsigned short   SOMLINK somTP_ACBL0049Record_length(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_length *somTD_ACBL0049Record_length;
typedef unsigned short   SOMLINK somTP_ACBL0049Record_decimals(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_decimals *somTD_ACBL0049Record_decimals;
typedef string   SOMLINK somTP_ACBL0049Record_mask(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_mask *somTD_ACBL0049Record_mask;
typedef string   SOMLINK somTP_ACBL0049Record_fldclass(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_fldclass *somTD_ACBL0049Record_fldclass;
typedef boolean   SOMLINK somTP_ACBL0049Record_isRequired(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_isRequired *somTD_ACBL0049Record_isRequired;
typedef ACBL0049_FIELD_TYPE   SOMLINK somTP_ACBL0049Record_fldType(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_fldType *somTD_ACBL0049Record_fldType;
typedef string   SOMLINK somTP_ACBL0049Record_preProcedure(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_preProcedure *somTD_ACBL0049Record_preProcedure;
typedef string   SOMLINK somTP_ACBL0049Record_preLibrary(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_preLibrary *somTD_ACBL0049Record_preLibrary;
typedef string   SOMLINK somTP_ACBL0049Record_postProcedure(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_postProcedure *somTD_ACBL0049Record_postProcedure;
typedef string   SOMLINK somTP_ACBL0049Record_postLibrary(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_postLibrary *somTD_ACBL0049Record_postLibrary;
typedef string   SOMLINK somTP_ACBL0049Record_validProcedure(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_validProcedure *somTD_ACBL0049Record_validProcedure;
typedef string   SOMLINK somTP_ACBL0049Record_validLibrary(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_validLibrary *somTD_ACBL0049Record_validLibrary;
typedef string   SOMLINK somTP_ACBL0049Record_listProcedure(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_listProcedure *somTD_ACBL0049Record_listProcedure;
typedef string   SOMLINK somTP_ACBL0049Record_listLibrary(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_listLibrary *somTD_ACBL0049Record_listLibrary;
typedef unsigned short   SOMLINK somTP_ACBL0049Record_uniqueness(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_uniqueness *somTD_ACBL0049Record_uniqueness;
typedef boolean   SOMLINK somTP_ACBL0049Record_isPartofGroup(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_isPartofGroup *somTD_ACBL0049Record_isPartofGroup;
typedef string   SOMLINK somTP_ACBL0049Record_groupName(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_groupName *somTD_ACBL0049Record_groupName;
typedef unsigned short   SOMLINK somTP_ACBL0049Record_groupSequence(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_groupSequence *somTD_ACBL0049Record_groupSequence;
typedef string   SOMLINK somTP_ACBL0049Record_v14Name(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_v14Name *somTD_ACBL0049Record_v14Name;
typedef string   SOMLINK somTP_ACBL0049Record_v21Name(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_v21Name *somTD_ACBL0049Record_v21Name;
typedef boolean   SOMLINK somTP_ACBL0049Record_isIndexed(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_isIndexed *somTD_ACBL0049Record_isIndexed;
typedef unsigned short   SOMLINK somTP_ACBL0049Record_indexNumber(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_indexNumber *somTD_ACBL0049Record_indexNumber;
typedef boolean   SOMLINK somTP_ACBL0049Record_isWorkField(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_isWorkField *somTD_ACBL0049Record_isWorkField;
typedef boolean   SOMLINK somTP_ACBL0049Record_isSourceField(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_isSourceField *somTD_ACBL0049Record_isSourceField;
typedef boolean   SOMLINK somTP_ACBL0049Record_isFolderField(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_isFolderField *somTD_ACBL0049Record_isFolderField;
typedef string   SOMLINK somTP_ACBL0049Record_mediumName(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_mediumName *somTD_ACBL0049Record_mediumName;
typedef string   SOMLINK somTP_ACBL0049Record_helpText(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_helpText *somTD_ACBL0049Record_helpText;
typedef void   SOMLINK somTP_ACBL0049Record_setInfo(ACBL0049Record *somSelf, Environment *ev,
		ACBL0049Record_PAWDFIELD pRecord);
typedef somTP_ACBL0049Record_setInfo *somTD_ACBL0049Record_setInfo;
typedef void   SOMLINK somTP_ACBL0049Record_withNonFormattedBuffer(ACBL0049Record *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		ACBL0049Record_PAWDFIELD pRecord);
typedef somTP_ACBL0049Record_withNonFormattedBuffer *somTD_ACBL0049Record_withNonFormattedBuffer;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void*   SOMLINK somTP_ACBL0049Record_buffer(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_buffer *somTD_ACBL0049Record_buffer;
typedef void   SOMLINK somTP_ACBL0049Record_setBuffer(ACBL0049Record *somSelf, Environment *ev,
		void* pv);
typedef somTP_ACBL0049Record_setBuffer *somTD_ACBL0049Record_setBuffer;
typedef void   SOMLINK somTP_ACBL0049Record_somDefaultInit(ACBL0049Record *somSelf,
		somInitCtrl* ctrl);
typedef somTP_ACBL0049Record_somDefaultInit *somTD_ACBL0049Record_somDefaultInit;
typedef void   SOMLINK somTP_ACBL0049Record_somDestruct(ACBL0049Record *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_ACBL0049Record_somDestruct *somTD_ACBL0049Record_somDestruct;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0049Record_somfMLinkableInit(ACBL0049Record *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_ACBL0049Record_somfMLinkableInit *somTD_ACBL0049Record_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0049Record_somfGetNext(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_somfGetNext *somTD_ACBL0049Record_somfGetNext;
typedef void   SOMLINK somTP_ACBL0049Record_somfSetNext(ACBL0049Record *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0049Record_somfSetNext *somTD_ACBL0049Record_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0049Record_somfGetPrevious(ACBL0049Record *somSelf, Environment *ev);
typedef somTP_ACBL0049Record_somfGetPrevious *somTD_ACBL0049Record_somfGetPrevious;
typedef void   SOMLINK somTP_ACBL0049Record_somfSetPrevious(ACBL0049Record *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0049Record_somfSetPrevious *somTD_ACBL0049Record_somfSetPrevious;
typedef void   SOMLINK somTP_ACBL0049Record_somInit(ACBL0049Record *somSelf);
typedef somTP_ACBL0049Record_somInit *somTD_ACBL0049Record_somInit;
typedef void   SOMLINK somTP_ACBL0049Record_somDefaultCopyInit(ACBL0049Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049Record_somDefaultCopyInit *somTD_ACBL0049Record_somDefaultCopyInit;
typedef ACBL0049Record*   SOMLINK somTP_ACBL0049Record_somDefaultAssign(ACBL0049Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049Record_somDefaultAssign *somTD_ACBL0049Record_somDefaultAssign;
typedef void   SOMLINK somTP_ACBL0049Record_somDefaultConstCopyInit(ACBL0049Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049Record_somDefaultConstCopyInit *somTD_ACBL0049Record_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ACBL0049Record_somDefaultVCopyInit(ACBL0049Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049Record_somDefaultVCopyInit *somTD_ACBL0049Record_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ACBL0049Record_somDefaultConstVCopyInit(ACBL0049Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049Record_somDefaultConstVCopyInit *somTD_ACBL0049Record_somDefaultConstVCopyInit;
typedef ACBL0049Record*   SOMLINK somTP_ACBL0049Record_somDefaultConstAssign(ACBL0049Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049Record_somDefaultConstAssign *somTD_ACBL0049Record_somDefaultConstAssign;
typedef ACBL0049Record*   SOMLINK somTP_ACBL0049Record_somDefaultVAssign(ACBL0049Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049Record_somDefaultVAssign *somTD_ACBL0049Record_somDefaultVAssign;
typedef ACBL0049Record*   SOMLINK somTP_ACBL0049Record_somDefaultConstVAssign(ACBL0049Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0049Record_somDefaultConstVAssign *somTD_ACBL0049Record_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ACBL0049Record_somFree(ACBL0049Record *somSelf);
typedef somTP_ACBL0049Record_somFree *somTD_ACBL0049Record_somFree;
typedef void   SOMLINK somTP_ACBL0049Record_somUninit(ACBL0049Record *somSelf);
typedef somTP_ACBL0049Record_somUninit *somTD_ACBL0049Record_somUninit;
typedef SOMClass*   SOMLINK somTP_ACBL0049Record_somGetClass(ACBL0049Record *somSelf);
typedef somTP_ACBL0049Record_somGetClass *somTD_ACBL0049Record_somGetClass;
typedef string   SOMLINK somTP_ACBL0049Record_somGetClassName(ACBL0049Record *somSelf);
typedef somTP_ACBL0049Record_somGetClassName *somTD_ACBL0049Record_somGetClassName;
typedef long   SOMLINK somTP_ACBL0049Record_somGetSize(ACBL0049Record *somSelf);
typedef somTP_ACBL0049Record_somGetSize *somTD_ACBL0049Record_somGetSize;
typedef boolean   SOMLINK somTP_ACBL0049Record_somIsA(ACBL0049Record *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0049Record_somIsA *somTD_ACBL0049Record_somIsA;
typedef boolean   SOMLINK somTP_ACBL0049Record_somIsInstanceOf(ACBL0049Record *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0049Record_somIsInstanceOf *somTD_ACBL0049Record_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ACBL0049Record_somRespondsTo(ACBL0049Record *somSelf,
		somId mId);
typedef somTP_ACBL0049Record_somRespondsTo *somTD_ACBL0049Record_somRespondsTo;
typedef boolean   SOMLINK somTP_ACBL0049Record_somDispatch(ACBL0049Record *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0049Record_somDispatch *somTD_ACBL0049Record_somDispatch;
typedef boolean   SOMLINK somTP_ACBL0049Record_somClassDispatch(ACBL0049Record *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0049Record_somClassDispatch *somTD_ACBL0049Record_somClassDispatch;
typedef boolean   SOMLINK somTP_ACBL0049Record_somCastObj(ACBL0049Record *somSelf,
		SOMClass* cls);
typedef somTP_ACBL0049Record_somCastObj *somTD_ACBL0049Record_somCastObj;
typedef boolean   SOMLINK somTP_ACBL0049Record_somResetObj(ACBL0049Record *somSelf);
typedef somTP_ACBL0049Record_somResetObj *somTD_ACBL0049Record_somResetObj;
typedef SOMObject*   SOMLINK somTP_ACBL0049Record_somPrintSelf(ACBL0049Record *somSelf);
typedef somTP_ACBL0049Record_somPrintSelf *somTD_ACBL0049Record_somPrintSelf;
typedef void   SOMLINK somTP_ACBL0049Record_somDumpSelf(ACBL0049Record *somSelf,
		long level);
typedef somTP_ACBL0049Record_somDumpSelf *somTD_ACBL0049Record_somDumpSelf;
typedef void   SOMLINK somTP_ACBL0049Record_somDumpSelfInt(ACBL0049Record *somSelf,
		long level);
typedef somTP_ACBL0049Record_somDumpSelfInt *somTD_ACBL0049Record_somDumpSelfInt;
}

#endif /* ACBL0049Record_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for ACBL0049Record
 */
class ACBL0049Record : public RECORD
{
public:

// ACBL0049Record::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ACBL0049Record) ACBL0049RecordNewClass(ACBL0049Record_MajorVersion,ACBL0049Record_MinorVersion);
   return (void*)
      SOM_Resolve(_ACBL0049Record,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ACBL0049Record));
}

// ACBL0049Record::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ACBL0049Record()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0049RecordCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ACBL0049Record(ACBL0049Record* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0049RecordCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ACBL0049Record(const ACBL0049Record* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0049RecordCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ACBL0049Record(Environment *ev,ACBL0049Record_PAWDFIELD pRecord) 
{
   withNonFormattedBuffer(ev,0,pRecord);
}


/* method: name */
string   name(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,name)
	(this, ev);
}


/* method: format */
ACBL0049_FIELD_FORMAT   format(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,format)
	(this, ev);
}


/* method: length */
unsigned short   length(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,length)
	(this, ev);
}


/* method: decimals */
unsigned short   decimals(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,decimals)
	(this, ev);
}


/* method: mask */
string   mask(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,mask)
	(this, ev);
}


/* method: fldclass */
string   fldclass(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,fldclass)
	(this, ev);
}


/* method: isRequired */
boolean   isRequired(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,isRequired)
	(this, ev);
}


/* method: fldType */
ACBL0049_FIELD_TYPE   fldType(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,fldType)
	(this, ev);
}


/* method: preProcedure */
string   preProcedure(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,preProcedure)
	(this, ev);
}


/* method: preLibrary */
string   preLibrary(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,preLibrary)
	(this, ev);
}


/* method: postProcedure */
string   postProcedure(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,postProcedure)
	(this, ev);
}


/* method: postLibrary */
string   postLibrary(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,postLibrary)
	(this, ev);
}


/* method: validProcedure */
string   validProcedure(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,validProcedure)
	(this, ev);
}


/* method: validLibrary */
string   validLibrary(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,validLibrary)
	(this, ev);
}


/* method: listProcedure */
string   listProcedure(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,listProcedure)
	(this, ev);
}


/* method: listLibrary */
string   listLibrary(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,listLibrary)
	(this, ev);
}


/* method: uniqueness */
unsigned short   uniqueness(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,uniqueness)
	(this, ev);
}


/* method: isPartofGroup */
boolean   isPartofGroup(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,isPartofGroup)
	(this, ev);
}


/* method: groupName */
string   groupName(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,groupName)
	(this, ev);
}


/* method: groupSequence */
unsigned short   groupSequence(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,groupSequence)
	(this, ev);
}


/* method: v14Name */
string   v14Name(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,v14Name)
	(this, ev);
}


/* method: v21Name */
string   v21Name(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,v21Name)
	(this, ev);
}


/* method: isIndexed */
boolean   isIndexed(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,isIndexed)
	(this, ev);
}


/* method: indexNumber */
unsigned short   indexNumber(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,indexNumber)
	(this, ev);
}


/* method: isWorkField */
boolean   isWorkField(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,isWorkField)
	(this, ev);
}


/* method: isSourceField */
boolean   isSourceField(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,isSourceField)
	(this, ev);
}


/* method: isFolderField */
boolean   isFolderField(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,isFolderField)
	(this, ev);
}


/* method: mediumName */
string   mediumName(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,mediumName)
	(this, ev);
}


/* method: helpText */
string   helpText(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,helpText)
	(this, ev);
}


/* method: setInfo */
void   setInfo(Environment *ev,
		ACBL0049Record_PAWDFIELD pRecord)
{
   SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,setInfo)
	(this, ev,pRecord);
}


/* initializer method: withNonFormattedBuffer */
void   withNonFormattedBuffer(Environment *ev,
		somInitCtrl* ctrl,
		ACBL0049Record_PAWDFIELD pRecord)
{
   SOM_ResolveD(this,ACBL0049Record,ACBL0049Record,withNonFormattedBuffer)
	(this, ev,ctrl,pRecord);
}


/*
 * Reintroduce inherited methods
 */

/* method: buffer */
void*   buffer(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,RECORD,buffer)
	(this, ev);
}


/* method: setBuffer */
void   setBuffer(Environment *ev,
		void* pv)
{
   SOM_ResolveD(this,ACBL0049Record,RECORD,setBuffer)
	(this, ev,pv);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0049Record,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0049Record,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,ACBL0049Record,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0049Record,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0049Record,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0049Record,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,ACBL0049Record,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0049Record,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ACBL0049Record*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0049Record,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0049Record,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0049Record,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0049Record,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ACBL0049Record*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0049Record,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ACBL0049Record*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0049Record,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ACBL0049Record*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0049Record,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ACBL0049Record,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ACBL0049Record,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,ACBL0049Record,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,ACBL0049Record,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,ACBL0049Record,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0049Record,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0049Record,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,ACBL0049Record,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   ACBL0049Record_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0049Record,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0049Record,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   ACBL0049Record_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0049Record,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0049Record,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,ACBL0049Record,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,ACBL0049Record,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,ACBL0049Record,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ACBL0049Record,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ACBL0049Record,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ACBL0049Record */



#endif       /* SOM_ACBL0049Record_xh */
