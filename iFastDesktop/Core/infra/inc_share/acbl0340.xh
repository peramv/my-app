
#ifndef SOM_ACBL0340_xh
#define SOM_ACBL0340_xh

class ACBL0340;

#define ACBL0340_MajorVersion 0
#define ACBL0340_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDView_xh
#include <view.xh>
#endif

#ifndef ACBL0340_API
#define ACBL0340_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class somf_MLinkable;
class AWDConnection;
class AWDException;
typedef
struct ACBL0340_ACBL0340INPUT {
char  countrycd[3];
char  continuation;
char  continuekey[25];
char  continuedataname[4];
} ACBL0340_ACBL0340INPUT;
typedef
struct ACBL0340_ACBL0340INPUT* ACBL0340_PACBL0340INPUT;
typedef
struct ACBL0340_ACBL0340OUTPUT {
char  return_code[7];
char  return_message[78];
char  view_complete;
char  cont_key[25];
char  cont_dataname[4];
} ACBL0340_ACBL0340OUTPUT;
typedef
struct ACBL0340_ACBL0340OUTPUT* ACBL0340_PACBL0340OUTPUT;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ACBL0340INPUT
    #ifdef ACBL0340INPUT
        #undef ACBL0340INPUT
        #define SOMTGD_ACBL0340INPUT 1
    #else
        #define ACBL0340INPUT ACBL0340_ACBL0340INPUT
    #endif /* ACBL0340INPUT */
#endif /* SOMTGD_ACBL0340INPUT */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PACBL0340INPUT
    #ifdef PACBL0340INPUT
        #undef PACBL0340INPUT
        #define SOMTGD_PACBL0340INPUT 1
    #else
        #define PACBL0340INPUT ACBL0340_PACBL0340INPUT
    #endif /* PACBL0340INPUT */
#endif /* SOMTGD_PACBL0340INPUT */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#ifndef SOMTGD_ACBL0340OUTPUT
    #ifdef ACBL0340OUTPUT
        #undef ACBL0340OUTPUT
        #define SOMTGD_ACBL0340OUTPUT 1
    #else
        #define ACBL0340OUTPUT ACBL0340_ACBL0340OUTPUT
    #endif /* ACBL0340OUTPUT */
#endif /* SOMTGD_ACBL0340OUTPUT */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PACBL0340OUTPUT
    #ifdef PACBL0340OUTPUT
        #undef PACBL0340OUTPUT
        #define SOMTGD_PACBL0340OUTPUT 1
    #else
        #define PACBL0340OUTPUT ACBL0340_PACBL0340OUTPUT
    #endif /* PACBL0340OUTPUT */
#endif /* SOMTGD_PACBL0340OUTPUT */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the ACBL0340 Class */
SOMEXTERN
#if (defined(SOM_Module_acbl0340_Source) || defined(ACBL0340_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0340))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK ACBL0340NewClass(
		integer4,
		integer4 );

/* The API to the ACBL0340 class object, and the methods it introduces. */
SOMEXTERN struct ACBL0340ClassDataStructure {
	SOMClass *classObject;
}
#if !(defined(SOM_Module_acbl0340_Source) || defined(ACBL0340_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0340))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0340ClassData;
#define _ACBL0340 ACBL0340ClassData.classObject

/* The API to parentMtabs for ACBL0340, and the instance data it introduces. */
SOMEXTERN struct ACBL0340CClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_acbl0340_Source) || defined(ACBL0340_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0340))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0340CClassData;

/*
 * -- Typedefs for ACBL0340 Method Procedures
 */
extern "C" {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef string   SOMLINK somTP_ACBL0340_app(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_app *somTD_ACBL0340_app;
typedef void   SOMLINK somTP_ACBL0340_setApp(ACBL0340 *somSelf, Environment *ev,
		string app);
typedef somTP_ACBL0340_setApp *somTD_ACBL0340_setApp;
typedef string   SOMLINK somTP_ACBL0340_targetApp(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_targetApp *somTD_ACBL0340_targetApp;
typedef void   SOMLINK somTP_ACBL0340_setTargetApp(ACBL0340 *somSelf, Environment *ev,
		string target);
typedef somTP_ACBL0340_setTargetApp *somTD_ACBL0340_setTargetApp;
typedef string   SOMLINK somTP_ACBL0340_name(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_name *somTD_ACBL0340_name;
typedef void   SOMLINK somTP_ACBL0340_setName(ACBL0340 *somSelf, Environment *ev,
		string aName);
typedef somTP_ACBL0340_setName *somTD_ACBL0340_setName;
typedef unsigned long   SOMLINK somTP_ACBL0340_size(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_size *somTD_ACBL0340_size;
typedef void   SOMLINK somTP_ACBL0340_setSize(ACBL0340 *somSelf, Environment *ev,
		unsigned long size);
typedef somTP_ACBL0340_setSize *somTD_ACBL0340_setSize;
typedef void*   SOMLINK somTP_ACBL0340_sendData(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_sendData *somTD_ACBL0340_sendData;
typedef void   SOMLINK somTP_ACBL0340_setSendData(ACBL0340 *somSelf, Environment *ev,
		void* data);
typedef somTP_ACBL0340_setSendData *somTD_ACBL0340_setSendData;
typedef AWDView_view_type   SOMLINK somTP_ACBL0340_mode(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_mode *somTD_ACBL0340_mode;
typedef void   SOMLINK somTP_ACBL0340_setMode(ACBL0340 *somSelf, Environment *ev,
		AWDView_view_type viewtype);
typedef somTP_ACBL0340_setMode *somTD_ACBL0340_setMode;
typedef unsigned long   SOMLINK somTP_ACBL0340_hwndNotify(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_hwndNotify *somTD_ACBL0340_hwndNotify;
typedef void   SOMLINK somTP_ACBL0340_sethwndNotify(ACBL0340 *somSelf, Environment *ev,
		unsigned long hwndNotify);
typedef somTP_ACBL0340_sethwndNotify *somTD_ACBL0340_sethwndNotify;
typedef unsigned long   SOMLINK somTP_ACBL0340_returnMsg(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_returnMsg *somTD_ACBL0340_returnMsg;
typedef void   SOMLINK somTP_ACBL0340_setReturnMsg(ACBL0340 *somSelf, Environment *ev,
		unsigned long msg);
typedef somTP_ACBL0340_setReturnMsg *somTD_ACBL0340_setReturnMsg;
typedef void*   SOMLINK somTP_ACBL0340_pfnCallBack(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_pfnCallBack *somTD_ACBL0340_pfnCallBack;
typedef void   SOMLINK somTP_ACBL0340_setpfnCallBack(ACBL0340 *somSelf, Environment *ev,
		void* pfnCallback);
typedef somTP_ACBL0340_setpfnCallBack *somTD_ACBL0340_setpfnCallBack;
typedef unsigned long   SOMLINK somTP_ACBL0340_timeOut(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_timeOut *somTD_ACBL0340_timeOut;
typedef void   SOMLINK somTP_ACBL0340_setTimeOut(ACBL0340 *somSelf, Environment *ev,
		unsigned long timeout);
typedef somTP_ACBL0340_setTimeOut *somTD_ACBL0340_setTimeOut;
typedef string   SOMLINK somTP_ACBL0340_host(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_host *somTD_ACBL0340_host;
typedef void   SOMLINK somTP_ACBL0340_setHost(ACBL0340 *somSelf, Environment *ev,
		string host);
typedef somTP_ACBL0340_setHost *somTD_ACBL0340_setHost;
typedef long   SOMLINK somTP_ACBL0340_queue(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_queue *somTD_ACBL0340_queue;
typedef void   SOMLINK somTP_ACBL0340_setMessageQueue(ACBL0340 *somSelf, Environment *ev,
		long que);
typedef somTP_ACBL0340_setMessageQueue *somTD_ACBL0340_setMessageQueue;
typedef void*   SOMLINK somTP_ACBL0340_receiveData(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_receiveData *somTD_ACBL0340_receiveData;
typedef void   SOMLINK somTP_ACBL0340_setReceiveData(ACBL0340 *somSelf, Environment *ev,
		void* pRData);
typedef somTP_ACBL0340_setReceiveData *somTD_ACBL0340_setReceiveData;
typedef unsigned long   SOMLINK somTP_ACBL0340_numRepeats(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_numRepeats *somTD_ACBL0340_numRepeats;
typedef void   SOMLINK somTP_ACBL0340_setNumRepeats(ACBL0340 *somSelf, Environment *ev,
		unsigned long repeats);
typedef somTP_ACBL0340_setNumRepeats *somTD_ACBL0340_setNumRepeats;
typedef unsigned long   SOMLINK somTP_ACBL0340_fixedLength(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_fixedLength *somTD_ACBL0340_fixedLength;
typedef void   SOMLINK somTP_ACBL0340_setFixedLength(ACBL0340 *somSelf, Environment *ev,
		unsigned long length);
typedef somTP_ACBL0340_setFixedLength *somTD_ACBL0340_setFixedLength;
typedef unsigned long   SOMLINK somTP_ACBL0340_repeatLength(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_repeatLength *somTD_ACBL0340_repeatLength;
typedef void   SOMLINK somTP_ACBL0340_setRepeatLength(ACBL0340 *somSelf, Environment *ev,
		unsigned long length);
typedef somTP_ACBL0340_setRepeatLength *somTD_ACBL0340_setRepeatLength;
typedef unsigned long   SOMLINK somTP_ACBL0340_currentIndex(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_currentIndex *somTD_ACBL0340_currentIndex;
typedef void   SOMLINK somTP_ACBL0340_setCurrentIndex(ACBL0340 *somSelf, Environment *ev,
		unsigned long index);
typedef somTP_ACBL0340_setCurrentIndex *somTD_ACBL0340_setCurrentIndex;
typedef void*   SOMLINK somTP_ACBL0340_lastView(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_lastView *somTD_ACBL0340_lastView;
typedef void   SOMLINK somTP_ACBL0340_setLastView(ACBL0340 *somSelf, Environment *ev,
		void* pRData);
typedef somTP_ACBL0340_setLastView *somTD_ACBL0340_setLastView;
typedef void*   SOMLINK somTP_ACBL0340_startData(ACBL0340 *somSelf, Environment *ev,
		string app,
		string targetapp,
		string viewname,
		void* senddata,
		unsigned long size,
		AWDView_view_type mode,
		void* pfn,
		unsigned long timeout,
		unsigned long hwndnotify,
		unsigned long returnmsg,
		long queue,
		string host);
typedef somTP_ACBL0340_startData *somTD_ACBL0340_startData;
typedef void*   SOMLINK somTP_ACBL0340_start(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_start *somTD_ACBL0340_start;
typedef void*   SOMLINK somTP_ACBL0340_getRecord(ACBL0340 *somSelf, Environment *ev,
		void* pv,
		unsigned long userIndex,
		AWDView_index_type indexvalue);
typedef somTP_ACBL0340_getRecord *somTD_ACBL0340_getRecord;
typedef boolean   SOMLINK somTP_ACBL0340_check(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_check *somTD_ACBL0340_check;
typedef void   SOMLINK somTP_ACBL0340_checkForException(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_checkForException *somTD_ACBL0340_checkForException;
typedef void   SOMLINK somTP_ACBL0340_setException(ACBL0340 *somSelf, Environment *ev,
		unsigned short excType,
		string pszFile,
		unsigned short usLine,
		string pszMessage,
		unsigned short usReturnCd);
typedef somTP_ACBL0340_setException *somTD_ACBL0340_setException;
typedef void   SOMLINK somTP_ACBL0340_setViewMessage(ACBL0340 *somSelf, Environment *ev,
		string pszMessage);
typedef somTP_ACBL0340_setViewMessage *somTD_ACBL0340_setViewMessage;
typedef string   SOMLINK somTP_ACBL0340_viewMessage(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_viewMessage *somTD_ACBL0340_viewMessage;
typedef void*   SOMLINK somTP_ACBL0340_startString(ACBL0340 *somSelf, Environment *ev,
		string pszSetupString);
typedef somTP_ACBL0340_startString *somTD_ACBL0340_startString;
typedef boolean   SOMLINK somTP_ACBL0340_scanArgString(ACBL0340 *somSelf, Environment *ev,
		string pszSetupString,
		string pszKey,
		string pszValue,
		unsigned long* pcbValue);
typedef somTP_ACBL0340_scanArgString *somTD_ACBL0340_scanArgString;
typedef boolean   SOMLINK somTP_ACBL0340_isComplete(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_isComplete *somTD_ACBL0340_isComplete;
typedef void*   SOMLINK somTP_ACBL0340_restart(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_restart *somTD_ACBL0340_restart;
typedef void*   SOMLINK somTP_ACBL0340_resolveIndex(ACBL0340 *somSelf, Environment *ev,
		unsigned long* ulIndex);
typedef somTP_ACBL0340_resolveIndex *somTD_ACBL0340_resolveIndex;
typedef boolean   SOMLINK somTP_ACBL0340_addData(ACBL0340 *somSelf, Environment *ev,
		void* pRcvData,
		unsigned long ulNumberofRepeats);
typedef somTP_ACBL0340_addData *somTD_ACBL0340_addData;
typedef void*   SOMLINK somTP_ACBL0340_buffer(ACBL0340 *somSelf, Environment *ev,
		AWDView_index_type index,
		unsigned long theindex,
		unsigned long* pulRepeats);
typedef somTP_ACBL0340_buffer *somTD_ACBL0340_buffer;
typedef unsigned long   SOMLINK somTP_ACBL0340_errCode(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_errCode *somTD_ACBL0340_errCode;
typedef string   SOMLINK somTP_ACBL0340_errMsg(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_errMsg *somTD_ACBL0340_errMsg;
typedef AWDConnection*   SOMLINK somTP_ACBL0340_setConnection(ACBL0340 *somSelf, Environment *ev,
		AWDConnection* con);
typedef somTP_ACBL0340_setConnection *somTD_ACBL0340_setConnection;
typedef AWDConnection*   SOMLINK somTP_ACBL0340_localConnection(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_localConnection *somTD_ACBL0340_localConnection;
typedef void   SOMLINK somTP_ACBL0340_setAutoRestart(ACBL0340 *somSelf, Environment *ev,
		boolean flag);
typedef somTP_ACBL0340_setAutoRestart *somTD_ACBL0340_setAutoRestart;
typedef boolean   SOMLINK somTP_ACBL0340_isAutoRestart(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_isAutoRestart *somTD_ACBL0340_isAutoRestart;
typedef void   SOMLINK somTP_ACBL0340_reset(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_reset *somTD_ACBL0340_reset;
typedef boolean   SOMLINK somTP_ACBL0340_validateInput(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_validateInput *somTD_ACBL0340_validateInput;
typedef void   SOMLINK somTP_ACBL0340_setPersistent(ACBL0340 *somSelf, Environment *ev,
		boolean flag);
typedef somTP_ACBL0340_setPersistent *somTD_ACBL0340_setPersistent;
typedef boolean   SOMLINK somTP_ACBL0340_isPersistent(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_isPersistent *somTD_ACBL0340_isPersistent;
typedef void   SOMLINK somTP_ACBL0340_setInProcess(ACBL0340 *somSelf, Environment *ev,
		boolean flag);
typedef somTP_ACBL0340_setInProcess *somTD_ACBL0340_setInProcess;
typedef boolean   SOMLINK somTP_ACBL0340_isInProcess(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_isInProcess *somTD_ACBL0340_isInProcess;
typedef void   SOMLINK somTP_ACBL0340_setPrimaryRc(ACBL0340 *somSelf, Environment *ev,
		unsigned long rc);
typedef somTP_ACBL0340_setPrimaryRc *somTD_ACBL0340_setPrimaryRc;
typedef unsigned long   SOMLINK somTP_ACBL0340_primaryRc(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_primaryRc *somTD_ACBL0340_primaryRc;
typedef void   SOMLINK somTP_ACBL0340_setSecondaryRc(ACBL0340 *somSelf, Environment *ev,
		unsigned long rc);
typedef somTP_ACBL0340_setSecondaryRc *somTD_ACBL0340_setSecondaryRc;
typedef unsigned long   SOMLINK somTP_ACBL0340_secondaryRc(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_secondaryRc *somTD_ACBL0340_secondaryRc;
typedef void   SOMLINK somTP_ACBL0340_somDefaultInit(ACBL0340 *somSelf,
		somInitCtrl* ctrl);
typedef somTP_ACBL0340_somDefaultInit *somTD_ACBL0340_somDefaultInit;
typedef void   SOMLINK somTP_ACBL0340_somDestruct(ACBL0340 *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_ACBL0340_somDestruct *somTD_ACBL0340_somDestruct;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0340_somfMLinkableInit(ACBL0340 *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_ACBL0340_somfMLinkableInit *somTD_ACBL0340_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0340_somfGetNext(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_somfGetNext *somTD_ACBL0340_somfGetNext;
typedef void   SOMLINK somTP_ACBL0340_somfSetNext(ACBL0340 *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0340_somfSetNext *somTD_ACBL0340_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0340_somfGetPrevious(ACBL0340 *somSelf, Environment *ev);
typedef somTP_ACBL0340_somfGetPrevious *somTD_ACBL0340_somfGetPrevious;
typedef void   SOMLINK somTP_ACBL0340_somfSetPrevious(ACBL0340 *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0340_somfSetPrevious *somTD_ACBL0340_somfSetPrevious;
typedef void   SOMLINK somTP_ACBL0340_somInit(ACBL0340 *somSelf);
typedef somTP_ACBL0340_somInit *somTD_ACBL0340_somInit;
typedef void   SOMLINK somTP_ACBL0340_somDefaultCopyInit(ACBL0340 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340_somDefaultCopyInit *somTD_ACBL0340_somDefaultCopyInit;
typedef ACBL0340*   SOMLINK somTP_ACBL0340_somDefaultAssign(ACBL0340 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340_somDefaultAssign *somTD_ACBL0340_somDefaultAssign;
typedef void   SOMLINK somTP_ACBL0340_somDefaultConstCopyInit(ACBL0340 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340_somDefaultConstCopyInit *somTD_ACBL0340_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ACBL0340_somDefaultVCopyInit(ACBL0340 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340_somDefaultVCopyInit *somTD_ACBL0340_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ACBL0340_somDefaultConstVCopyInit(ACBL0340 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340_somDefaultConstVCopyInit *somTD_ACBL0340_somDefaultConstVCopyInit;
typedef ACBL0340*   SOMLINK somTP_ACBL0340_somDefaultConstAssign(ACBL0340 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340_somDefaultConstAssign *somTD_ACBL0340_somDefaultConstAssign;
typedef ACBL0340*   SOMLINK somTP_ACBL0340_somDefaultVAssign(ACBL0340 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340_somDefaultVAssign *somTD_ACBL0340_somDefaultVAssign;
typedef ACBL0340*   SOMLINK somTP_ACBL0340_somDefaultConstVAssign(ACBL0340 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340_somDefaultConstVAssign *somTD_ACBL0340_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ACBL0340_somFree(ACBL0340 *somSelf);
typedef somTP_ACBL0340_somFree *somTD_ACBL0340_somFree;
typedef void   SOMLINK somTP_ACBL0340_somUninit(ACBL0340 *somSelf);
typedef somTP_ACBL0340_somUninit *somTD_ACBL0340_somUninit;
typedef SOMClass*   SOMLINK somTP_ACBL0340_somGetClass(ACBL0340 *somSelf);
typedef somTP_ACBL0340_somGetClass *somTD_ACBL0340_somGetClass;
typedef string   SOMLINK somTP_ACBL0340_somGetClassName(ACBL0340 *somSelf);
typedef somTP_ACBL0340_somGetClassName *somTD_ACBL0340_somGetClassName;
typedef long   SOMLINK somTP_ACBL0340_somGetSize(ACBL0340 *somSelf);
typedef somTP_ACBL0340_somGetSize *somTD_ACBL0340_somGetSize;
typedef boolean   SOMLINK somTP_ACBL0340_somIsA(ACBL0340 *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0340_somIsA *somTD_ACBL0340_somIsA;
typedef boolean   SOMLINK somTP_ACBL0340_somIsInstanceOf(ACBL0340 *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0340_somIsInstanceOf *somTD_ACBL0340_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ACBL0340_somRespondsTo(ACBL0340 *somSelf,
		somId mId);
typedef somTP_ACBL0340_somRespondsTo *somTD_ACBL0340_somRespondsTo;
typedef boolean   SOMLINK somTP_ACBL0340_somDispatch(ACBL0340 *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0340_somDispatch *somTD_ACBL0340_somDispatch;
typedef boolean   SOMLINK somTP_ACBL0340_somClassDispatch(ACBL0340 *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0340_somClassDispatch *somTD_ACBL0340_somClassDispatch;
typedef boolean   SOMLINK somTP_ACBL0340_somCastObj(ACBL0340 *somSelf,
		SOMClass* cls);
typedef somTP_ACBL0340_somCastObj *somTD_ACBL0340_somCastObj;
typedef boolean   SOMLINK somTP_ACBL0340_somResetObj(ACBL0340 *somSelf);
typedef somTP_ACBL0340_somResetObj *somTD_ACBL0340_somResetObj;
typedef SOMObject*   SOMLINK somTP_ACBL0340_somPrintSelf(ACBL0340 *somSelf);
typedef somTP_ACBL0340_somPrintSelf *somTD_ACBL0340_somPrintSelf;
typedef void   SOMLINK somTP_ACBL0340_somDumpSelf(ACBL0340 *somSelf,
		long level);
typedef somTP_ACBL0340_somDumpSelf *somTD_ACBL0340_somDumpSelf;
typedef void   SOMLINK somTP_ACBL0340_somDumpSelfInt(ACBL0340 *somSelf,
		long level);
typedef somTP_ACBL0340_somDumpSelfInt *somTD_ACBL0340_somDumpSelfInt;
}

#endif /* ACBL0340_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for ACBL0340
 */
class ACBL0340 : public AWDView
{
public:

// ACBL0340::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ACBL0340) ACBL0340NewClass(ACBL0340_MajorVersion,ACBL0340_MinorVersion);
   return (void*)
      SOM_Resolve(_ACBL0340,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ACBL0340));
}

// ACBL0340::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ACBL0340()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0340CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ACBL0340(ACBL0340* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0340CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ACBL0340(const ACBL0340* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0340CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: app */
string   app(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,app)
	(this, ev);
}


/* method: setApp */
void   setApp(Environment *ev,
		string app)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setApp)
	(this, ev,app);
}


/* method: targetApp */
string   targetApp(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,targetApp)
	(this, ev);
}


/* method: setTargetApp */
void   setTargetApp(Environment *ev,
		string target)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setTargetApp)
	(this, ev,target);
}


/* method: name */
string   name(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,name)
	(this, ev);
}


/* method: setName */
void   setName(Environment *ev,
		string aName)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setName)
	(this, ev,aName);
}


/* method: size */
unsigned long   size(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,size)
	(this, ev);
}


/* method: setSize */
void   setSize(Environment *ev,
		unsigned long size)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setSize)
	(this, ev,size);
}


/* method: sendData */
void*   sendData(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,sendData)
	(this, ev);
}


/* method: setSendData */
void   setSendData(Environment *ev,
		void* data)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setSendData)
	(this, ev,data);
}


/* method: mode */
AWDView_view_type   mode(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,mode)
	(this, ev);
}


/* method: setMode */
void   setMode(Environment *ev,
		AWDView_view_type viewtype)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setMode)
	(this, ev,viewtype);
}


/* method: hwndNotify */
unsigned long   hwndNotify(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,hwndNotify)
	(this, ev);
}


/* method: sethwndNotify */
void   sethwndNotify(Environment *ev,
		unsigned long hwndNotify)
{
   SOM_ResolveD(this,ACBL0340,AWDView,sethwndNotify)
	(this, ev,hwndNotify);
}


/* method: returnMsg */
unsigned long   returnMsg(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,returnMsg)
	(this, ev);
}


/* method: setReturnMsg */
void   setReturnMsg(Environment *ev,
		unsigned long msg)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setReturnMsg)
	(this, ev,msg);
}


/* method: pfnCallBack */
void*   pfnCallBack(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,pfnCallBack)
	(this, ev);
}


/* method: setpfnCallBack */
void   setpfnCallBack(Environment *ev,
		void* pfnCallback)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setpfnCallBack)
	(this, ev,pfnCallback);
}


/* method: timeOut */
unsigned long   timeOut(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,timeOut)
	(this, ev);
}


/* method: setTimeOut */
void   setTimeOut(Environment *ev,
		unsigned long timeout)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setTimeOut)
	(this, ev,timeout);
}


/* method: host */
string   host(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,host)
	(this, ev);
}


/* method: setHost */
void   setHost(Environment *ev,
		string host)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setHost)
	(this, ev,host);
}


/* method: queue */
long   queue(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,queue)
	(this, ev);
}


/* method: setMessageQueue */
void   setMessageQueue(Environment *ev,
		long que)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setMessageQueue)
	(this, ev,que);
}


/* method: receiveData */
void*   receiveData(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,receiveData)
	(this, ev);
}


/* method: setReceiveData */
void   setReceiveData(Environment *ev,
		void* pRData)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setReceiveData)
	(this, ev,pRData);
}


/* method: numRepeats */
unsigned long   numRepeats(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,numRepeats)
	(this, ev);
}


/* method: setNumRepeats */
void   setNumRepeats(Environment *ev,
		unsigned long repeats)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setNumRepeats)
	(this, ev,repeats);
}


/* method: fixedLength */
unsigned long   fixedLength(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,fixedLength)
	(this, ev);
}


/* method: setFixedLength */
void   setFixedLength(Environment *ev,
		unsigned long length)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setFixedLength)
	(this, ev,length);
}


/* method: repeatLength */
unsigned long   repeatLength(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,repeatLength)
	(this, ev);
}


/* method: setRepeatLength */
void   setRepeatLength(Environment *ev,
		unsigned long length)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setRepeatLength)
	(this, ev,length);
}


/* method: currentIndex */
unsigned long   currentIndex(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,currentIndex)
	(this, ev);
}


/* method: setCurrentIndex */
void   setCurrentIndex(Environment *ev,
		unsigned long index)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setCurrentIndex)
	(this, ev,index);
}


/* method: lastView */
void*   lastView(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,lastView)
	(this, ev);
}


/* method: setLastView */
void   setLastView(Environment *ev,
		void* pRData)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setLastView)
	(this, ev,pRData);
}


/* method: startData */
void*   startData(Environment *ev,
		string app,
		string targetapp,
		string viewname,
		void* senddata,
		unsigned long size,
		AWDView_view_type mode,
		void* pfn,
		unsigned long timeout,
		unsigned long hwndnotify,
		unsigned long returnmsg,
		long queue,
		string host)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,startData)
	(this, ev,app,targetapp,viewname,senddata,size,mode,pfn,timeout,hwndnotify,returnmsg,queue,host);
}


/* method: start */
void*   start(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,start)
	(this, ev);
}


/* method: getRecord */
void*   getRecord(Environment *ev,
		void* pv,
		unsigned long userIndex,
		AWDView_index_type indexvalue)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,getRecord)
	(this, ev,pv,userIndex,indexvalue);
}


/* method: check */
boolean   check(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,check)
	(this, ev);
}


/* method: checkForException */
void   checkForException(Environment *ev)
{
   SOM_ResolveD(this,ACBL0340,AWDView,checkForException)
	(this, ev);
}


/* method: setException */
void   setException(Environment *ev,
		unsigned short excType,
		string pszFile,
		unsigned short usLine,
		string pszMessage,
		unsigned short usReturnCd)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setException)
	(this, ev,excType,pszFile,usLine,pszMessage,usReturnCd);
}


/* method: setViewMessage */
void   setViewMessage(Environment *ev,
		string pszMessage)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setViewMessage)
	(this, ev,pszMessage);
}


/* method: viewMessage */
string   viewMessage(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,viewMessage)
	(this, ev);
}


/* method: startString */
void*   startString(Environment *ev,
		string pszSetupString)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,startString)
	(this, ev,pszSetupString);
}


/* method: scanArgString */
boolean   scanArgString(Environment *ev,
		string pszSetupString,
		string pszKey,
		string pszValue,
		unsigned long* pcbValue)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,scanArgString)
	(this, ev,pszSetupString,pszKey,pszValue,pcbValue);
}


/* method: isComplete */
boolean   isComplete(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,isComplete)
	(this, ev);
}


/* method: restart */
void*   restart(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,restart)
	(this, ev);
}


/* method: resolveIndex */
void*   resolveIndex(Environment *ev,
		unsigned long* ulIndex)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,resolveIndex)
	(this, ev,ulIndex);
}


/* method: addData */
boolean   addData(Environment *ev,
		void* pRcvData,
		unsigned long ulNumberofRepeats)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,addData)
	(this, ev,pRcvData,ulNumberofRepeats);
}


/* method: buffer */
void*   buffer(Environment *ev,
		AWDView_index_type index,
		unsigned long theindex,
		unsigned long* pulRepeats)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,buffer)
	(this, ev,index,theindex,pulRepeats);
}


/* method: errCode */
unsigned long   errCode(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,errCode)
	(this, ev);
}


/* method: errMsg */
string   errMsg(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,errMsg)
	(this, ev);
}


/* method: setConnection */
AWDConnection*   setConnection(Environment *ev,
		AWDConnection* con)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,setConnection)
	(this, ev,con);
}


/* method: localConnection */
AWDConnection*   localConnection(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,localConnection)
	(this, ev);
}


/* method: setAutoRestart */
void   setAutoRestart(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setAutoRestart)
	(this, ev,flag);
}


/* method: isAutoRestart */
boolean   isAutoRestart(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,isAutoRestart)
	(this, ev);
}


/* method: reset */
void   reset(Environment *ev)
{
   SOM_ResolveD(this,ACBL0340,AWDView,reset)
	(this, ev);
}


/* method: validateInput */
boolean   validateInput(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,validateInput)
	(this, ev);
}


/* method: setPersistent */
void   setPersistent(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setPersistent)
	(this, ev,flag);
}


/* method: isPersistent */
boolean   isPersistent(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,isPersistent)
	(this, ev);
}


/* method: setInProcess */
void   setInProcess(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setInProcess)
	(this, ev,flag);
}


/* method: isInProcess */
boolean   isInProcess(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,isInProcess)
	(this, ev);
}


/* method: setPrimaryRc */
void   setPrimaryRc(Environment *ev,
		unsigned long rc)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setPrimaryRc)
	(this, ev,rc);
}


/* method: primaryRc */
unsigned long   primaryRc(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,primaryRc)
	(this, ev);
}


/* method: setSecondaryRc */
void   setSecondaryRc(Environment *ev,
		unsigned long rc)
{
   SOM_ResolveD(this,ACBL0340,AWDView,setSecondaryRc)
	(this, ev,rc);
}


/* method: secondaryRc */
unsigned long   secondaryRc(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,AWDView,secondaryRc)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0340,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0340,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,ACBL0340,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0340,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0340,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,ACBL0340,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0340,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ACBL0340*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0340,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0340,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0340,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0340,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ACBL0340*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0340,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ACBL0340*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0340,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ACBL0340*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0340,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ACBL0340,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ACBL0340,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,ACBL0340,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,ACBL0340,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,ACBL0340,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0340,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0340,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,ACBL0340,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   ACBL0340_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0340,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0340,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   ACBL0340_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0340,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0340,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,ACBL0340,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,ACBL0340,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,ACBL0340,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ACBL0340,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ACBL0340,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ACBL0340 */



#endif       /* SOM_ACBL0340_xh */

#ifndef SOM_ACBL0340Record_xh
#define SOM_ACBL0340Record_xh

class ACBL0340Record;

#define ACBL0340Record_MajorVersion 0
#define ACBL0340Record_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_RECORD_xh
#include <view.xh>
#endif

#ifndef ACBL0340Record_API
#define ACBL0340Record_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
typedef
struct ACBL0340Record_ACBL0340BUFFER {
char  key[25];
char  dataname[4];
char  datavalue[75];
} ACBL0340Record_ACBL0340BUFFER;
typedef
struct ACBL0340Record_ACBL0340BUFFER* ACBL0340Record_PACBL0340BUFFER;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ACBL0340BUFFER
    #ifdef ACBL0340BUFFER
        #undef ACBL0340BUFFER
        #define SOMTGD_ACBL0340BUFFER 1
    #else
        #define ACBL0340BUFFER ACBL0340Record_ACBL0340BUFFER
    #endif /* ACBL0340BUFFER */
#endif /* SOMTGD_ACBL0340BUFFER */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PACBL0340BUFFER
    #ifdef PACBL0340BUFFER
        #undef PACBL0340BUFFER
        #define SOMTGD_PACBL0340BUFFER 1
    #else
        #define PACBL0340BUFFER ACBL0340Record_PACBL0340BUFFER
    #endif /* PACBL0340BUFFER */
#endif /* SOMTGD_PACBL0340BUFFER */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the ACBL0340Record Class */
SOMEXTERN
#if (defined(SOM_Module_acbl0340_Source) || defined(ACBL0340Record_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0340Record))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK ACBL0340RecordNewClass(
		integer4,
		integer4 );

/* The API to the ACBL0340Record class object, and the methods it introduces. */
SOMEXTERN struct ACBL0340RecordClassDataStructure {
	SOMClass *classObject;
	somMToken key;
	somMToken name;
	somMToken setInfo;
	somMToken value;
}
#if !(defined(SOM_Module_acbl0340_Source) || defined(ACBL0340Record_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0340Record))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0340RecordClassData;
#define _ACBL0340Record ACBL0340RecordClassData.classObject

/* The API to parentMtabs for ACBL0340Record, and the instance data it introduces. */
SOMEXTERN struct ACBL0340RecordCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_acbl0340_Source) || defined(ACBL0340Record_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0340Record))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0340RecordCClassData;

/*
 * -- Typedefs for ACBL0340Record Method Procedures
 */
extern "C" {
typedef char*   SOMLINK somTP_ACBL0340Record_key(ACBL0340Record *somSelf, Environment *ev);
typedef somTP_ACBL0340Record_key *somTD_ACBL0340Record_key;
typedef char*   SOMLINK somTP_ACBL0340Record_name(ACBL0340Record *somSelf, Environment *ev);
typedef somTP_ACBL0340Record_name *somTD_ACBL0340Record_name;
typedef void   SOMLINK somTP_ACBL0340Record_setInfo(ACBL0340Record *somSelf, Environment *ev,
		ACBL0340Record_ACBL0340BUFFER* pRecord);
typedef somTP_ACBL0340Record_setInfo *somTD_ACBL0340Record_setInfo;
typedef char*   SOMLINK somTP_ACBL0340Record_value(ACBL0340Record *somSelf, Environment *ev);
typedef somTP_ACBL0340Record_value *somTD_ACBL0340Record_value;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void*   SOMLINK somTP_ACBL0340Record_buffer(ACBL0340Record *somSelf, Environment *ev);
typedef somTP_ACBL0340Record_buffer *somTD_ACBL0340Record_buffer;
typedef void   SOMLINK somTP_ACBL0340Record_setBuffer(ACBL0340Record *somSelf, Environment *ev,
		void* pv);
typedef somTP_ACBL0340Record_setBuffer *somTD_ACBL0340Record_setBuffer;
typedef void   SOMLINK somTP_ACBL0340Record_somDefaultInit(ACBL0340Record *somSelf,
		somInitCtrl* ctrl);
typedef somTP_ACBL0340Record_somDefaultInit *somTD_ACBL0340Record_somDefaultInit;
typedef void   SOMLINK somTP_ACBL0340Record_somDestruct(ACBL0340Record *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_ACBL0340Record_somDestruct *somTD_ACBL0340Record_somDestruct;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0340Record_somfMLinkableInit(ACBL0340Record *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_ACBL0340Record_somfMLinkableInit *somTD_ACBL0340Record_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0340Record_somfGetNext(ACBL0340Record *somSelf, Environment *ev);
typedef somTP_ACBL0340Record_somfGetNext *somTD_ACBL0340Record_somfGetNext;
typedef void   SOMLINK somTP_ACBL0340Record_somfSetNext(ACBL0340Record *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0340Record_somfSetNext *somTD_ACBL0340Record_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0340Record_somfGetPrevious(ACBL0340Record *somSelf, Environment *ev);
typedef somTP_ACBL0340Record_somfGetPrevious *somTD_ACBL0340Record_somfGetPrevious;
typedef void   SOMLINK somTP_ACBL0340Record_somfSetPrevious(ACBL0340Record *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0340Record_somfSetPrevious *somTD_ACBL0340Record_somfSetPrevious;
typedef void   SOMLINK somTP_ACBL0340Record_somInit(ACBL0340Record *somSelf);
typedef somTP_ACBL0340Record_somInit *somTD_ACBL0340Record_somInit;
typedef void   SOMLINK somTP_ACBL0340Record_somDefaultCopyInit(ACBL0340Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340Record_somDefaultCopyInit *somTD_ACBL0340Record_somDefaultCopyInit;
typedef ACBL0340Record*   SOMLINK somTP_ACBL0340Record_somDefaultAssign(ACBL0340Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340Record_somDefaultAssign *somTD_ACBL0340Record_somDefaultAssign;
typedef void   SOMLINK somTP_ACBL0340Record_somDefaultConstCopyInit(ACBL0340Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340Record_somDefaultConstCopyInit *somTD_ACBL0340Record_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ACBL0340Record_somDefaultVCopyInit(ACBL0340Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340Record_somDefaultVCopyInit *somTD_ACBL0340Record_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ACBL0340Record_somDefaultConstVCopyInit(ACBL0340Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340Record_somDefaultConstVCopyInit *somTD_ACBL0340Record_somDefaultConstVCopyInit;
typedef ACBL0340Record*   SOMLINK somTP_ACBL0340Record_somDefaultConstAssign(ACBL0340Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340Record_somDefaultConstAssign *somTD_ACBL0340Record_somDefaultConstAssign;
typedef ACBL0340Record*   SOMLINK somTP_ACBL0340Record_somDefaultVAssign(ACBL0340Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340Record_somDefaultVAssign *somTD_ACBL0340Record_somDefaultVAssign;
typedef ACBL0340Record*   SOMLINK somTP_ACBL0340Record_somDefaultConstVAssign(ACBL0340Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0340Record_somDefaultConstVAssign *somTD_ACBL0340Record_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ACBL0340Record_somFree(ACBL0340Record *somSelf);
typedef somTP_ACBL0340Record_somFree *somTD_ACBL0340Record_somFree;
typedef void   SOMLINK somTP_ACBL0340Record_somUninit(ACBL0340Record *somSelf);
typedef somTP_ACBL0340Record_somUninit *somTD_ACBL0340Record_somUninit;
typedef SOMClass*   SOMLINK somTP_ACBL0340Record_somGetClass(ACBL0340Record *somSelf);
typedef somTP_ACBL0340Record_somGetClass *somTD_ACBL0340Record_somGetClass;
typedef string   SOMLINK somTP_ACBL0340Record_somGetClassName(ACBL0340Record *somSelf);
typedef somTP_ACBL0340Record_somGetClassName *somTD_ACBL0340Record_somGetClassName;
typedef long   SOMLINK somTP_ACBL0340Record_somGetSize(ACBL0340Record *somSelf);
typedef somTP_ACBL0340Record_somGetSize *somTD_ACBL0340Record_somGetSize;
typedef boolean   SOMLINK somTP_ACBL0340Record_somIsA(ACBL0340Record *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0340Record_somIsA *somTD_ACBL0340Record_somIsA;
typedef boolean   SOMLINK somTP_ACBL0340Record_somIsInstanceOf(ACBL0340Record *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0340Record_somIsInstanceOf *somTD_ACBL0340Record_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ACBL0340Record_somRespondsTo(ACBL0340Record *somSelf,
		somId mId);
typedef somTP_ACBL0340Record_somRespondsTo *somTD_ACBL0340Record_somRespondsTo;
typedef boolean   SOMLINK somTP_ACBL0340Record_somDispatch(ACBL0340Record *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0340Record_somDispatch *somTD_ACBL0340Record_somDispatch;
typedef boolean   SOMLINK somTP_ACBL0340Record_somClassDispatch(ACBL0340Record *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0340Record_somClassDispatch *somTD_ACBL0340Record_somClassDispatch;
typedef boolean   SOMLINK somTP_ACBL0340Record_somCastObj(ACBL0340Record *somSelf,
		SOMClass* cls);
typedef somTP_ACBL0340Record_somCastObj *somTD_ACBL0340Record_somCastObj;
typedef boolean   SOMLINK somTP_ACBL0340Record_somResetObj(ACBL0340Record *somSelf);
typedef somTP_ACBL0340Record_somResetObj *somTD_ACBL0340Record_somResetObj;
typedef SOMObject*   SOMLINK somTP_ACBL0340Record_somPrintSelf(ACBL0340Record *somSelf);
typedef somTP_ACBL0340Record_somPrintSelf *somTD_ACBL0340Record_somPrintSelf;
typedef void   SOMLINK somTP_ACBL0340Record_somDumpSelf(ACBL0340Record *somSelf,
		long level);
typedef somTP_ACBL0340Record_somDumpSelf *somTD_ACBL0340Record_somDumpSelf;
typedef void   SOMLINK somTP_ACBL0340Record_somDumpSelfInt(ACBL0340Record *somSelf,
		long level);
typedef somTP_ACBL0340Record_somDumpSelfInt *somTD_ACBL0340Record_somDumpSelfInt;
}

#endif /* ACBL0340Record_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for ACBL0340Record
 */
class ACBL0340Record : public RECORD
{
public:

// ACBL0340Record::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ACBL0340Record) ACBL0340RecordNewClass(ACBL0340Record_MajorVersion,ACBL0340Record_MinorVersion);
   return (void*)
      SOM_Resolve(_ACBL0340Record,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ACBL0340Record));
}

// ACBL0340Record::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ACBL0340Record()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0340RecordCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ACBL0340Record(ACBL0340Record* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0340RecordCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ACBL0340Record(const ACBL0340Record* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0340RecordCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: key */
char*   key(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340Record,ACBL0340Record,key)
	(this, ev);
}


/* method: name */
char*   name(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340Record,ACBL0340Record,name)
	(this, ev);
}


/* method: setInfo */
void   setInfo(Environment *ev,
		ACBL0340Record_ACBL0340BUFFER* pRecord)
{
   SOM_ResolveD(this,ACBL0340Record,ACBL0340Record,setInfo)
	(this, ev,pRecord);
}


/* method: value */
char*   value(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340Record,ACBL0340Record,value)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: buffer */
void*   buffer(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340Record,RECORD,buffer)
	(this, ev);
}


/* method: setBuffer */
void   setBuffer(Environment *ev,
		void* pv)
{
   SOM_ResolveD(this,ACBL0340Record,RECORD,setBuffer)
	(this, ev,pv);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0340Record,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0340Record,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,ACBL0340Record,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340Record,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0340Record,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0340Record,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0340Record,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,ACBL0340Record,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0340Record,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ACBL0340Record*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0340Record,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0340Record,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0340Record,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0340Record,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ACBL0340Record*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0340Record,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ACBL0340Record*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0340Record,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ACBL0340Record*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0340Record,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ACBL0340Record,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ACBL0340Record,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,ACBL0340Record,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,ACBL0340Record,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,ACBL0340Record,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0340Record,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0340Record,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,ACBL0340Record,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   ACBL0340Record_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0340Record,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0340Record,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   ACBL0340Record_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0340Record,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0340Record,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,ACBL0340Record,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,ACBL0340Record,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,ACBL0340Record,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ACBL0340Record,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ACBL0340Record,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ACBL0340Record */



#endif       /* SOM_ACBL0340Record_xh */
