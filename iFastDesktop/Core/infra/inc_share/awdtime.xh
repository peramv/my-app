
#ifndef SOM_AWDTimeField_xh
#define SOM_AWDTimeField_xh

class AWDTimeField;

#define AWDTimeField_MajorVersion 2
#define AWDTimeField_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "field.xh"

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDBaseField_xh
#include <field.xh>
#endif

#ifndef AWDTimeField_API
#define AWDTimeField_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class AWDConnection;
class AWDException;
class AWDApplication;
class AWDPersist;
class AWDBase;
class iostream;
class AWDData;
class AWDTime;

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDTimeField Class */
SOMEXTERN
#if (defined(SOM_Module_awdtime_Source) || defined(AWDTimeField_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTimeField))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDTimeFieldNewClass(
		integer4,
		integer4 );

/* The API to the AWDTimeField class object, and the methods it introduces. */
SOMEXTERN struct AWDTimeFieldClassDataStructure {
	SOMClass *classObject;
	somMToken hours;
	somMToken initTimeFieldObject;
	somMToken minutes;
	somMToken seconds;
	somMToken setHours;
	somMToken setMinutes;
	somMToken setSeconds;
	somMToken verifyHours;
	somMToken verifyMinutes;
	somMToken verifySeconds;
	somMToken time_withName;
	somMToken time_withNameandNumber;
	somMToken time_withNameandValue;
	somMToken time_withNameNumberandStatus;
	somMToken time_withNameNumberandValue;
	somMToken time_withNameNumberStatusandValue;
	somMToken time_withPersist;
	somMToken time_withField;
}
#if !(defined(SOM_Module_awdtime_Source) || defined(AWDTimeField_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTimeField))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDTimeFieldClassData;
#define _AWDTimeField AWDTimeFieldClassData.classObject

/* The API to parentMtabs for AWDTimeField, and the instance data it introduces. */
SOMEXTERN struct AWDTimeFieldCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_awdtime_Source) || defined(AWDTimeField_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTimeField))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDTimeFieldCClassData;

/*
 * -- Typedefs for AWDTimeField Method Procedures
 */
extern "C" {
typedef string   SOMLINK somTP_AWDTimeField_hours(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_hours *somTD_AWDTimeField_hours;
typedef void   SOMLINK somTP_AWDTimeField_initTimeFieldObject(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_initTimeFieldObject *somTD_AWDTimeField_initTimeFieldObject;
typedef string   SOMLINK somTP_AWDTimeField_minutes(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_minutes *somTD_AWDTimeField_minutes;
typedef string   SOMLINK somTP_AWDTimeField_seconds(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_seconds *somTD_AWDTimeField_seconds;
typedef boolean   SOMLINK somTP_AWDTimeField_setHours(AWDTimeField *somSelf, Environment *ev,
		string hours);
typedef somTP_AWDTimeField_setHours *somTD_AWDTimeField_setHours;
typedef boolean   SOMLINK somTP_AWDTimeField_setMinutes(AWDTimeField *somSelf, Environment *ev,
		string minutes);
typedef somTP_AWDTimeField_setMinutes *somTD_AWDTimeField_setMinutes;
typedef boolean   SOMLINK somTP_AWDTimeField_setSeconds(AWDTimeField *somSelf, Environment *ev,
		string seconds);
typedef somTP_AWDTimeField_setSeconds *somTD_AWDTimeField_setSeconds;
typedef boolean   SOMLINK somTP_AWDTimeField_verifyHours(AWDTimeField *somSelf, Environment *ev,
		string hours);
typedef somTP_AWDTimeField_verifyHours *somTD_AWDTimeField_verifyHours;
typedef boolean   SOMLINK somTP_AWDTimeField_verifyMinutes(AWDTimeField *somSelf, Environment *ev,
		string minutes);
typedef somTP_AWDTimeField_verifyMinutes *somTD_AWDTimeField_verifyMinutes;
typedef boolean   SOMLINK somTP_AWDTimeField_verifySeconds(AWDTimeField *somSelf, Environment *ev,
		string seconds);
typedef somTP_AWDTimeField_verifySeconds *somTD_AWDTimeField_verifySeconds;
typedef void   SOMLINK somTP_AWDTimeField_time_withName(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName);
typedef somTP_AWDTimeField_time_withName *somTD_AWDTimeField_time_withName;
typedef void   SOMLINK somTP_AWDTimeField_time_withNameandNumber(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber);
typedef somTP_AWDTimeField_time_withNameandNumber *somTD_AWDTimeField_time_withNameandNumber;
typedef void   SOMLINK somTP_AWDTimeField_time_withNameandValue(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		string value);
typedef somTP_AWDTimeField_time_withNameandValue *somTD_AWDTimeField_time_withNameandValue;
typedef void   SOMLINK somTP_AWDTimeField_time_withNameNumberandStatus(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		AWDBaseField_STATUS status);
typedef somTP_AWDTimeField_time_withNameNumberandStatus *somTD_AWDTimeField_time_withNameNumberandStatus;
typedef void   SOMLINK somTP_AWDTimeField_time_withNameNumberandValue(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		string value);
typedef somTP_AWDTimeField_time_withNameNumberandValue *somTD_AWDTimeField_time_withNameNumberandValue;
typedef void   SOMLINK somTP_AWDTimeField_time_withNameNumberStatusandValue(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		AWDBaseField_STATUS status,
		string value);
typedef somTP_AWDTimeField_time_withNameNumberStatusandValue *somTD_AWDTimeField_time_withNameNumberStatusandValue;
typedef void   SOMLINK somTP_AWDTimeField_time_withPersist(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDTimeField_time_withPersist *somTD_AWDTimeField_time_withPersist;
typedef void   SOMLINK somTP_AWDTimeField_time_withField(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDBaseField* pField);
typedef somTP_AWDTimeField_time_withField *somTD_AWDTimeField_time_withField;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef string   SOMLINK somTP_AWDTimeField_asString(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_asString *somTD_AWDTimeField_asString;
typedef string   SOMLINK somTP_AWDTimeField_asStringWithMask(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_asStringWithMask *somTD_AWDTimeField_asStringWithMask;
typedef string   SOMLINK somTP_AWDTimeField_blankMask(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_blankMask *somTD_AWDTimeField_blankMask;
typedef string   SOMLINK somTP_AWDTimeField_blankString(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_blankString *somTD_AWDTimeField_blankString;
typedef short   SOMLINK somTP_AWDTimeField_compare(AWDTimeField *somSelf, Environment *ev,
		AWDBaseField* pField);
typedef somTP_AWDTimeField_compare *somTD_AWDTimeField_compare;
typedef boolean   SOMLINK somTP_AWDTimeField_determineStatus(AWDTimeField *somSelf, Environment *ev,
		string newValue);
typedef somTP_AWDTimeField_determineStatus *somTD_AWDTimeField_determineStatus;
typedef unsigned short   SOMLINK somTP_AWDTimeField_displayLength(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_displayLength *somTD_AWDTimeField_displayLength;
typedef void   SOMLINK somTP_AWDTimeField_fetchProperties(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_fetchProperties *somTD_AWDTimeField_fetchProperties;
typedef AWDBaseField_STATUS   SOMLINK somTP_AWDTimeField_getStatus(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_getStatus *somTD_AWDTimeField_getStatus;
typedef void   SOMLINK somTP_AWDTimeField_initBaseFieldObject(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_initBaseFieldObject *somTD_AWDTimeField_initBaseFieldObject;
typedef boolean   SOMLINK somTP_AWDTimeField_isBlank(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_isBlank *somTD_AWDTimeField_isBlank;
typedef boolean   SOMLINK somTP_AWDTimeField_isChanged(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_isChanged *somTD_AWDTimeField_isChanged;
typedef boolean   SOMLINK somTP_AWDTimeField_isNew(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_isNew *somTD_AWDTimeField_isNew;
typedef string   SOMLINK somTP_AWDTimeField_mask(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_mask *somTD_AWDTimeField_mask;
typedef AWDMask*   SOMLINK somTP_AWDTimeField_maskObject(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_maskObject *somTD_AWDTimeField_maskObject;
typedef string   SOMLINK somTP_AWDTimeField_name(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_name *somTD_AWDTimeField_name;
typedef void   SOMLINK somTP_AWDTimeField_newMask(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_newMask *somTD_AWDTimeField_newMask;
typedef boolean   SOMLINK somTP_AWDTimeField_padValue(AWDTimeField *somSelf, Environment *ev,
		AWDMask_DIRECTION direction);
typedef somTP_AWDTimeField_padValue *somTD_AWDTimeField_padValue;
typedef AWDData*   SOMLINK somTP_AWDTimeField_properties(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_properties *somTD_AWDTimeField_properties;
typedef unsigned short   SOMLINK somTP_AWDTimeField_sequenceNumber(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_sequenceNumber *somTD_AWDTimeField_sequenceNumber;
typedef boolean   SOMLINK somTP_AWDTimeField_setLocalMask(AWDTimeField *somSelf, Environment *ev,
		string localmask);
typedef somTP_AWDTimeField_setLocalMask *somTD_AWDTimeField_setLocalMask;
typedef boolean   SOMLINK somTP_AWDTimeField_setName(AWDTimeField *somSelf, Environment *ev,
		string aName);
typedef somTP_AWDTimeField_setName *somTD_AWDTimeField_setName;
typedef void   SOMLINK somTP_AWDTimeField_setSequenceNumber(AWDTimeField *somSelf, Environment *ev,
		unsigned short seqNumber);
typedef somTP_AWDTimeField_setSequenceNumber *somTD_AWDTimeField_setSequenceNumber;
typedef void   SOMLINK somTP_AWDTimeField_setStatus(AWDTimeField *somSelf, Environment *ev,
		AWDBaseField_STATUS status);
typedef somTP_AWDTimeField_setStatus *somTD_AWDTimeField_setStatus;
typedef boolean   SOMLINK somTP_AWDTimeField_setValueFromMaskedString(AWDTimeField *somSelf, Environment *ev,
		string value);
typedef somTP_AWDTimeField_setValueFromMaskedString *somTD_AWDTimeField_setValueFromMaskedString;
typedef boolean   SOMLINK somTP_AWDTimeField_setValueFromString(AWDTimeField *somSelf, Environment *ev,
		string value);
typedef somTP_AWDTimeField_setValueFromString *somTD_AWDTimeField_setValueFromString;
typedef unsigned short   SOMLINK somTP_AWDTimeField_storeLength(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_storeLength *somTD_AWDTimeField_storeLength;
typedef boolean   SOMLINK somTP_AWDTimeField_verify(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_verify *somTD_AWDTimeField_verify;
typedef void   SOMLINK somTP_AWDTimeField_withName(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName);
typedef somTP_AWDTimeField_withName *somTD_AWDTimeField_withName;
typedef void   SOMLINK somTP_AWDTimeField_withNameandNumber(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber);
typedef somTP_AWDTimeField_withNameandNumber *somTD_AWDTimeField_withNameandNumber;
typedef void   SOMLINK somTP_AWDTimeField_withNameandValue(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		string value);
typedef somTP_AWDTimeField_withNameandValue *somTD_AWDTimeField_withNameandValue;
typedef void   SOMLINK somTP_AWDTimeField_withNameNumberandStatus(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		AWDBaseField_STATUS status);
typedef somTP_AWDTimeField_withNameNumberandStatus *somTD_AWDTimeField_withNameNumberandStatus;
typedef void   SOMLINK somTP_AWDTimeField_withNameNumberandValue(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		string value);
typedef somTP_AWDTimeField_withNameNumberandValue *somTD_AWDTimeField_withNameNumberandValue;
typedef void   SOMLINK somTP_AWDTimeField_withNameNumberStatusandValue(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		AWDBaseField_STATUS status,
		string value);
typedef somTP_AWDTimeField_withNameNumberStatusandValue *somTD_AWDTimeField_withNameNumberStatusandValue;
typedef void   SOMLINK somTP_AWDTimeField_withPersist(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDTimeField_withPersist *somTD_AWDTimeField_withPersist;
typedef void   SOMLINK somTP_AWDTimeField_withField(AWDTimeField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDBaseField* pField);
typedef somTP_AWDTimeField_withField *somTD_AWDTimeField_withField;
typedef boolean   SOMLINK somTP_AWDTimeField_hasLocalMask(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_hasLocalMask *somTD_AWDTimeField_hasLocalMask;
typedef void   SOMLINK somTP_AWDTimeField_somDefaultInit(AWDTimeField *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDTimeField_somDefaultInit *somTD_AWDTimeField_somDefaultInit;
typedef void   SOMLINK somTP_AWDTimeField_somDestruct(AWDTimeField *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDTimeField_somDestruct *somTD_AWDTimeField_somDestruct;
typedef void   SOMLINK somTP_AWDTimeField_store(AWDTimeField *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDTimeField_store *somTD_AWDTimeField_store;
typedef void   SOMLINK somTP_AWDTimeField_restore(AWDTimeField *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDTimeField_restore *somTD_AWDTimeField_restore;
typedef somf_MLinkable*   SOMLINK somTP_AWDTimeField_somfMLinkableInit(AWDTimeField *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_AWDTimeField_somfMLinkableInit *somTD_AWDTimeField_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_AWDTimeField_somfGetNext(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_somfGetNext *somTD_AWDTimeField_somfGetNext;
typedef void   SOMLINK somTP_AWDTimeField_somfSetNext(AWDTimeField *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDTimeField_somfSetNext *somTD_AWDTimeField_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_AWDTimeField_somfGetPrevious(AWDTimeField *somSelf, Environment *ev);
typedef somTP_AWDTimeField_somfGetPrevious *somTD_AWDTimeField_somfGetPrevious;
typedef void   SOMLINK somTP_AWDTimeField_somfSetPrevious(AWDTimeField *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDTimeField_somfSetPrevious *somTD_AWDTimeField_somfSetPrevious;
typedef void   SOMLINK somTP_AWDTimeField_somInit(AWDTimeField *somSelf);
typedef somTP_AWDTimeField_somInit *somTD_AWDTimeField_somInit;
typedef void   SOMLINK somTP_AWDTimeField_somDefaultCopyInit(AWDTimeField *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTimeField_somDefaultCopyInit *somTD_AWDTimeField_somDefaultCopyInit;
typedef AWDTimeField*   SOMLINK somTP_AWDTimeField_somDefaultAssign(AWDTimeField *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTimeField_somDefaultAssign *somTD_AWDTimeField_somDefaultAssign;
typedef void   SOMLINK somTP_AWDTimeField_somDefaultConstCopyInit(AWDTimeField *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTimeField_somDefaultConstCopyInit *somTD_AWDTimeField_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDTimeField_somDefaultVCopyInit(AWDTimeField *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTimeField_somDefaultVCopyInit *somTD_AWDTimeField_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDTimeField_somDefaultConstVCopyInit(AWDTimeField *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTimeField_somDefaultConstVCopyInit *somTD_AWDTimeField_somDefaultConstVCopyInit;
typedef AWDTimeField*   SOMLINK somTP_AWDTimeField_somDefaultConstAssign(AWDTimeField *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTimeField_somDefaultConstAssign *somTD_AWDTimeField_somDefaultConstAssign;
typedef AWDTimeField*   SOMLINK somTP_AWDTimeField_somDefaultVAssign(AWDTimeField *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTimeField_somDefaultVAssign *somTD_AWDTimeField_somDefaultVAssign;
typedef AWDTimeField*   SOMLINK somTP_AWDTimeField_somDefaultConstVAssign(AWDTimeField *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTimeField_somDefaultConstVAssign *somTD_AWDTimeField_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDTimeField_somFree(AWDTimeField *somSelf);
typedef somTP_AWDTimeField_somFree *somTD_AWDTimeField_somFree;
typedef void   SOMLINK somTP_AWDTimeField_somUninit(AWDTimeField *somSelf);
typedef somTP_AWDTimeField_somUninit *somTD_AWDTimeField_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDTimeField_somGetClass(AWDTimeField *somSelf);
typedef somTP_AWDTimeField_somGetClass *somTD_AWDTimeField_somGetClass;
typedef string   SOMLINK somTP_AWDTimeField_somGetClassName(AWDTimeField *somSelf);
typedef somTP_AWDTimeField_somGetClassName *somTD_AWDTimeField_somGetClassName;
typedef long   SOMLINK somTP_AWDTimeField_somGetSize(AWDTimeField *somSelf);
typedef somTP_AWDTimeField_somGetSize *somTD_AWDTimeField_somGetSize;
typedef boolean   SOMLINK somTP_AWDTimeField_somIsA(AWDTimeField *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDTimeField_somIsA *somTD_AWDTimeField_somIsA;
typedef boolean   SOMLINK somTP_AWDTimeField_somIsInstanceOf(AWDTimeField *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDTimeField_somIsInstanceOf *somTD_AWDTimeField_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDTimeField_somRespondsTo(AWDTimeField *somSelf,
		somId mId);
typedef somTP_AWDTimeField_somRespondsTo *somTD_AWDTimeField_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDTimeField_somDispatch(AWDTimeField *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDTimeField_somDispatch *somTD_AWDTimeField_somDispatch;
typedef boolean   SOMLINK somTP_AWDTimeField_somClassDispatch(AWDTimeField *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDTimeField_somClassDispatch *somTD_AWDTimeField_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDTimeField_somCastObj(AWDTimeField *somSelf,
		SOMClass* cls);
typedef somTP_AWDTimeField_somCastObj *somTD_AWDTimeField_somCastObj;
typedef boolean   SOMLINK somTP_AWDTimeField_somResetObj(AWDTimeField *somSelf);
typedef somTP_AWDTimeField_somResetObj *somTD_AWDTimeField_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDTimeField_somPrintSelf(AWDTimeField *somSelf);
typedef somTP_AWDTimeField_somPrintSelf *somTD_AWDTimeField_somPrintSelf;
typedef void   SOMLINK somTP_AWDTimeField_somDumpSelf(AWDTimeField *somSelf,
		long level);
typedef somTP_AWDTimeField_somDumpSelf *somTD_AWDTimeField_somDumpSelf;
typedef void   SOMLINK somTP_AWDTimeField_somDumpSelfInt(AWDTimeField *somSelf,
		long level);
typedef somTP_AWDTimeField_somDumpSelfInt *somTD_AWDTimeField_somDumpSelfInt;
}

#endif /* AWDTimeField_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDTimeField
 */
class AWDTimeField : public AWDBaseField
{
public:

// AWDTimeField::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDTimeField) AWDTimeFieldNewClass(AWDTimeField_MajorVersion,AWDTimeField_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDTimeField,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDTimeField));
}

// AWDTimeField::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDTimeField()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTimeFieldCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDTimeField(AWDTimeField* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTimeFieldCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDTimeField(const AWDTimeField* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTimeFieldCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDTimeField(Environment *ev,string aName) 
{
   time_withName(ev,0,aName);
}

AWDTimeField(Environment *ev,string aName,unsigned short seqNumber) 
{
   time_withNameandNumber(ev,0,aName,seqNumber);
}

AWDTimeField(Environment *ev,string aName,string value) 
{
   time_withNameandValue(ev,0,aName,value);
}

AWDTimeField(Environment *ev,string aName,unsigned short seqNumber,AWDBaseField_STATUS status) 
{
   time_withNameNumberandStatus(ev,0,aName,seqNumber,status);
}

AWDTimeField(Environment *ev,string aName,unsigned short seqNumber,string value) 
{
   time_withNameNumberandValue(ev,0,aName,seqNumber,value);
}

AWDTimeField(Environment *ev,string aName,unsigned short seqNumber,AWDBaseField_STATUS status,string value) 
{
   time_withNameNumberStatusandValue(ev,0,aName,seqNumber,status,value);
}

AWDTimeField(Environment *ev,AWDPersist* pPersist) 
{
   time_withPersist(ev,0,pPersist);
}

AWDTimeField(Environment *ev,AWDBaseField* pField) 
{
   time_withField(ev,0,pField);
}


/* method: hours */
string   hours(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDTimeField,hours)
	(this, ev);
}


/* method: initTimeFieldObject */
void   initTimeFieldObject(Environment *ev)
{
   SOM_ResolveD(this,AWDTimeField,AWDTimeField,initTimeFieldObject)
	(this, ev);
}


/* method: minutes */
string   minutes(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDTimeField,minutes)
	(this, ev);
}


/* method: seconds */
string   seconds(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDTimeField,seconds)
	(this, ev);
}


/* method: setHours */
boolean   setHours(Environment *ev,
		string hours)
{
   return SOM_ResolveD(this,AWDTimeField,AWDTimeField,setHours)
	(this, ev,hours);
}


/* method: setMinutes */
boolean   setMinutes(Environment *ev,
		string minutes)
{
   return SOM_ResolveD(this,AWDTimeField,AWDTimeField,setMinutes)
	(this, ev,minutes);
}


/* method: setSeconds */
boolean   setSeconds(Environment *ev,
		string seconds)
{
   return SOM_ResolveD(this,AWDTimeField,AWDTimeField,setSeconds)
	(this, ev,seconds);
}


/* method: verifyHours */
boolean   verifyHours(Environment *ev,
		string hours)
{
   return SOM_ResolveD(this,AWDTimeField,AWDTimeField,verifyHours)
	(this, ev,hours);
}


/* method: verifyMinutes */
boolean   verifyMinutes(Environment *ev,
		string minutes)
{
   return SOM_ResolveD(this,AWDTimeField,AWDTimeField,verifyMinutes)
	(this, ev,minutes);
}


/* method: verifySeconds */
boolean   verifySeconds(Environment *ev,
		string seconds)
{
   return SOM_ResolveD(this,AWDTimeField,AWDTimeField,verifySeconds)
	(this, ev,seconds);
}


/* initializer method: time_withName */
void   time_withName(Environment *ev,
		somInitCtrl* ctrl,
		string aName)
{
   SOM_ResolveD(this,AWDTimeField,AWDTimeField,time_withName)
	(this, ev,ctrl,aName);
}


/* initializer method: time_withNameandNumber */
void   time_withNameandNumber(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber)
{
   SOM_ResolveD(this,AWDTimeField,AWDTimeField,time_withNameandNumber)
	(this, ev,ctrl,aName,seqNumber);
}


/* initializer method: time_withNameandValue */
void   time_withNameandValue(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		string value)
{
   SOM_ResolveD(this,AWDTimeField,AWDTimeField,time_withNameandValue)
	(this, ev,ctrl,aName,value);
}


/* initializer method: time_withNameNumberandStatus */
void   time_withNameNumberandStatus(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		AWDBaseField_STATUS status)
{
   SOM_ResolveD(this,AWDTimeField,AWDTimeField,time_withNameNumberandStatus)
	(this, ev,ctrl,aName,seqNumber,status);
}


/* initializer method: time_withNameNumberandValue */
void   time_withNameNumberandValue(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		string value)
{
   SOM_ResolveD(this,AWDTimeField,AWDTimeField,time_withNameNumberandValue)
	(this, ev,ctrl,aName,seqNumber,value);
}


/* initializer method: time_withNameNumberStatusandValue */
void   time_withNameNumberStatusandValue(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		AWDBaseField_STATUS status,
		string value)
{
   SOM_ResolveD(this,AWDTimeField,AWDTimeField,time_withNameNumberStatusandValue)
	(this, ev,ctrl,aName,seqNumber,status,value);
}


/* initializer method: time_withPersist */
void   time_withPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDTimeField,AWDTimeField,time_withPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: time_withField */
void   time_withField(Environment *ev,
		somInitCtrl* ctrl,
		AWDBaseField* pField)
{
   SOM_ResolveD(this,AWDTimeField,AWDTimeField,time_withField)
	(this, ev,ctrl,pField);
}


/*
 * Reintroduce inherited methods
 */

/* method: asString */
string   asString(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,asString)
	(this, ev);
}


/* method: asStringWithMask */
string   asStringWithMask(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,asStringWithMask)
	(this, ev);
}


/* method: blankMask */
string   blankMask(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,blankMask)
	(this, ev);
}


/* method: blankString */
string   blankString(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,blankString)
	(this, ev);
}


/* method: compare */
short   compare(Environment *ev,
		AWDBaseField* pField)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,compare)
	(this, ev,pField);
}


/* method: determineStatus */
boolean   determineStatus(Environment *ev,
		string newValue)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,determineStatus)
	(this, ev,newValue);
}


/* method: displayLength */
unsigned short   displayLength(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,displayLength)
	(this, ev);
}


/* method: fetchProperties */
void   fetchProperties(Environment *ev)
{
   SOM_ResolveD(this,AWDTimeField,AWDBaseField,fetchProperties)
	(this, ev);
}


/* method: getStatus */
AWDBaseField_STATUS   getStatus(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,getStatus)
	(this, ev);
}


/* method: initBaseFieldObject */
void   initBaseFieldObject(Environment *ev)
{
   SOM_ResolveD(this,AWDTimeField,AWDBaseField,initBaseFieldObject)
	(this, ev);
}


/* method: isBlank */
boolean   isBlank(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,isBlank)
	(this, ev);
}


/* method: isChanged */
boolean   isChanged(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,isChanged)
	(this, ev);
}


/* method: isNew */
boolean   isNew(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,isNew)
	(this, ev);
}


/* method: mask */
string   mask(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,mask)
	(this, ev);
}


/* method: maskObject */
AWDMask*   maskObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,maskObject)
	(this, ev);
}


/* method: name */
string   name(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,name)
	(this, ev);
}


/* method: newMask */
void   newMask(Environment *ev)
{
   SOM_ResolveD(this,AWDTimeField,AWDBaseField,newMask)
	(this, ev);
}


/* method: padValue */
boolean   padValue(Environment *ev,
		AWDMask_DIRECTION direction)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,padValue)
	(this, ev,direction);
}


/* method: properties */
AWDData*   properties(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,properties)
	(this, ev);
}


/* method: sequenceNumber */
unsigned short   sequenceNumber(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,sequenceNumber)
	(this, ev);
}


/* method: setLocalMask */
boolean   setLocalMask(Environment *ev,
		string localmask)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,setLocalMask)
	(this, ev,localmask);
}


/* method: setName */
boolean   setName(Environment *ev,
		string aName)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,setName)
	(this, ev,aName);
}


/* method: setSequenceNumber */
void   setSequenceNumber(Environment *ev,
		unsigned short seqNumber)
{
   SOM_ResolveD(this,AWDTimeField,AWDBaseField,setSequenceNumber)
	(this, ev,seqNumber);
}


/* method: setStatus */
void   setStatus(Environment *ev,
		AWDBaseField_STATUS status)
{
   SOM_ResolveD(this,AWDTimeField,AWDBaseField,setStatus)
	(this, ev,status);
}


/* method: setValueFromMaskedString */
boolean   setValueFromMaskedString(Environment *ev,
		string value)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,setValueFromMaskedString)
	(this, ev,value);
}


/* method: setValueFromString */
boolean   setValueFromString(Environment *ev,
		string value)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,setValueFromString)
	(this, ev,value);
}


/* method: storeLength */
unsigned short   storeLength(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,storeLength)
	(this, ev);
}


/* method: verify */
boolean   verify(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,verify)
	(this, ev);
}


/* initializer method: withName */
void   withName(Environment *ev,
		somInitCtrl* ctrl,
		string aName)
{
   SOM_ResolveD(this,AWDTimeField,AWDBaseField,withName)
	(this, ev,ctrl,aName);
}


/* initializer method: withNameandNumber */
void   withNameandNumber(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber)
{
   SOM_ResolveD(this,AWDTimeField,AWDBaseField,withNameandNumber)
	(this, ev,ctrl,aName,seqNumber);
}


/* initializer method: withNameandValue */
void   withNameandValue(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		string value)
{
   SOM_ResolveD(this,AWDTimeField,AWDBaseField,withNameandValue)
	(this, ev,ctrl,aName,value);
}


/* initializer method: withNameNumberandStatus */
void   withNameNumberandStatus(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		AWDBaseField_STATUS status)
{
   SOM_ResolveD(this,AWDTimeField,AWDBaseField,withNameNumberandStatus)
	(this, ev,ctrl,aName,seqNumber,status);
}


/* initializer method: withNameNumberandValue */
void   withNameNumberandValue(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		string value)
{
   SOM_ResolveD(this,AWDTimeField,AWDBaseField,withNameNumberandValue)
	(this, ev,ctrl,aName,seqNumber,value);
}


/* initializer method: withNameNumberStatusandValue */
void   withNameNumberStatusandValue(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		AWDBaseField_STATUS status,
		string value)
{
   SOM_ResolveD(this,AWDTimeField,AWDBaseField,withNameNumberStatusandValue)
	(this, ev,ctrl,aName,seqNumber,status,value);
}


/* initializer method: withPersist */
void   withPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDTimeField,AWDBaseField,withPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: withField */
void   withField(Environment *ev,
		somInitCtrl* ctrl,
		AWDBaseField* pField)
{
   SOM_ResolveD(this,AWDTimeField,AWDBaseField,withField)
	(this, ev,ctrl,pField);
}


/* method: hasLocalMask */
boolean   hasLocalMask(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,AWDBaseField,hasLocalMask)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDTimeField,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDTimeField,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: store */
void   store(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDTimeField,AWDCommon,store)
	(this, ev,pPersist);
}


/* method: restore */
void   restore(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDTimeField,AWDCommon,restore)
	(this, ev,pPersist);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,AWDTimeField,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDTimeField,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,AWDTimeField,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDTimeField,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDTimeField,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTimeField,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDTimeField*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTimeField,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTimeField,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTimeField,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTimeField,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDTimeField*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTimeField,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDTimeField*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTimeField,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDTimeField*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTimeField,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDTimeField,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDTimeField,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDTimeField,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDTimeField,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDTimeField,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDTimeField,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDTimeField,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDTimeField,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDTimeField_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDTimeField,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDTimeField,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDTimeField_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDTimeField,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDTimeField,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDTimeField,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDTimeField,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDTimeField,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDTimeField,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDTimeField,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDTimeField */



#endif       /* SOM_AWDTimeField_xh */

#ifndef SOM_AWDTime_xh
#define SOM_AWDTime_xh

class AWDTime;

#define AWDTime_MajorVersion 2
#define AWDTime_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef AWDTime_API
#define AWDTime_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDTime Class */
SOMEXTERN
#if (defined(SOM_Module_awdtime_Source) || defined(AWDTime_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTime))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDTimeNewClass(
		integer4,
		integer4 );

/* The API to the AWDTime class object, and the methods it introduces. */
SOMEXTERN struct AWDTimeClassDataStructure {
	SOMClass *classObject;
	somMToken blankTime;
	somMToken hours;
	somMToken initTimeObject;
	somMToken minutes;
	somMToken seconds;
	somMToken setHours;
	somMToken setMinutes;
	somMToken setSeconds;
	somMToken setTime;
	somMToken time;
	somMToken verifyHours;
	somMToken verifyMinutes;
	somMToken verifySeconds;
	somMToken time_withTime;
	somMToken time_withTimeObject;
}
#if !(defined(SOM_Module_awdtime_Source) || defined(AWDTime_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTime))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDTimeClassData;
#define _AWDTime AWDTimeClassData.classObject

/* The API to parentMtabs for AWDTime, and the instance data it introduces. */
SOMEXTERN struct AWDTimeCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_awdtime_Source) || defined(AWDTime_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTime))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDTimeCClassData;

/*
 * -- Typedefs for AWDTime Method Procedures
 */
extern "C" {
typedef string   SOMLINK somTP_AWDTime_blankTime(AWDTime *somSelf, Environment *ev);
typedef somTP_AWDTime_blankTime *somTD_AWDTime_blankTime;
typedef string   SOMLINK somTP_AWDTime_hours(AWDTime *somSelf, Environment *ev);
typedef somTP_AWDTime_hours *somTD_AWDTime_hours;
typedef void   SOMLINK somTP_AWDTime_initTimeObject(AWDTime *somSelf, Environment *ev);
typedef somTP_AWDTime_initTimeObject *somTD_AWDTime_initTimeObject;
typedef string   SOMLINK somTP_AWDTime_minutes(AWDTime *somSelf, Environment *ev);
typedef somTP_AWDTime_minutes *somTD_AWDTime_minutes;
typedef string   SOMLINK somTP_AWDTime_seconds(AWDTime *somSelf, Environment *ev);
typedef somTP_AWDTime_seconds *somTD_AWDTime_seconds;
typedef boolean   SOMLINK somTP_AWDTime_setHours(AWDTime *somSelf, Environment *ev,
		string hours);
typedef somTP_AWDTime_setHours *somTD_AWDTime_setHours;
typedef boolean   SOMLINK somTP_AWDTime_setMinutes(AWDTime *somSelf, Environment *ev,
		string minutes);
typedef somTP_AWDTime_setMinutes *somTD_AWDTime_setMinutes;
typedef boolean   SOMLINK somTP_AWDTime_setSeconds(AWDTime *somSelf, Environment *ev,
		string seconds);
typedef somTP_AWDTime_setSeconds *somTD_AWDTime_setSeconds;
typedef boolean   SOMLINK somTP_AWDTime_setTime(AWDTime *somSelf, Environment *ev,
		string time);
typedef somTP_AWDTime_setTime *somTD_AWDTime_setTime;
typedef string   SOMLINK somTP_AWDTime_time(AWDTime *somSelf, Environment *ev);
typedef somTP_AWDTime_time *somTD_AWDTime_time;
typedef boolean   SOMLINK somTP_AWDTime_verifyHours(AWDTime *somSelf, Environment *ev,
		string hours);
typedef somTP_AWDTime_verifyHours *somTD_AWDTime_verifyHours;
typedef boolean   SOMLINK somTP_AWDTime_verifyMinutes(AWDTime *somSelf, Environment *ev,
		string minutes);
typedef somTP_AWDTime_verifyMinutes *somTD_AWDTime_verifyMinutes;
typedef boolean   SOMLINK somTP_AWDTime_verifySeconds(AWDTime *somSelf, Environment *ev,
		string seconds);
typedef somTP_AWDTime_verifySeconds *somTD_AWDTime_verifySeconds;
typedef void   SOMLINK somTP_AWDTime_time_withTime(AWDTime *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string time);
typedef somTP_AWDTime_time_withTime *somTD_AWDTime_time_withTime;
typedef void   SOMLINK somTP_AWDTime_time_withTimeObject(AWDTime *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDTime* pTime);
typedef somTP_AWDTime_time_withTimeObject *somTD_AWDTime_time_withTimeObject;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_AWDTime_somDefaultInit(AWDTime *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDTime_somDefaultInit *somTD_AWDTime_somDefaultInit;
typedef void   SOMLINK somTP_AWDTime_somDestruct(AWDTime *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDTime_somDestruct *somTD_AWDTime_somDestruct;
typedef void   SOMLINK somTP_AWDTime_somDefaultCopyInit(AWDTime *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTime_somDefaultCopyInit *somTD_AWDTime_somDefaultCopyInit;
typedef AWDTime*   SOMLINK somTP_AWDTime_somDefaultAssign(AWDTime *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTime_somDefaultAssign *somTD_AWDTime_somDefaultAssign;
typedef void   SOMLINK somTP_AWDTime_somDefaultConstCopyInit(AWDTime *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTime_somDefaultConstCopyInit *somTD_AWDTime_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDTime_somDefaultVCopyInit(AWDTime *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTime_somDefaultVCopyInit *somTD_AWDTime_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDTime_somDefaultConstVCopyInit(AWDTime *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTime_somDefaultConstVCopyInit *somTD_AWDTime_somDefaultConstVCopyInit;
typedef AWDTime*   SOMLINK somTP_AWDTime_somDefaultConstAssign(AWDTime *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTime_somDefaultConstAssign *somTD_AWDTime_somDefaultConstAssign;
typedef AWDTime*   SOMLINK somTP_AWDTime_somDefaultVAssign(AWDTime *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTime_somDefaultVAssign *somTD_AWDTime_somDefaultVAssign;
typedef AWDTime*   SOMLINK somTP_AWDTime_somDefaultConstVAssign(AWDTime *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTime_somDefaultConstVAssign *somTD_AWDTime_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDTime_somInit(AWDTime *somSelf);
typedef somTP_AWDTime_somInit *somTD_AWDTime_somInit;
typedef void   SOMLINK somTP_AWDTime_somFree(AWDTime *somSelf);
typedef somTP_AWDTime_somFree *somTD_AWDTime_somFree;
typedef void   SOMLINK somTP_AWDTime_somUninit(AWDTime *somSelf);
typedef somTP_AWDTime_somUninit *somTD_AWDTime_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDTime_somGetClass(AWDTime *somSelf);
typedef somTP_AWDTime_somGetClass *somTD_AWDTime_somGetClass;
typedef string   SOMLINK somTP_AWDTime_somGetClassName(AWDTime *somSelf);
typedef somTP_AWDTime_somGetClassName *somTD_AWDTime_somGetClassName;
typedef long   SOMLINK somTP_AWDTime_somGetSize(AWDTime *somSelf);
typedef somTP_AWDTime_somGetSize *somTD_AWDTime_somGetSize;
typedef boolean   SOMLINK somTP_AWDTime_somIsA(AWDTime *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDTime_somIsA *somTD_AWDTime_somIsA;
typedef boolean   SOMLINK somTP_AWDTime_somIsInstanceOf(AWDTime *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDTime_somIsInstanceOf *somTD_AWDTime_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDTime_somRespondsTo(AWDTime *somSelf,
		somId mId);
typedef somTP_AWDTime_somRespondsTo *somTD_AWDTime_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDTime_somDispatch(AWDTime *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDTime_somDispatch *somTD_AWDTime_somDispatch;
typedef boolean   SOMLINK somTP_AWDTime_somClassDispatch(AWDTime *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDTime_somClassDispatch *somTD_AWDTime_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDTime_somCastObj(AWDTime *somSelf,
		SOMClass* cls);
typedef somTP_AWDTime_somCastObj *somTD_AWDTime_somCastObj;
typedef boolean   SOMLINK somTP_AWDTime_somResetObj(AWDTime *somSelf);
typedef somTP_AWDTime_somResetObj *somTD_AWDTime_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDTime_somPrintSelf(AWDTime *somSelf);
typedef somTP_AWDTime_somPrintSelf *somTD_AWDTime_somPrintSelf;
typedef void   SOMLINK somTP_AWDTime_somDumpSelf(AWDTime *somSelf,
		long level);
typedef somTP_AWDTime_somDumpSelf *somTD_AWDTime_somDumpSelf;
typedef void   SOMLINK somTP_AWDTime_somDumpSelfInt(AWDTime *somSelf,
		long level);
typedef somTP_AWDTime_somDumpSelfInt *somTD_AWDTime_somDumpSelfInt;
}

#endif /* AWDTime_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDTime
 */
class AWDTime : public SOMObject
{
public:

// AWDTime::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDTime) AWDTimeNewClass(AWDTime_MajorVersion,AWDTime_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDTime,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDTime));
}

// AWDTime::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDTime()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTimeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDTime(AWDTime* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTimeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDTime(const AWDTime* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTimeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDTime(Environment *ev,string time) 
{
   time_withTime(ev,0,time);
}

AWDTime(Environment *ev,AWDTime* pTime) 
{
   time_withTimeObject(ev,0,pTime);
}


/* method: blankTime */
string   blankTime(Environment *ev)
{
   return SOM_ResolveD(this,AWDTime,AWDTime,blankTime)
	(this, ev);
}


/* method: hours */
string   hours(Environment *ev)
{
   return SOM_ResolveD(this,AWDTime,AWDTime,hours)
	(this, ev);
}


/* method: initTimeObject */
void   initTimeObject(Environment *ev)
{
   SOM_ResolveD(this,AWDTime,AWDTime,initTimeObject)
	(this, ev);
}


/* method: minutes */
string   minutes(Environment *ev)
{
   return SOM_ResolveD(this,AWDTime,AWDTime,minutes)
	(this, ev);
}


/* method: seconds */
string   seconds(Environment *ev)
{
   return SOM_ResolveD(this,AWDTime,AWDTime,seconds)
	(this, ev);
}


/* method: setHours */
boolean   setHours(Environment *ev,
		string hours)
{
   return SOM_ResolveD(this,AWDTime,AWDTime,setHours)
	(this, ev,hours);
}


/* method: setMinutes */
boolean   setMinutes(Environment *ev,
		string minutes)
{
   return SOM_ResolveD(this,AWDTime,AWDTime,setMinutes)
	(this, ev,minutes);
}


/* method: setSeconds */
boolean   setSeconds(Environment *ev,
		string seconds)
{
   return SOM_ResolveD(this,AWDTime,AWDTime,setSeconds)
	(this, ev,seconds);
}


/* method: setTime */
boolean   setTime(Environment *ev,
		string time)
{
   return SOM_ResolveD(this,AWDTime,AWDTime,setTime)
	(this, ev,time);
}


/* method: time */
string   time(Environment *ev)
{
   return SOM_ResolveD(this,AWDTime,AWDTime,time)
	(this, ev);
}


/* method: verifyHours */
boolean   verifyHours(Environment *ev,
		string hours)
{
   return SOM_ResolveD(this,AWDTime,AWDTime,verifyHours)
	(this, ev,hours);
}


/* method: verifyMinutes */
boolean   verifyMinutes(Environment *ev,
		string minutes)
{
   return SOM_ResolveD(this,AWDTime,AWDTime,verifyMinutes)
	(this, ev,minutes);
}


/* method: verifySeconds */
boolean   verifySeconds(Environment *ev,
		string seconds)
{
   return SOM_ResolveD(this,AWDTime,AWDTime,verifySeconds)
	(this, ev,seconds);
}


/* initializer method: time_withTime */
void   time_withTime(Environment *ev,
		somInitCtrl* ctrl,
		string time)
{
   SOM_ResolveD(this,AWDTime,AWDTime,time_withTime)
	(this, ev,ctrl,time);
}


/* initializer method: time_withTimeObject */
void   time_withTimeObject(Environment *ev,
		somInitCtrl* ctrl,
		AWDTime* pTime)
{
   SOM_ResolveD(this,AWDTime,AWDTime,time_withTimeObject)
	(this, ev,ctrl,pTime);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDTime,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDTime,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTime,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDTime*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTime,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTime,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTime,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTime,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDTime*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTime,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDTime*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTime,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDTime*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTime,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDTime,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDTime,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDTime,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDTime,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDTime,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDTime,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDTime,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDTime,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDTime,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDTime_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDTime,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDTime,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDTime_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDTime,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDTime,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDTime,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDTime,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDTime,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDTime,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDTime,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDTime */



#endif       /* SOM_AWDTime_xh */
