
#ifndef SOM_ACBL0046_xh
#define SOM_ACBL0046_xh

class ACBL0046;

#define ACBL0046_MajorVersion 0
#define ACBL0046_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDView_xh
#include <view.xh>
#endif

#ifndef ACBL0046_API
#define ACBL0046_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class somf_MLinkable;
class AWDConnection;
class AWDException;
class ACBL0046Record;
typedef
struct ACBL0046_ACBL0046INPUT {
char  countrycd[3];
char  cont_flag;
char  cont_unitcd[10];
char  cont_wrktype[10];
} ACBL0046_ACBL0046INPUT;
typedef
struct ACBL0046_ACBL0046INPUT* ACBL0046_PACBL0046INPUT;
typedef
struct ACBL0046_ACBL0046OUTPUT {
char  return_code[7];
char  return_message[78];
char  view_complete;
char  cont_unitcd[10];
char  cont_wrktype[10];
} ACBL0046_ACBL0046OUTPUT;
typedef
struct ACBL0046_ACBL0046OUTPUT* ACBL0046_PACBL0046OUTPUT;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ACBL0046INPUT
    #ifdef ACBL0046INPUT
        #undef ACBL0046INPUT
        #define SOMTGD_ACBL0046INPUT 1
    #else
        #define ACBL0046INPUT ACBL0046_ACBL0046INPUT
    #endif /* ACBL0046INPUT */
#endif /* SOMTGD_ACBL0046INPUT */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PACBL0046INPUT
    #ifdef PACBL0046INPUT
        #undef PACBL0046INPUT
        #define SOMTGD_PACBL0046INPUT 1
    #else
        #define PACBL0046INPUT ACBL0046_PACBL0046INPUT
    #endif /* PACBL0046INPUT */
#endif /* SOMTGD_PACBL0046INPUT */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#ifndef SOMTGD_ACBL0046OUTPUT
    #ifdef ACBL0046OUTPUT
        #undef ACBL0046OUTPUT
        #define SOMTGD_ACBL0046OUTPUT 1
    #else
        #define ACBL0046OUTPUT ACBL0046_ACBL0046OUTPUT
    #endif /* ACBL0046OUTPUT */
#endif /* SOMTGD_ACBL0046OUTPUT */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PACBL0046OUTPUT
    #ifdef PACBL0046OUTPUT
        #undef PACBL0046OUTPUT
        #define SOMTGD_PACBL0046OUTPUT 1
    #else
        #define PACBL0046OUTPUT ACBL0046_PACBL0046OUTPUT
    #endif /* PACBL0046OUTPUT */
#endif /* SOMTGD_PACBL0046OUTPUT */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the ACBL0046 Class */
SOMEXTERN
#if (defined(SOM_Module_acbl0046_Source) || defined(ACBL0046_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0046))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK ACBL0046NewClass(
		integer4,
		integer4 );

/* The API to the ACBL0046 class object, and the methods it introduces. */
SOMEXTERN struct ACBL0046ClassDataStructure {
	SOMClass *classObject;
	somMToken setBusinessArea;
	somMToken setContinuation;
	somMToken setContinuationWorkType;
	somMToken withBusinessArea;
}
#if !(defined(SOM_Module_acbl0046_Source) || defined(ACBL0046_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0046))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0046ClassData;
#define _ACBL0046 ACBL0046ClassData.classObject

/* The API to parentMtabs for ACBL0046, and the instance data it introduces. */
SOMEXTERN struct ACBL0046CClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_acbl0046_Source) || defined(ACBL0046_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0046))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0046CClassData;

/*
 * -- Typedefs for ACBL0046 Method Procedures
 */
extern "C" {
typedef void   SOMLINK somTP_ACBL0046_setBusinessArea(ACBL0046 *somSelf, Environment *ev,
		string pszUnitcd);
typedef somTP_ACBL0046_setBusinessArea *somTD_ACBL0046_setBusinessArea;
typedef void   SOMLINK somTP_ACBL0046_setContinuation(ACBL0046 *somSelf, Environment *ev,
		boolean fContinue);
typedef somTP_ACBL0046_setContinuation *somTD_ACBL0046_setContinuation;
typedef void   SOMLINK somTP_ACBL0046_setContinuationWorkType(ACBL0046 *somSelf, Environment *ev,
		string pszWrktype);
typedef somTP_ACBL0046_setContinuationWorkType *somTD_ACBL0046_setContinuationWorkType;
typedef void   SOMLINK somTP_ACBL0046_withBusinessArea(ACBL0046 *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string pszUnitcd);
typedef somTP_ACBL0046_withBusinessArea *somTD_ACBL0046_withBusinessArea;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef string   SOMLINK somTP_ACBL0046_app(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_app *somTD_ACBL0046_app;
typedef void   SOMLINK somTP_ACBL0046_setApp(ACBL0046 *somSelf, Environment *ev,
		string app);
typedef somTP_ACBL0046_setApp *somTD_ACBL0046_setApp;
typedef string   SOMLINK somTP_ACBL0046_targetApp(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_targetApp *somTD_ACBL0046_targetApp;
typedef void   SOMLINK somTP_ACBL0046_setTargetApp(ACBL0046 *somSelf, Environment *ev,
		string target);
typedef somTP_ACBL0046_setTargetApp *somTD_ACBL0046_setTargetApp;
typedef string   SOMLINK somTP_ACBL0046_name(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_name *somTD_ACBL0046_name;
typedef void   SOMLINK somTP_ACBL0046_setName(ACBL0046 *somSelf, Environment *ev,
		string aName);
typedef somTP_ACBL0046_setName *somTD_ACBL0046_setName;
typedef unsigned long   SOMLINK somTP_ACBL0046_size(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_size *somTD_ACBL0046_size;
typedef void   SOMLINK somTP_ACBL0046_setSize(ACBL0046 *somSelf, Environment *ev,
		unsigned long size);
typedef somTP_ACBL0046_setSize *somTD_ACBL0046_setSize;
typedef void*   SOMLINK somTP_ACBL0046_sendData(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_sendData *somTD_ACBL0046_sendData;
typedef void   SOMLINK somTP_ACBL0046_setSendData(ACBL0046 *somSelf, Environment *ev,
		void* data);
typedef somTP_ACBL0046_setSendData *somTD_ACBL0046_setSendData;
typedef AWDView_view_type   SOMLINK somTP_ACBL0046_mode(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_mode *somTD_ACBL0046_mode;
typedef void   SOMLINK somTP_ACBL0046_setMode(ACBL0046 *somSelf, Environment *ev,
		AWDView_view_type viewtype);
typedef somTP_ACBL0046_setMode *somTD_ACBL0046_setMode;
typedef unsigned long   SOMLINK somTP_ACBL0046_hwndNotify(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_hwndNotify *somTD_ACBL0046_hwndNotify;
typedef void   SOMLINK somTP_ACBL0046_sethwndNotify(ACBL0046 *somSelf, Environment *ev,
		unsigned long hwndNotify);
typedef somTP_ACBL0046_sethwndNotify *somTD_ACBL0046_sethwndNotify;
typedef unsigned long   SOMLINK somTP_ACBL0046_returnMsg(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_returnMsg *somTD_ACBL0046_returnMsg;
typedef void   SOMLINK somTP_ACBL0046_setReturnMsg(ACBL0046 *somSelf, Environment *ev,
		unsigned long msg);
typedef somTP_ACBL0046_setReturnMsg *somTD_ACBL0046_setReturnMsg;
typedef void*   SOMLINK somTP_ACBL0046_pfnCallBack(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_pfnCallBack *somTD_ACBL0046_pfnCallBack;
typedef void   SOMLINK somTP_ACBL0046_setpfnCallBack(ACBL0046 *somSelf, Environment *ev,
		void* pfnCallback);
typedef somTP_ACBL0046_setpfnCallBack *somTD_ACBL0046_setpfnCallBack;
typedef unsigned long   SOMLINK somTP_ACBL0046_timeOut(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_timeOut *somTD_ACBL0046_timeOut;
typedef void   SOMLINK somTP_ACBL0046_setTimeOut(ACBL0046 *somSelf, Environment *ev,
		unsigned long timeout);
typedef somTP_ACBL0046_setTimeOut *somTD_ACBL0046_setTimeOut;
typedef string   SOMLINK somTP_ACBL0046_host(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_host *somTD_ACBL0046_host;
typedef void   SOMLINK somTP_ACBL0046_setHost(ACBL0046 *somSelf, Environment *ev,
		string host);
typedef somTP_ACBL0046_setHost *somTD_ACBL0046_setHost;
typedef long   SOMLINK somTP_ACBL0046_queue(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_queue *somTD_ACBL0046_queue;
typedef void   SOMLINK somTP_ACBL0046_setMessageQueue(ACBL0046 *somSelf, Environment *ev,
		long que);
typedef somTP_ACBL0046_setMessageQueue *somTD_ACBL0046_setMessageQueue;
typedef void*   SOMLINK somTP_ACBL0046_receiveData(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_receiveData *somTD_ACBL0046_receiveData;
typedef void   SOMLINK somTP_ACBL0046_setReceiveData(ACBL0046 *somSelf, Environment *ev,
		void* pRData);
typedef somTP_ACBL0046_setReceiveData *somTD_ACBL0046_setReceiveData;
typedef unsigned long   SOMLINK somTP_ACBL0046_numRepeats(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_numRepeats *somTD_ACBL0046_numRepeats;
typedef void   SOMLINK somTP_ACBL0046_setNumRepeats(ACBL0046 *somSelf, Environment *ev,
		unsigned long repeats);
typedef somTP_ACBL0046_setNumRepeats *somTD_ACBL0046_setNumRepeats;
typedef unsigned long   SOMLINK somTP_ACBL0046_fixedLength(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_fixedLength *somTD_ACBL0046_fixedLength;
typedef void   SOMLINK somTP_ACBL0046_setFixedLength(ACBL0046 *somSelf, Environment *ev,
		unsigned long length);
typedef somTP_ACBL0046_setFixedLength *somTD_ACBL0046_setFixedLength;
typedef unsigned long   SOMLINK somTP_ACBL0046_repeatLength(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_repeatLength *somTD_ACBL0046_repeatLength;
typedef void   SOMLINK somTP_ACBL0046_setRepeatLength(ACBL0046 *somSelf, Environment *ev,
		unsigned long length);
typedef somTP_ACBL0046_setRepeatLength *somTD_ACBL0046_setRepeatLength;
typedef unsigned long   SOMLINK somTP_ACBL0046_currentIndex(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_currentIndex *somTD_ACBL0046_currentIndex;
typedef void   SOMLINK somTP_ACBL0046_setCurrentIndex(ACBL0046 *somSelf, Environment *ev,
		unsigned long index);
typedef somTP_ACBL0046_setCurrentIndex *somTD_ACBL0046_setCurrentIndex;
typedef void*   SOMLINK somTP_ACBL0046_lastView(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_lastView *somTD_ACBL0046_lastView;
typedef void   SOMLINK somTP_ACBL0046_setLastView(ACBL0046 *somSelf, Environment *ev,
		void* pRData);
typedef somTP_ACBL0046_setLastView *somTD_ACBL0046_setLastView;
typedef void*   SOMLINK somTP_ACBL0046_startData(ACBL0046 *somSelf, Environment *ev,
		string app,
		string targetapp,
		string viewname,
		void* senddata,
		unsigned long size,
		AWDView_view_type mode,
		void* pfn,
		unsigned long timeout,
		unsigned long hwndnotify,
		unsigned long returnmsg,
		long queue,
		string host);
typedef somTP_ACBL0046_startData *somTD_ACBL0046_startData;
typedef void*   SOMLINK somTP_ACBL0046_start(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_start *somTD_ACBL0046_start;
typedef void*   SOMLINK somTP_ACBL0046_getRecord(ACBL0046 *somSelf, Environment *ev,
		void* pv,
		unsigned long userIndex,
		AWDView_index_type indexvalue);
typedef somTP_ACBL0046_getRecord *somTD_ACBL0046_getRecord;
typedef boolean   SOMLINK somTP_ACBL0046_check(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_check *somTD_ACBL0046_check;
typedef void   SOMLINK somTP_ACBL0046_checkForException(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_checkForException *somTD_ACBL0046_checkForException;
typedef void   SOMLINK somTP_ACBL0046_setException(ACBL0046 *somSelf, Environment *ev,
		unsigned short excType,
		string pszFile,
		unsigned short usLine,
		string pszMessage,
		unsigned short usReturnCd);
typedef somTP_ACBL0046_setException *somTD_ACBL0046_setException;
typedef void   SOMLINK somTP_ACBL0046_setViewMessage(ACBL0046 *somSelf, Environment *ev,
		string pszMessage);
typedef somTP_ACBL0046_setViewMessage *somTD_ACBL0046_setViewMessage;
typedef string   SOMLINK somTP_ACBL0046_viewMessage(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_viewMessage *somTD_ACBL0046_viewMessage;
typedef void*   SOMLINK somTP_ACBL0046_startString(ACBL0046 *somSelf, Environment *ev,
		string pszSetupString);
typedef somTP_ACBL0046_startString *somTD_ACBL0046_startString;
typedef boolean   SOMLINK somTP_ACBL0046_scanArgString(ACBL0046 *somSelf, Environment *ev,
		string pszSetupString,
		string pszKey,
		string pszValue,
		unsigned long* pcbValue);
typedef somTP_ACBL0046_scanArgString *somTD_ACBL0046_scanArgString;
typedef boolean   SOMLINK somTP_ACBL0046_isComplete(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_isComplete *somTD_ACBL0046_isComplete;
typedef void*   SOMLINK somTP_ACBL0046_restart(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_restart *somTD_ACBL0046_restart;
typedef void*   SOMLINK somTP_ACBL0046_resolveIndex(ACBL0046 *somSelf, Environment *ev,
		unsigned long* ulIndex);
typedef somTP_ACBL0046_resolveIndex *somTD_ACBL0046_resolveIndex;
typedef boolean   SOMLINK somTP_ACBL0046_addData(ACBL0046 *somSelf, Environment *ev,
		void* pRcvData,
		unsigned long ulNumberofRepeats);
typedef somTP_ACBL0046_addData *somTD_ACBL0046_addData;
typedef void*   SOMLINK somTP_ACBL0046_buffer(ACBL0046 *somSelf, Environment *ev,
		AWDView_index_type index,
		unsigned long theindex,
		unsigned long* pulRepeats);
typedef somTP_ACBL0046_buffer *somTD_ACBL0046_buffer;
typedef unsigned long   SOMLINK somTP_ACBL0046_errCode(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_errCode *somTD_ACBL0046_errCode;
typedef string   SOMLINK somTP_ACBL0046_errMsg(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_errMsg *somTD_ACBL0046_errMsg;
typedef AWDConnection*   SOMLINK somTP_ACBL0046_setConnection(ACBL0046 *somSelf, Environment *ev,
		AWDConnection* con);
typedef somTP_ACBL0046_setConnection *somTD_ACBL0046_setConnection;
typedef AWDConnection*   SOMLINK somTP_ACBL0046_localConnection(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_localConnection *somTD_ACBL0046_localConnection;
typedef void   SOMLINK somTP_ACBL0046_setAutoRestart(ACBL0046 *somSelf, Environment *ev,
		boolean flag);
typedef somTP_ACBL0046_setAutoRestart *somTD_ACBL0046_setAutoRestart;
typedef boolean   SOMLINK somTP_ACBL0046_isAutoRestart(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_isAutoRestart *somTD_ACBL0046_isAutoRestart;
typedef void   SOMLINK somTP_ACBL0046_reset(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_reset *somTD_ACBL0046_reset;
typedef boolean   SOMLINK somTP_ACBL0046_validateInput(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_validateInput *somTD_ACBL0046_validateInput;
typedef void   SOMLINK somTP_ACBL0046_setPersistent(ACBL0046 *somSelf, Environment *ev,
		boolean flag);
typedef somTP_ACBL0046_setPersistent *somTD_ACBL0046_setPersistent;
typedef boolean   SOMLINK somTP_ACBL0046_isPersistent(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_isPersistent *somTD_ACBL0046_isPersistent;
typedef void   SOMLINK somTP_ACBL0046_setInProcess(ACBL0046 *somSelf, Environment *ev,
		boolean flag);
typedef somTP_ACBL0046_setInProcess *somTD_ACBL0046_setInProcess;
typedef boolean   SOMLINK somTP_ACBL0046_isInProcess(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_isInProcess *somTD_ACBL0046_isInProcess;
typedef void   SOMLINK somTP_ACBL0046_setPrimaryRc(ACBL0046 *somSelf, Environment *ev,
		unsigned long rc);
typedef somTP_ACBL0046_setPrimaryRc *somTD_ACBL0046_setPrimaryRc;
typedef unsigned long   SOMLINK somTP_ACBL0046_primaryRc(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_primaryRc *somTD_ACBL0046_primaryRc;
typedef void   SOMLINK somTP_ACBL0046_setSecondaryRc(ACBL0046 *somSelf, Environment *ev,
		unsigned long rc);
typedef somTP_ACBL0046_setSecondaryRc *somTD_ACBL0046_setSecondaryRc;
typedef unsigned long   SOMLINK somTP_ACBL0046_secondaryRc(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_secondaryRc *somTD_ACBL0046_secondaryRc;
typedef void   SOMLINK somTP_ACBL0046_somDefaultInit(ACBL0046 *somSelf,
		somInitCtrl* ctrl);
typedef somTP_ACBL0046_somDefaultInit *somTD_ACBL0046_somDefaultInit;
typedef void   SOMLINK somTP_ACBL0046_somDestruct(ACBL0046 *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_ACBL0046_somDestruct *somTD_ACBL0046_somDestruct;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0046_somfMLinkableInit(ACBL0046 *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_ACBL0046_somfMLinkableInit *somTD_ACBL0046_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0046_somfGetNext(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_somfGetNext *somTD_ACBL0046_somfGetNext;
typedef void   SOMLINK somTP_ACBL0046_somfSetNext(ACBL0046 *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0046_somfSetNext *somTD_ACBL0046_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0046_somfGetPrevious(ACBL0046 *somSelf, Environment *ev);
typedef somTP_ACBL0046_somfGetPrevious *somTD_ACBL0046_somfGetPrevious;
typedef void   SOMLINK somTP_ACBL0046_somfSetPrevious(ACBL0046 *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0046_somfSetPrevious *somTD_ACBL0046_somfSetPrevious;
typedef void   SOMLINK somTP_ACBL0046_somInit(ACBL0046 *somSelf);
typedef somTP_ACBL0046_somInit *somTD_ACBL0046_somInit;
typedef void   SOMLINK somTP_ACBL0046_somDefaultCopyInit(ACBL0046 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046_somDefaultCopyInit *somTD_ACBL0046_somDefaultCopyInit;
typedef ACBL0046*   SOMLINK somTP_ACBL0046_somDefaultAssign(ACBL0046 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046_somDefaultAssign *somTD_ACBL0046_somDefaultAssign;
typedef void   SOMLINK somTP_ACBL0046_somDefaultConstCopyInit(ACBL0046 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046_somDefaultConstCopyInit *somTD_ACBL0046_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ACBL0046_somDefaultVCopyInit(ACBL0046 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046_somDefaultVCopyInit *somTD_ACBL0046_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ACBL0046_somDefaultConstVCopyInit(ACBL0046 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046_somDefaultConstVCopyInit *somTD_ACBL0046_somDefaultConstVCopyInit;
typedef ACBL0046*   SOMLINK somTP_ACBL0046_somDefaultConstAssign(ACBL0046 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046_somDefaultConstAssign *somTD_ACBL0046_somDefaultConstAssign;
typedef ACBL0046*   SOMLINK somTP_ACBL0046_somDefaultVAssign(ACBL0046 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046_somDefaultVAssign *somTD_ACBL0046_somDefaultVAssign;
typedef ACBL0046*   SOMLINK somTP_ACBL0046_somDefaultConstVAssign(ACBL0046 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046_somDefaultConstVAssign *somTD_ACBL0046_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ACBL0046_somFree(ACBL0046 *somSelf);
typedef somTP_ACBL0046_somFree *somTD_ACBL0046_somFree;
typedef void   SOMLINK somTP_ACBL0046_somUninit(ACBL0046 *somSelf);
typedef somTP_ACBL0046_somUninit *somTD_ACBL0046_somUninit;
typedef SOMClass*   SOMLINK somTP_ACBL0046_somGetClass(ACBL0046 *somSelf);
typedef somTP_ACBL0046_somGetClass *somTD_ACBL0046_somGetClass;
typedef string   SOMLINK somTP_ACBL0046_somGetClassName(ACBL0046 *somSelf);
typedef somTP_ACBL0046_somGetClassName *somTD_ACBL0046_somGetClassName;
typedef long   SOMLINK somTP_ACBL0046_somGetSize(ACBL0046 *somSelf);
typedef somTP_ACBL0046_somGetSize *somTD_ACBL0046_somGetSize;
typedef boolean   SOMLINK somTP_ACBL0046_somIsA(ACBL0046 *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0046_somIsA *somTD_ACBL0046_somIsA;
typedef boolean   SOMLINK somTP_ACBL0046_somIsInstanceOf(ACBL0046 *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0046_somIsInstanceOf *somTD_ACBL0046_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ACBL0046_somRespondsTo(ACBL0046 *somSelf,
		somId mId);
typedef somTP_ACBL0046_somRespondsTo *somTD_ACBL0046_somRespondsTo;
typedef boolean   SOMLINK somTP_ACBL0046_somDispatch(ACBL0046 *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0046_somDispatch *somTD_ACBL0046_somDispatch;
typedef boolean   SOMLINK somTP_ACBL0046_somClassDispatch(ACBL0046 *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0046_somClassDispatch *somTD_ACBL0046_somClassDispatch;
typedef boolean   SOMLINK somTP_ACBL0046_somCastObj(ACBL0046 *somSelf,
		SOMClass* cls);
typedef somTP_ACBL0046_somCastObj *somTD_ACBL0046_somCastObj;
typedef boolean   SOMLINK somTP_ACBL0046_somResetObj(ACBL0046 *somSelf);
typedef somTP_ACBL0046_somResetObj *somTD_ACBL0046_somResetObj;
typedef SOMObject*   SOMLINK somTP_ACBL0046_somPrintSelf(ACBL0046 *somSelf);
typedef somTP_ACBL0046_somPrintSelf *somTD_ACBL0046_somPrintSelf;
typedef void   SOMLINK somTP_ACBL0046_somDumpSelf(ACBL0046 *somSelf,
		long level);
typedef somTP_ACBL0046_somDumpSelf *somTD_ACBL0046_somDumpSelf;
typedef void   SOMLINK somTP_ACBL0046_somDumpSelfInt(ACBL0046 *somSelf,
		long level);
typedef somTP_ACBL0046_somDumpSelfInt *somTD_ACBL0046_somDumpSelfInt;
}

#endif /* ACBL0046_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for ACBL0046
 */
class ACBL0046 : public AWDView
{
public:

// ACBL0046::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ACBL0046) ACBL0046NewClass(ACBL0046_MajorVersion,ACBL0046_MinorVersion);
   return (void*)
      SOM_Resolve(_ACBL0046,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ACBL0046));
}

// ACBL0046::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ACBL0046()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0046CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ACBL0046(ACBL0046* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0046CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ACBL0046(const ACBL0046* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0046CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ACBL0046(Environment *ev,string pszUnitcd) 
{
   withBusinessArea(ev,0,pszUnitcd);
}


/* method: setBusinessArea */
void   setBusinessArea(Environment *ev,
		string pszUnitcd)
{
   SOM_ResolveD(this,ACBL0046,ACBL0046,setBusinessArea)
	(this, ev,pszUnitcd);
}


/* method: setContinuation */
void   setContinuation(Environment *ev,
		boolean fContinue)
{
   SOM_ResolveD(this,ACBL0046,ACBL0046,setContinuation)
	(this, ev,fContinue);
}


/* method: setContinuationWorkType */
void   setContinuationWorkType(Environment *ev,
		string pszWrktype)
{
   SOM_ResolveD(this,ACBL0046,ACBL0046,setContinuationWorkType)
	(this, ev,pszWrktype);
}


/* initializer method: withBusinessArea */
void   withBusinessArea(Environment *ev,
		somInitCtrl* ctrl,
		string pszUnitcd)
{
   SOM_ResolveD(this,ACBL0046,ACBL0046,withBusinessArea)
	(this, ev,ctrl,pszUnitcd);
}


/*
 * Reintroduce inherited methods
 */

/* method: app */
string   app(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,app)
	(this, ev);
}


/* method: setApp */
void   setApp(Environment *ev,
		string app)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setApp)
	(this, ev,app);
}


/* method: targetApp */
string   targetApp(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,targetApp)
	(this, ev);
}


/* method: setTargetApp */
void   setTargetApp(Environment *ev,
		string target)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setTargetApp)
	(this, ev,target);
}


/* method: name */
string   name(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,name)
	(this, ev);
}


/* method: setName */
void   setName(Environment *ev,
		string aName)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setName)
	(this, ev,aName);
}


/* method: size */
unsigned long   size(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,size)
	(this, ev);
}


/* method: setSize */
void   setSize(Environment *ev,
		unsigned long size)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setSize)
	(this, ev,size);
}


/* method: sendData */
void*   sendData(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,sendData)
	(this, ev);
}


/* method: setSendData */
void   setSendData(Environment *ev,
		void* data)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setSendData)
	(this, ev,data);
}


/* method: mode */
AWDView_view_type   mode(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,mode)
	(this, ev);
}


/* method: setMode */
void   setMode(Environment *ev,
		AWDView_view_type viewtype)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setMode)
	(this, ev,viewtype);
}


/* method: hwndNotify */
unsigned long   hwndNotify(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,hwndNotify)
	(this, ev);
}


/* method: sethwndNotify */
void   sethwndNotify(Environment *ev,
		unsigned long hwndNotify)
{
   SOM_ResolveD(this,ACBL0046,AWDView,sethwndNotify)
	(this, ev,hwndNotify);
}


/* method: returnMsg */
unsigned long   returnMsg(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,returnMsg)
	(this, ev);
}


/* method: setReturnMsg */
void   setReturnMsg(Environment *ev,
		unsigned long msg)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setReturnMsg)
	(this, ev,msg);
}


/* method: pfnCallBack */
void*   pfnCallBack(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,pfnCallBack)
	(this, ev);
}


/* method: setpfnCallBack */
void   setpfnCallBack(Environment *ev,
		void* pfnCallback)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setpfnCallBack)
	(this, ev,pfnCallback);
}


/* method: timeOut */
unsigned long   timeOut(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,timeOut)
	(this, ev);
}


/* method: setTimeOut */
void   setTimeOut(Environment *ev,
		unsigned long timeout)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setTimeOut)
	(this, ev,timeout);
}


/* method: host */
string   host(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,host)
	(this, ev);
}


/* method: setHost */
void   setHost(Environment *ev,
		string host)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setHost)
	(this, ev,host);
}


/* method: queue */
long   queue(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,queue)
	(this, ev);
}


/* method: setMessageQueue */
void   setMessageQueue(Environment *ev,
		long que)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setMessageQueue)
	(this, ev,que);
}


/* method: receiveData */
void*   receiveData(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,receiveData)
	(this, ev);
}


/* method: setReceiveData */
void   setReceiveData(Environment *ev,
		void* pRData)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setReceiveData)
	(this, ev,pRData);
}


/* method: numRepeats */
unsigned long   numRepeats(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,numRepeats)
	(this, ev);
}


/* method: setNumRepeats */
void   setNumRepeats(Environment *ev,
		unsigned long repeats)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setNumRepeats)
	(this, ev,repeats);
}


/* method: fixedLength */
unsigned long   fixedLength(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,fixedLength)
	(this, ev);
}


/* method: setFixedLength */
void   setFixedLength(Environment *ev,
		unsigned long length)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setFixedLength)
	(this, ev,length);
}


/* method: repeatLength */
unsigned long   repeatLength(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,repeatLength)
	(this, ev);
}


/* method: setRepeatLength */
void   setRepeatLength(Environment *ev,
		unsigned long length)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setRepeatLength)
	(this, ev,length);
}


/* method: currentIndex */
unsigned long   currentIndex(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,currentIndex)
	(this, ev);
}


/* method: setCurrentIndex */
void   setCurrentIndex(Environment *ev,
		unsigned long index)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setCurrentIndex)
	(this, ev,index);
}


/* method: lastView */
void*   lastView(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,lastView)
	(this, ev);
}


/* method: setLastView */
void   setLastView(Environment *ev,
		void* pRData)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setLastView)
	(this, ev,pRData);
}


/* method: startData */
void*   startData(Environment *ev,
		string app,
		string targetapp,
		string viewname,
		void* senddata,
		unsigned long size,
		AWDView_view_type mode,
		void* pfn,
		unsigned long timeout,
		unsigned long hwndnotify,
		unsigned long returnmsg,
		long queue,
		string host)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,startData)
	(this, ev,app,targetapp,viewname,senddata,size,mode,pfn,timeout,hwndnotify,returnmsg,queue,host);
}


/* method: start */
void*   start(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,start)
	(this, ev);
}


/* method: getRecord */
void*   getRecord(Environment *ev,
		void* pv,
		unsigned long userIndex,
		AWDView_index_type indexvalue)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,getRecord)
	(this, ev,pv,userIndex,indexvalue);
}


/* method: check */
boolean   check(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,check)
	(this, ev);
}


/* method: checkForException */
void   checkForException(Environment *ev)
{
   SOM_ResolveD(this,ACBL0046,AWDView,checkForException)
	(this, ev);
}


/* method: setException */
void   setException(Environment *ev,
		unsigned short excType,
		string pszFile,
		unsigned short usLine,
		string pszMessage,
		unsigned short usReturnCd)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setException)
	(this, ev,excType,pszFile,usLine,pszMessage,usReturnCd);
}


/* method: setViewMessage */
void   setViewMessage(Environment *ev,
		string pszMessage)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setViewMessage)
	(this, ev,pszMessage);
}


/* method: viewMessage */
string   viewMessage(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,viewMessage)
	(this, ev);
}


/* method: startString */
void*   startString(Environment *ev,
		string pszSetupString)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,startString)
	(this, ev,pszSetupString);
}


/* method: scanArgString */
boolean   scanArgString(Environment *ev,
		string pszSetupString,
		string pszKey,
		string pszValue,
		unsigned long* pcbValue)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,scanArgString)
	(this, ev,pszSetupString,pszKey,pszValue,pcbValue);
}


/* method: isComplete */
boolean   isComplete(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,isComplete)
	(this, ev);
}


/* method: restart */
void*   restart(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,restart)
	(this, ev);
}


/* method: resolveIndex */
void*   resolveIndex(Environment *ev,
		unsigned long* ulIndex)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,resolveIndex)
	(this, ev,ulIndex);
}


/* method: addData */
boolean   addData(Environment *ev,
		void* pRcvData,
		unsigned long ulNumberofRepeats)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,addData)
	(this, ev,pRcvData,ulNumberofRepeats);
}


/* method: buffer */
void*   buffer(Environment *ev,
		AWDView_index_type index,
		unsigned long theindex,
		unsigned long* pulRepeats)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,buffer)
	(this, ev,index,theindex,pulRepeats);
}


/* method: errCode */
unsigned long   errCode(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,errCode)
	(this, ev);
}


/* method: errMsg */
string   errMsg(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,errMsg)
	(this, ev);
}


/* method: setConnection */
AWDConnection*   setConnection(Environment *ev,
		AWDConnection* con)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,setConnection)
	(this, ev,con);
}


/* method: localConnection */
AWDConnection*   localConnection(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,localConnection)
	(this, ev);
}


/* method: setAutoRestart */
void   setAutoRestart(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setAutoRestart)
	(this, ev,flag);
}


/* method: isAutoRestart */
boolean   isAutoRestart(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,isAutoRestart)
	(this, ev);
}


/* method: reset */
void   reset(Environment *ev)
{
   SOM_ResolveD(this,ACBL0046,AWDView,reset)
	(this, ev);
}


/* method: validateInput */
boolean   validateInput(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,validateInput)
	(this, ev);
}


/* method: setPersistent */
void   setPersistent(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setPersistent)
	(this, ev,flag);
}


/* method: isPersistent */
boolean   isPersistent(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,isPersistent)
	(this, ev);
}


/* method: setInProcess */
void   setInProcess(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setInProcess)
	(this, ev,flag);
}


/* method: isInProcess */
boolean   isInProcess(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,isInProcess)
	(this, ev);
}


/* method: setPrimaryRc */
void   setPrimaryRc(Environment *ev,
		unsigned long rc)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setPrimaryRc)
	(this, ev,rc);
}


/* method: primaryRc */
unsigned long   primaryRc(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,primaryRc)
	(this, ev);
}


/* method: setSecondaryRc */
void   setSecondaryRc(Environment *ev,
		unsigned long rc)
{
   SOM_ResolveD(this,ACBL0046,AWDView,setSecondaryRc)
	(this, ev,rc);
}


/* method: secondaryRc */
unsigned long   secondaryRc(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,AWDView,secondaryRc)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0046,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0046,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,ACBL0046,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0046,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0046,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,ACBL0046,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0046,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ACBL0046*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0046,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0046,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0046,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0046,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ACBL0046*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0046,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ACBL0046*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0046,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ACBL0046*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0046,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ACBL0046,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ACBL0046,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,ACBL0046,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,ACBL0046,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,ACBL0046,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0046,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0046,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,ACBL0046,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   ACBL0046_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0046,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0046,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   ACBL0046_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0046,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0046,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,ACBL0046,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,ACBL0046,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,ACBL0046,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ACBL0046,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ACBL0046,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ACBL0046 */



#endif       /* SOM_ACBL0046_xh */

#ifndef SOM_ACBL0046Record_xh
#define SOM_ACBL0046Record_xh

class ACBL0046Record;

#define ACBL0046Record_MajorVersion 0
#define ACBL0046Record_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_RECORD_xh
#include <view.xh>
#endif

#ifndef ACBL0046Record_API
#define ACBL0046Record_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
typedef
struct ACBL0046Record_ACBL0046BUFFER {
char  wrktype[10];
char  wrktypecd;
char  existflag;
char  viewflag;
char  updateflag;
char  wrkselflag;
} ACBL0046Record_ACBL0046BUFFER;
typedef
struct ACBL0046Record_ACBL0046BUFFER* ACBL0046Record_PACBL0046BUFFER;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ACBL0046BUFFER
    #ifdef ACBL0046BUFFER
        #undef ACBL0046BUFFER
        #define SOMTGD_ACBL0046BUFFER 1
    #else
        #define ACBL0046BUFFER ACBL0046Record_ACBL0046BUFFER
    #endif /* ACBL0046BUFFER */
#endif /* SOMTGD_ACBL0046BUFFER */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PACBL0046BUFFER
    #ifdef PACBL0046BUFFER
        #undef PACBL0046BUFFER
        #define SOMTGD_PACBL0046BUFFER 1
    #else
        #define PACBL0046BUFFER ACBL0046Record_PACBL0046BUFFER
    #endif /* PACBL0046BUFFER */
#endif /* SOMTGD_PACBL0046BUFFER */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the ACBL0046Record Class */
SOMEXTERN
#if (defined(SOM_Module_acbl0046_Source) || defined(ACBL0046Record_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0046Record))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK ACBL0046RecordNewClass(
		integer4,
		integer4 );

/* The API to the ACBL0046Record class object, and the methods it introduces. */
SOMEXTERN struct ACBL0046RecordClassDataStructure {
	SOMClass *classObject;
	somMToken existFlag;
	somMToken setInfo;
	somMToken updateFlag;
	somMToken viewFlag;
	somMToken withNonFormattedBuffer;
	somMToken workSelectFlag;
	somMToken workType;
	somMToken workTypeCode;
}
#if !(defined(SOM_Module_acbl0046_Source) || defined(ACBL0046Record_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0046Record))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0046RecordClassData;
#define _ACBL0046Record ACBL0046RecordClassData.classObject

/* The API to parentMtabs for ACBL0046Record, and the instance data it introduces. */
SOMEXTERN struct ACBL0046RecordCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_acbl0046_Source) || defined(ACBL0046Record_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0046Record))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0046RecordCClassData;

/*
 * -- Typedefs for ACBL0046Record Method Procedures
 */
extern "C" {
typedef string   SOMLINK somTP_ACBL0046Record_workType(ACBL0046Record *somSelf, Environment *ev);
typedef somTP_ACBL0046Record_workType *somTD_ACBL0046Record_workType;
typedef char   SOMLINK somTP_ACBL0046Record_workTypeCode(ACBL0046Record *somSelf, Environment *ev);
typedef somTP_ACBL0046Record_workTypeCode *somTD_ACBL0046Record_workTypeCode;
typedef char   SOMLINK somTP_ACBL0046Record_existFlag(ACBL0046Record *somSelf, Environment *ev);
typedef somTP_ACBL0046Record_existFlag *somTD_ACBL0046Record_existFlag;
typedef char   SOMLINK somTP_ACBL0046Record_viewFlag(ACBL0046Record *somSelf, Environment *ev);
typedef somTP_ACBL0046Record_viewFlag *somTD_ACBL0046Record_viewFlag;
typedef char   SOMLINK somTP_ACBL0046Record_updateFlag(ACBL0046Record *somSelf, Environment *ev);
typedef somTP_ACBL0046Record_updateFlag *somTD_ACBL0046Record_updateFlag;
typedef char   SOMLINK somTP_ACBL0046Record_workSelectFlag(ACBL0046Record *somSelf, Environment *ev);
typedef somTP_ACBL0046Record_workSelectFlag *somTD_ACBL0046Record_workSelectFlag;
typedef void   SOMLINK somTP_ACBL0046Record_setInfo(ACBL0046Record *somSelf, Environment *ev,
		ACBL0046Record_PACBL0046BUFFER pWrktypeBuffer);
typedef somTP_ACBL0046Record_setInfo *somTD_ACBL0046Record_setInfo;
typedef void   SOMLINK somTP_ACBL0046Record_withNonFormattedBuffer(ACBL0046Record *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		ACBL0046Record_PACBL0046BUFFER pWrktypeBuffer);
typedef somTP_ACBL0046Record_withNonFormattedBuffer *somTD_ACBL0046Record_withNonFormattedBuffer;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void*   SOMLINK somTP_ACBL0046Record_buffer(ACBL0046Record *somSelf, Environment *ev);
typedef somTP_ACBL0046Record_buffer *somTD_ACBL0046Record_buffer;
typedef void   SOMLINK somTP_ACBL0046Record_setBuffer(ACBL0046Record *somSelf, Environment *ev,
		void* pv);
typedef somTP_ACBL0046Record_setBuffer *somTD_ACBL0046Record_setBuffer;
typedef void   SOMLINK somTP_ACBL0046Record_somDefaultInit(ACBL0046Record *somSelf,
		somInitCtrl* ctrl);
typedef somTP_ACBL0046Record_somDefaultInit *somTD_ACBL0046Record_somDefaultInit;
typedef void   SOMLINK somTP_ACBL0046Record_somDestruct(ACBL0046Record *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_ACBL0046Record_somDestruct *somTD_ACBL0046Record_somDestruct;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0046Record_somfMLinkableInit(ACBL0046Record *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_ACBL0046Record_somfMLinkableInit *somTD_ACBL0046Record_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0046Record_somfGetNext(ACBL0046Record *somSelf, Environment *ev);
typedef somTP_ACBL0046Record_somfGetNext *somTD_ACBL0046Record_somfGetNext;
typedef void   SOMLINK somTP_ACBL0046Record_somfSetNext(ACBL0046Record *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0046Record_somfSetNext *somTD_ACBL0046Record_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0046Record_somfGetPrevious(ACBL0046Record *somSelf, Environment *ev);
typedef somTP_ACBL0046Record_somfGetPrevious *somTD_ACBL0046Record_somfGetPrevious;
typedef void   SOMLINK somTP_ACBL0046Record_somfSetPrevious(ACBL0046Record *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0046Record_somfSetPrevious *somTD_ACBL0046Record_somfSetPrevious;
typedef void   SOMLINK somTP_ACBL0046Record_somInit(ACBL0046Record *somSelf);
typedef somTP_ACBL0046Record_somInit *somTD_ACBL0046Record_somInit;
typedef void   SOMLINK somTP_ACBL0046Record_somDefaultCopyInit(ACBL0046Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046Record_somDefaultCopyInit *somTD_ACBL0046Record_somDefaultCopyInit;
typedef ACBL0046Record*   SOMLINK somTP_ACBL0046Record_somDefaultAssign(ACBL0046Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046Record_somDefaultAssign *somTD_ACBL0046Record_somDefaultAssign;
typedef void   SOMLINK somTP_ACBL0046Record_somDefaultConstCopyInit(ACBL0046Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046Record_somDefaultConstCopyInit *somTD_ACBL0046Record_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ACBL0046Record_somDefaultVCopyInit(ACBL0046Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046Record_somDefaultVCopyInit *somTD_ACBL0046Record_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ACBL0046Record_somDefaultConstVCopyInit(ACBL0046Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046Record_somDefaultConstVCopyInit *somTD_ACBL0046Record_somDefaultConstVCopyInit;
typedef ACBL0046Record*   SOMLINK somTP_ACBL0046Record_somDefaultConstAssign(ACBL0046Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046Record_somDefaultConstAssign *somTD_ACBL0046Record_somDefaultConstAssign;
typedef ACBL0046Record*   SOMLINK somTP_ACBL0046Record_somDefaultVAssign(ACBL0046Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046Record_somDefaultVAssign *somTD_ACBL0046Record_somDefaultVAssign;
typedef ACBL0046Record*   SOMLINK somTP_ACBL0046Record_somDefaultConstVAssign(ACBL0046Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0046Record_somDefaultConstVAssign *somTD_ACBL0046Record_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ACBL0046Record_somFree(ACBL0046Record *somSelf);
typedef somTP_ACBL0046Record_somFree *somTD_ACBL0046Record_somFree;
typedef void   SOMLINK somTP_ACBL0046Record_somUninit(ACBL0046Record *somSelf);
typedef somTP_ACBL0046Record_somUninit *somTD_ACBL0046Record_somUninit;
typedef SOMClass*   SOMLINK somTP_ACBL0046Record_somGetClass(ACBL0046Record *somSelf);
typedef somTP_ACBL0046Record_somGetClass *somTD_ACBL0046Record_somGetClass;
typedef string   SOMLINK somTP_ACBL0046Record_somGetClassName(ACBL0046Record *somSelf);
typedef somTP_ACBL0046Record_somGetClassName *somTD_ACBL0046Record_somGetClassName;
typedef long   SOMLINK somTP_ACBL0046Record_somGetSize(ACBL0046Record *somSelf);
typedef somTP_ACBL0046Record_somGetSize *somTD_ACBL0046Record_somGetSize;
typedef boolean   SOMLINK somTP_ACBL0046Record_somIsA(ACBL0046Record *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0046Record_somIsA *somTD_ACBL0046Record_somIsA;
typedef boolean   SOMLINK somTP_ACBL0046Record_somIsInstanceOf(ACBL0046Record *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0046Record_somIsInstanceOf *somTD_ACBL0046Record_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ACBL0046Record_somRespondsTo(ACBL0046Record *somSelf,
		somId mId);
typedef somTP_ACBL0046Record_somRespondsTo *somTD_ACBL0046Record_somRespondsTo;
typedef boolean   SOMLINK somTP_ACBL0046Record_somDispatch(ACBL0046Record *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0046Record_somDispatch *somTD_ACBL0046Record_somDispatch;
typedef boolean   SOMLINK somTP_ACBL0046Record_somClassDispatch(ACBL0046Record *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0046Record_somClassDispatch *somTD_ACBL0046Record_somClassDispatch;
typedef boolean   SOMLINK somTP_ACBL0046Record_somCastObj(ACBL0046Record *somSelf,
		SOMClass* cls);
typedef somTP_ACBL0046Record_somCastObj *somTD_ACBL0046Record_somCastObj;
typedef boolean   SOMLINK somTP_ACBL0046Record_somResetObj(ACBL0046Record *somSelf);
typedef somTP_ACBL0046Record_somResetObj *somTD_ACBL0046Record_somResetObj;
typedef SOMObject*   SOMLINK somTP_ACBL0046Record_somPrintSelf(ACBL0046Record *somSelf);
typedef somTP_ACBL0046Record_somPrintSelf *somTD_ACBL0046Record_somPrintSelf;
typedef void   SOMLINK somTP_ACBL0046Record_somDumpSelf(ACBL0046Record *somSelf,
		long level);
typedef somTP_ACBL0046Record_somDumpSelf *somTD_ACBL0046Record_somDumpSelf;
typedef void   SOMLINK somTP_ACBL0046Record_somDumpSelfInt(ACBL0046Record *somSelf,
		long level);
typedef somTP_ACBL0046Record_somDumpSelfInt *somTD_ACBL0046Record_somDumpSelfInt;
}

#endif /* ACBL0046Record_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for ACBL0046Record
 */
class ACBL0046Record : public RECORD
{
public:

// ACBL0046Record::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ACBL0046Record) ACBL0046RecordNewClass(ACBL0046Record_MajorVersion,ACBL0046Record_MinorVersion);
   return (void*)
      SOM_Resolve(_ACBL0046Record,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ACBL0046Record));
}

// ACBL0046Record::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ACBL0046Record()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0046RecordCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ACBL0046Record(ACBL0046Record* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0046RecordCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ACBL0046Record(const ACBL0046Record* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0046RecordCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ACBL0046Record(Environment *ev,ACBL0046Record_PACBL0046BUFFER pWrktypeBuffer) 
{
   withNonFormattedBuffer(ev,0,pWrktypeBuffer);
}


/* method: workType */
string   workType(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046Record,ACBL0046Record,workType)
	(this, ev);
}


/* method: workTypeCode */
char   workTypeCode(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046Record,ACBL0046Record,workTypeCode)
	(this, ev);
}


/* method: existFlag */
char   existFlag(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046Record,ACBL0046Record,existFlag)
	(this, ev);
}


/* method: viewFlag */
char   viewFlag(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046Record,ACBL0046Record,viewFlag)
	(this, ev);
}


/* method: updateFlag */
char   updateFlag(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046Record,ACBL0046Record,updateFlag)
	(this, ev);
}


/* method: workSelectFlag */
char   workSelectFlag(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046Record,ACBL0046Record,workSelectFlag)
	(this, ev);
}


/* method: setInfo */
void   setInfo(Environment *ev,
		ACBL0046Record_PACBL0046BUFFER pWrktypeBuffer)
{
   SOM_ResolveD(this,ACBL0046Record,ACBL0046Record,setInfo)
	(this, ev,pWrktypeBuffer);
}


/* initializer method: withNonFormattedBuffer */
void   withNonFormattedBuffer(Environment *ev,
		somInitCtrl* ctrl,
		ACBL0046Record_PACBL0046BUFFER pWrktypeBuffer)
{
   SOM_ResolveD(this,ACBL0046Record,ACBL0046Record,withNonFormattedBuffer)
	(this, ev,ctrl,pWrktypeBuffer);
}


/*
 * Reintroduce inherited methods
 */

/* method: buffer */
void*   buffer(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046Record,RECORD,buffer)
	(this, ev);
}


/* method: setBuffer */
void   setBuffer(Environment *ev,
		void* pv)
{
   SOM_ResolveD(this,ACBL0046Record,RECORD,setBuffer)
	(this, ev,pv);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0046Record,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0046Record,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,ACBL0046Record,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046Record,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0046Record,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0046Record,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0046Record,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,ACBL0046Record,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0046Record,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ACBL0046Record*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0046Record,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0046Record,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0046Record,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0046Record,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ACBL0046Record*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0046Record,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ACBL0046Record*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0046Record,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ACBL0046Record*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0046Record,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ACBL0046Record,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ACBL0046Record,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,ACBL0046Record,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,ACBL0046Record,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,ACBL0046Record,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0046Record,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0046Record,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,ACBL0046Record,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   ACBL0046Record_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0046Record,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0046Record,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   ACBL0046Record_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0046Record,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0046Record,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,ACBL0046Record,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,ACBL0046Record,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,ACBL0046Record,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ACBL0046Record,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ACBL0046Record,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ACBL0046Record */



#endif       /* SOM_ACBL0046Record_xh */
