
#ifndef SOM_SOMList_xh
#define SOM_SOMList_xh

class SOMList;

#define SOMList_MajorVersion 2
#define SOMList_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <mlink.xh>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_TPrimitiveLinkedList_xh
#include <tpll.xh>
#endif

#ifndef SOMList_API
#define SOMList_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class AWDVisitor;

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMList Class */
SOMEXTERN
#if (defined(SOM_Module_somlist_Source) || defined(SOMList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_SOMList))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK SOMListNewClass(
		integer4,
		integer4 );

/* The API to the SOMList class object, and the methods it introduces. */
SOMEXTERN struct SOMListClassDataStructure {
	SOMClass *classObject;
	somMToken forAll;
	somMToken visitAll;
	somMToken invariantOK;
	somMToken deleteAll;
}
#if !(defined(SOM_Module_somlist_Source) || defined(SOMList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_SOMList))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK SOMListClassData;
#define _SOMList SOMListClassData.classObject

/* The API to parentMtabs for SOMList, and the instance data it introduces. */
SOMEXTERN struct SOMListCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_somlist_Source) || defined(SOMList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_SOMList))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK SOMListCClassData;

/*
 * -- Typedefs for SOMList Method Procedures
 */
extern "C" {
typedef boolean   SOMLINK somTP_SOMList_deleteAll(SOMList *somSelf, Environment *ev);
typedef somTP_SOMList_deleteAll *somTD_SOMList_deleteAll;
typedef boolean   SOMLINK somTP_SOMList_forAll(SOMList *somSelf, Environment *ev,
		void* pfn,
		void* pData,
		somf_MLinkable** pLastObject);
typedef somTP_SOMList_forAll *somTD_SOMList_forAll;
typedef boolean   SOMLINK somTP_SOMList_visitAll(SOMList *somSelf, Environment *ev,
		AWDVisitor* visitor);
typedef somTP_SOMList_visitAll *somTD_SOMList_visitAll;
typedef boolean   SOMLINK somTP_SOMList_invariantOK(SOMList *somSelf, Environment *ev);
typedef somTP_SOMList_invariantOK *somTD_SOMList_invariantOK;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef unsigned long   SOMLINK somTP_SOMList_somfCount(SOMList *somSelf, Environment *ev);
typedef somTP_SOMList_somfCount *somTD_SOMList_somfCount;
typedef void   SOMLINK somTP_SOMList_somfRemove(SOMList *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_SOMList_somfRemove *somTD_SOMList_somfRemove;
typedef void   SOMLINK somTP_SOMList_somfRemoveAll(SOMList *somSelf, Environment *ev);
typedef somTP_SOMList_somfRemoveAll *somTD_SOMList_somfRemoveAll;
typedef somf_MLinkable*   SOMLINK somTP_SOMList_somfRemoveFirst(SOMList *somSelf, Environment *ev);
typedef somTP_SOMList_somfRemoveFirst *somTD_SOMList_somfRemoveFirst;
typedef somf_MLinkable*   SOMLINK somTP_SOMList_somfRemoveLast(SOMList *somSelf, Environment *ev);
typedef somTP_SOMList_somfRemoveLast *somTD_SOMList_somfRemoveLast;
typedef void   SOMLINK somTP_SOMList_somfAddBefore(SOMList *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_SOMList_somfAddBefore *somTD_SOMList_somfAddBefore;
typedef void   SOMLINK somTP_SOMList_somfAddAfter(SOMList *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_SOMList_somfAddAfter *somTD_SOMList_somfAddAfter;
typedef void   SOMLINK somTP_SOMList_somfAddFirst(SOMList *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_SOMList_somfAddFirst *somTD_SOMList_somfAddFirst;
typedef void   SOMLINK somTP_SOMList_somfAddLast(SOMList *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_SOMList_somfAddLast *somTD_SOMList_somfAddLast;
typedef somf_MLinkable*   SOMLINK somTP_SOMList_somfAfter(SOMList *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_SOMList_somfAfter *somTD_SOMList_somfAfter;
typedef somf_MLinkable*   SOMLINK somTP_SOMList_somfBefore(SOMList *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_SOMList_somfBefore *somTD_SOMList_somfBefore;
typedef somf_MLinkable*   SOMLINK somTP_SOMList_somfFirst(SOMList *somSelf, Environment *ev);
typedef somTP_SOMList_somfFirst *somTD_SOMList_somfFirst;
typedef somf_MLinkable*   SOMLINK somTP_SOMList_somfLast(SOMList *somSelf, Environment *ev);
typedef somTP_SOMList_somfLast *somTD_SOMList_somfLast;
typedef void   SOMLINK somTP_SOMList_somInit(SOMList *somSelf);
typedef somTP_SOMList_somInit *somTD_SOMList_somInit;
typedef void   SOMLINK somTP_SOMList_somUninit(SOMList *somSelf);
typedef somTP_SOMList_somUninit *somTD_SOMList_somUninit;
typedef void   SOMLINK somTP_SOMList_somDefaultInit(SOMList *somSelf,
		somInitCtrl* ctrl);
typedef somTP_SOMList_somDefaultInit *somTD_SOMList_somDefaultInit;
typedef void   SOMLINK somTP_SOMList_somDestruct(SOMList *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_SOMList_somDestruct *somTD_SOMList_somDestruct;
typedef void   SOMLINK somTP_SOMList_somDefaultCopyInit(SOMList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMList_somDefaultCopyInit *somTD_SOMList_somDefaultCopyInit;
typedef SOMList*   SOMLINK somTP_SOMList_somDefaultAssign(SOMList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMList_somDefaultAssign *somTD_SOMList_somDefaultAssign;
typedef void   SOMLINK somTP_SOMList_somDefaultConstCopyInit(SOMList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMList_somDefaultConstCopyInit *somTD_SOMList_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMList_somDefaultVCopyInit(SOMList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMList_somDefaultVCopyInit *somTD_SOMList_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMList_somDefaultConstVCopyInit(SOMList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMList_somDefaultConstVCopyInit *somTD_SOMList_somDefaultConstVCopyInit;
typedef SOMList*   SOMLINK somTP_SOMList_somDefaultConstAssign(SOMList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMList_somDefaultConstAssign *somTD_SOMList_somDefaultConstAssign;
typedef SOMList*   SOMLINK somTP_SOMList_somDefaultVAssign(SOMList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMList_somDefaultVAssign *somTD_SOMList_somDefaultVAssign;
typedef SOMList*   SOMLINK somTP_SOMList_somDefaultConstVAssign(SOMList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SOMList_somDefaultConstVAssign *somTD_SOMList_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMList_somFree(SOMList *somSelf);
typedef somTP_SOMList_somFree *somTD_SOMList_somFree;
typedef SOMClass*   SOMLINK somTP_SOMList_somGetClass(SOMList *somSelf);
typedef somTP_SOMList_somGetClass *somTD_SOMList_somGetClass;
typedef string   SOMLINK somTP_SOMList_somGetClassName(SOMList *somSelf);
typedef somTP_SOMList_somGetClassName *somTD_SOMList_somGetClassName;
typedef long   SOMLINK somTP_SOMList_somGetSize(SOMList *somSelf);
typedef somTP_SOMList_somGetSize *somTD_SOMList_somGetSize;
typedef boolean   SOMLINK somTP_SOMList_somIsA(SOMList *somSelf,
		SOMClass* aClassObj);
typedef somTP_SOMList_somIsA *somTD_SOMList_somIsA;
typedef boolean   SOMLINK somTP_SOMList_somIsInstanceOf(SOMList *somSelf,
		SOMClass* aClassObj);
typedef somTP_SOMList_somIsInstanceOf *somTD_SOMList_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMList_somRespondsTo(SOMList *somSelf,
		somId mId);
typedef somTP_SOMList_somRespondsTo *somTD_SOMList_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMList_somDispatch(SOMList *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_SOMList_somDispatch *somTD_SOMList_somDispatch;
typedef boolean   SOMLINK somTP_SOMList_somClassDispatch(SOMList *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_SOMList_somClassDispatch *somTD_SOMList_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMList_somCastObj(SOMList *somSelf,
		SOMClass* cls);
typedef somTP_SOMList_somCastObj *somTD_SOMList_somCastObj;
typedef boolean   SOMLINK somTP_SOMList_somResetObj(SOMList *somSelf);
typedef somTP_SOMList_somResetObj *somTD_SOMList_somResetObj;
typedef SOMObject*   SOMLINK somTP_SOMList_somPrintSelf(SOMList *somSelf);
typedef somTP_SOMList_somPrintSelf *somTD_SOMList_somPrintSelf;
typedef void   SOMLINK somTP_SOMList_somDumpSelf(SOMList *somSelf,
		long level);
typedef somTP_SOMList_somDumpSelf *somTD_SOMList_somDumpSelf;
typedef void   SOMLINK somTP_SOMList_somDumpSelfInt(SOMList *somSelf,
		long level);
typedef somTP_SOMList_somDumpSelfInt *somTD_SOMList_somDumpSelfInt;
}

#endif /* SOMList_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for SOMList
 */
class SOMList : public somf_TPrimitiveLinkedList
{
public:

// SOMList::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMList) SOMListNewClass(SOMList_MajorVersion,SOMList_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMList,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMList));
}

// SOMList::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMList()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMList(SOMList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMList(const SOMList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: deleteAll */
boolean   deleteAll(Environment *ev)
{
   return SOM_ResolveD(this,SOMList,SOMList,deleteAll)
	(this, ev);
}


/* method: forAll */
boolean   forAll(Environment *ev,
		void* pfn,
		void* pData,
		somf_MLinkable** pLastObject)
{
   return SOM_ResolveD(this,SOMList,SOMList,forAll)
	(this, ev,pfn,pData,pLastObject);
}


/* method: visitAll */
boolean   visitAll(Environment *ev,
		AWDVisitor* visitor)
{
   return SOM_ResolveD(this,SOMList,SOMList,visitAll)
	(this, ev,visitor);
}


/* method: invariantOK */
boolean   invariantOK(Environment *ev)
{
   return SOM_ResolveD(this,SOMList,SOMList,invariantOK)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfCount */
unsigned long   somfCount(Environment *ev)
{
   return SOM_ResolveD(this,SOMList,somf_TPrimitiveLinkedList,somfCount)
	(this, ev);
}


/* method: somfRemove */
void   somfRemove(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,SOMList,somf_TPrimitiveLinkedList,somfRemove)
	(this, ev,aLink);
}


/* method: somfRemoveAll */
void   somfRemoveAll(Environment *ev)
{
   SOM_ResolveD(this,SOMList,somf_TPrimitiveLinkedList,somfRemoveAll)
	(this, ev);
}


/* method: somfRemoveFirst */
somf_MLinkable*   somfRemoveFirst(Environment *ev)
{
   return SOM_ResolveD(this,SOMList,somf_TPrimitiveLinkedList,somfRemoveFirst)
	(this, ev);
}


/* method: somfRemoveLast */
somf_MLinkable*   somfRemoveLast(Environment *ev)
{
   return SOM_ResolveD(this,SOMList,somf_TPrimitiveLinkedList,somfRemoveLast)
	(this, ev);
}


/* method: somfAddBefore */
void   somfAddBefore(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,SOMList,somf_TPrimitiveLinkedList,somfAddBefore)
	(this, ev,existing,obj);
}


/* method: somfAddAfter */
void   somfAddAfter(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,SOMList,somf_TPrimitiveLinkedList,somfAddAfter)
	(this, ev,existing,obj);
}


/* method: somfAddFirst */
void   somfAddFirst(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,SOMList,somf_TPrimitiveLinkedList,somfAddFirst)
	(this, ev,obj);
}


/* method: somfAddLast */
void   somfAddLast(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,SOMList,somf_TPrimitiveLinkedList,somfAddLast)
	(this, ev,obj);
}


/* method: somfAfter */
somf_MLinkable*   somfAfter(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,SOMList,somf_TPrimitiveLinkedList,somfAfter)
	(this, ev,existingobj);
}


/* method: somfBefore */
somf_MLinkable*   somfBefore(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,SOMList,somf_TPrimitiveLinkedList,somfBefore)
	(this, ev,existingobj);
}


/* method: somfFirst */
somf_MLinkable*   somfFirst(Environment *ev)
{
   return SOM_ResolveD(this,SOMList,somf_TPrimitiveLinkedList,somfFirst)
	(this, ev);
}


/* method: somfLast */
somf_MLinkable*   somfLast(Environment *ev)
{
   return SOM_ResolveD(this,SOMList,somf_TPrimitiveLinkedList,somfLast)
	(this, ev);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,SOMList,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,SOMList,SOMObject,somUninit)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,SOMList,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,SOMList,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMList,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMList*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMList,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMList,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMList,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMList,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMList*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMList,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMList*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMList,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMList*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMList,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,SOMList,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,SOMList,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,SOMList,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,SOMList,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SOMList,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SOMList,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,SOMList,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   SOMList_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,SOMList,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMList,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   SOMList_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,SOMList,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMList,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,SOMList,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,SOMList,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,SOMList,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,SOMList,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,SOMList,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMList */



#endif       /* SOM_SOMList_xh */

#ifndef SOM_AWDVisitor_xh
#define SOM_AWDVisitor_xh

class AWDVisitor;

#define AWDVisitor_MajorVersion 2
#define AWDVisitor_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <mlink.xh>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef AWDVisitor_API
#define AWDVisitor_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDVisitor Class */
SOMEXTERN
#if (defined(SOM_Module_somlist_Source) || defined(AWDVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDVisitor))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDVisitorNewClass(
		integer4,
		integer4 );

/* The API to the AWDVisitor class object, and the methods it introduces. */
SOMEXTERN struct AWDVisitorClassDataStructure {
	SOMClass *classObject;
	somMToken visit;
}
#if !(defined(SOM_Module_somlist_Source) || defined(AWDVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDVisitorClassData;
#define _AWDVisitor AWDVisitorClassData.classObject

/* The API to parentMtabs for AWDVisitor, and the instance data it introduces. */
SOMEXTERN struct AWDVisitorCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_somlist_Source) || defined(AWDVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDVisitorCClassData;

/*
 * -- Typedefs for AWDVisitor Method Procedures
 */
extern "C" {
typedef boolean   SOMLINK somTP_AWDVisitor_visit(AWDVisitor *somSelf, Environment *ev,
		somf_MLinkable* node);
typedef somTP_AWDVisitor_visit *somTD_AWDVisitor_visit;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_AWDVisitor_somDefaultInit(AWDVisitor *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDVisitor_somDefaultInit *somTD_AWDVisitor_somDefaultInit;
typedef void   SOMLINK somTP_AWDVisitor_somDestruct(AWDVisitor *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDVisitor_somDestruct *somTD_AWDVisitor_somDestruct;
typedef void   SOMLINK somTP_AWDVisitor_somDefaultCopyInit(AWDVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDVisitor_somDefaultCopyInit *somTD_AWDVisitor_somDefaultCopyInit;
typedef AWDVisitor*   SOMLINK somTP_AWDVisitor_somDefaultAssign(AWDVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDVisitor_somDefaultAssign *somTD_AWDVisitor_somDefaultAssign;
typedef void   SOMLINK somTP_AWDVisitor_somDefaultConstCopyInit(AWDVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDVisitor_somDefaultConstCopyInit *somTD_AWDVisitor_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDVisitor_somDefaultVCopyInit(AWDVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDVisitor_somDefaultVCopyInit *somTD_AWDVisitor_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDVisitor_somDefaultConstVCopyInit(AWDVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDVisitor_somDefaultConstVCopyInit *somTD_AWDVisitor_somDefaultConstVCopyInit;
typedef AWDVisitor*   SOMLINK somTP_AWDVisitor_somDefaultConstAssign(AWDVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDVisitor_somDefaultConstAssign *somTD_AWDVisitor_somDefaultConstAssign;
typedef AWDVisitor*   SOMLINK somTP_AWDVisitor_somDefaultVAssign(AWDVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDVisitor_somDefaultVAssign *somTD_AWDVisitor_somDefaultVAssign;
typedef AWDVisitor*   SOMLINK somTP_AWDVisitor_somDefaultConstVAssign(AWDVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDVisitor_somDefaultConstVAssign *somTD_AWDVisitor_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDVisitor_somInit(AWDVisitor *somSelf);
typedef somTP_AWDVisitor_somInit *somTD_AWDVisitor_somInit;
typedef void   SOMLINK somTP_AWDVisitor_somFree(AWDVisitor *somSelf);
typedef somTP_AWDVisitor_somFree *somTD_AWDVisitor_somFree;
typedef void   SOMLINK somTP_AWDVisitor_somUninit(AWDVisitor *somSelf);
typedef somTP_AWDVisitor_somUninit *somTD_AWDVisitor_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDVisitor_somGetClass(AWDVisitor *somSelf);
typedef somTP_AWDVisitor_somGetClass *somTD_AWDVisitor_somGetClass;
typedef string   SOMLINK somTP_AWDVisitor_somGetClassName(AWDVisitor *somSelf);
typedef somTP_AWDVisitor_somGetClassName *somTD_AWDVisitor_somGetClassName;
typedef long   SOMLINK somTP_AWDVisitor_somGetSize(AWDVisitor *somSelf);
typedef somTP_AWDVisitor_somGetSize *somTD_AWDVisitor_somGetSize;
typedef boolean   SOMLINK somTP_AWDVisitor_somIsA(AWDVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDVisitor_somIsA *somTD_AWDVisitor_somIsA;
typedef boolean   SOMLINK somTP_AWDVisitor_somIsInstanceOf(AWDVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDVisitor_somIsInstanceOf *somTD_AWDVisitor_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDVisitor_somRespondsTo(AWDVisitor *somSelf,
		somId mId);
typedef somTP_AWDVisitor_somRespondsTo *somTD_AWDVisitor_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDVisitor_somDispatch(AWDVisitor *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDVisitor_somDispatch *somTD_AWDVisitor_somDispatch;
typedef boolean   SOMLINK somTP_AWDVisitor_somClassDispatch(AWDVisitor *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDVisitor_somClassDispatch *somTD_AWDVisitor_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDVisitor_somCastObj(AWDVisitor *somSelf,
		SOMClass* cls);
typedef somTP_AWDVisitor_somCastObj *somTD_AWDVisitor_somCastObj;
typedef boolean   SOMLINK somTP_AWDVisitor_somResetObj(AWDVisitor *somSelf);
typedef somTP_AWDVisitor_somResetObj *somTD_AWDVisitor_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDVisitor_somPrintSelf(AWDVisitor *somSelf);
typedef somTP_AWDVisitor_somPrintSelf *somTD_AWDVisitor_somPrintSelf;
typedef void   SOMLINK somTP_AWDVisitor_somDumpSelf(AWDVisitor *somSelf,
		long level);
typedef somTP_AWDVisitor_somDumpSelf *somTD_AWDVisitor_somDumpSelf;
typedef void   SOMLINK somTP_AWDVisitor_somDumpSelfInt(AWDVisitor *somSelf,
		long level);
typedef somTP_AWDVisitor_somDumpSelfInt *somTD_AWDVisitor_somDumpSelfInt;
}

#endif /* AWDVisitor_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDVisitor
 */
class AWDVisitor : public SOMObject
{
public:

// AWDVisitor::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDVisitor) AWDVisitorNewClass(AWDVisitor_MajorVersion,AWDVisitor_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDVisitor,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDVisitor));
}

// AWDVisitor::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDVisitor()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDVisitor(AWDVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDVisitor(const AWDVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: visit */
boolean   visit(Environment *ev,
		somf_MLinkable* node)
{
   return SOM_ResolveD(this,AWDVisitor,AWDVisitor,visit)
	(this, ev,node);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDVisitor,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDVisitor,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDVisitor,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDVisitor*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDVisitor,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDVisitor,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDVisitor,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDVisitor,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDVisitor*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDVisitor,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDVisitor*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDVisitor,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDVisitor*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDVisitor,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDVisitor,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDVisitor,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDVisitor,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDVisitor,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDVisitor,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDVisitor,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDVisitor,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDVisitor,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDVisitor,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDVisitor_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDVisitor_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDVisitor,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDVisitor,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDVisitor,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDVisitor,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDVisitor,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDVisitor */



#endif       /* SOM_AWDVisitor_xh */
