
#ifndef SOM_AWDTree_xh
#define SOM_AWDTree_xh

class AWDTree;

#define AWDTree_MajorVersion 2
#define AWDTree_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "awdobj.xh"
#include "structs.xh"

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDCommon_xh
#include <common.xh>
#endif

#ifndef AWDTree_API
#define AWDTree_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class AWDPersist;
class AWDBase;
class iostream;
class AWDVisitor;
class AWDServiceManager;
class AWDCommentAid;
class AWDString;
class AWDAlphaField;
class AWDDateTime;
class AWDBaseField;
class AWDDictionary;
class AWDDateTimeField;
class AWDGroupField;
class AWDApplication;
class AWDFieldFactory;
class AWDEntityKey;
class AWDMenu;
class CCriticalSection;
class FieldList;
class AWDRelationship;
class AWDTreeVisitor;
class AWDTreeIterator;
class ACBL0008;
class LookupServiceAid;
class AWDWork;
class ostrstream;
typedef unsigned long AWDTree_DIRECTION;
#define AWDTree_UP 1UL
#define AWDTree_DOWN 2UL
#define AWDTree_BOTH 3UL
typedef unsigned long AWDTree_BRANCH;
#define AWDTree_CHILD 1UL
#define AWDTree_NEXT 2UL
typedef unsigned long AWDTree_EXPAND_RESULT;
#define AWDTree_NO_PARENTS 1UL
#define AWDTree_MULTIPLE_PARENTS 2UL
#define AWDTree_SUCCESSFUL 3UL
#define AWDTree_UNSUCCESSFUL 4UL
#define AWDTree_REFRESH_GUI_FROM_TREE 5UL

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_DIRECTION
    #ifdef DIRECTION
        #undef DIRECTION
        #define SOMTGD_DIRECTION 1
    #else
        #define DIRECTION AWDTree_DIRECTION
    #endif /* DIRECTION */
#endif /* SOMTGD_DIRECTION */
#ifndef SOMTGD_BRANCH
    #ifdef BRANCH
        #undef BRANCH
        #define SOMTGD_BRANCH 1
    #else
        #define BRANCH AWDTree_BRANCH
    #endif /* BRANCH */
#endif /* SOMTGD_BRANCH */
#ifndef SOMTGD_EXPAND_RESULT
    #ifdef EXPAND_RESULT
        #undef EXPAND_RESULT
        #define SOMTGD_EXPAND_RESULT 1
    #else
        #define EXPAND_RESULT AWDTree_EXPAND_RESULT
    #endif /* EXPAND_RESULT */
#endif /* SOMTGD_EXPAND_RESULT */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDTree Class */
SOMEXTERN
#if (defined(SOM_Module_AWDTREE_Source) || defined(AWDTree_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTree))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDTreeNewClass(
		integer4,
		integer4 );

/* The API to the AWDTree class object, and the methods it introduces. */
SOMEXTERN struct AWDTreeClassDataStructure {
	SOMClass *classObject;
	somMToken addItem;
	somMToken deleteAll;
	somMToken deleteItem;
	somMToken expand;
	somMToken findItemFromKey;
	somMToken getIterator;
	somMToken getPersonalQueue;
	somMToken getWork;
	somMToken isEmpty;
	somMToken lock;
	somMToken lookup;
	somMToken root;
	somMToken refresh;
	somMToken unlock;
	somMToken update;
	somMToken workSelectedItem;
	somMToken withPersist;
	somMToken count;
	somMToken withTree;
	somMToken applyField;
	somMToken more;
	somMToken setLookupAid;
	somMToken process;
	somMToken getChildren;
	somMToken getParents;
	somMToken addAfter;
	somMToken addBefore;
	somMToken isMore;
	somMToken addTree;
	somMToken setAutoDelete;
	somMToken getAutoDelete;
	somMToken withTreeandAuto;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(AWDTree_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTree))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDTreeClassData;
#define _AWDTree AWDTreeClassData.classObject

/* The API to parentMtabs for AWDTree, and the instance data it introduces. */
SOMEXTERN struct AWDTreeCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(AWDTree_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTree))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDTreeCClassData;

/*
 * -- Typedefs for AWDTree Method Procedures
 */
extern "C" {
typedef boolean   SOMLINK somTP_AWDTree_addItem(AWDTree *somSelf, Environment *ev,
		AWDBase* itemToAdd,
		AWDBase* parentItem);
typedef somTP_AWDTree_addItem *somTD_AWDTree_addItem;
typedef boolean   SOMLINK somTP_AWDTree_addAfter(AWDTree *somSelf, Environment *ev,
		AWDBase* itemToAdd,
		AWDBase* previousItem);
typedef somTP_AWDTree_addAfter *somTD_AWDTree_addAfter;
typedef boolean   SOMLINK somTP_AWDTree_addBefore(AWDTree *somSelf, Environment *ev,
		AWDBase* itemToAdd,
		AWDBase* nextItem);
typedef somTP_AWDTree_addBefore *somTD_AWDTree_addBefore;
typedef boolean   SOMLINK somTP_AWDTree_addTree(AWDTree *somSelf, Environment *ev,
		AWDTree* treeToAdd);
typedef somTP_AWDTree_addTree *somTD_AWDTree_addTree;
typedef void   SOMLINK somTP_AWDTree_applyField(AWDTree *somSelf, Environment *ev,
		char* dataName,
		unsigned short usSeqNo,
		char* pszValue);
typedef somTP_AWDTree_applyField *somTD_AWDTree_applyField;
typedef unsigned long   SOMLINK somTP_AWDTree_count(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_count *somTD_AWDTree_count;
typedef boolean   SOMLINK somTP_AWDTree_deleteAll(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_deleteAll *somTD_AWDTree_deleteAll;
typedef boolean   SOMLINK somTP_AWDTree_deleteItem(AWDTree *somSelf, Environment *ev,
		AWDBase* itemToDelete);
typedef somTP_AWDTree_deleteItem *somTD_AWDTree_deleteItem;
typedef AWDTree_EXPAND_RESULT   SOMLINK somTP_AWDTree_expand(AWDTree *somSelf, Environment *ev,
		AWDBase* itemToExpand,
		AWDTree_DIRECTION whichway,
		boolean lockChildren);
typedef somTP_AWDTree_expand *somTD_AWDTree_expand;
typedef AWDBase*   SOMLINK somTP_AWDTree_findItemFromKey(AWDTree *somSelf, Environment *ev,
		AWD_AWDOBJECTKEYSTRCT* key);
typedef somTP_AWDTree_findItemFromKey *somTD_AWDTree_findItemFromKey;
typedef AWDTreeIterator*   SOMLINK somTP_AWDTree_getIterator(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_getIterator *somTD_AWDTree_getIterator;
typedef boolean   SOMLINK somTP_AWDTree_getPersonalQueue(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_getPersonalQueue *somTD_AWDTree_getPersonalQueue;
typedef boolean   SOMLINK somTP_AWDTree_getWork(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_getWork *somTD_AWDTree_getWork;
typedef boolean   SOMLINK somTP_AWDTree_isEmpty(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_isEmpty *somTD_AWDTree_isEmpty;
typedef boolean   SOMLINK somTP_AWDTree_lock(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_lock *somTD_AWDTree_lock;
typedef boolean   SOMLINK somTP_AWDTree_lookup(AWDTree *somSelf, Environment *ev,
		string pszLookup);
typedef somTP_AWDTree_lookup *somTD_AWDTree_lookup;
typedef boolean   SOMLINK somTP_AWDTree_process(AWDTree *somSelf, Environment *ev,
		AWDWork* wrkObj);
typedef somTP_AWDTree_process *somTD_AWDTree_process;
typedef AWDBase*   SOMLINK somTP_AWDTree_more(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_more *somTD_AWDTree_more;
typedef boolean   SOMLINK somTP_AWDTree_isMore(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_isMore *somTD_AWDTree_isMore;
typedef boolean   SOMLINK somTP_AWDTree_refresh(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_refresh *somTD_AWDTree_refresh;
typedef AWDBase*   SOMLINK somTP_AWDTree_root(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_root *somTD_AWDTree_root;
typedef void   SOMLINK somTP_AWDTree_setLookupAid(AWDTree *somSelf, Environment *ev,
		LookupServiceAid* lkaid);
typedef somTP_AWDTree_setLookupAid *somTD_AWDTree_setLookupAid;
typedef boolean   SOMLINK somTP_AWDTree_unlock(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_unlock *somTD_AWDTree_unlock;
typedef boolean   SOMLINK somTP_AWDTree_update(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_update *somTD_AWDTree_update;
typedef AWDBase*   SOMLINK somTP_AWDTree_workSelectedItem(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_workSelectedItem *somTD_AWDTree_workSelectedItem;
typedef boolean   SOMLINK somTP_AWDTree_getParents(AWDTree *somSelf, Environment *ev,
		AWDBase* childItem);
typedef somTP_AWDTree_getParents *somTD_AWDTree_getParents;
typedef boolean   SOMLINK somTP_AWDTree_getChildren(AWDTree *somSelf, Environment *ev,
		AWDBase* parentItem);
typedef somTP_AWDTree_getChildren *somTD_AWDTree_getChildren;
typedef void   SOMLINK somTP_AWDTree_setAutoDelete(AWDTree *somSelf, Environment *ev,
		boolean autoDelete);
typedef somTP_AWDTree_setAutoDelete *somTD_AWDTree_setAutoDelete;
typedef boolean   SOMLINK somTP_AWDTree_getAutoDelete(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_getAutoDelete *somTD_AWDTree_getAutoDelete;
typedef void   SOMLINK somTP_AWDTree_withPersist(AWDTree *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDTree_withPersist *somTD_AWDTree_withPersist;
typedef void   SOMLINK somTP_AWDTree_withTree(AWDTree *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDTree* argTree);
typedef somTP_AWDTree_withTree *somTD_AWDTree_withTree;
typedef void   SOMLINK somTP_AWDTree_withTreeandAuto(AWDTree *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDTree* argTree,
		boolean autoDelete);
typedef somTP_AWDTree_withTreeandAuto *somTD_AWDTree_withTreeandAuto;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_AWDTree_store(AWDTree *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDTree_store *somTD_AWDTree_store;
typedef void   SOMLINK somTP_AWDTree_restore(AWDTree *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDTree_restore *somTD_AWDTree_restore;
typedef void   SOMLINK somTP_AWDTree_somDefaultInit(AWDTree *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDTree_somDefaultInit *somTD_AWDTree_somDefaultInit;
typedef void   SOMLINK somTP_AWDTree_somDestruct(AWDTree *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDTree_somDestruct *somTD_AWDTree_somDestruct;
typedef somf_MLinkable*   SOMLINK somTP_AWDTree_somfMLinkableInit(AWDTree *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_AWDTree_somfMLinkableInit *somTD_AWDTree_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_AWDTree_somfGetNext(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_somfGetNext *somTD_AWDTree_somfGetNext;
typedef void   SOMLINK somTP_AWDTree_somfSetNext(AWDTree *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDTree_somfSetNext *somTD_AWDTree_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_AWDTree_somfGetPrevious(AWDTree *somSelf, Environment *ev);
typedef somTP_AWDTree_somfGetPrevious *somTD_AWDTree_somfGetPrevious;
typedef void   SOMLINK somTP_AWDTree_somfSetPrevious(AWDTree *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDTree_somfSetPrevious *somTD_AWDTree_somfSetPrevious;
typedef void   SOMLINK somTP_AWDTree_somInit(AWDTree *somSelf);
typedef somTP_AWDTree_somInit *somTD_AWDTree_somInit;
typedef void   SOMLINK somTP_AWDTree_somDefaultCopyInit(AWDTree *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTree_somDefaultCopyInit *somTD_AWDTree_somDefaultCopyInit;
typedef AWDTree*   SOMLINK somTP_AWDTree_somDefaultAssign(AWDTree *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTree_somDefaultAssign *somTD_AWDTree_somDefaultAssign;
typedef void   SOMLINK somTP_AWDTree_somDefaultConstCopyInit(AWDTree *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTree_somDefaultConstCopyInit *somTD_AWDTree_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDTree_somDefaultVCopyInit(AWDTree *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTree_somDefaultVCopyInit *somTD_AWDTree_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDTree_somDefaultConstVCopyInit(AWDTree *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTree_somDefaultConstVCopyInit *somTD_AWDTree_somDefaultConstVCopyInit;
typedef AWDTree*   SOMLINK somTP_AWDTree_somDefaultConstAssign(AWDTree *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTree_somDefaultConstAssign *somTD_AWDTree_somDefaultConstAssign;
typedef AWDTree*   SOMLINK somTP_AWDTree_somDefaultVAssign(AWDTree *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTree_somDefaultVAssign *somTD_AWDTree_somDefaultVAssign;
typedef AWDTree*   SOMLINK somTP_AWDTree_somDefaultConstVAssign(AWDTree *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTree_somDefaultConstVAssign *somTD_AWDTree_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDTree_somFree(AWDTree *somSelf);
typedef somTP_AWDTree_somFree *somTD_AWDTree_somFree;
typedef void   SOMLINK somTP_AWDTree_somUninit(AWDTree *somSelf);
typedef somTP_AWDTree_somUninit *somTD_AWDTree_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDTree_somGetClass(AWDTree *somSelf);
typedef somTP_AWDTree_somGetClass *somTD_AWDTree_somGetClass;
typedef string   SOMLINK somTP_AWDTree_somGetClassName(AWDTree *somSelf);
typedef somTP_AWDTree_somGetClassName *somTD_AWDTree_somGetClassName;
typedef long   SOMLINK somTP_AWDTree_somGetSize(AWDTree *somSelf);
typedef somTP_AWDTree_somGetSize *somTD_AWDTree_somGetSize;
typedef boolean   SOMLINK somTP_AWDTree_somIsA(AWDTree *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDTree_somIsA *somTD_AWDTree_somIsA;
typedef boolean   SOMLINK somTP_AWDTree_somIsInstanceOf(AWDTree *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDTree_somIsInstanceOf *somTD_AWDTree_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDTree_somRespondsTo(AWDTree *somSelf,
		somId mId);
typedef somTP_AWDTree_somRespondsTo *somTD_AWDTree_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDTree_somDispatch(AWDTree *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDTree_somDispatch *somTD_AWDTree_somDispatch;
typedef boolean   SOMLINK somTP_AWDTree_somClassDispatch(AWDTree *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDTree_somClassDispatch *somTD_AWDTree_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDTree_somCastObj(AWDTree *somSelf,
		SOMClass* cls);
typedef somTP_AWDTree_somCastObj *somTD_AWDTree_somCastObj;
typedef boolean   SOMLINK somTP_AWDTree_somResetObj(AWDTree *somSelf);
typedef somTP_AWDTree_somResetObj *somTD_AWDTree_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDTree_somPrintSelf(AWDTree *somSelf);
typedef somTP_AWDTree_somPrintSelf *somTD_AWDTree_somPrintSelf;
typedef void   SOMLINK somTP_AWDTree_somDumpSelf(AWDTree *somSelf,
		long level);
typedef somTP_AWDTree_somDumpSelf *somTD_AWDTree_somDumpSelf;
typedef void   SOMLINK somTP_AWDTree_somDumpSelfInt(AWDTree *somSelf,
		long level);
typedef somTP_AWDTree_somDumpSelfInt *somTD_AWDTree_somDumpSelfInt;
}

#endif /* AWDTree_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDTree
 */
class AWDTree : public AWDCommon
{
public:

// AWDTree::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDTree) AWDTreeNewClass(AWDTree_MajorVersion,AWDTree_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDTree,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDTree));
}

// AWDTree::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDTree()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTreeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDTree(AWDTree* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTreeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDTree(const AWDTree* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTreeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDTree(Environment *ev,AWDPersist* pPersist) 
{
   withPersist(ev,0,pPersist);
}

AWDTree(Environment *ev,AWDTree* argTree) 
{
   withTree(ev,0,argTree);
}

AWDTree(Environment *ev,AWDTree* argTree,boolean autoDelete) 
{
   withTreeandAuto(ev,0,argTree,autoDelete);
}


/* method: addItem */
boolean   addItem(Environment *ev,
		AWDBase* itemToAdd,
		AWDBase* parentItem)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,addItem)
	(this, ev,itemToAdd,parentItem);
}


/* method: addAfter */
boolean   addAfter(Environment *ev,
		AWDBase* itemToAdd,
		AWDBase* previousItem)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,addAfter)
	(this, ev,itemToAdd,previousItem);
}


/* method: addBefore */
boolean   addBefore(Environment *ev,
		AWDBase* itemToAdd,
		AWDBase* nextItem)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,addBefore)
	(this, ev,itemToAdd,nextItem);
}


/* method: addTree */
boolean   addTree(Environment *ev,
		AWDTree* treeToAdd)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,addTree)
	(this, ev,treeToAdd);
}


/* method: applyField */
void   applyField(Environment *ev,
		char* dataName,
		unsigned short usSeqNo,
		char* pszValue)
{
   SOM_ResolveD(this,AWDTree,AWDTree,applyField)
	(this, ev,dataName,usSeqNo,pszValue);
}


/* method: count */
unsigned long   count(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,count)
	(this, ev);
}


/* method: deleteAll */
boolean   deleteAll(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,deleteAll)
	(this, ev);
}


/* method: deleteItem */
boolean   deleteItem(Environment *ev,
		AWDBase* itemToDelete)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,deleteItem)
	(this, ev,itemToDelete);
}


/* method: expand */
AWDTree_EXPAND_RESULT   expand(Environment *ev,
		AWDBase* itemToExpand,
		AWDTree_DIRECTION whichway,
		boolean lockChildren)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,expand)
	(this, ev,itemToExpand,whichway,lockChildren);
}


/* method: findItemFromKey */
AWDBase*   findItemFromKey(Environment *ev,
		AWD_AWDOBJECTKEYSTRCT* key)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,findItemFromKey)
	(this, ev,key);
}


/* method: getIterator */
AWDTreeIterator*   getIterator(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,getIterator)
	(this, ev);
}


/* method: getPersonalQueue */
boolean   getPersonalQueue(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,getPersonalQueue)
	(this, ev);
}


/* method: getWork */
boolean   getWork(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,getWork)
	(this, ev);
}


/* method: isEmpty */
boolean   isEmpty(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,isEmpty)
	(this, ev);
}


/* method: lock */
boolean   lock(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,lock)
	(this, ev);
}


/* method: lookup */
boolean   lookup(Environment *ev,
		string pszLookup)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,lookup)
	(this, ev,pszLookup);
}


/* method: process */
boolean   process(Environment *ev,
		AWDWork* wrkObj)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,process)
	(this, ev,wrkObj);
}


/* method: more */
AWDBase*   more(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,more)
	(this, ev);
}


/* method: isMore */
boolean   isMore(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,isMore)
	(this, ev);
}


/* method: refresh */
boolean   refresh(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,refresh)
	(this, ev);
}


/* method: root */
AWDBase*   root(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,root)
	(this, ev);
}


/* method: setLookupAid */
void   setLookupAid(Environment *ev,
		LookupServiceAid* lkaid)
{
   SOM_ResolveD(this,AWDTree,AWDTree,setLookupAid)
	(this, ev,lkaid);
}


/* method: unlock */
boolean   unlock(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,unlock)
	(this, ev);
}


/* method: update */
boolean   update(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,update)
	(this, ev);
}


/* method: workSelectedItem */
AWDBase*   workSelectedItem(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,workSelectedItem)
	(this, ev);
}


/* method: getParents */
boolean   getParents(Environment *ev,
		AWDBase* childItem)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,getParents)
	(this, ev,childItem);
}


/* method: getChildren */
boolean   getChildren(Environment *ev,
		AWDBase* parentItem)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,getChildren)
	(this, ev,parentItem);
}


/* method: setAutoDelete */
void   setAutoDelete(Environment *ev,
		boolean autoDelete)
{
   SOM_ResolveD(this,AWDTree,AWDTree,setAutoDelete)
	(this, ev,autoDelete);
}


/* method: getAutoDelete */
boolean   getAutoDelete(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,AWDTree,getAutoDelete)
	(this, ev);
}


/* initializer method: withPersist */
void   withPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDTree,AWDTree,withPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: withTree */
void   withTree(Environment *ev,
		somInitCtrl* ctrl,
		AWDTree* argTree)
{
   SOM_ResolveD(this,AWDTree,AWDTree,withTree)
	(this, ev,ctrl,argTree);
}


/* initializer method: withTreeandAuto */
void   withTreeandAuto(Environment *ev,
		somInitCtrl* ctrl,
		AWDTree* argTree,
		boolean autoDelete)
{
   SOM_ResolveD(this,AWDTree,AWDTree,withTreeandAuto)
	(this, ev,ctrl,argTree,autoDelete);
}


/*
 * Reintroduce inherited methods
 */

/* method: store */
void   store(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDTree,AWDCommon,store)
	(this, ev,pPersist);
}


/* method: restore */
void   restore(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDTree,AWDCommon,restore)
	(this, ev,pPersist);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDTree,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDTree,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,AWDTree,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDTree,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,AWDTree,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDTree,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDTree,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTree,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDTree*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTree,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTree,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTree,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTree,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDTree*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTree,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDTree*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTree,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDTree*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTree,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDTree,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDTree,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDTree,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDTree,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDTree,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDTree,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDTree,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDTree,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDTree_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDTree,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDTree,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDTree_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDTree,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDTree,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDTree,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDTree,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDTree,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDTree,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDTree,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDTree */



#endif       /* SOM_AWDTree_xh */

#ifndef SOM_AWDBatch_xh
#define SOM_AWDBatch_xh

class AWDBatch;

#define AWDBatch_MajorVersion 2
#define AWDBatch_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "awdobj.xh"
#include "structs.xh"

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDTree_xh
#include <AWDTREE.xh>
#endif

#ifndef AWDBatch_API
#define AWDBatch_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
typedef unsigned long AWDBatch_BatchKeyType;
#define AWDBatch_SingleSource 1UL
#define AWDBatch_TransactionToSource 2UL
#define AWDBatch_CaseToSource 3UL

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_BatchKeyType
    #ifdef BatchKeyType
        #undef BatchKeyType
        #define SOMTGD_BatchKeyType 1
    #else
        #define BatchKeyType AWDBatch_BatchKeyType
    #endif /* BatchKeyType */
#endif /* SOMTGD_BatchKeyType */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDBatch Class */
SOMEXTERN
#if (defined(SOM_Module_AWDTREE_Source) || defined(AWDBatch_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBatch))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDBatchNewClass(
		integer4,
		integer4 );

/* The API to the AWDBatch class object, and the methods it introduces. */
SOMEXTERN struct AWDBatchClassDataStructure {
	SOMClass *classObject;
	somMToken createSources;
	somMToken createNonSources;
	somMToken createRelationships;
	somMToken deleteFromHost;
	somMToken id;
	somMToken setId;
	somMToken withBatchId;
	somMToken withBatch;
	somMToken AWDBatchwithEntityKey;
	somMToken AWDBatchwithPersist;
	somMToken AWDBatchwithTree;
	somMToken retrieveId;
	somMToken initialize;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(AWDBatch_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBatch))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDBatchClassData;
#define _AWDBatch AWDBatchClassData.classObject

/* The API to parentMtabs for AWDBatch, and the instance data it introduces. */
SOMEXTERN struct AWDBatchCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(AWDBatch_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBatch))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDBatchCClassData;

/*
 * -- Typedefs for AWDBatch Method Procedures
 */
extern "C" {
typedef boolean   SOMLINK somTP_AWDBatch_createSources(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_createSources *somTD_AWDBatch_createSources;
typedef boolean   SOMLINK somTP_AWDBatch_createNonSources(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_createNonSources *somTD_AWDBatch_createNonSources;
typedef boolean   SOMLINK somTP_AWDBatch_createRelationships(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_createRelationships *somTD_AWDBatch_createRelationships;
typedef boolean   SOMLINK somTP_AWDBatch_deleteFromHost(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_deleteFromHost *somTD_AWDBatch_deleteFromHost;
typedef unsigned long   SOMLINK somTP_AWDBatch_id(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_id *somTD_AWDBatch_id;
typedef boolean   SOMLINK somTP_AWDBatch_retrieveId(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_retrieveId *somTD_AWDBatch_retrieveId;
typedef void   SOMLINK somTP_AWDBatch_setId(AWDBatch *somSelf, Environment *ev,
		unsigned long ulId);
typedef somTP_AWDBatch_setId *somTD_AWDBatch_setId;
typedef void   SOMLINK somTP_AWDBatch_withBatchId(AWDBatch *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		unsigned long ulId);
typedef somTP_AWDBatch_withBatchId *somTD_AWDBatch_withBatchId;
typedef void   SOMLINK somTP_AWDBatch_withBatch(AWDBatch *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDBatch* argBatch);
typedef somTP_AWDBatch_withBatch *somTD_AWDBatch_withBatch;
typedef void   SOMLINK somTP_AWDBatch_AWDBatchwithEntityKey(AWDBatch *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* argKey,
		AWDBatch_BatchKeyType fKeyType);
typedef somTP_AWDBatch_AWDBatchwithEntityKey *somTD_AWDBatch_AWDBatchwithEntityKey;
typedef void   SOMLINK somTP_AWDBatch_AWDBatchwithPersist(AWDBatch *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDBatch_AWDBatchwithPersist *somTD_AWDBatch_AWDBatchwithPersist;
typedef void   SOMLINK somTP_AWDBatch_AWDBatchwithTree(AWDBatch *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDTree* argTree);
typedef somTP_AWDBatch_AWDBatchwithTree *somTD_AWDBatch_AWDBatchwithTree;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_AWDBatch_addItem(AWDBatch *somSelf, Environment *ev,
		AWDBase* itemToAdd,
		AWDBase* parentItem);
typedef somTP_AWDBatch_addItem *somTD_AWDBatch_addItem;
typedef boolean   SOMLINK somTP_AWDBatch_addAfter(AWDBatch *somSelf, Environment *ev,
		AWDBase* itemToAdd,
		AWDBase* previousItem);
typedef somTP_AWDBatch_addAfter *somTD_AWDBatch_addAfter;
typedef boolean   SOMLINK somTP_AWDBatch_addBefore(AWDBatch *somSelf, Environment *ev,
		AWDBase* itemToAdd,
		AWDBase* nextItem);
typedef somTP_AWDBatch_addBefore *somTD_AWDBatch_addBefore;
typedef boolean   SOMLINK somTP_AWDBatch_addTree(AWDBatch *somSelf, Environment *ev,
		AWDTree* treeToAdd);
typedef somTP_AWDBatch_addTree *somTD_AWDBatch_addTree;
typedef void   SOMLINK somTP_AWDBatch_applyField(AWDBatch *somSelf, Environment *ev,
		char* dataName,
		unsigned short usSeqNo,
		char* pszValue);
typedef somTP_AWDBatch_applyField *somTD_AWDBatch_applyField;
typedef unsigned long   SOMLINK somTP_AWDBatch_count(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_count *somTD_AWDBatch_count;
typedef boolean   SOMLINK somTP_AWDBatch_deleteAll(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_deleteAll *somTD_AWDBatch_deleteAll;
typedef boolean   SOMLINK somTP_AWDBatch_deleteItem(AWDBatch *somSelf, Environment *ev,
		AWDBase* itemToDelete);
typedef somTP_AWDBatch_deleteItem *somTD_AWDBatch_deleteItem;
typedef AWDTree_EXPAND_RESULT   SOMLINK somTP_AWDBatch_expand(AWDBatch *somSelf, Environment *ev,
		AWDBase* itemToExpand,
		AWDTree_DIRECTION whichway,
		boolean lockChildren);
typedef somTP_AWDBatch_expand *somTD_AWDBatch_expand;
typedef AWDBase*   SOMLINK somTP_AWDBatch_findItemFromKey(AWDBatch *somSelf, Environment *ev,
		AWD_AWDOBJECTKEYSTRCT* key);
typedef somTP_AWDBatch_findItemFromKey *somTD_AWDBatch_findItemFromKey;
typedef AWDTreeIterator*   SOMLINK somTP_AWDBatch_getIterator(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_getIterator *somTD_AWDBatch_getIterator;
typedef boolean   SOMLINK somTP_AWDBatch_getPersonalQueue(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_getPersonalQueue *somTD_AWDBatch_getPersonalQueue;
typedef boolean   SOMLINK somTP_AWDBatch_getWork(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_getWork *somTD_AWDBatch_getWork;
typedef boolean   SOMLINK somTP_AWDBatch_isEmpty(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_isEmpty *somTD_AWDBatch_isEmpty;
typedef boolean   SOMLINK somTP_AWDBatch_lock(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_lock *somTD_AWDBatch_lock;
typedef boolean   SOMLINK somTP_AWDBatch_lookup(AWDBatch *somSelf, Environment *ev,
		string pszLookup);
typedef somTP_AWDBatch_lookup *somTD_AWDBatch_lookup;
typedef boolean   SOMLINK somTP_AWDBatch_process(AWDBatch *somSelf, Environment *ev,
		AWDWork* wrkObj);
typedef somTP_AWDBatch_process *somTD_AWDBatch_process;
typedef AWDBase*   SOMLINK somTP_AWDBatch_more(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_more *somTD_AWDBatch_more;
typedef boolean   SOMLINK somTP_AWDBatch_isMore(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_isMore *somTD_AWDBatch_isMore;
typedef boolean   SOMLINK somTP_AWDBatch_refresh(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_refresh *somTD_AWDBatch_refresh;
typedef AWDBase*   SOMLINK somTP_AWDBatch_root(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_root *somTD_AWDBatch_root;
typedef void   SOMLINK somTP_AWDBatch_setLookupAid(AWDBatch *somSelf, Environment *ev,
		LookupServiceAid* lkaid);
typedef somTP_AWDBatch_setLookupAid *somTD_AWDBatch_setLookupAid;
typedef boolean   SOMLINK somTP_AWDBatch_unlock(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_unlock *somTD_AWDBatch_unlock;
typedef boolean   SOMLINK somTP_AWDBatch_update(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_update *somTD_AWDBatch_update;
typedef AWDBase*   SOMLINK somTP_AWDBatch_workSelectedItem(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_workSelectedItem *somTD_AWDBatch_workSelectedItem;
typedef boolean   SOMLINK somTP_AWDBatch_getParents(AWDBatch *somSelf, Environment *ev,
		AWDBase* childItem);
typedef somTP_AWDBatch_getParents *somTD_AWDBatch_getParents;
typedef boolean   SOMLINK somTP_AWDBatch_getChildren(AWDBatch *somSelf, Environment *ev,
		AWDBase* parentItem);
typedef somTP_AWDBatch_getChildren *somTD_AWDBatch_getChildren;
typedef void   SOMLINK somTP_AWDBatch_setAutoDelete(AWDBatch *somSelf, Environment *ev,
		boolean autoDelete);
typedef somTP_AWDBatch_setAutoDelete *somTD_AWDBatch_setAutoDelete;
typedef boolean   SOMLINK somTP_AWDBatch_getAutoDelete(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_getAutoDelete *somTD_AWDBatch_getAutoDelete;
typedef void   SOMLINK somTP_AWDBatch_withPersist(AWDBatch *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDBatch_withPersist *somTD_AWDBatch_withPersist;
typedef void   SOMLINK somTP_AWDBatch_withTree(AWDBatch *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDTree* argTree);
typedef somTP_AWDBatch_withTree *somTD_AWDBatch_withTree;
typedef void   SOMLINK somTP_AWDBatch_withTreeandAuto(AWDBatch *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDTree* argTree,
		boolean autoDelete);
typedef somTP_AWDBatch_withTreeandAuto *somTD_AWDBatch_withTreeandAuto;
typedef void   SOMLINK somTP_AWDBatch_somDefaultInit(AWDBatch *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDBatch_somDefaultInit *somTD_AWDBatch_somDefaultInit;
typedef void   SOMLINK somTP_AWDBatch_somDestruct(AWDBatch *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDBatch_somDestruct *somTD_AWDBatch_somDestruct;
typedef void   SOMLINK somTP_AWDBatch_store(AWDBatch *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDBatch_store *somTD_AWDBatch_store;
typedef void   SOMLINK somTP_AWDBatch_restore(AWDBatch *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDBatch_restore *somTD_AWDBatch_restore;
typedef somf_MLinkable*   SOMLINK somTP_AWDBatch_somfMLinkableInit(AWDBatch *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_AWDBatch_somfMLinkableInit *somTD_AWDBatch_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_AWDBatch_somfGetNext(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_somfGetNext *somTD_AWDBatch_somfGetNext;
typedef void   SOMLINK somTP_AWDBatch_somfSetNext(AWDBatch *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDBatch_somfSetNext *somTD_AWDBatch_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_AWDBatch_somfGetPrevious(AWDBatch *somSelf, Environment *ev);
typedef somTP_AWDBatch_somfGetPrevious *somTD_AWDBatch_somfGetPrevious;
typedef void   SOMLINK somTP_AWDBatch_somfSetPrevious(AWDBatch *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDBatch_somfSetPrevious *somTD_AWDBatch_somfSetPrevious;
typedef void   SOMLINK somTP_AWDBatch_somInit(AWDBatch *somSelf);
typedef somTP_AWDBatch_somInit *somTD_AWDBatch_somInit;
typedef void   SOMLINK somTP_AWDBatch_somDefaultCopyInit(AWDBatch *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBatch_somDefaultCopyInit *somTD_AWDBatch_somDefaultCopyInit;
typedef AWDBatch*   SOMLINK somTP_AWDBatch_somDefaultAssign(AWDBatch *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBatch_somDefaultAssign *somTD_AWDBatch_somDefaultAssign;
typedef void   SOMLINK somTP_AWDBatch_somDefaultConstCopyInit(AWDBatch *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBatch_somDefaultConstCopyInit *somTD_AWDBatch_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDBatch_somDefaultVCopyInit(AWDBatch *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBatch_somDefaultVCopyInit *somTD_AWDBatch_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDBatch_somDefaultConstVCopyInit(AWDBatch *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBatch_somDefaultConstVCopyInit *somTD_AWDBatch_somDefaultConstVCopyInit;
typedef AWDBatch*   SOMLINK somTP_AWDBatch_somDefaultConstAssign(AWDBatch *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBatch_somDefaultConstAssign *somTD_AWDBatch_somDefaultConstAssign;
typedef AWDBatch*   SOMLINK somTP_AWDBatch_somDefaultVAssign(AWDBatch *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBatch_somDefaultVAssign *somTD_AWDBatch_somDefaultVAssign;
typedef AWDBatch*   SOMLINK somTP_AWDBatch_somDefaultConstVAssign(AWDBatch *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBatch_somDefaultConstVAssign *somTD_AWDBatch_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDBatch_somFree(AWDBatch *somSelf);
typedef somTP_AWDBatch_somFree *somTD_AWDBatch_somFree;
typedef void   SOMLINK somTP_AWDBatch_somUninit(AWDBatch *somSelf);
typedef somTP_AWDBatch_somUninit *somTD_AWDBatch_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDBatch_somGetClass(AWDBatch *somSelf);
typedef somTP_AWDBatch_somGetClass *somTD_AWDBatch_somGetClass;
typedef string   SOMLINK somTP_AWDBatch_somGetClassName(AWDBatch *somSelf);
typedef somTP_AWDBatch_somGetClassName *somTD_AWDBatch_somGetClassName;
typedef long   SOMLINK somTP_AWDBatch_somGetSize(AWDBatch *somSelf);
typedef somTP_AWDBatch_somGetSize *somTD_AWDBatch_somGetSize;
typedef boolean   SOMLINK somTP_AWDBatch_somIsA(AWDBatch *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDBatch_somIsA *somTD_AWDBatch_somIsA;
typedef boolean   SOMLINK somTP_AWDBatch_somIsInstanceOf(AWDBatch *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDBatch_somIsInstanceOf *somTD_AWDBatch_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDBatch_somRespondsTo(AWDBatch *somSelf,
		somId mId);
typedef somTP_AWDBatch_somRespondsTo *somTD_AWDBatch_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDBatch_somDispatch(AWDBatch *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDBatch_somDispatch *somTD_AWDBatch_somDispatch;
typedef boolean   SOMLINK somTP_AWDBatch_somClassDispatch(AWDBatch *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDBatch_somClassDispatch *somTD_AWDBatch_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDBatch_somCastObj(AWDBatch *somSelf,
		SOMClass* cls);
typedef somTP_AWDBatch_somCastObj *somTD_AWDBatch_somCastObj;
typedef boolean   SOMLINK somTP_AWDBatch_somResetObj(AWDBatch *somSelf);
typedef somTP_AWDBatch_somResetObj *somTD_AWDBatch_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDBatch_somPrintSelf(AWDBatch *somSelf);
typedef somTP_AWDBatch_somPrintSelf *somTD_AWDBatch_somPrintSelf;
typedef void   SOMLINK somTP_AWDBatch_somDumpSelf(AWDBatch *somSelf,
		long level);
typedef somTP_AWDBatch_somDumpSelf *somTD_AWDBatch_somDumpSelf;
typedef void   SOMLINK somTP_AWDBatch_somDumpSelfInt(AWDBatch *somSelf,
		long level);
typedef somTP_AWDBatch_somDumpSelfInt *somTD_AWDBatch_somDumpSelfInt;
}

#endif /* AWDBatch_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDBatch
 */
class AWDBatch : public AWDTree
{
public:

// AWDBatch::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDBatch) AWDBatchNewClass(AWDBatch_MajorVersion,AWDBatch_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDBatch,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDBatch));
}

// AWDBatch::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDBatch()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBatchCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDBatch(AWDBatch* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBatchCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDBatch(const AWDBatch* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBatchCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDBatch(Environment *ev,unsigned long ulId) 
{
   withBatchId(ev,0,ulId);
}

AWDBatch(Environment *ev,AWDBatch* argBatch) 
{
   withBatch(ev,0,argBatch);
}

AWDBatch(Environment *ev,AWDEntityKey* argKey,AWDBatch_BatchKeyType fKeyType) 
{
   AWDBatchwithEntityKey(ev,0,argKey,fKeyType);
}

AWDBatch(Environment *ev,AWDPersist* pPersist) 
{
   AWDBatchwithPersist(ev,0,pPersist);
}

AWDBatch(Environment *ev,AWDTree* argTree) 
{
   AWDBatchwithTree(ev,0,argTree);
}


/* method: createSources */
boolean   createSources(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDBatch,createSources)
	(this, ev);
}


/* method: createNonSources */
boolean   createNonSources(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDBatch,createNonSources)
	(this, ev);
}


/* method: createRelationships */
boolean   createRelationships(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDBatch,createRelationships)
	(this, ev);
}


/* method: deleteFromHost */
boolean   deleteFromHost(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDBatch,deleteFromHost)
	(this, ev);
}


/* method: id */
unsigned long   id(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDBatch,id)
	(this, ev);
}


/* method: retrieveId */
boolean   retrieveId(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDBatch,retrieveId)
	(this, ev);
}


/* method: setId */
void   setId(Environment *ev,
		unsigned long ulId)
{
   SOM_ResolveD(this,AWDBatch,AWDBatch,setId)
	(this, ev,ulId);
}


/* initializer method: withBatchId */
void   withBatchId(Environment *ev,
		somInitCtrl* ctrl,
		unsigned long ulId)
{
   SOM_ResolveD(this,AWDBatch,AWDBatch,withBatchId)
	(this, ev,ctrl,ulId);
}


/* initializer method: withBatch */
void   withBatch(Environment *ev,
		somInitCtrl* ctrl,
		AWDBatch* argBatch)
{
   SOM_ResolveD(this,AWDBatch,AWDBatch,withBatch)
	(this, ev,ctrl,argBatch);
}


/* initializer method: AWDBatchwithEntityKey */
void   AWDBatchwithEntityKey(Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* argKey,
		AWDBatch_BatchKeyType fKeyType)
{
   SOM_ResolveD(this,AWDBatch,AWDBatch,AWDBatchwithEntityKey)
	(this, ev,ctrl,argKey,fKeyType);
}


/* initializer method: AWDBatchwithPersist */
void   AWDBatchwithPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDBatch,AWDBatch,AWDBatchwithPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: AWDBatchwithTree */
void   AWDBatchwithTree(Environment *ev,
		somInitCtrl* ctrl,
		AWDTree* argTree)
{
   SOM_ResolveD(this,AWDBatch,AWDBatch,AWDBatchwithTree)
	(this, ev,ctrl,argTree);
}


/*
 * Reintroduce inherited methods
 */

/* method: addItem */
boolean   addItem(Environment *ev,
		AWDBase* itemToAdd,
		AWDBase* parentItem)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,addItem)
	(this, ev,itemToAdd,parentItem);
}


/* method: addAfter */
boolean   addAfter(Environment *ev,
		AWDBase* itemToAdd,
		AWDBase* previousItem)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,addAfter)
	(this, ev,itemToAdd,previousItem);
}


/* method: addBefore */
boolean   addBefore(Environment *ev,
		AWDBase* itemToAdd,
		AWDBase* nextItem)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,addBefore)
	(this, ev,itemToAdd,nextItem);
}


/* method: addTree */
boolean   addTree(Environment *ev,
		AWDTree* treeToAdd)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,addTree)
	(this, ev,treeToAdd);
}


/* method: applyField */
void   applyField(Environment *ev,
		char* dataName,
		unsigned short usSeqNo,
		char* pszValue)
{
   SOM_ResolveD(this,AWDBatch,AWDTree,applyField)
	(this, ev,dataName,usSeqNo,pszValue);
}


/* method: count */
unsigned long   count(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,count)
	(this, ev);
}


/* method: deleteAll */
boolean   deleteAll(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,deleteAll)
	(this, ev);
}


/* method: deleteItem */
boolean   deleteItem(Environment *ev,
		AWDBase* itemToDelete)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,deleteItem)
	(this, ev,itemToDelete);
}


/* method: expand */
AWDTree_EXPAND_RESULT   expand(Environment *ev,
		AWDBase* itemToExpand,
		AWDTree_DIRECTION whichway,
		boolean lockChildren)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,expand)
	(this, ev,itemToExpand,whichway,lockChildren);
}


/* method: findItemFromKey */
AWDBase*   findItemFromKey(Environment *ev,
		AWD_AWDOBJECTKEYSTRCT* key)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,findItemFromKey)
	(this, ev,key);
}


/* method: getIterator */
AWDTreeIterator*   getIterator(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,getIterator)
	(this, ev);
}


/* method: getPersonalQueue */
boolean   getPersonalQueue(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,getPersonalQueue)
	(this, ev);
}


/* method: getWork */
boolean   getWork(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,getWork)
	(this, ev);
}


/* method: isEmpty */
boolean   isEmpty(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,isEmpty)
	(this, ev);
}


/* method: lock */
boolean   lock(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,lock)
	(this, ev);
}


/* method: lookup */
boolean   lookup(Environment *ev,
		string pszLookup)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,lookup)
	(this, ev,pszLookup);
}


/* method: process */
boolean   process(Environment *ev,
		AWDWork* wrkObj)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,process)
	(this, ev,wrkObj);
}


/* method: more */
AWDBase*   more(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,more)
	(this, ev);
}


/* method: isMore */
boolean   isMore(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,isMore)
	(this, ev);
}


/* method: refresh */
boolean   refresh(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,refresh)
	(this, ev);
}


/* method: root */
AWDBase*   root(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,root)
	(this, ev);
}


/* method: setLookupAid */
void   setLookupAid(Environment *ev,
		LookupServiceAid* lkaid)
{
   SOM_ResolveD(this,AWDBatch,AWDTree,setLookupAid)
	(this, ev,lkaid);
}


/* method: unlock */
boolean   unlock(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,unlock)
	(this, ev);
}


/* method: update */
boolean   update(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,update)
	(this, ev);
}


/* method: workSelectedItem */
AWDBase*   workSelectedItem(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,workSelectedItem)
	(this, ev);
}


/* method: getParents */
boolean   getParents(Environment *ev,
		AWDBase* childItem)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,getParents)
	(this, ev,childItem);
}


/* method: getChildren */
boolean   getChildren(Environment *ev,
		AWDBase* parentItem)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,getChildren)
	(this, ev,parentItem);
}


/* method: setAutoDelete */
void   setAutoDelete(Environment *ev,
		boolean autoDelete)
{
   SOM_ResolveD(this,AWDBatch,AWDTree,setAutoDelete)
	(this, ev,autoDelete);
}


/* method: getAutoDelete */
boolean   getAutoDelete(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,AWDTree,getAutoDelete)
	(this, ev);
}


/* initializer method: withPersist */
void   withPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDBatch,AWDTree,withPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: withTree */
void   withTree(Environment *ev,
		somInitCtrl* ctrl,
		AWDTree* argTree)
{
   SOM_ResolveD(this,AWDBatch,AWDTree,withTree)
	(this, ev,ctrl,argTree);
}


/* initializer method: withTreeandAuto */
void   withTreeandAuto(Environment *ev,
		somInitCtrl* ctrl,
		AWDTree* argTree,
		boolean autoDelete)
{
   SOM_ResolveD(this,AWDBatch,AWDTree,withTreeandAuto)
	(this, ev,ctrl,argTree,autoDelete);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDBatch,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDBatch,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: store */
void   store(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDBatch,AWDCommon,store)
	(this, ev,pPersist);
}


/* method: restore */
void   restore(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDBatch,AWDCommon,restore)
	(this, ev,pPersist);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,AWDBatch,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDBatch,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,AWDBatch,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDBatch,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDBatch,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBatch,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDBatch*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBatch,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBatch,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBatch,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBatch,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDBatch*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBatch,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDBatch*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBatch,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDBatch*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBatch,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDBatch,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDBatch,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDBatch,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDBatch,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDBatch,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDBatch,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDBatch,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDBatch,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDBatch_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDBatch,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDBatch,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDBatch_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDBatch,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDBatch,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDBatch,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDBatch,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDBatch,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDBatch,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDBatch,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDBatch */



#endif       /* SOM_AWDBatch_xh */

#ifndef SOM_AWDTreeVisitor_xh
#define SOM_AWDTreeVisitor_xh

class AWDTreeVisitor;

#define AWDTreeVisitor_MajorVersion 2
#define AWDTreeVisitor_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "awdobj.xh"

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef AWDTreeVisitor_API
#define AWDTreeVisitor_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
typedef unsigned long AWDTreeVisitor_TRAVEL_SEQUENCE;
#define AWDTreeVisitor_LNR 1UL
#define AWDTreeVisitor_NLR 2UL
#define AWDTreeVisitor_RNL 3UL

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_TRAVEL_SEQUENCE
    #ifdef TRAVEL_SEQUENCE
        #undef TRAVEL_SEQUENCE
        #define SOMTGD_TRAVEL_SEQUENCE 1
    #else
        #define TRAVEL_SEQUENCE AWDTreeVisitor_TRAVEL_SEQUENCE
    #endif /* TRAVEL_SEQUENCE */
#endif /* SOMTGD_TRAVEL_SEQUENCE */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDTreeVisitor Class */
SOMEXTERN
#if (defined(SOM_Module_AWDTREE_Source) || defined(AWDTreeVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTreeVisitor))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDTreeVisitorNewClass(
		integer4,
		integer4 );

/* The API to the AWDTreeVisitor class object, and the methods it introduces. */
SOMEXTERN struct AWDTreeVisitorClassDataStructure {
	SOMClass *classObject;
	somMToken visit;
	somMToken setTravelSequence;
	somMToken travelSequence;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(AWDTreeVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTreeVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDTreeVisitorClassData;
#define _AWDTreeVisitor AWDTreeVisitorClassData.classObject

/* The API to parentMtabs for AWDTreeVisitor, and the instance data it introduces. */
SOMEXTERN struct AWDTreeVisitorCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(AWDTreeVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTreeVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDTreeVisitorCClassData;

/*
 * -- Typedefs for AWDTreeVisitor Method Procedures
 */
extern "C" {
typedef boolean   SOMLINK somTP_AWDTreeVisitor_visit(AWDTreeVisitor *somSelf, Environment *ev,
		AWDBase* item);
typedef somTP_AWDTreeVisitor_visit *somTD_AWDTreeVisitor_visit;
typedef void   SOMLINK somTP_AWDTreeVisitor_setTravelSequence(AWDTreeVisitor *somSelf, Environment *ev,
		AWDTreeVisitor_TRAVEL_SEQUENCE seq);
typedef somTP_AWDTreeVisitor_setTravelSequence *somTD_AWDTreeVisitor_setTravelSequence;
typedef AWDTreeVisitor_TRAVEL_SEQUENCE   SOMLINK somTP_AWDTreeVisitor_travelSequence(AWDTreeVisitor *somSelf, Environment *ev);
typedef somTP_AWDTreeVisitor_travelSequence *somTD_AWDTreeVisitor_travelSequence;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_AWDTreeVisitor_somDefaultInit(AWDTreeVisitor *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDTreeVisitor_somDefaultInit *somTD_AWDTreeVisitor_somDefaultInit;
typedef void   SOMLINK somTP_AWDTreeVisitor_somDestruct(AWDTreeVisitor *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDTreeVisitor_somDestruct *somTD_AWDTreeVisitor_somDestruct;
typedef void   SOMLINK somTP_AWDTreeVisitor_somDefaultCopyInit(AWDTreeVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeVisitor_somDefaultCopyInit *somTD_AWDTreeVisitor_somDefaultCopyInit;
typedef AWDTreeVisitor*   SOMLINK somTP_AWDTreeVisitor_somDefaultAssign(AWDTreeVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeVisitor_somDefaultAssign *somTD_AWDTreeVisitor_somDefaultAssign;
typedef void   SOMLINK somTP_AWDTreeVisitor_somDefaultConstCopyInit(AWDTreeVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeVisitor_somDefaultConstCopyInit *somTD_AWDTreeVisitor_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDTreeVisitor_somDefaultVCopyInit(AWDTreeVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeVisitor_somDefaultVCopyInit *somTD_AWDTreeVisitor_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDTreeVisitor_somDefaultConstVCopyInit(AWDTreeVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeVisitor_somDefaultConstVCopyInit *somTD_AWDTreeVisitor_somDefaultConstVCopyInit;
typedef AWDTreeVisitor*   SOMLINK somTP_AWDTreeVisitor_somDefaultConstAssign(AWDTreeVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeVisitor_somDefaultConstAssign *somTD_AWDTreeVisitor_somDefaultConstAssign;
typedef AWDTreeVisitor*   SOMLINK somTP_AWDTreeVisitor_somDefaultVAssign(AWDTreeVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeVisitor_somDefaultVAssign *somTD_AWDTreeVisitor_somDefaultVAssign;
typedef AWDTreeVisitor*   SOMLINK somTP_AWDTreeVisitor_somDefaultConstVAssign(AWDTreeVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeVisitor_somDefaultConstVAssign *somTD_AWDTreeVisitor_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDTreeVisitor_somInit(AWDTreeVisitor *somSelf);
typedef somTP_AWDTreeVisitor_somInit *somTD_AWDTreeVisitor_somInit;
typedef void   SOMLINK somTP_AWDTreeVisitor_somFree(AWDTreeVisitor *somSelf);
typedef somTP_AWDTreeVisitor_somFree *somTD_AWDTreeVisitor_somFree;
typedef void   SOMLINK somTP_AWDTreeVisitor_somUninit(AWDTreeVisitor *somSelf);
typedef somTP_AWDTreeVisitor_somUninit *somTD_AWDTreeVisitor_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDTreeVisitor_somGetClass(AWDTreeVisitor *somSelf);
typedef somTP_AWDTreeVisitor_somGetClass *somTD_AWDTreeVisitor_somGetClass;
typedef string   SOMLINK somTP_AWDTreeVisitor_somGetClassName(AWDTreeVisitor *somSelf);
typedef somTP_AWDTreeVisitor_somGetClassName *somTD_AWDTreeVisitor_somGetClassName;
typedef long   SOMLINK somTP_AWDTreeVisitor_somGetSize(AWDTreeVisitor *somSelf);
typedef somTP_AWDTreeVisitor_somGetSize *somTD_AWDTreeVisitor_somGetSize;
typedef boolean   SOMLINK somTP_AWDTreeVisitor_somIsA(AWDTreeVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDTreeVisitor_somIsA *somTD_AWDTreeVisitor_somIsA;
typedef boolean   SOMLINK somTP_AWDTreeVisitor_somIsInstanceOf(AWDTreeVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDTreeVisitor_somIsInstanceOf *somTD_AWDTreeVisitor_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDTreeVisitor_somRespondsTo(AWDTreeVisitor *somSelf,
		somId mId);
typedef somTP_AWDTreeVisitor_somRespondsTo *somTD_AWDTreeVisitor_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDTreeVisitor_somDispatch(AWDTreeVisitor *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDTreeVisitor_somDispatch *somTD_AWDTreeVisitor_somDispatch;
typedef boolean   SOMLINK somTP_AWDTreeVisitor_somClassDispatch(AWDTreeVisitor *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDTreeVisitor_somClassDispatch *somTD_AWDTreeVisitor_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDTreeVisitor_somCastObj(AWDTreeVisitor *somSelf,
		SOMClass* cls);
typedef somTP_AWDTreeVisitor_somCastObj *somTD_AWDTreeVisitor_somCastObj;
typedef boolean   SOMLINK somTP_AWDTreeVisitor_somResetObj(AWDTreeVisitor *somSelf);
typedef somTP_AWDTreeVisitor_somResetObj *somTD_AWDTreeVisitor_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDTreeVisitor_somPrintSelf(AWDTreeVisitor *somSelf);
typedef somTP_AWDTreeVisitor_somPrintSelf *somTD_AWDTreeVisitor_somPrintSelf;
typedef void   SOMLINK somTP_AWDTreeVisitor_somDumpSelf(AWDTreeVisitor *somSelf,
		long level);
typedef somTP_AWDTreeVisitor_somDumpSelf *somTD_AWDTreeVisitor_somDumpSelf;
typedef void   SOMLINK somTP_AWDTreeVisitor_somDumpSelfInt(AWDTreeVisitor *somSelf,
		long level);
typedef somTP_AWDTreeVisitor_somDumpSelfInt *somTD_AWDTreeVisitor_somDumpSelfInt;
}

#endif /* AWDTreeVisitor_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDTreeVisitor
 */
class AWDTreeVisitor : public SOMObject
{
public:

// AWDTreeVisitor::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDTreeVisitor) AWDTreeVisitorNewClass(AWDTreeVisitor_MajorVersion,AWDTreeVisitor_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDTreeVisitor,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDTreeVisitor));
}

// AWDTreeVisitor::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDTreeVisitor()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTreeVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDTreeVisitor(AWDTreeVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTreeVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDTreeVisitor(const AWDTreeVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTreeVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: visit */
boolean   visit(Environment *ev,
		AWDBase* item)
{
   return SOM_ResolveD(this,AWDTreeVisitor,AWDTreeVisitor,visit)
	(this, ev,item);
}


/* method: setTravelSequence */
void   setTravelSequence(Environment *ev,
		AWDTreeVisitor_TRAVEL_SEQUENCE seq)
{
   SOM_ResolveD(this,AWDTreeVisitor,AWDTreeVisitor,setTravelSequence)
	(this, ev,seq);
}


/* method: travelSequence */
AWDTreeVisitor_TRAVEL_SEQUENCE   travelSequence(Environment *ev)
{
   return SOM_ResolveD(this,AWDTreeVisitor,AWDTreeVisitor,travelSequence)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDTreeVisitor*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDTreeVisitor*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDTreeVisitor*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDTreeVisitor*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDTreeVisitor_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDTreeVisitor_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDTreeVisitor,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDTreeVisitor */



#endif       /* SOM_AWDTreeVisitor_xh */

#ifndef SOM_AWDTreeIterator_xh
#define SOM_AWDTreeIterator_xh

class AWDTreeIterator;

#define AWDTreeIterator_MajorVersion 2
#define AWDTreeIterator_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <awdobj.xh>
#include <structs.xh>
typedef boolean( _AWDTreeItrProc)(AWDBase*, void*);
typedef _AWDTreeItrProc *AWDTreeItrProc;

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef AWDTreeIterator_API
#define AWDTreeIterator_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDTreeIterator Class */
SOMEXTERN
#if (defined(SOM_Module_AWDTREE_Source) || defined(AWDTreeIterator_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTreeIterator))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDTreeIteratorNewClass(
		integer4,
		integer4 );

/* The API to the AWDTreeIterator class object, and the methods it introduces. */
SOMEXTERN struct AWDTreeIteratorClassDataStructure {
	SOMClass *classObject;
	somMToken child;
	somMToken forAll;
	somMToken next;
	somMToken parent;
	somMToken root;
	somMToken setTree;
	somMToken setVisitor;
	somMToken visitAll;
	somMToken visitor;
	somMToken withTree;
	somMToken filter;
	somMToken setFilter;
	somMToken withTreeandFilter;
	somMToken inFilter;
	somMToken getAsList;
	somMToken withNodeandFilter;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(AWDTreeIterator_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTreeIterator))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDTreeIteratorClassData;
#define _AWDTreeIterator AWDTreeIteratorClassData.classObject

/* The API to parentMtabs for AWDTreeIterator, and the instance data it introduces. */
SOMEXTERN struct AWDTreeIteratorCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(AWDTreeIterator_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTreeIterator))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDTreeIteratorCClassData;

/*
 * -- Typedefs for AWDTreeIterator Method Procedures
 */
extern "C" {
typedef AWDBase*   SOMLINK somTP_AWDTreeIterator_child(AWDTreeIterator *somSelf, Environment *ev);
typedef somTP_AWDTreeIterator_child *somTD_AWDTreeIterator_child;
typedef AWD_OBJECTTYPE   SOMLINK somTP_AWDTreeIterator_filter(AWDTreeIterator *somSelf, Environment *ev);
typedef somTP_AWDTreeIterator_filter *somTD_AWDTreeIterator_filter;
typedef boolean   SOMLINK somTP_AWDTreeIterator_forAll(AWDTreeIterator *somSelf, Environment *ev,
		AWDTreeItrProc pfn,
		void* pData,
		AWDBase** pLastObject);
typedef somTP_AWDTreeIterator_forAll *somTD_AWDTreeIterator_forAll;
typedef unsigned short   SOMLINK somTP_AWDTreeIterator_getAsList(AWDTreeIterator *somSelf, Environment *ev,
		SOMList* list);
typedef somTP_AWDTreeIterator_getAsList *somTD_AWDTreeIterator_getAsList;
typedef AWDBase*   SOMLINK somTP_AWDTreeIterator_next(AWDTreeIterator *somSelf, Environment *ev);
typedef somTP_AWDTreeIterator_next *somTD_AWDTreeIterator_next;
typedef boolean   SOMLINK somTP_AWDTreeIterator_inFilter(AWDTreeIterator *somSelf, Environment *ev,
		AWDBase* node);
typedef somTP_AWDTreeIterator_inFilter *somTD_AWDTreeIterator_inFilter;
typedef AWDBase*   SOMLINK somTP_AWDTreeIterator_parent(AWDTreeIterator *somSelf, Environment *ev);
typedef somTP_AWDTreeIterator_parent *somTD_AWDTreeIterator_parent;
typedef AWDBase*   SOMLINK somTP_AWDTreeIterator_root(AWDTreeIterator *somSelf, Environment *ev);
typedef somTP_AWDTreeIterator_root *somTD_AWDTreeIterator_root;
typedef void   SOMLINK somTP_AWDTreeIterator_setFilter(AWDTreeIterator *somSelf, Environment *ev,
		AWD_OBJECTTYPE filterType);
typedef somTP_AWDTreeIterator_setFilter *somTD_AWDTreeIterator_setFilter;
typedef void   SOMLINK somTP_AWDTreeIterator_setTree(AWDTreeIterator *somSelf, Environment *ev,
		AWDTree* tree);
typedef somTP_AWDTreeIterator_setTree *somTD_AWDTreeIterator_setTree;
typedef void   SOMLINK somTP_AWDTreeIterator_setVisitor(AWDTreeIterator *somSelf, Environment *ev,
		AWDTreeVisitor* visitor);
typedef somTP_AWDTreeIterator_setVisitor *somTD_AWDTreeIterator_setVisitor;
typedef boolean   SOMLINK somTP_AWDTreeIterator_visitAll(AWDTreeIterator *somSelf, Environment *ev,
		AWDTreeVisitor* visitor);
typedef somTP_AWDTreeIterator_visitAll *somTD_AWDTreeIterator_visitAll;
typedef AWDTreeVisitor*   SOMLINK somTP_AWDTreeIterator_visitor(AWDTreeIterator *somSelf, Environment *ev);
typedef somTP_AWDTreeIterator_visitor *somTD_AWDTreeIterator_visitor;
typedef void   SOMLINK somTP_AWDTreeIterator_withTree(AWDTreeIterator *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDTree* tree);
typedef somTP_AWDTreeIterator_withTree *somTD_AWDTreeIterator_withTree;
typedef void   SOMLINK somTP_AWDTreeIterator_withTreeandFilter(AWDTreeIterator *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDTree* tree,
		AWD_OBJECTTYPE filterType);
typedef somTP_AWDTreeIterator_withTreeandFilter *somTD_AWDTreeIterator_withTreeandFilter;
typedef void   SOMLINK somTP_AWDTreeIterator_withNodeandFilter(AWDTreeIterator *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDBase* objStart,
		AWD_OBJECTTYPE filterType);
typedef somTP_AWDTreeIterator_withNodeandFilter *somTD_AWDTreeIterator_withNodeandFilter;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_AWDTreeIterator_somDefaultInit(AWDTreeIterator *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDTreeIterator_somDefaultInit *somTD_AWDTreeIterator_somDefaultInit;
typedef void   SOMLINK somTP_AWDTreeIterator_somDestruct(AWDTreeIterator *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDTreeIterator_somDestruct *somTD_AWDTreeIterator_somDestruct;
typedef void   SOMLINK somTP_AWDTreeIterator_somDefaultCopyInit(AWDTreeIterator *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeIterator_somDefaultCopyInit *somTD_AWDTreeIterator_somDefaultCopyInit;
typedef AWDTreeIterator*   SOMLINK somTP_AWDTreeIterator_somDefaultAssign(AWDTreeIterator *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeIterator_somDefaultAssign *somTD_AWDTreeIterator_somDefaultAssign;
typedef void   SOMLINK somTP_AWDTreeIterator_somDefaultConstCopyInit(AWDTreeIterator *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeIterator_somDefaultConstCopyInit *somTD_AWDTreeIterator_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDTreeIterator_somDefaultVCopyInit(AWDTreeIterator *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeIterator_somDefaultVCopyInit *somTD_AWDTreeIterator_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDTreeIterator_somDefaultConstVCopyInit(AWDTreeIterator *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeIterator_somDefaultConstVCopyInit *somTD_AWDTreeIterator_somDefaultConstVCopyInit;
typedef AWDTreeIterator*   SOMLINK somTP_AWDTreeIterator_somDefaultConstAssign(AWDTreeIterator *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeIterator_somDefaultConstAssign *somTD_AWDTreeIterator_somDefaultConstAssign;
typedef AWDTreeIterator*   SOMLINK somTP_AWDTreeIterator_somDefaultVAssign(AWDTreeIterator *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeIterator_somDefaultVAssign *somTD_AWDTreeIterator_somDefaultVAssign;
typedef AWDTreeIterator*   SOMLINK somTP_AWDTreeIterator_somDefaultConstVAssign(AWDTreeIterator *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTreeIterator_somDefaultConstVAssign *somTD_AWDTreeIterator_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDTreeIterator_somInit(AWDTreeIterator *somSelf);
typedef somTP_AWDTreeIterator_somInit *somTD_AWDTreeIterator_somInit;
typedef void   SOMLINK somTP_AWDTreeIterator_somFree(AWDTreeIterator *somSelf);
typedef somTP_AWDTreeIterator_somFree *somTD_AWDTreeIterator_somFree;
typedef void   SOMLINK somTP_AWDTreeIterator_somUninit(AWDTreeIterator *somSelf);
typedef somTP_AWDTreeIterator_somUninit *somTD_AWDTreeIterator_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDTreeIterator_somGetClass(AWDTreeIterator *somSelf);
typedef somTP_AWDTreeIterator_somGetClass *somTD_AWDTreeIterator_somGetClass;
typedef string   SOMLINK somTP_AWDTreeIterator_somGetClassName(AWDTreeIterator *somSelf);
typedef somTP_AWDTreeIterator_somGetClassName *somTD_AWDTreeIterator_somGetClassName;
typedef long   SOMLINK somTP_AWDTreeIterator_somGetSize(AWDTreeIterator *somSelf);
typedef somTP_AWDTreeIterator_somGetSize *somTD_AWDTreeIterator_somGetSize;
typedef boolean   SOMLINK somTP_AWDTreeIterator_somIsA(AWDTreeIterator *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDTreeIterator_somIsA *somTD_AWDTreeIterator_somIsA;
typedef boolean   SOMLINK somTP_AWDTreeIterator_somIsInstanceOf(AWDTreeIterator *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDTreeIterator_somIsInstanceOf *somTD_AWDTreeIterator_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDTreeIterator_somRespondsTo(AWDTreeIterator *somSelf,
		somId mId);
typedef somTP_AWDTreeIterator_somRespondsTo *somTD_AWDTreeIterator_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDTreeIterator_somDispatch(AWDTreeIterator *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDTreeIterator_somDispatch *somTD_AWDTreeIterator_somDispatch;
typedef boolean   SOMLINK somTP_AWDTreeIterator_somClassDispatch(AWDTreeIterator *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDTreeIterator_somClassDispatch *somTD_AWDTreeIterator_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDTreeIterator_somCastObj(AWDTreeIterator *somSelf,
		SOMClass* cls);
typedef somTP_AWDTreeIterator_somCastObj *somTD_AWDTreeIterator_somCastObj;
typedef boolean   SOMLINK somTP_AWDTreeIterator_somResetObj(AWDTreeIterator *somSelf);
typedef somTP_AWDTreeIterator_somResetObj *somTD_AWDTreeIterator_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDTreeIterator_somPrintSelf(AWDTreeIterator *somSelf);
typedef somTP_AWDTreeIterator_somPrintSelf *somTD_AWDTreeIterator_somPrintSelf;
typedef void   SOMLINK somTP_AWDTreeIterator_somDumpSelf(AWDTreeIterator *somSelf,
		long level);
typedef somTP_AWDTreeIterator_somDumpSelf *somTD_AWDTreeIterator_somDumpSelf;
typedef void   SOMLINK somTP_AWDTreeIterator_somDumpSelfInt(AWDTreeIterator *somSelf,
		long level);
typedef somTP_AWDTreeIterator_somDumpSelfInt *somTD_AWDTreeIterator_somDumpSelfInt;
}

#endif /* AWDTreeIterator_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDTreeIterator
 */
class AWDTreeIterator : public SOMObject
{
public:

// AWDTreeIterator::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDTreeIterator) AWDTreeIteratorNewClass(AWDTreeIterator_MajorVersion,AWDTreeIterator_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDTreeIterator,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDTreeIterator));
}

// AWDTreeIterator::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDTreeIterator()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTreeIteratorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDTreeIterator(AWDTreeIterator* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTreeIteratorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDTreeIterator(const AWDTreeIterator* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTreeIteratorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDTreeIterator(Environment *ev,AWDTree* tree) 
{
   withTree(ev,0,tree);
}

AWDTreeIterator(Environment *ev,AWDTree* tree,AWD_OBJECTTYPE filterType) 
{
   withTreeandFilter(ev,0,tree,filterType);
}

AWDTreeIterator(Environment *ev,AWDBase* objStart,AWD_OBJECTTYPE filterType) 
{
   withNodeandFilter(ev,0,objStart,filterType);
}


/* method: child */
AWDBase*   child(Environment *ev)
{
   return SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,child)
	(this, ev);
}


/* method: filter */
AWD_OBJECTTYPE   filter(Environment *ev)
{
   return SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,filter)
	(this, ev);
}


/* method: forAll */
boolean   forAll(Environment *ev,
		AWDTreeItrProc pfn,
		void* pData,
		AWDBase** pLastObject)
{
   return SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,forAll)
	(this, ev,pfn,pData,pLastObject);
}


/* method: getAsList */
unsigned short   getAsList(Environment *ev,
		SOMList* list)
{
   return SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,getAsList)
	(this, ev,list);
}


/* method: next */
AWDBase*   next(Environment *ev)
{
   return SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,next)
	(this, ev);
}


/* method: inFilter */
boolean   inFilter(Environment *ev,
		AWDBase* node)
{
   return SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,inFilter)
	(this, ev,node);
}


/* method: parent */
AWDBase*   parent(Environment *ev)
{
   return SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,parent)
	(this, ev);
}


/* method: root */
AWDBase*   root(Environment *ev)
{
   return SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,root)
	(this, ev);
}


/* method: setFilter */
void   setFilter(Environment *ev,
		AWD_OBJECTTYPE filterType)
{
   SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,setFilter)
	(this, ev,filterType);
}


/* method: setTree */
void   setTree(Environment *ev,
		AWDTree* tree)
{
   SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,setTree)
	(this, ev,tree);
}


/* method: setVisitor */
void   setVisitor(Environment *ev,
		AWDTreeVisitor* visitor)
{
   SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,setVisitor)
	(this, ev,visitor);
}


/* method: visitAll */
boolean   visitAll(Environment *ev,
		AWDTreeVisitor* visitor)
{
   return SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,visitAll)
	(this, ev,visitor);
}


/* method: visitor */
AWDTreeVisitor*   visitor(Environment *ev)
{
   return SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,visitor)
	(this, ev);
}


/* initializer method: withTree */
void   withTree(Environment *ev,
		somInitCtrl* ctrl,
		AWDTree* tree)
{
   SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,withTree)
	(this, ev,ctrl,tree);
}


/* initializer method: withTreeandFilter */
void   withTreeandFilter(Environment *ev,
		somInitCtrl* ctrl,
		AWDTree* tree,
		AWD_OBJECTTYPE filterType)
{
   SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,withTreeandFilter)
	(this, ev,ctrl,tree,filterType);
}


/* initializer method: withNodeandFilter */
void   withNodeandFilter(Environment *ev,
		somInitCtrl* ctrl,
		AWDBase* objStart,
		AWD_OBJECTTYPE filterType)
{
   SOM_ResolveD(this,AWDTreeIterator,AWDTreeIterator,withNodeandFilter)
	(this, ev,ctrl,objStart,filterType);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDTreeIterator,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDTreeIterator,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTreeIterator,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDTreeIterator*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTreeIterator,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTreeIterator,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTreeIterator,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDTreeIterator*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDTreeIterator*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDTreeIterator*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDTreeIterator,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDTreeIterator,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDTreeIterator,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDTreeIterator_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDTreeIterator,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDTreeIterator_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDTreeIterator,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDTreeIterator,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDTreeIterator,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDTreeIterator,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDTreeIterator */



#endif       /* SOM_AWDTreeIterator_xh */

#ifndef SOM_LockVisitor_xh
#define SOM_LockVisitor_xh

class LockVisitor;

#define LockVisitor_MajorVersion 0
#define LockVisitor_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDTreeVisitor_xh
#include <AWDTREE.xh>
#endif

#ifndef LockVisitor_API
#define LockVisitor_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the LockVisitor Class */
SOMEXTERN
#if (defined(SOM_Module_AWDTREE_Source) || defined(LockVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_LockVisitor))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK LockVisitorNewClass(
		integer4,
		integer4 );

/* The API to the LockVisitor class object, and the methods it introduces. */
SOMEXTERN struct LockVisitorClassDataStructure {
	SOMClass *classObject;
	somMToken withBoolean;
	somMToken setLockFlag;
	somMToken unlock;
	somMToken count;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(LockVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_LockVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK LockVisitorClassData;
#define _LockVisitor LockVisitorClassData.classObject

/* The API to parentMtabs for LockVisitor, and the instance data it introduces. */
SOMEXTERN struct LockVisitorCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(LockVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_LockVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK LockVisitorCClassData;

/*
 * -- Typedefs for LockVisitor Method Procedures
 */
extern "C" {
typedef unsigned long   SOMLINK somTP_LockVisitor_count(LockVisitor *somSelf, Environment *ev);
typedef somTP_LockVisitor_count *somTD_LockVisitor_count;
typedef void   SOMLINK somTP_LockVisitor_setLockFlag(LockVisitor *somSelf, Environment *ev,
		boolean fLock);
typedef somTP_LockVisitor_setLockFlag *somTD_LockVisitor_setLockFlag;
typedef void   SOMLINK somTP_LockVisitor_withBoolean(LockVisitor *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		boolean fLock);
typedef somTP_LockVisitor_withBoolean *somTD_LockVisitor_withBoolean;
typedef void   SOMLINK somTP_LockVisitor_unlock(LockVisitor *somSelf, Environment *ev);
typedef somTP_LockVisitor_unlock *somTD_LockVisitor_unlock;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_LockVisitor_visit(LockVisitor *somSelf, Environment *ev,
		AWDBase* item);
typedef somTP_LockVisitor_visit *somTD_LockVisitor_visit;
typedef void   SOMLINK somTP_LockVisitor_setTravelSequence(LockVisitor *somSelf, Environment *ev,
		AWDTreeVisitor_TRAVEL_SEQUENCE seq);
typedef somTP_LockVisitor_setTravelSequence *somTD_LockVisitor_setTravelSequence;
typedef AWDTreeVisitor_TRAVEL_SEQUENCE   SOMLINK somTP_LockVisitor_travelSequence(LockVisitor *somSelf, Environment *ev);
typedef somTP_LockVisitor_travelSequence *somTD_LockVisitor_travelSequence;
typedef void   SOMLINK somTP_LockVisitor_somDefaultInit(LockVisitor *somSelf,
		somInitCtrl* ctrl);
typedef somTP_LockVisitor_somDefaultInit *somTD_LockVisitor_somDefaultInit;
typedef void   SOMLINK somTP_LockVisitor_somDestruct(LockVisitor *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_LockVisitor_somDestruct *somTD_LockVisitor_somDestruct;
typedef void   SOMLINK somTP_LockVisitor_somDefaultCopyInit(LockVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LockVisitor_somDefaultCopyInit *somTD_LockVisitor_somDefaultCopyInit;
typedef LockVisitor*   SOMLINK somTP_LockVisitor_somDefaultAssign(LockVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LockVisitor_somDefaultAssign *somTD_LockVisitor_somDefaultAssign;
typedef void   SOMLINK somTP_LockVisitor_somDefaultConstCopyInit(LockVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LockVisitor_somDefaultConstCopyInit *somTD_LockVisitor_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_LockVisitor_somDefaultVCopyInit(LockVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LockVisitor_somDefaultVCopyInit *somTD_LockVisitor_somDefaultVCopyInit;
typedef void   SOMLINK somTP_LockVisitor_somDefaultConstVCopyInit(LockVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LockVisitor_somDefaultConstVCopyInit *somTD_LockVisitor_somDefaultConstVCopyInit;
typedef LockVisitor*   SOMLINK somTP_LockVisitor_somDefaultConstAssign(LockVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LockVisitor_somDefaultConstAssign *somTD_LockVisitor_somDefaultConstAssign;
typedef LockVisitor*   SOMLINK somTP_LockVisitor_somDefaultVAssign(LockVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LockVisitor_somDefaultVAssign *somTD_LockVisitor_somDefaultVAssign;
typedef LockVisitor*   SOMLINK somTP_LockVisitor_somDefaultConstVAssign(LockVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LockVisitor_somDefaultConstVAssign *somTD_LockVisitor_somDefaultConstVAssign;
typedef void   SOMLINK somTP_LockVisitor_somInit(LockVisitor *somSelf);
typedef somTP_LockVisitor_somInit *somTD_LockVisitor_somInit;
typedef void   SOMLINK somTP_LockVisitor_somFree(LockVisitor *somSelf);
typedef somTP_LockVisitor_somFree *somTD_LockVisitor_somFree;
typedef void   SOMLINK somTP_LockVisitor_somUninit(LockVisitor *somSelf);
typedef somTP_LockVisitor_somUninit *somTD_LockVisitor_somUninit;
typedef SOMClass*   SOMLINK somTP_LockVisitor_somGetClass(LockVisitor *somSelf);
typedef somTP_LockVisitor_somGetClass *somTD_LockVisitor_somGetClass;
typedef string   SOMLINK somTP_LockVisitor_somGetClassName(LockVisitor *somSelf);
typedef somTP_LockVisitor_somGetClassName *somTD_LockVisitor_somGetClassName;
typedef long   SOMLINK somTP_LockVisitor_somGetSize(LockVisitor *somSelf);
typedef somTP_LockVisitor_somGetSize *somTD_LockVisitor_somGetSize;
typedef boolean   SOMLINK somTP_LockVisitor_somIsA(LockVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_LockVisitor_somIsA *somTD_LockVisitor_somIsA;
typedef boolean   SOMLINK somTP_LockVisitor_somIsInstanceOf(LockVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_LockVisitor_somIsInstanceOf *somTD_LockVisitor_somIsInstanceOf;
typedef boolean   SOMLINK somTP_LockVisitor_somRespondsTo(LockVisitor *somSelf,
		somId mId);
typedef somTP_LockVisitor_somRespondsTo *somTD_LockVisitor_somRespondsTo;
typedef boolean   SOMLINK somTP_LockVisitor_somDispatch(LockVisitor *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_LockVisitor_somDispatch *somTD_LockVisitor_somDispatch;
typedef boolean   SOMLINK somTP_LockVisitor_somClassDispatch(LockVisitor *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_LockVisitor_somClassDispatch *somTD_LockVisitor_somClassDispatch;
typedef boolean   SOMLINK somTP_LockVisitor_somCastObj(LockVisitor *somSelf,
		SOMClass* cls);
typedef somTP_LockVisitor_somCastObj *somTD_LockVisitor_somCastObj;
typedef boolean   SOMLINK somTP_LockVisitor_somResetObj(LockVisitor *somSelf);
typedef somTP_LockVisitor_somResetObj *somTD_LockVisitor_somResetObj;
typedef SOMObject*   SOMLINK somTP_LockVisitor_somPrintSelf(LockVisitor *somSelf);
typedef somTP_LockVisitor_somPrintSelf *somTD_LockVisitor_somPrintSelf;
typedef void   SOMLINK somTP_LockVisitor_somDumpSelf(LockVisitor *somSelf,
		long level);
typedef somTP_LockVisitor_somDumpSelf *somTD_LockVisitor_somDumpSelf;
typedef void   SOMLINK somTP_LockVisitor_somDumpSelfInt(LockVisitor *somSelf,
		long level);
typedef somTP_LockVisitor_somDumpSelfInt *somTD_LockVisitor_somDumpSelfInt;
}

#endif /* LockVisitor_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for LockVisitor
 */
class LockVisitor : public AWDTreeVisitor
{
public:

// LockVisitor::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_LockVisitor) LockVisitorNewClass(LockVisitor_MajorVersion,LockVisitor_MinorVersion);
   return (void*)
      SOM_Resolve(_LockVisitor,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_LockVisitor));
}

// LockVisitor::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

LockVisitor()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LockVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

LockVisitor(LockVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LockVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

LockVisitor(const LockVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LockVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

LockVisitor(Environment *ev,boolean fLock) 
{
   withBoolean(ev,0,fLock);
}


/* method: count */
unsigned long   count(Environment *ev)
{
   return SOM_ResolveD(this,LockVisitor,LockVisitor,count)
	(this, ev);
}


/* method: setLockFlag */
void   setLockFlag(Environment *ev,
		boolean fLock)
{
   SOM_ResolveD(this,LockVisitor,LockVisitor,setLockFlag)
	(this, ev,fLock);
}


/* initializer method: withBoolean */
void   withBoolean(Environment *ev,
		somInitCtrl* ctrl,
		boolean fLock)
{
   SOM_ResolveD(this,LockVisitor,LockVisitor,withBoolean)
	(this, ev,ctrl,fLock);
}


/* method: unlock */
void   unlock(Environment *ev)
{
   SOM_ResolveD(this,LockVisitor,LockVisitor,unlock)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: visit */
boolean   visit(Environment *ev,
		AWDBase* item)
{
   return SOM_ResolveD(this,LockVisitor,AWDTreeVisitor,visit)
	(this, ev,item);
}


/* method: setTravelSequence */
void   setTravelSequence(Environment *ev,
		AWDTreeVisitor_TRAVEL_SEQUENCE seq)
{
   SOM_ResolveD(this,LockVisitor,AWDTreeVisitor,setTravelSequence)
	(this, ev,seq);
}


/* method: travelSequence */
AWDTreeVisitor_TRAVEL_SEQUENCE   travelSequence(Environment *ev)
{
   return SOM_ResolveD(this,LockVisitor,AWDTreeVisitor,travelSequence)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,LockVisitor,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,LockVisitor,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LockVisitor,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
LockVisitor*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LockVisitor,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LockVisitor,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LockVisitor,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LockVisitor,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
LockVisitor*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LockVisitor,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
LockVisitor*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LockVisitor,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
LockVisitor*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LockVisitor,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,LockVisitor,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,LockVisitor,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,LockVisitor,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,LockVisitor,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,LockVisitor,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,LockVisitor,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,LockVisitor,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,LockVisitor,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,LockVisitor,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   LockVisitor_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,LockVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,LockVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   LockVisitor_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,LockVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,LockVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,LockVisitor,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,LockVisitor,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,LockVisitor,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,LockVisitor,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,LockVisitor,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* LockVisitor */



#endif       /* SOM_LockVisitor_xh */

#ifndef SOM_SourceLaunchVisitor_xh
#define SOM_SourceLaunchVisitor_xh

class SourceLaunchVisitor;

#define SourceLaunchVisitor_MajorVersion 0
#define SourceLaunchVisitor_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDTreeVisitor_xh
#include <AWDTREE.xh>
#endif

#ifndef SourceLaunchVisitor_API
#define SourceLaunchVisitor_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
#define SourceLaunchVisitor_NONE 0 /* 0x0000 */
#define SourceLaunchVisitor_DIRECTCHILDREN 1 /* 0x0001 */
#define SourceLaunchVisitor_GRANDCHILDREN 2 /* 0x0002 */
#define SourceLaunchVisitor_ALLDESCENDANTCHILDREN 3 /* 0x0003 */
#define SourceLaunchVisitor_SIBLINGS 4 /* 0x0004 */
typedef
unsigned long  SourceLaunchVisitor_RELATIONSHIP;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_NONE
    #ifdef NONE
        #undef NONE
        #define SOMTGD_NONE 1
    #else
        #define NONE SourceLaunchVisitor_NONE
    #endif /* NONE */
#endif /* SOMTGD_NONE */
#ifndef SOMTGD_DIRECTCHILDREN
    #ifdef DIRECTCHILDREN
        #undef DIRECTCHILDREN
        #define SOMTGD_DIRECTCHILDREN 1
    #else
        #define DIRECTCHILDREN SourceLaunchVisitor_DIRECTCHILDREN
    #endif /* DIRECTCHILDREN */
#endif /* SOMTGD_DIRECTCHILDREN */
#ifndef SOMTGD_GRANDCHILDREN
    #ifdef GRANDCHILDREN
        #undef GRANDCHILDREN
        #define SOMTGD_GRANDCHILDREN 1
    #else
        #define GRANDCHILDREN SourceLaunchVisitor_GRANDCHILDREN
    #endif /* GRANDCHILDREN */
#endif /* SOMTGD_GRANDCHILDREN */
#ifndef SOMTGD_ALLDESCENDANTCHILDREN
    #ifdef ALLDESCENDANTCHILDREN
        #undef ALLDESCENDANTCHILDREN
        #define SOMTGD_ALLDESCENDANTCHILDREN 1
    #else
        #define ALLDESCENDANTCHILDREN SourceLaunchVisitor_ALLDESCENDANTCHILDREN
    #endif /* ALLDESCENDANTCHILDREN */
#endif /* SOMTGD_ALLDESCENDANTCHILDREN */
#ifndef SOMTGD_SIBLINGS
    #ifdef SIBLINGS
        #undef SIBLINGS
        #define SOMTGD_SIBLINGS 1
    #else
        #define SIBLINGS SourceLaunchVisitor_SIBLINGS
    #endif /* SIBLINGS */
#endif /* SOMTGD_SIBLINGS */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_RELATIONSHIP
    #ifdef RELATIONSHIP
        #undef RELATIONSHIP
        #define SOMTGD_RELATIONSHIP 1
    #else
        #define RELATIONSHIP SourceLaunchVisitor_RELATIONSHIP
    #endif /* RELATIONSHIP */
#endif /* SOMTGD_RELATIONSHIP */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the SourceLaunchVisitor Class */
SOMEXTERN
#if (defined(SOM_Module_AWDTREE_Source) || defined(SourceLaunchVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_SourceLaunchVisitor))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK SourceLaunchVisitorNewClass(
		integer4,
		integer4 );

/* The API to the SourceLaunchVisitor class object, and the methods it introduces. */
SOMEXTERN struct SourceLaunchVisitorClassDataStructure {
	SOMClass *classObject;
	somMToken withBroadCastIndicator;
	somMToken count;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(SourceLaunchVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_SourceLaunchVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK SourceLaunchVisitorClassData;
#define _SourceLaunchVisitor SourceLaunchVisitorClassData.classObject

/* The API to parentMtabs for SourceLaunchVisitor, and the instance data it introduces. */
SOMEXTERN struct SourceLaunchVisitorCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(SourceLaunchVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_SourceLaunchVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK SourceLaunchVisitorCClassData;

/*
 * -- Typedefs for SourceLaunchVisitor Method Procedures
 */
extern "C" {
typedef unsigned long   SOMLINK somTP_SourceLaunchVisitor_count(SourceLaunchVisitor *somSelf, Environment *ev);
typedef somTP_SourceLaunchVisitor_count *somTD_SourceLaunchVisitor_count;
typedef void   SOMLINK somTP_SourceLaunchVisitor_withBroadCastIndicator(SourceLaunchVisitor *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		boolean fBroadCast,
		AWDBase* objAncestor,
		SourceLaunchVisitor_RELATIONSHIP rel);
typedef somTP_SourceLaunchVisitor_withBroadCastIndicator *somTD_SourceLaunchVisitor_withBroadCastIndicator;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_SourceLaunchVisitor_visit(SourceLaunchVisitor *somSelf, Environment *ev,
		AWDBase* item);
typedef somTP_SourceLaunchVisitor_visit *somTD_SourceLaunchVisitor_visit;
typedef void   SOMLINK somTP_SourceLaunchVisitor_setTravelSequence(SourceLaunchVisitor *somSelf, Environment *ev,
		AWDTreeVisitor_TRAVEL_SEQUENCE seq);
typedef somTP_SourceLaunchVisitor_setTravelSequence *somTD_SourceLaunchVisitor_setTravelSequence;
typedef AWDTreeVisitor_TRAVEL_SEQUENCE   SOMLINK somTP_SourceLaunchVisitor_travelSequence(SourceLaunchVisitor *somSelf, Environment *ev);
typedef somTP_SourceLaunchVisitor_travelSequence *somTD_SourceLaunchVisitor_travelSequence;
typedef void   SOMLINK somTP_SourceLaunchVisitor_somDefaultInit(SourceLaunchVisitor *somSelf,
		somInitCtrl* ctrl);
typedef somTP_SourceLaunchVisitor_somDefaultInit *somTD_SourceLaunchVisitor_somDefaultInit;
typedef void   SOMLINK somTP_SourceLaunchVisitor_somDestruct(SourceLaunchVisitor *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_SourceLaunchVisitor_somDestruct *somTD_SourceLaunchVisitor_somDestruct;
typedef void   SOMLINK somTP_SourceLaunchVisitor_somDefaultCopyInit(SourceLaunchVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SourceLaunchVisitor_somDefaultCopyInit *somTD_SourceLaunchVisitor_somDefaultCopyInit;
typedef SourceLaunchVisitor*   SOMLINK somTP_SourceLaunchVisitor_somDefaultAssign(SourceLaunchVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SourceLaunchVisitor_somDefaultAssign *somTD_SourceLaunchVisitor_somDefaultAssign;
typedef void   SOMLINK somTP_SourceLaunchVisitor_somDefaultConstCopyInit(SourceLaunchVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SourceLaunchVisitor_somDefaultConstCopyInit *somTD_SourceLaunchVisitor_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SourceLaunchVisitor_somDefaultVCopyInit(SourceLaunchVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SourceLaunchVisitor_somDefaultVCopyInit *somTD_SourceLaunchVisitor_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SourceLaunchVisitor_somDefaultConstVCopyInit(SourceLaunchVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SourceLaunchVisitor_somDefaultConstVCopyInit *somTD_SourceLaunchVisitor_somDefaultConstVCopyInit;
typedef SourceLaunchVisitor*   SOMLINK somTP_SourceLaunchVisitor_somDefaultConstAssign(SourceLaunchVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SourceLaunchVisitor_somDefaultConstAssign *somTD_SourceLaunchVisitor_somDefaultConstAssign;
typedef SourceLaunchVisitor*   SOMLINK somTP_SourceLaunchVisitor_somDefaultVAssign(SourceLaunchVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SourceLaunchVisitor_somDefaultVAssign *somTD_SourceLaunchVisitor_somDefaultVAssign;
typedef SourceLaunchVisitor*   SOMLINK somTP_SourceLaunchVisitor_somDefaultConstVAssign(SourceLaunchVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_SourceLaunchVisitor_somDefaultConstVAssign *somTD_SourceLaunchVisitor_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SourceLaunchVisitor_somInit(SourceLaunchVisitor *somSelf);
typedef somTP_SourceLaunchVisitor_somInit *somTD_SourceLaunchVisitor_somInit;
typedef void   SOMLINK somTP_SourceLaunchVisitor_somFree(SourceLaunchVisitor *somSelf);
typedef somTP_SourceLaunchVisitor_somFree *somTD_SourceLaunchVisitor_somFree;
typedef void   SOMLINK somTP_SourceLaunchVisitor_somUninit(SourceLaunchVisitor *somSelf);
typedef somTP_SourceLaunchVisitor_somUninit *somTD_SourceLaunchVisitor_somUninit;
typedef SOMClass*   SOMLINK somTP_SourceLaunchVisitor_somGetClass(SourceLaunchVisitor *somSelf);
typedef somTP_SourceLaunchVisitor_somGetClass *somTD_SourceLaunchVisitor_somGetClass;
typedef string   SOMLINK somTP_SourceLaunchVisitor_somGetClassName(SourceLaunchVisitor *somSelf);
typedef somTP_SourceLaunchVisitor_somGetClassName *somTD_SourceLaunchVisitor_somGetClassName;
typedef long   SOMLINK somTP_SourceLaunchVisitor_somGetSize(SourceLaunchVisitor *somSelf);
typedef somTP_SourceLaunchVisitor_somGetSize *somTD_SourceLaunchVisitor_somGetSize;
typedef boolean   SOMLINK somTP_SourceLaunchVisitor_somIsA(SourceLaunchVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_SourceLaunchVisitor_somIsA *somTD_SourceLaunchVisitor_somIsA;
typedef boolean   SOMLINK somTP_SourceLaunchVisitor_somIsInstanceOf(SourceLaunchVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_SourceLaunchVisitor_somIsInstanceOf *somTD_SourceLaunchVisitor_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SourceLaunchVisitor_somRespondsTo(SourceLaunchVisitor *somSelf,
		somId mId);
typedef somTP_SourceLaunchVisitor_somRespondsTo *somTD_SourceLaunchVisitor_somRespondsTo;
typedef boolean   SOMLINK somTP_SourceLaunchVisitor_somDispatch(SourceLaunchVisitor *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_SourceLaunchVisitor_somDispatch *somTD_SourceLaunchVisitor_somDispatch;
typedef boolean   SOMLINK somTP_SourceLaunchVisitor_somClassDispatch(SourceLaunchVisitor *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_SourceLaunchVisitor_somClassDispatch *somTD_SourceLaunchVisitor_somClassDispatch;
typedef boolean   SOMLINK somTP_SourceLaunchVisitor_somCastObj(SourceLaunchVisitor *somSelf,
		SOMClass* cls);
typedef somTP_SourceLaunchVisitor_somCastObj *somTD_SourceLaunchVisitor_somCastObj;
typedef boolean   SOMLINK somTP_SourceLaunchVisitor_somResetObj(SourceLaunchVisitor *somSelf);
typedef somTP_SourceLaunchVisitor_somResetObj *somTD_SourceLaunchVisitor_somResetObj;
typedef SOMObject*   SOMLINK somTP_SourceLaunchVisitor_somPrintSelf(SourceLaunchVisitor *somSelf);
typedef somTP_SourceLaunchVisitor_somPrintSelf *somTD_SourceLaunchVisitor_somPrintSelf;
typedef void   SOMLINK somTP_SourceLaunchVisitor_somDumpSelf(SourceLaunchVisitor *somSelf,
		long level);
typedef somTP_SourceLaunchVisitor_somDumpSelf *somTD_SourceLaunchVisitor_somDumpSelf;
typedef void   SOMLINK somTP_SourceLaunchVisitor_somDumpSelfInt(SourceLaunchVisitor *somSelf,
		long level);
typedef somTP_SourceLaunchVisitor_somDumpSelfInt *somTD_SourceLaunchVisitor_somDumpSelfInt;
}

#endif /* SourceLaunchVisitor_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for SourceLaunchVisitor
 */
class SourceLaunchVisitor : public AWDTreeVisitor
{
public:

// SourceLaunchVisitor::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SourceLaunchVisitor) SourceLaunchVisitorNewClass(SourceLaunchVisitor_MajorVersion,SourceLaunchVisitor_MinorVersion);
   return (void*)
      SOM_Resolve(_SourceLaunchVisitor,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SourceLaunchVisitor));
}

// SourceLaunchVisitor::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SourceLaunchVisitor()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SourceLaunchVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SourceLaunchVisitor(SourceLaunchVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SourceLaunchVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SourceLaunchVisitor(const SourceLaunchVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SourceLaunchVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SourceLaunchVisitor(Environment *ev,boolean fBroadCast,AWDBase* objAncestor,SourceLaunchVisitor_RELATIONSHIP rel) 
{
   withBroadCastIndicator(ev,0,fBroadCast,objAncestor,rel);
}


/* method: count */
unsigned long   count(Environment *ev)
{
   return SOM_ResolveD(this,SourceLaunchVisitor,SourceLaunchVisitor,count)
	(this, ev);
}


/* initializer method: withBroadCastIndicator */
void   withBroadCastIndicator(Environment *ev,
		somInitCtrl* ctrl,
		boolean fBroadCast,
		AWDBase* objAncestor,
		SourceLaunchVisitor_RELATIONSHIP rel)
{
   SOM_ResolveD(this,SourceLaunchVisitor,SourceLaunchVisitor,withBroadCastIndicator)
	(this, ev,ctrl,fBroadCast,objAncestor,rel);
}


/*
 * Reintroduce inherited methods
 */

/* method: visit */
boolean   visit(Environment *ev,
		AWDBase* item)
{
   return SOM_ResolveD(this,SourceLaunchVisitor,AWDTreeVisitor,visit)
	(this, ev,item);
}


/* method: setTravelSequence */
void   setTravelSequence(Environment *ev,
		AWDTreeVisitor_TRAVEL_SEQUENCE seq)
{
   SOM_ResolveD(this,SourceLaunchVisitor,AWDTreeVisitor,setTravelSequence)
	(this, ev,seq);
}


/* method: travelSequence */
AWDTreeVisitor_TRAVEL_SEQUENCE   travelSequence(Environment *ev)
{
   return SOM_ResolveD(this,SourceLaunchVisitor,AWDTreeVisitor,travelSequence)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SourceLaunchVisitor*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SourceLaunchVisitor*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SourceLaunchVisitor*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SourceLaunchVisitor*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   SourceLaunchVisitor_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   SourceLaunchVisitor_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,SourceLaunchVisitor,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SourceLaunchVisitor */



#endif       /* SOM_SourceLaunchVisitor_xh */

#ifndef SOM_CountVisitor_xh
#define SOM_CountVisitor_xh

class CountVisitor;

#define CountVisitor_MajorVersion 0
#define CountVisitor_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDTreeVisitor_xh
#include <AWDTREE.xh>
#endif

#ifndef CountVisitor_API
#define CountVisitor_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the CountVisitor Class */
SOMEXTERN
#if (defined(SOM_Module_AWDTREE_Source) || defined(CountVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_CountVisitor))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK CountVisitorNewClass(
		integer4,
		integer4 );

/* The API to the CountVisitor class object, and the methods it introduces. */
SOMEXTERN struct CountVisitorClassDataStructure {
	SOMClass *classObject;
	somMToken count;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(CountVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_CountVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK CountVisitorClassData;
#define _CountVisitor CountVisitorClassData.classObject

/* The API to parentMtabs for CountVisitor, and the instance data it introduces. */
SOMEXTERN struct CountVisitorCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(CountVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_CountVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK CountVisitorCClassData;

/*
 * -- Typedefs for CountVisitor Method Procedures
 */
extern "C" {
typedef unsigned long   SOMLINK somTP_CountVisitor_count(CountVisitor *somSelf, Environment *ev);
typedef somTP_CountVisitor_count *somTD_CountVisitor_count;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_CountVisitor_visit(CountVisitor *somSelf, Environment *ev,
		AWDBase* item);
typedef somTP_CountVisitor_visit *somTD_CountVisitor_visit;
typedef void   SOMLINK somTP_CountVisitor_setTravelSequence(CountVisitor *somSelf, Environment *ev,
		AWDTreeVisitor_TRAVEL_SEQUENCE seq);
typedef somTP_CountVisitor_setTravelSequence *somTD_CountVisitor_setTravelSequence;
typedef AWDTreeVisitor_TRAVEL_SEQUENCE   SOMLINK somTP_CountVisitor_travelSequence(CountVisitor *somSelf, Environment *ev);
typedef somTP_CountVisitor_travelSequence *somTD_CountVisitor_travelSequence;
typedef void   SOMLINK somTP_CountVisitor_somDefaultInit(CountVisitor *somSelf,
		somInitCtrl* ctrl);
typedef somTP_CountVisitor_somDefaultInit *somTD_CountVisitor_somDefaultInit;
typedef void   SOMLINK somTP_CountVisitor_somDestruct(CountVisitor *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_CountVisitor_somDestruct *somTD_CountVisitor_somDestruct;
typedef void   SOMLINK somTP_CountVisitor_somDefaultCopyInit(CountVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_CountVisitor_somDefaultCopyInit *somTD_CountVisitor_somDefaultCopyInit;
typedef CountVisitor*   SOMLINK somTP_CountVisitor_somDefaultAssign(CountVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_CountVisitor_somDefaultAssign *somTD_CountVisitor_somDefaultAssign;
typedef void   SOMLINK somTP_CountVisitor_somDefaultConstCopyInit(CountVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_CountVisitor_somDefaultConstCopyInit *somTD_CountVisitor_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_CountVisitor_somDefaultVCopyInit(CountVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_CountVisitor_somDefaultVCopyInit *somTD_CountVisitor_somDefaultVCopyInit;
typedef void   SOMLINK somTP_CountVisitor_somDefaultConstVCopyInit(CountVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_CountVisitor_somDefaultConstVCopyInit *somTD_CountVisitor_somDefaultConstVCopyInit;
typedef CountVisitor*   SOMLINK somTP_CountVisitor_somDefaultConstAssign(CountVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_CountVisitor_somDefaultConstAssign *somTD_CountVisitor_somDefaultConstAssign;
typedef CountVisitor*   SOMLINK somTP_CountVisitor_somDefaultVAssign(CountVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_CountVisitor_somDefaultVAssign *somTD_CountVisitor_somDefaultVAssign;
typedef CountVisitor*   SOMLINK somTP_CountVisitor_somDefaultConstVAssign(CountVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_CountVisitor_somDefaultConstVAssign *somTD_CountVisitor_somDefaultConstVAssign;
typedef void   SOMLINK somTP_CountVisitor_somInit(CountVisitor *somSelf);
typedef somTP_CountVisitor_somInit *somTD_CountVisitor_somInit;
typedef void   SOMLINK somTP_CountVisitor_somFree(CountVisitor *somSelf);
typedef somTP_CountVisitor_somFree *somTD_CountVisitor_somFree;
typedef void   SOMLINK somTP_CountVisitor_somUninit(CountVisitor *somSelf);
typedef somTP_CountVisitor_somUninit *somTD_CountVisitor_somUninit;
typedef SOMClass*   SOMLINK somTP_CountVisitor_somGetClass(CountVisitor *somSelf);
typedef somTP_CountVisitor_somGetClass *somTD_CountVisitor_somGetClass;
typedef string   SOMLINK somTP_CountVisitor_somGetClassName(CountVisitor *somSelf);
typedef somTP_CountVisitor_somGetClassName *somTD_CountVisitor_somGetClassName;
typedef long   SOMLINK somTP_CountVisitor_somGetSize(CountVisitor *somSelf);
typedef somTP_CountVisitor_somGetSize *somTD_CountVisitor_somGetSize;
typedef boolean   SOMLINK somTP_CountVisitor_somIsA(CountVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_CountVisitor_somIsA *somTD_CountVisitor_somIsA;
typedef boolean   SOMLINK somTP_CountVisitor_somIsInstanceOf(CountVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_CountVisitor_somIsInstanceOf *somTD_CountVisitor_somIsInstanceOf;
typedef boolean   SOMLINK somTP_CountVisitor_somRespondsTo(CountVisitor *somSelf,
		somId mId);
typedef somTP_CountVisitor_somRespondsTo *somTD_CountVisitor_somRespondsTo;
typedef boolean   SOMLINK somTP_CountVisitor_somDispatch(CountVisitor *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_CountVisitor_somDispatch *somTD_CountVisitor_somDispatch;
typedef boolean   SOMLINK somTP_CountVisitor_somClassDispatch(CountVisitor *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_CountVisitor_somClassDispatch *somTD_CountVisitor_somClassDispatch;
typedef boolean   SOMLINK somTP_CountVisitor_somCastObj(CountVisitor *somSelf,
		SOMClass* cls);
typedef somTP_CountVisitor_somCastObj *somTD_CountVisitor_somCastObj;
typedef boolean   SOMLINK somTP_CountVisitor_somResetObj(CountVisitor *somSelf);
typedef somTP_CountVisitor_somResetObj *somTD_CountVisitor_somResetObj;
typedef SOMObject*   SOMLINK somTP_CountVisitor_somPrintSelf(CountVisitor *somSelf);
typedef somTP_CountVisitor_somPrintSelf *somTD_CountVisitor_somPrintSelf;
typedef void   SOMLINK somTP_CountVisitor_somDumpSelf(CountVisitor *somSelf,
		long level);
typedef somTP_CountVisitor_somDumpSelf *somTD_CountVisitor_somDumpSelf;
typedef void   SOMLINK somTP_CountVisitor_somDumpSelfInt(CountVisitor *somSelf,
		long level);
typedef somTP_CountVisitor_somDumpSelfInt *somTD_CountVisitor_somDumpSelfInt;
}

#endif /* CountVisitor_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for CountVisitor
 */
class CountVisitor : public AWDTreeVisitor
{
public:

// CountVisitor::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_CountVisitor) CountVisitorNewClass(CountVisitor_MajorVersion,CountVisitor_MinorVersion);
   return (void*)
      SOM_Resolve(_CountVisitor,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_CountVisitor));
}

// CountVisitor::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

CountVisitor()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (CountVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

CountVisitor(CountVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (CountVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

CountVisitor(const CountVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (CountVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: count */
unsigned long   count(Environment *ev)
{
   return SOM_ResolveD(this,CountVisitor,CountVisitor,count)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: visit */
boolean   visit(Environment *ev,
		AWDBase* item)
{
   return SOM_ResolveD(this,CountVisitor,AWDTreeVisitor,visit)
	(this, ev,item);
}


/* method: setTravelSequence */
void   setTravelSequence(Environment *ev,
		AWDTreeVisitor_TRAVEL_SEQUENCE seq)
{
   SOM_ResolveD(this,CountVisitor,AWDTreeVisitor,setTravelSequence)
	(this, ev,seq);
}


/* method: travelSequence */
AWDTreeVisitor_TRAVEL_SEQUENCE   travelSequence(Environment *ev)
{
   return SOM_ResolveD(this,CountVisitor,AWDTreeVisitor,travelSequence)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,CountVisitor,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,CountVisitor,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,CountVisitor,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
CountVisitor*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,CountVisitor,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,CountVisitor,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,CountVisitor,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,CountVisitor,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
CountVisitor*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,CountVisitor,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
CountVisitor*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,CountVisitor,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
CountVisitor*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,CountVisitor,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,CountVisitor,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,CountVisitor,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,CountVisitor,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,CountVisitor,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,CountVisitor,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,CountVisitor,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,CountVisitor,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,CountVisitor,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,CountVisitor,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   CountVisitor_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,CountVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,CountVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   CountVisitor_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,CountVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,CountVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,CountVisitor,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,CountVisitor,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,CountVisitor,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,CountVisitor,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,CountVisitor,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* CountVisitor */



#endif       /* SOM_CountVisitor_xh */

#ifndef SOM_ForAllVisitor_xh
#define SOM_ForAllVisitor_xh

class ForAllVisitor;

#define ForAllVisitor_MajorVersion 0
#define ForAllVisitor_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDTreeVisitor_xh
#include <AWDTREE.xh>
#endif

#ifndef ForAllVisitor_API
#define ForAllVisitor_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the ForAllVisitor Class */
SOMEXTERN
#if (defined(SOM_Module_AWDTREE_Source) || defined(ForAllVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ForAllVisitor))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK ForAllVisitorNewClass(
		integer4,
		integer4 );

/* The API to the ForAllVisitor class object, and the methods it introduces. */
SOMEXTERN struct ForAllVisitorClassDataStructure {
	SOMClass *classObject;
	somMToken data;
	somMToken function;
	somMToken lastObject;
	somMToken setData;
	somMToken setFunction;
	somMToken setLastObject;
	somMToken withFunctionandData;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(ForAllVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ForAllVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ForAllVisitorClassData;
#define _ForAllVisitor ForAllVisitorClassData.classObject

/* The API to parentMtabs for ForAllVisitor, and the instance data it introduces. */
SOMEXTERN struct ForAllVisitorCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(ForAllVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ForAllVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ForAllVisitorCClassData;

/*
 * -- Typedefs for ForAllVisitor Method Procedures
 */
extern "C" {
typedef void*   SOMLINK somTP_ForAllVisitor_data(ForAllVisitor *somSelf, Environment *ev);
typedef somTP_ForAllVisitor_data *somTD_ForAllVisitor_data;
typedef AWDTreeItrProc   SOMLINK somTP_ForAllVisitor_function(ForAllVisitor *somSelf, Environment *ev);
typedef somTP_ForAllVisitor_function *somTD_ForAllVisitor_function;
typedef AWDBase*   SOMLINK somTP_ForAllVisitor_lastObject(ForAllVisitor *somSelf, Environment *ev);
typedef somTP_ForAllVisitor_lastObject *somTD_ForAllVisitor_lastObject;
typedef void   SOMLINK somTP_ForAllVisitor_setData(ForAllVisitor *somSelf, Environment *ev,
		void* pvData);
typedef somTP_ForAllVisitor_setData *somTD_ForAllVisitor_setData;
typedef void   SOMLINK somTP_ForAllVisitor_setFunction(ForAllVisitor *somSelf, Environment *ev,
		AWDTreeItrProc pvFunction);
typedef somTP_ForAllVisitor_setFunction *somTD_ForAllVisitor_setFunction;
typedef void   SOMLINK somTP_ForAllVisitor_setLastObject(ForAllVisitor *somSelf, Environment *ev,
		AWDBase* theObject);
typedef somTP_ForAllVisitor_setLastObject *somTD_ForAllVisitor_setLastObject;
typedef void   SOMLINK somTP_ForAllVisitor_withFunctionandData(ForAllVisitor *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDTreeItrProc pfn,
		void* pvData);
typedef somTP_ForAllVisitor_withFunctionandData *somTD_ForAllVisitor_withFunctionandData;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_ForAllVisitor_visit(ForAllVisitor *somSelf, Environment *ev,
		AWDBase* item);
typedef somTP_ForAllVisitor_visit *somTD_ForAllVisitor_visit;
typedef void   SOMLINK somTP_ForAllVisitor_setTravelSequence(ForAllVisitor *somSelf, Environment *ev,
		AWDTreeVisitor_TRAVEL_SEQUENCE seq);
typedef somTP_ForAllVisitor_setTravelSequence *somTD_ForAllVisitor_setTravelSequence;
typedef AWDTreeVisitor_TRAVEL_SEQUENCE   SOMLINK somTP_ForAllVisitor_travelSequence(ForAllVisitor *somSelf, Environment *ev);
typedef somTP_ForAllVisitor_travelSequence *somTD_ForAllVisitor_travelSequence;
typedef void   SOMLINK somTP_ForAllVisitor_somDefaultInit(ForAllVisitor *somSelf,
		somInitCtrl* ctrl);
typedef somTP_ForAllVisitor_somDefaultInit *somTD_ForAllVisitor_somDefaultInit;
typedef void   SOMLINK somTP_ForAllVisitor_somDestruct(ForAllVisitor *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_ForAllVisitor_somDestruct *somTD_ForAllVisitor_somDestruct;
typedef void   SOMLINK somTP_ForAllVisitor_somDefaultCopyInit(ForAllVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ForAllVisitor_somDefaultCopyInit *somTD_ForAllVisitor_somDefaultCopyInit;
typedef ForAllVisitor*   SOMLINK somTP_ForAllVisitor_somDefaultAssign(ForAllVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ForAllVisitor_somDefaultAssign *somTD_ForAllVisitor_somDefaultAssign;
typedef void   SOMLINK somTP_ForAllVisitor_somDefaultConstCopyInit(ForAllVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ForAllVisitor_somDefaultConstCopyInit *somTD_ForAllVisitor_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ForAllVisitor_somDefaultVCopyInit(ForAllVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ForAllVisitor_somDefaultVCopyInit *somTD_ForAllVisitor_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ForAllVisitor_somDefaultConstVCopyInit(ForAllVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ForAllVisitor_somDefaultConstVCopyInit *somTD_ForAllVisitor_somDefaultConstVCopyInit;
typedef ForAllVisitor*   SOMLINK somTP_ForAllVisitor_somDefaultConstAssign(ForAllVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ForAllVisitor_somDefaultConstAssign *somTD_ForAllVisitor_somDefaultConstAssign;
typedef ForAllVisitor*   SOMLINK somTP_ForAllVisitor_somDefaultVAssign(ForAllVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ForAllVisitor_somDefaultVAssign *somTD_ForAllVisitor_somDefaultVAssign;
typedef ForAllVisitor*   SOMLINK somTP_ForAllVisitor_somDefaultConstVAssign(ForAllVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ForAllVisitor_somDefaultConstVAssign *somTD_ForAllVisitor_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ForAllVisitor_somInit(ForAllVisitor *somSelf);
typedef somTP_ForAllVisitor_somInit *somTD_ForAllVisitor_somInit;
typedef void   SOMLINK somTP_ForAllVisitor_somFree(ForAllVisitor *somSelf);
typedef somTP_ForAllVisitor_somFree *somTD_ForAllVisitor_somFree;
typedef void   SOMLINK somTP_ForAllVisitor_somUninit(ForAllVisitor *somSelf);
typedef somTP_ForAllVisitor_somUninit *somTD_ForAllVisitor_somUninit;
typedef SOMClass*   SOMLINK somTP_ForAllVisitor_somGetClass(ForAllVisitor *somSelf);
typedef somTP_ForAllVisitor_somGetClass *somTD_ForAllVisitor_somGetClass;
typedef string   SOMLINK somTP_ForAllVisitor_somGetClassName(ForAllVisitor *somSelf);
typedef somTP_ForAllVisitor_somGetClassName *somTD_ForAllVisitor_somGetClassName;
typedef long   SOMLINK somTP_ForAllVisitor_somGetSize(ForAllVisitor *somSelf);
typedef somTP_ForAllVisitor_somGetSize *somTD_ForAllVisitor_somGetSize;
typedef boolean   SOMLINK somTP_ForAllVisitor_somIsA(ForAllVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_ForAllVisitor_somIsA *somTD_ForAllVisitor_somIsA;
typedef boolean   SOMLINK somTP_ForAllVisitor_somIsInstanceOf(ForAllVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_ForAllVisitor_somIsInstanceOf *somTD_ForAllVisitor_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ForAllVisitor_somRespondsTo(ForAllVisitor *somSelf,
		somId mId);
typedef somTP_ForAllVisitor_somRespondsTo *somTD_ForAllVisitor_somRespondsTo;
typedef boolean   SOMLINK somTP_ForAllVisitor_somDispatch(ForAllVisitor *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ForAllVisitor_somDispatch *somTD_ForAllVisitor_somDispatch;
typedef boolean   SOMLINK somTP_ForAllVisitor_somClassDispatch(ForAllVisitor *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ForAllVisitor_somClassDispatch *somTD_ForAllVisitor_somClassDispatch;
typedef boolean   SOMLINK somTP_ForAllVisitor_somCastObj(ForAllVisitor *somSelf,
		SOMClass* cls);
typedef somTP_ForAllVisitor_somCastObj *somTD_ForAllVisitor_somCastObj;
typedef boolean   SOMLINK somTP_ForAllVisitor_somResetObj(ForAllVisitor *somSelf);
typedef somTP_ForAllVisitor_somResetObj *somTD_ForAllVisitor_somResetObj;
typedef SOMObject*   SOMLINK somTP_ForAllVisitor_somPrintSelf(ForAllVisitor *somSelf);
typedef somTP_ForAllVisitor_somPrintSelf *somTD_ForAllVisitor_somPrintSelf;
typedef void   SOMLINK somTP_ForAllVisitor_somDumpSelf(ForAllVisitor *somSelf,
		long level);
typedef somTP_ForAllVisitor_somDumpSelf *somTD_ForAllVisitor_somDumpSelf;
typedef void   SOMLINK somTP_ForAllVisitor_somDumpSelfInt(ForAllVisitor *somSelf,
		long level);
typedef somTP_ForAllVisitor_somDumpSelfInt *somTD_ForAllVisitor_somDumpSelfInt;
}

#endif /* ForAllVisitor_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for ForAllVisitor
 */
class ForAllVisitor : public AWDTreeVisitor
{
public:

// ForAllVisitor::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ForAllVisitor) ForAllVisitorNewClass(ForAllVisitor_MajorVersion,ForAllVisitor_MinorVersion);
   return (void*)
      SOM_Resolve(_ForAllVisitor,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ForAllVisitor));
}

// ForAllVisitor::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ForAllVisitor()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ForAllVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ForAllVisitor(ForAllVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ForAllVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ForAllVisitor(const ForAllVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ForAllVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ForAllVisitor(Environment *ev,AWDTreeItrProc pfn,void* pvData) 
{
   withFunctionandData(ev,0,pfn,pvData);
}


/* method: data */
void*   data(Environment *ev)
{
   return SOM_ResolveD(this,ForAllVisitor,ForAllVisitor,data)
	(this, ev);
}


/* method: function */
AWDTreeItrProc   function(Environment *ev)
{
   return SOM_ResolveD(this,ForAllVisitor,ForAllVisitor,function)
	(this, ev);
}


/* method: lastObject */
AWDBase*   lastObject(Environment *ev)
{
   return SOM_ResolveD(this,ForAllVisitor,ForAllVisitor,lastObject)
	(this, ev);
}


/* method: setData */
void   setData(Environment *ev,
		void* pvData)
{
   SOM_ResolveD(this,ForAllVisitor,ForAllVisitor,setData)
	(this, ev,pvData);
}


/* method: setFunction */
void   setFunction(Environment *ev,
		AWDTreeItrProc pvFunction)
{
   SOM_ResolveD(this,ForAllVisitor,ForAllVisitor,setFunction)
	(this, ev,pvFunction);
}


/* method: setLastObject */
void   setLastObject(Environment *ev,
		AWDBase* theObject)
{
   SOM_ResolveD(this,ForAllVisitor,ForAllVisitor,setLastObject)
	(this, ev,theObject);
}


/* initializer method: withFunctionandData */
void   withFunctionandData(Environment *ev,
		somInitCtrl* ctrl,
		AWDTreeItrProc pfn,
		void* pvData)
{
   SOM_ResolveD(this,ForAllVisitor,ForAllVisitor,withFunctionandData)
	(this, ev,ctrl,pfn,pvData);
}


/*
 * Reintroduce inherited methods
 */

/* method: visit */
boolean   visit(Environment *ev,
		AWDBase* item)
{
   return SOM_ResolveD(this,ForAllVisitor,AWDTreeVisitor,visit)
	(this, ev,item);
}


/* method: setTravelSequence */
void   setTravelSequence(Environment *ev,
		AWDTreeVisitor_TRAVEL_SEQUENCE seq)
{
   SOM_ResolveD(this,ForAllVisitor,AWDTreeVisitor,setTravelSequence)
	(this, ev,seq);
}


/* method: travelSequence */
AWDTreeVisitor_TRAVEL_SEQUENCE   travelSequence(Environment *ev)
{
   return SOM_ResolveD(this,ForAllVisitor,AWDTreeVisitor,travelSequence)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,ForAllVisitor,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,ForAllVisitor,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ForAllVisitor,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ForAllVisitor*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ForAllVisitor,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ForAllVisitor,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ForAllVisitor,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ForAllVisitor,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ForAllVisitor*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ForAllVisitor,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ForAllVisitor*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ForAllVisitor,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ForAllVisitor*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ForAllVisitor,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,ForAllVisitor,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ForAllVisitor,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ForAllVisitor,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,ForAllVisitor,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,ForAllVisitor,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,ForAllVisitor,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ForAllVisitor,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ForAllVisitor,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,ForAllVisitor,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   ForAllVisitor_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ForAllVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ForAllVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   ForAllVisitor_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ForAllVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ForAllVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,ForAllVisitor,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,ForAllVisitor,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,ForAllVisitor,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ForAllVisitor,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ForAllVisitor,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ForAllVisitor */



#endif       /* SOM_ForAllVisitor_xh */

#ifndef SOM_ReportVisitor_xh
#define SOM_ReportVisitor_xh

class ReportVisitor;

#define ReportVisitor_MajorVersion 0
#define ReportVisitor_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDTreeVisitor_xh
#include <AWDTREE.xh>
#endif

#ifndef ReportVisitor_API
#define ReportVisitor_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the ReportVisitor Class */
SOMEXTERN
#if (defined(SOM_Module_AWDTREE_Source) || defined(ReportVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ReportVisitor))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK ReportVisitorNewClass(
		integer4,
		integer4 );

/* The API to the ReportVisitor class object, and the methods it introduces. */
SOMEXTERN struct ReportVisitorClassDataStructure {
	SOMClass *classObject;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(ReportVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ReportVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ReportVisitorClassData;
#define _ReportVisitor ReportVisitorClassData.classObject

/* The API to parentMtabs for ReportVisitor, and the instance data it introduces. */
SOMEXTERN struct ReportVisitorCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(ReportVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ReportVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ReportVisitorCClassData;

/*
 * -- Typedefs for ReportVisitor Method Procedures
 */
extern "C" {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_ReportVisitor_visit(ReportVisitor *somSelf, Environment *ev,
		AWDBase* item);
typedef somTP_ReportVisitor_visit *somTD_ReportVisitor_visit;
typedef void   SOMLINK somTP_ReportVisitor_setTravelSequence(ReportVisitor *somSelf, Environment *ev,
		AWDTreeVisitor_TRAVEL_SEQUENCE seq);
typedef somTP_ReportVisitor_setTravelSequence *somTD_ReportVisitor_setTravelSequence;
typedef AWDTreeVisitor_TRAVEL_SEQUENCE   SOMLINK somTP_ReportVisitor_travelSequence(ReportVisitor *somSelf, Environment *ev);
typedef somTP_ReportVisitor_travelSequence *somTD_ReportVisitor_travelSequence;
typedef void   SOMLINK somTP_ReportVisitor_somDefaultInit(ReportVisitor *somSelf,
		somInitCtrl* ctrl);
typedef somTP_ReportVisitor_somDefaultInit *somTD_ReportVisitor_somDefaultInit;
typedef void   SOMLINK somTP_ReportVisitor_somDestruct(ReportVisitor *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_ReportVisitor_somDestruct *somTD_ReportVisitor_somDestruct;
typedef void   SOMLINK somTP_ReportVisitor_somDefaultCopyInit(ReportVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ReportVisitor_somDefaultCopyInit *somTD_ReportVisitor_somDefaultCopyInit;
typedef ReportVisitor*   SOMLINK somTP_ReportVisitor_somDefaultAssign(ReportVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ReportVisitor_somDefaultAssign *somTD_ReportVisitor_somDefaultAssign;
typedef void   SOMLINK somTP_ReportVisitor_somDefaultConstCopyInit(ReportVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ReportVisitor_somDefaultConstCopyInit *somTD_ReportVisitor_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ReportVisitor_somDefaultVCopyInit(ReportVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ReportVisitor_somDefaultVCopyInit *somTD_ReportVisitor_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ReportVisitor_somDefaultConstVCopyInit(ReportVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ReportVisitor_somDefaultConstVCopyInit *somTD_ReportVisitor_somDefaultConstVCopyInit;
typedef ReportVisitor*   SOMLINK somTP_ReportVisitor_somDefaultConstAssign(ReportVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ReportVisitor_somDefaultConstAssign *somTD_ReportVisitor_somDefaultConstAssign;
typedef ReportVisitor*   SOMLINK somTP_ReportVisitor_somDefaultVAssign(ReportVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ReportVisitor_somDefaultVAssign *somTD_ReportVisitor_somDefaultVAssign;
typedef ReportVisitor*   SOMLINK somTP_ReportVisitor_somDefaultConstVAssign(ReportVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ReportVisitor_somDefaultConstVAssign *somTD_ReportVisitor_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ReportVisitor_somInit(ReportVisitor *somSelf);
typedef somTP_ReportVisitor_somInit *somTD_ReportVisitor_somInit;
typedef void   SOMLINK somTP_ReportVisitor_somFree(ReportVisitor *somSelf);
typedef somTP_ReportVisitor_somFree *somTD_ReportVisitor_somFree;
typedef void   SOMLINK somTP_ReportVisitor_somUninit(ReportVisitor *somSelf);
typedef somTP_ReportVisitor_somUninit *somTD_ReportVisitor_somUninit;
typedef SOMClass*   SOMLINK somTP_ReportVisitor_somGetClass(ReportVisitor *somSelf);
typedef somTP_ReportVisitor_somGetClass *somTD_ReportVisitor_somGetClass;
typedef string   SOMLINK somTP_ReportVisitor_somGetClassName(ReportVisitor *somSelf);
typedef somTP_ReportVisitor_somGetClassName *somTD_ReportVisitor_somGetClassName;
typedef long   SOMLINK somTP_ReportVisitor_somGetSize(ReportVisitor *somSelf);
typedef somTP_ReportVisitor_somGetSize *somTD_ReportVisitor_somGetSize;
typedef boolean   SOMLINK somTP_ReportVisitor_somIsA(ReportVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_ReportVisitor_somIsA *somTD_ReportVisitor_somIsA;
typedef boolean   SOMLINK somTP_ReportVisitor_somIsInstanceOf(ReportVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_ReportVisitor_somIsInstanceOf *somTD_ReportVisitor_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ReportVisitor_somRespondsTo(ReportVisitor *somSelf,
		somId mId);
typedef somTP_ReportVisitor_somRespondsTo *somTD_ReportVisitor_somRespondsTo;
typedef boolean   SOMLINK somTP_ReportVisitor_somDispatch(ReportVisitor *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ReportVisitor_somDispatch *somTD_ReportVisitor_somDispatch;
typedef boolean   SOMLINK somTP_ReportVisitor_somClassDispatch(ReportVisitor *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ReportVisitor_somClassDispatch *somTD_ReportVisitor_somClassDispatch;
typedef boolean   SOMLINK somTP_ReportVisitor_somCastObj(ReportVisitor *somSelf,
		SOMClass* cls);
typedef somTP_ReportVisitor_somCastObj *somTD_ReportVisitor_somCastObj;
typedef boolean   SOMLINK somTP_ReportVisitor_somResetObj(ReportVisitor *somSelf);
typedef somTP_ReportVisitor_somResetObj *somTD_ReportVisitor_somResetObj;
typedef SOMObject*   SOMLINK somTP_ReportVisitor_somPrintSelf(ReportVisitor *somSelf);
typedef somTP_ReportVisitor_somPrintSelf *somTD_ReportVisitor_somPrintSelf;
typedef void   SOMLINK somTP_ReportVisitor_somDumpSelf(ReportVisitor *somSelf,
		long level);
typedef somTP_ReportVisitor_somDumpSelf *somTD_ReportVisitor_somDumpSelf;
typedef void   SOMLINK somTP_ReportVisitor_somDumpSelfInt(ReportVisitor *somSelf,
		long level);
typedef somTP_ReportVisitor_somDumpSelfInt *somTD_ReportVisitor_somDumpSelfInt;
}

#endif /* ReportVisitor_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for ReportVisitor
 */
class ReportVisitor : public AWDTreeVisitor
{
public:

// ReportVisitor::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ReportVisitor) ReportVisitorNewClass(ReportVisitor_MajorVersion,ReportVisitor_MinorVersion);
   return (void*)
      SOM_Resolve(_ReportVisitor,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ReportVisitor));
}

// ReportVisitor::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ReportVisitor()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ReportVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ReportVisitor(ReportVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ReportVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ReportVisitor(const ReportVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ReportVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: visit */
boolean   visit(Environment *ev,
		AWDBase* item)
{
   return SOM_ResolveD(this,ReportVisitor,AWDTreeVisitor,visit)
	(this, ev,item);
}


/* method: setTravelSequence */
void   setTravelSequence(Environment *ev,
		AWDTreeVisitor_TRAVEL_SEQUENCE seq)
{
   SOM_ResolveD(this,ReportVisitor,AWDTreeVisitor,setTravelSequence)
	(this, ev,seq);
}


/* method: travelSequence */
AWDTreeVisitor_TRAVEL_SEQUENCE   travelSequence(Environment *ev)
{
   return SOM_ResolveD(this,ReportVisitor,AWDTreeVisitor,travelSequence)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,ReportVisitor,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,ReportVisitor,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ReportVisitor,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ReportVisitor*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ReportVisitor,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ReportVisitor,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ReportVisitor,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ReportVisitor,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ReportVisitor*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ReportVisitor,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ReportVisitor*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ReportVisitor,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ReportVisitor*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ReportVisitor,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,ReportVisitor,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ReportVisitor,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ReportVisitor,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,ReportVisitor,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,ReportVisitor,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,ReportVisitor,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ReportVisitor,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ReportVisitor,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,ReportVisitor,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   ReportVisitor_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ReportVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ReportVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   ReportVisitor_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ReportVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ReportVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,ReportVisitor,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,ReportVisitor,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,ReportVisitor,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ReportVisitor,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ReportVisitor,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ReportVisitor */



#endif       /* SOM_ReportVisitor_xh */

#ifndef SOM_DeleteVisitor_xh
#define SOM_DeleteVisitor_xh

class DeleteVisitor;

#define DeleteVisitor_MajorVersion 0
#define DeleteVisitor_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDTreeVisitor_xh
#include <AWDTREE.xh>
#endif

#ifndef DeleteVisitor_API
#define DeleteVisitor_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the DeleteVisitor Class */
SOMEXTERN
#if (defined(SOM_Module_AWDTREE_Source) || defined(DeleteVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_DeleteVisitor))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK DeleteVisitorNewClass(
		integer4,
		integer4 );

/* The API to the DeleteVisitor class object, and the methods it introduces. */
SOMEXTERN struct DeleteVisitorClassDataStructure {
	SOMClass *classObject;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(DeleteVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_DeleteVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK DeleteVisitorClassData;
#define _DeleteVisitor DeleteVisitorClassData.classObject

/* The API to parentMtabs for DeleteVisitor, and the instance data it introduces. */
SOMEXTERN struct DeleteVisitorCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_AWDTREE_Source) || defined(DeleteVisitor_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_DeleteVisitor))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK DeleteVisitorCClassData;

/*
 * -- Typedefs for DeleteVisitor Method Procedures
 */
extern "C" {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_DeleteVisitor_visit(DeleteVisitor *somSelf, Environment *ev,
		AWDBase* item);
typedef somTP_DeleteVisitor_visit *somTD_DeleteVisitor_visit;
typedef void   SOMLINK somTP_DeleteVisitor_setTravelSequence(DeleteVisitor *somSelf, Environment *ev,
		AWDTreeVisitor_TRAVEL_SEQUENCE seq);
typedef somTP_DeleteVisitor_setTravelSequence *somTD_DeleteVisitor_setTravelSequence;
typedef AWDTreeVisitor_TRAVEL_SEQUENCE   SOMLINK somTP_DeleteVisitor_travelSequence(DeleteVisitor *somSelf, Environment *ev);
typedef somTP_DeleteVisitor_travelSequence *somTD_DeleteVisitor_travelSequence;
typedef void   SOMLINK somTP_DeleteVisitor_somDefaultInit(DeleteVisitor *somSelf,
		somInitCtrl* ctrl);
typedef somTP_DeleteVisitor_somDefaultInit *somTD_DeleteVisitor_somDefaultInit;
typedef void   SOMLINK somTP_DeleteVisitor_somDestruct(DeleteVisitor *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_DeleteVisitor_somDestruct *somTD_DeleteVisitor_somDestruct;
typedef void   SOMLINK somTP_DeleteVisitor_somDefaultCopyInit(DeleteVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_DeleteVisitor_somDefaultCopyInit *somTD_DeleteVisitor_somDefaultCopyInit;
typedef DeleteVisitor*   SOMLINK somTP_DeleteVisitor_somDefaultAssign(DeleteVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_DeleteVisitor_somDefaultAssign *somTD_DeleteVisitor_somDefaultAssign;
typedef void   SOMLINK somTP_DeleteVisitor_somDefaultConstCopyInit(DeleteVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_DeleteVisitor_somDefaultConstCopyInit *somTD_DeleteVisitor_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_DeleteVisitor_somDefaultVCopyInit(DeleteVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_DeleteVisitor_somDefaultVCopyInit *somTD_DeleteVisitor_somDefaultVCopyInit;
typedef void   SOMLINK somTP_DeleteVisitor_somDefaultConstVCopyInit(DeleteVisitor *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_DeleteVisitor_somDefaultConstVCopyInit *somTD_DeleteVisitor_somDefaultConstVCopyInit;
typedef DeleteVisitor*   SOMLINK somTP_DeleteVisitor_somDefaultConstAssign(DeleteVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_DeleteVisitor_somDefaultConstAssign *somTD_DeleteVisitor_somDefaultConstAssign;
typedef DeleteVisitor*   SOMLINK somTP_DeleteVisitor_somDefaultVAssign(DeleteVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_DeleteVisitor_somDefaultVAssign *somTD_DeleteVisitor_somDefaultVAssign;
typedef DeleteVisitor*   SOMLINK somTP_DeleteVisitor_somDefaultConstVAssign(DeleteVisitor *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_DeleteVisitor_somDefaultConstVAssign *somTD_DeleteVisitor_somDefaultConstVAssign;
typedef void   SOMLINK somTP_DeleteVisitor_somInit(DeleteVisitor *somSelf);
typedef somTP_DeleteVisitor_somInit *somTD_DeleteVisitor_somInit;
typedef void   SOMLINK somTP_DeleteVisitor_somFree(DeleteVisitor *somSelf);
typedef somTP_DeleteVisitor_somFree *somTD_DeleteVisitor_somFree;
typedef void   SOMLINK somTP_DeleteVisitor_somUninit(DeleteVisitor *somSelf);
typedef somTP_DeleteVisitor_somUninit *somTD_DeleteVisitor_somUninit;
typedef SOMClass*   SOMLINK somTP_DeleteVisitor_somGetClass(DeleteVisitor *somSelf);
typedef somTP_DeleteVisitor_somGetClass *somTD_DeleteVisitor_somGetClass;
typedef string   SOMLINK somTP_DeleteVisitor_somGetClassName(DeleteVisitor *somSelf);
typedef somTP_DeleteVisitor_somGetClassName *somTD_DeleteVisitor_somGetClassName;
typedef long   SOMLINK somTP_DeleteVisitor_somGetSize(DeleteVisitor *somSelf);
typedef somTP_DeleteVisitor_somGetSize *somTD_DeleteVisitor_somGetSize;
typedef boolean   SOMLINK somTP_DeleteVisitor_somIsA(DeleteVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_DeleteVisitor_somIsA *somTD_DeleteVisitor_somIsA;
typedef boolean   SOMLINK somTP_DeleteVisitor_somIsInstanceOf(DeleteVisitor *somSelf,
		SOMClass* aClassObj);
typedef somTP_DeleteVisitor_somIsInstanceOf *somTD_DeleteVisitor_somIsInstanceOf;
typedef boolean   SOMLINK somTP_DeleteVisitor_somRespondsTo(DeleteVisitor *somSelf,
		somId mId);
typedef somTP_DeleteVisitor_somRespondsTo *somTD_DeleteVisitor_somRespondsTo;
typedef boolean   SOMLINK somTP_DeleteVisitor_somDispatch(DeleteVisitor *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_DeleteVisitor_somDispatch *somTD_DeleteVisitor_somDispatch;
typedef boolean   SOMLINK somTP_DeleteVisitor_somClassDispatch(DeleteVisitor *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_DeleteVisitor_somClassDispatch *somTD_DeleteVisitor_somClassDispatch;
typedef boolean   SOMLINK somTP_DeleteVisitor_somCastObj(DeleteVisitor *somSelf,
		SOMClass* cls);
typedef somTP_DeleteVisitor_somCastObj *somTD_DeleteVisitor_somCastObj;
typedef boolean   SOMLINK somTP_DeleteVisitor_somResetObj(DeleteVisitor *somSelf);
typedef somTP_DeleteVisitor_somResetObj *somTD_DeleteVisitor_somResetObj;
typedef SOMObject*   SOMLINK somTP_DeleteVisitor_somPrintSelf(DeleteVisitor *somSelf);
typedef somTP_DeleteVisitor_somPrintSelf *somTD_DeleteVisitor_somPrintSelf;
typedef void   SOMLINK somTP_DeleteVisitor_somDumpSelf(DeleteVisitor *somSelf,
		long level);
typedef somTP_DeleteVisitor_somDumpSelf *somTD_DeleteVisitor_somDumpSelf;
typedef void   SOMLINK somTP_DeleteVisitor_somDumpSelfInt(DeleteVisitor *somSelf,
		long level);
typedef somTP_DeleteVisitor_somDumpSelfInt *somTD_DeleteVisitor_somDumpSelfInt;
}

#endif /* DeleteVisitor_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for DeleteVisitor
 */
class DeleteVisitor : public AWDTreeVisitor
{
public:

// DeleteVisitor::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_DeleteVisitor) DeleteVisitorNewClass(DeleteVisitor_MajorVersion,DeleteVisitor_MinorVersion);
   return (void*)
      SOM_Resolve(_DeleteVisitor,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_DeleteVisitor));
}

// DeleteVisitor::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

DeleteVisitor()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (DeleteVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

DeleteVisitor(DeleteVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (DeleteVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

DeleteVisitor(const DeleteVisitor* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (DeleteVisitorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: visit */
boolean   visit(Environment *ev,
		AWDBase* item)
{
   return SOM_ResolveD(this,DeleteVisitor,AWDTreeVisitor,visit)
	(this, ev,item);
}


/* method: setTravelSequence */
void   setTravelSequence(Environment *ev,
		AWDTreeVisitor_TRAVEL_SEQUENCE seq)
{
   SOM_ResolveD(this,DeleteVisitor,AWDTreeVisitor,setTravelSequence)
	(this, ev,seq);
}


/* method: travelSequence */
AWDTreeVisitor_TRAVEL_SEQUENCE   travelSequence(Environment *ev)
{
   return SOM_ResolveD(this,DeleteVisitor,AWDTreeVisitor,travelSequence)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,DeleteVisitor,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,DeleteVisitor,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,DeleteVisitor,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
DeleteVisitor*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,DeleteVisitor,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,DeleteVisitor,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,DeleteVisitor,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,DeleteVisitor,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
DeleteVisitor*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,DeleteVisitor,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
DeleteVisitor*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,DeleteVisitor,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
DeleteVisitor*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,DeleteVisitor,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,DeleteVisitor,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,DeleteVisitor,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,DeleteVisitor,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,DeleteVisitor,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,DeleteVisitor,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,DeleteVisitor,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,DeleteVisitor,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,DeleteVisitor,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,DeleteVisitor,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   DeleteVisitor_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,DeleteVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,DeleteVisitor,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   DeleteVisitor_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,DeleteVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,DeleteVisitor,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,DeleteVisitor,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,DeleteVisitor,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,DeleteVisitor,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,DeleteVisitor,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,DeleteVisitor,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* DeleteVisitor */



#endif       /* SOM_DeleteVisitor_xh */
