
#ifndef SOM_AWDEntityDefaults_xh
#define SOM_AWDEntityDefaults_xh

class AWDEntityDefaults;

#define AWDEntityDefaults_MajorVersion 2
#define AWDEntityDefaults_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <acbl0340.xh>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMList_xh
#include <somlist.xh>
#endif

#ifndef AWDEntityDefaults_API
#define AWDEntityDefaults_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class AWDVisitor;
class AWDConnection;
class AWDException;
class AWDEntityKey;
class AWDEntity;
class AWDApplication;
class somf_TPrimitiveLinkedListIterator;

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDEntityDefaults Class */
SOMEXTERN
#if (defined(SOM_Module_entity_Source) || defined(AWDEntityDefaults_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDEntityDefaults))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDEntityDefaultsNewClass(
		integer4,
		integer4 );

/* The API to the AWDEntityDefaults class object, and the methods it introduces. */
SOMEXTERN struct AWDEntityDefaultsClassDataStructure {
	SOMClass *classObject;
	somMToken count;
}
#if !(defined(SOM_Module_entity_Source) || defined(AWDEntityDefaults_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDEntityDefaults))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDEntityDefaultsClassData;
#define _AWDEntityDefaults AWDEntityDefaultsClassData.classObject

/* The API to parentMtabs for AWDEntityDefaults, and the instance data it introduces. */
SOMEXTERN struct AWDEntityDefaultsCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_entity_Source) || defined(AWDEntityDefaults_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDEntityDefaults))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDEntityDefaultsCClassData;

/*
 * -- Typedefs for AWDEntityDefaults Method Procedures
 */
extern "C" {
typedef unsigned long   SOMLINK somTP_AWDEntityDefaults_count(AWDEntityDefaults *somSelf, Environment *ev);
typedef somTP_AWDEntityDefaults_count *somTD_AWDEntityDefaults_count;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_AWDEntityDefaults_deleteAll(AWDEntityDefaults *somSelf, Environment *ev);
typedef somTP_AWDEntityDefaults_deleteAll *somTD_AWDEntityDefaults_deleteAll;
typedef boolean   SOMLINK somTP_AWDEntityDefaults_forAll(AWDEntityDefaults *somSelf, Environment *ev,
		void* pfn,
		void* pData,
		somf_MLinkable** pLastObject);
typedef somTP_AWDEntityDefaults_forAll *somTD_AWDEntityDefaults_forAll;
typedef boolean   SOMLINK somTP_AWDEntityDefaults_visitAll(AWDEntityDefaults *somSelf, Environment *ev,
		AWDVisitor* visitor);
typedef somTP_AWDEntityDefaults_visitAll *somTD_AWDEntityDefaults_visitAll;
typedef boolean   SOMLINK somTP_AWDEntityDefaults_invariantOK(AWDEntityDefaults *somSelf, Environment *ev);
typedef somTP_AWDEntityDefaults_invariantOK *somTD_AWDEntityDefaults_invariantOK;
typedef void   SOMLINK somTP_AWDEntityDefaults_somDefaultInit(AWDEntityDefaults *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDEntityDefaults_somDefaultInit *somTD_AWDEntityDefaults_somDefaultInit;
typedef void   SOMLINK somTP_AWDEntityDefaults_somDestruct(AWDEntityDefaults *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDEntityDefaults_somDestruct *somTD_AWDEntityDefaults_somDestruct;
typedef unsigned long   SOMLINK somTP_AWDEntityDefaults_somfCount(AWDEntityDefaults *somSelf, Environment *ev);
typedef somTP_AWDEntityDefaults_somfCount *somTD_AWDEntityDefaults_somfCount;
typedef void   SOMLINK somTP_AWDEntityDefaults_somfRemove(AWDEntityDefaults *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDEntityDefaults_somfRemove *somTD_AWDEntityDefaults_somfRemove;
typedef void   SOMLINK somTP_AWDEntityDefaults_somfRemoveAll(AWDEntityDefaults *somSelf, Environment *ev);
typedef somTP_AWDEntityDefaults_somfRemoveAll *somTD_AWDEntityDefaults_somfRemoveAll;
typedef somf_MLinkable*   SOMLINK somTP_AWDEntityDefaults_somfRemoveFirst(AWDEntityDefaults *somSelf, Environment *ev);
typedef somTP_AWDEntityDefaults_somfRemoveFirst *somTD_AWDEntityDefaults_somfRemoveFirst;
typedef somf_MLinkable*   SOMLINK somTP_AWDEntityDefaults_somfRemoveLast(AWDEntityDefaults *somSelf, Environment *ev);
typedef somTP_AWDEntityDefaults_somfRemoveLast *somTD_AWDEntityDefaults_somfRemoveLast;
typedef void   SOMLINK somTP_AWDEntityDefaults_somfAddBefore(AWDEntityDefaults *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_AWDEntityDefaults_somfAddBefore *somTD_AWDEntityDefaults_somfAddBefore;
typedef void   SOMLINK somTP_AWDEntityDefaults_somfAddAfter(AWDEntityDefaults *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_AWDEntityDefaults_somfAddAfter *somTD_AWDEntityDefaults_somfAddAfter;
typedef void   SOMLINK somTP_AWDEntityDefaults_somfAddFirst(AWDEntityDefaults *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_AWDEntityDefaults_somfAddFirst *somTD_AWDEntityDefaults_somfAddFirst;
typedef void   SOMLINK somTP_AWDEntityDefaults_somfAddLast(AWDEntityDefaults *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_AWDEntityDefaults_somfAddLast *somTD_AWDEntityDefaults_somfAddLast;
typedef somf_MLinkable*   SOMLINK somTP_AWDEntityDefaults_somfAfter(AWDEntityDefaults *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_AWDEntityDefaults_somfAfter *somTD_AWDEntityDefaults_somfAfter;
typedef somf_MLinkable*   SOMLINK somTP_AWDEntityDefaults_somfBefore(AWDEntityDefaults *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_AWDEntityDefaults_somfBefore *somTD_AWDEntityDefaults_somfBefore;
typedef somf_MLinkable*   SOMLINK somTP_AWDEntityDefaults_somfFirst(AWDEntityDefaults *somSelf, Environment *ev);
typedef somTP_AWDEntityDefaults_somfFirst *somTD_AWDEntityDefaults_somfFirst;
typedef somf_MLinkable*   SOMLINK somTP_AWDEntityDefaults_somfLast(AWDEntityDefaults *somSelf, Environment *ev);
typedef somTP_AWDEntityDefaults_somfLast *somTD_AWDEntityDefaults_somfLast;
typedef void   SOMLINK somTP_AWDEntityDefaults_somInit(AWDEntityDefaults *somSelf);
typedef somTP_AWDEntityDefaults_somInit *somTD_AWDEntityDefaults_somInit;
typedef void   SOMLINK somTP_AWDEntityDefaults_somUninit(AWDEntityDefaults *somSelf);
typedef somTP_AWDEntityDefaults_somUninit *somTD_AWDEntityDefaults_somUninit;
typedef void   SOMLINK somTP_AWDEntityDefaults_somDefaultCopyInit(AWDEntityDefaults *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityDefaults_somDefaultCopyInit *somTD_AWDEntityDefaults_somDefaultCopyInit;
typedef AWDEntityDefaults*   SOMLINK somTP_AWDEntityDefaults_somDefaultAssign(AWDEntityDefaults *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityDefaults_somDefaultAssign *somTD_AWDEntityDefaults_somDefaultAssign;
typedef void   SOMLINK somTP_AWDEntityDefaults_somDefaultConstCopyInit(AWDEntityDefaults *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityDefaults_somDefaultConstCopyInit *somTD_AWDEntityDefaults_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDEntityDefaults_somDefaultVCopyInit(AWDEntityDefaults *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityDefaults_somDefaultVCopyInit *somTD_AWDEntityDefaults_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDEntityDefaults_somDefaultConstVCopyInit(AWDEntityDefaults *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityDefaults_somDefaultConstVCopyInit *somTD_AWDEntityDefaults_somDefaultConstVCopyInit;
typedef AWDEntityDefaults*   SOMLINK somTP_AWDEntityDefaults_somDefaultConstAssign(AWDEntityDefaults *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityDefaults_somDefaultConstAssign *somTD_AWDEntityDefaults_somDefaultConstAssign;
typedef AWDEntityDefaults*   SOMLINK somTP_AWDEntityDefaults_somDefaultVAssign(AWDEntityDefaults *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityDefaults_somDefaultVAssign *somTD_AWDEntityDefaults_somDefaultVAssign;
typedef AWDEntityDefaults*   SOMLINK somTP_AWDEntityDefaults_somDefaultConstVAssign(AWDEntityDefaults *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityDefaults_somDefaultConstVAssign *somTD_AWDEntityDefaults_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDEntityDefaults_somFree(AWDEntityDefaults *somSelf);
typedef somTP_AWDEntityDefaults_somFree *somTD_AWDEntityDefaults_somFree;
typedef SOMClass*   SOMLINK somTP_AWDEntityDefaults_somGetClass(AWDEntityDefaults *somSelf);
typedef somTP_AWDEntityDefaults_somGetClass *somTD_AWDEntityDefaults_somGetClass;
typedef string   SOMLINK somTP_AWDEntityDefaults_somGetClassName(AWDEntityDefaults *somSelf);
typedef somTP_AWDEntityDefaults_somGetClassName *somTD_AWDEntityDefaults_somGetClassName;
typedef long   SOMLINK somTP_AWDEntityDefaults_somGetSize(AWDEntityDefaults *somSelf);
typedef somTP_AWDEntityDefaults_somGetSize *somTD_AWDEntityDefaults_somGetSize;
typedef boolean   SOMLINK somTP_AWDEntityDefaults_somIsA(AWDEntityDefaults *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDEntityDefaults_somIsA *somTD_AWDEntityDefaults_somIsA;
typedef boolean   SOMLINK somTP_AWDEntityDefaults_somIsInstanceOf(AWDEntityDefaults *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDEntityDefaults_somIsInstanceOf *somTD_AWDEntityDefaults_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDEntityDefaults_somRespondsTo(AWDEntityDefaults *somSelf,
		somId mId);
typedef somTP_AWDEntityDefaults_somRespondsTo *somTD_AWDEntityDefaults_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDEntityDefaults_somDispatch(AWDEntityDefaults *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDEntityDefaults_somDispatch *somTD_AWDEntityDefaults_somDispatch;
typedef boolean   SOMLINK somTP_AWDEntityDefaults_somClassDispatch(AWDEntityDefaults *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDEntityDefaults_somClassDispatch *somTD_AWDEntityDefaults_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDEntityDefaults_somCastObj(AWDEntityDefaults *somSelf,
		SOMClass* cls);
typedef somTP_AWDEntityDefaults_somCastObj *somTD_AWDEntityDefaults_somCastObj;
typedef boolean   SOMLINK somTP_AWDEntityDefaults_somResetObj(AWDEntityDefaults *somSelf);
typedef somTP_AWDEntityDefaults_somResetObj *somTD_AWDEntityDefaults_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDEntityDefaults_somPrintSelf(AWDEntityDefaults *somSelf);
typedef somTP_AWDEntityDefaults_somPrintSelf *somTD_AWDEntityDefaults_somPrintSelf;
typedef void   SOMLINK somTP_AWDEntityDefaults_somDumpSelf(AWDEntityDefaults *somSelf,
		long level);
typedef somTP_AWDEntityDefaults_somDumpSelf *somTD_AWDEntityDefaults_somDumpSelf;
typedef void   SOMLINK somTP_AWDEntityDefaults_somDumpSelfInt(AWDEntityDefaults *somSelf,
		long level);
typedef somTP_AWDEntityDefaults_somDumpSelfInt *somTD_AWDEntityDefaults_somDumpSelfInt;
}

#endif /* AWDEntityDefaults_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDEntityDefaults
 */
class AWDEntityDefaults : public SOMList
{
public:

// AWDEntityDefaults::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDEntityDefaults) AWDEntityDefaultsNewClass(AWDEntityDefaults_MajorVersion,AWDEntityDefaults_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDEntityDefaults,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDEntityDefaults));
}

// AWDEntityDefaults::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDEntityDefaults()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDEntityDefaultsCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDEntityDefaults(AWDEntityDefaults* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDEntityDefaultsCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDEntityDefaults(const AWDEntityDefaults* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDEntityDefaultsCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: count */
unsigned long   count(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityDefaults,AWDEntityDefaults,count)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: deleteAll */
boolean   deleteAll(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMList,deleteAll)
	(this, ev);
}


/* method: forAll */
boolean   forAll(Environment *ev,
		void* pfn,
		void* pData,
		somf_MLinkable** pLastObject)
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMList,forAll)
	(this, ev,pfn,pData,pLastObject);
}


/* method: visitAll */
boolean   visitAll(Environment *ev,
		AWDVisitor* visitor)
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMList,visitAll)
	(this, ev,visitor);
}


/* method: invariantOK */
boolean   invariantOK(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMList,invariantOK)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfCount */
unsigned long   somfCount(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityDefaults,somf_TPrimitiveLinkedList,somfCount)
	(this, ev);
}


/* method: somfRemove */
void   somfRemove(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDEntityDefaults,somf_TPrimitiveLinkedList,somfRemove)
	(this, ev,aLink);
}


/* method: somfRemoveAll */
void   somfRemoveAll(Environment *ev)
{
   SOM_ResolveD(this,AWDEntityDefaults,somf_TPrimitiveLinkedList,somfRemoveAll)
	(this, ev);
}


/* method: somfRemoveFirst */
somf_MLinkable*   somfRemoveFirst(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityDefaults,somf_TPrimitiveLinkedList,somfRemoveFirst)
	(this, ev);
}


/* method: somfRemoveLast */
somf_MLinkable*   somfRemoveLast(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityDefaults,somf_TPrimitiveLinkedList,somfRemoveLast)
	(this, ev);
}


/* method: somfAddBefore */
void   somfAddBefore(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,AWDEntityDefaults,somf_TPrimitiveLinkedList,somfAddBefore)
	(this, ev,existing,obj);
}


/* method: somfAddAfter */
void   somfAddAfter(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,AWDEntityDefaults,somf_TPrimitiveLinkedList,somfAddAfter)
	(this, ev,existing,obj);
}


/* method: somfAddFirst */
void   somfAddFirst(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,AWDEntityDefaults,somf_TPrimitiveLinkedList,somfAddFirst)
	(this, ev,obj);
}


/* method: somfAddLast */
void   somfAddLast(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,AWDEntityDefaults,somf_TPrimitiveLinkedList,somfAddLast)
	(this, ev,obj);
}


/* method: somfAfter */
somf_MLinkable*   somfAfter(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,AWDEntityDefaults,somf_TPrimitiveLinkedList,somfAfter)
	(this, ev,existingobj);
}


/* method: somfBefore */
somf_MLinkable*   somfBefore(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,AWDEntityDefaults,somf_TPrimitiveLinkedList,somfBefore)
	(this, ev,existingobj);
}


/* method: somfFirst */
somf_MLinkable*   somfFirst(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityDefaults,somf_TPrimitiveLinkedList,somfFirst)
	(this, ev);
}


/* method: somfLast */
somf_MLinkable*   somfLast(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityDefaults,somf_TPrimitiveLinkedList,somfLast)
	(this, ev);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somUninit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDEntityDefaults*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDEntityDefaults*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDEntityDefaults*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDEntityDefaults*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDEntityDefaults_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDEntityDefaults_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDEntityDefaults,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDEntityDefaults */



#endif       /* SOM_AWDEntityDefaults_xh */

#ifndef SOM_AWDEntityKey_xh
#define SOM_AWDEntityKey_xh

class AWDEntityKey;

#define AWDEntityKey_MajorVersion 2
#define AWDEntityKey_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <somobj.xh>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_MLinkable_xh
#include <mlink.xh>
#endif

#ifndef AWDEntityKey_API
#define AWDEntityKey_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDEntityKey Class */
SOMEXTERN
#if (defined(SOM_Module_entity_Source) || defined(AWDEntityKey_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDEntityKey))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDEntityKeyNewClass(
		integer4,
		integer4 );

/* The API to the AWDEntityKey class object, and the methods it introduces. */
SOMEXTERN struct AWDEntityKeyClassDataStructure {
	SOMClass *classObject;
	somMToken count;
	somMToken isCaseKey;
	somMToken isFolderKey;
	somMToken isTransactionKey;
	somMToken isSourceKey;
	somMToken name;
	somMToken first;
	somMToken next;
	somMToken previous;
	somMToken last;
	somMToken item;
	somMToken withName;
}
#if !(defined(SOM_Module_entity_Source) || defined(AWDEntityKey_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDEntityKey))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDEntityKeyClassData;
#define _AWDEntityKey AWDEntityKeyClassData.classObject

/* The API to parentMtabs for AWDEntityKey, and the instance data it introduces. */
SOMEXTERN struct AWDEntityKeyCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_entity_Source) || defined(AWDEntityKey_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDEntityKey))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDEntityKeyCClassData;

/*
 * -- Typedefs for AWDEntityKey Method Procedures
 */
extern "C" {
typedef unsigned short   SOMLINK somTP_AWDEntityKey_count(AWDEntityKey *somSelf, Environment *ev);
typedef somTP_AWDEntityKey_count *somTD_AWDEntityKey_count;
typedef boolean   SOMLINK somTP_AWDEntityKey_isCaseKey(AWDEntityKey *somSelf, Environment *ev);
typedef somTP_AWDEntityKey_isCaseKey *somTD_AWDEntityKey_isCaseKey;
typedef boolean   SOMLINK somTP_AWDEntityKey_isFolderKey(AWDEntityKey *somSelf, Environment *ev);
typedef somTP_AWDEntityKey_isFolderKey *somTD_AWDEntityKey_isFolderKey;
typedef boolean   SOMLINK somTP_AWDEntityKey_isTransactionKey(AWDEntityKey *somSelf, Environment *ev);
typedef somTP_AWDEntityKey_isTransactionKey *somTD_AWDEntityKey_isTransactionKey;
typedef boolean   SOMLINK somTP_AWDEntityKey_isSourceKey(AWDEntityKey *somSelf, Environment *ev);
typedef somTP_AWDEntityKey_isSourceKey *somTD_AWDEntityKey_isSourceKey;
typedef char*   SOMLINK somTP_AWDEntityKey_name(AWDEntityKey *somSelf, Environment *ev);
typedef somTP_AWDEntityKey_name *somTD_AWDEntityKey_name;
typedef AWDEntity*   SOMLINK somTP_AWDEntityKey_first(AWDEntityKey *somSelf, Environment *ev);
typedef somTP_AWDEntityKey_first *somTD_AWDEntityKey_first;
typedef AWDEntity*   SOMLINK somTP_AWDEntityKey_next(AWDEntityKey *somSelf, Environment *ev);
typedef somTP_AWDEntityKey_next *somTD_AWDEntityKey_next;
typedef AWDEntity*   SOMLINK somTP_AWDEntityKey_last(AWDEntityKey *somSelf, Environment *ev);
typedef somTP_AWDEntityKey_last *somTD_AWDEntityKey_last;
typedef AWDEntity*   SOMLINK somTP_AWDEntityKey_previous(AWDEntityKey *somSelf, Environment *ev);
typedef somTP_AWDEntityKey_previous *somTD_AWDEntityKey_previous;
typedef AWDEntity*   SOMLINK somTP_AWDEntityKey_item(AWDEntityKey *somSelf, Environment *ev,
		unsigned short usIndex);
typedef somTP_AWDEntityKey_item *somTD_AWDEntityKey_item;
typedef void   SOMLINK somTP_AWDEntityKey_withName(AWDEntityKey *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		char* pszName);
typedef somTP_AWDEntityKey_withName *somTD_AWDEntityKey_withName;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef somf_MLinkable*   SOMLINK somTP_AWDEntityKey_somfMLinkableInit(AWDEntityKey *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_AWDEntityKey_somfMLinkableInit *somTD_AWDEntityKey_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_AWDEntityKey_somfGetNext(AWDEntityKey *somSelf, Environment *ev);
typedef somTP_AWDEntityKey_somfGetNext *somTD_AWDEntityKey_somfGetNext;
typedef void   SOMLINK somTP_AWDEntityKey_somfSetNext(AWDEntityKey *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDEntityKey_somfSetNext *somTD_AWDEntityKey_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_AWDEntityKey_somfGetPrevious(AWDEntityKey *somSelf, Environment *ev);
typedef somTP_AWDEntityKey_somfGetPrevious *somTD_AWDEntityKey_somfGetPrevious;
typedef void   SOMLINK somTP_AWDEntityKey_somfSetPrevious(AWDEntityKey *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDEntityKey_somfSetPrevious *somTD_AWDEntityKey_somfSetPrevious;
typedef void   SOMLINK somTP_AWDEntityKey_somInit(AWDEntityKey *somSelf);
typedef somTP_AWDEntityKey_somInit *somTD_AWDEntityKey_somInit;
typedef void   SOMLINK somTP_AWDEntityKey_somDefaultInit(AWDEntityKey *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDEntityKey_somDefaultInit *somTD_AWDEntityKey_somDefaultInit;
typedef void   SOMLINK somTP_AWDEntityKey_somDestruct(AWDEntityKey *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDEntityKey_somDestruct *somTD_AWDEntityKey_somDestruct;
typedef void   SOMLINK somTP_AWDEntityKey_somDefaultCopyInit(AWDEntityKey *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKey_somDefaultCopyInit *somTD_AWDEntityKey_somDefaultCopyInit;
typedef AWDEntityKey*   SOMLINK somTP_AWDEntityKey_somDefaultAssign(AWDEntityKey *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKey_somDefaultAssign *somTD_AWDEntityKey_somDefaultAssign;
typedef void   SOMLINK somTP_AWDEntityKey_somDefaultConstCopyInit(AWDEntityKey *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKey_somDefaultConstCopyInit *somTD_AWDEntityKey_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDEntityKey_somDefaultVCopyInit(AWDEntityKey *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKey_somDefaultVCopyInit *somTD_AWDEntityKey_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDEntityKey_somDefaultConstVCopyInit(AWDEntityKey *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKey_somDefaultConstVCopyInit *somTD_AWDEntityKey_somDefaultConstVCopyInit;
typedef AWDEntityKey*   SOMLINK somTP_AWDEntityKey_somDefaultConstAssign(AWDEntityKey *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKey_somDefaultConstAssign *somTD_AWDEntityKey_somDefaultConstAssign;
typedef AWDEntityKey*   SOMLINK somTP_AWDEntityKey_somDefaultVAssign(AWDEntityKey *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKey_somDefaultVAssign *somTD_AWDEntityKey_somDefaultVAssign;
typedef AWDEntityKey*   SOMLINK somTP_AWDEntityKey_somDefaultConstVAssign(AWDEntityKey *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKey_somDefaultConstVAssign *somTD_AWDEntityKey_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDEntityKey_somFree(AWDEntityKey *somSelf);
typedef somTP_AWDEntityKey_somFree *somTD_AWDEntityKey_somFree;
typedef void   SOMLINK somTP_AWDEntityKey_somUninit(AWDEntityKey *somSelf);
typedef somTP_AWDEntityKey_somUninit *somTD_AWDEntityKey_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDEntityKey_somGetClass(AWDEntityKey *somSelf);
typedef somTP_AWDEntityKey_somGetClass *somTD_AWDEntityKey_somGetClass;
typedef string   SOMLINK somTP_AWDEntityKey_somGetClassName(AWDEntityKey *somSelf);
typedef somTP_AWDEntityKey_somGetClassName *somTD_AWDEntityKey_somGetClassName;
typedef long   SOMLINK somTP_AWDEntityKey_somGetSize(AWDEntityKey *somSelf);
typedef somTP_AWDEntityKey_somGetSize *somTD_AWDEntityKey_somGetSize;
typedef boolean   SOMLINK somTP_AWDEntityKey_somIsA(AWDEntityKey *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDEntityKey_somIsA *somTD_AWDEntityKey_somIsA;
typedef boolean   SOMLINK somTP_AWDEntityKey_somIsInstanceOf(AWDEntityKey *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDEntityKey_somIsInstanceOf *somTD_AWDEntityKey_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDEntityKey_somRespondsTo(AWDEntityKey *somSelf,
		somId mId);
typedef somTP_AWDEntityKey_somRespondsTo *somTD_AWDEntityKey_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDEntityKey_somDispatch(AWDEntityKey *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDEntityKey_somDispatch *somTD_AWDEntityKey_somDispatch;
typedef boolean   SOMLINK somTP_AWDEntityKey_somClassDispatch(AWDEntityKey *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDEntityKey_somClassDispatch *somTD_AWDEntityKey_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDEntityKey_somCastObj(AWDEntityKey *somSelf,
		SOMClass* cls);
typedef somTP_AWDEntityKey_somCastObj *somTD_AWDEntityKey_somCastObj;
typedef boolean   SOMLINK somTP_AWDEntityKey_somResetObj(AWDEntityKey *somSelf);
typedef somTP_AWDEntityKey_somResetObj *somTD_AWDEntityKey_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDEntityKey_somPrintSelf(AWDEntityKey *somSelf);
typedef somTP_AWDEntityKey_somPrintSelf *somTD_AWDEntityKey_somPrintSelf;
typedef void   SOMLINK somTP_AWDEntityKey_somDumpSelf(AWDEntityKey *somSelf,
		long level);
typedef somTP_AWDEntityKey_somDumpSelf *somTD_AWDEntityKey_somDumpSelf;
typedef void   SOMLINK somTP_AWDEntityKey_somDumpSelfInt(AWDEntityKey *somSelf,
		long level);
typedef somTP_AWDEntityKey_somDumpSelfInt *somTD_AWDEntityKey_somDumpSelfInt;
}

#endif /* AWDEntityKey_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDEntityKey
 */
class AWDEntityKey : public somf_MLinkable
{
public:

// AWDEntityKey::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDEntityKey) AWDEntityKeyNewClass(AWDEntityKey_MajorVersion,AWDEntityKey_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDEntityKey,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDEntityKey));
}

// AWDEntityKey::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDEntityKey()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDEntityKeyCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDEntityKey(AWDEntityKey* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDEntityKeyCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDEntityKey(const AWDEntityKey* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDEntityKeyCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDEntityKey(Environment *ev,char* pszName) 
{
   withName(ev,0,pszName);
}


/* method: count */
unsigned short   count(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKey,AWDEntityKey,count)
	(this, ev);
}


/* method: isCaseKey */
boolean   isCaseKey(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKey,AWDEntityKey,isCaseKey)
	(this, ev);
}


/* method: isFolderKey */
boolean   isFolderKey(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKey,AWDEntityKey,isFolderKey)
	(this, ev);
}


/* method: isTransactionKey */
boolean   isTransactionKey(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKey,AWDEntityKey,isTransactionKey)
	(this, ev);
}


/* method: isSourceKey */
boolean   isSourceKey(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKey,AWDEntityKey,isSourceKey)
	(this, ev);
}


/* method: name */
char*   name(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKey,AWDEntityKey,name)
	(this, ev);
}


/* method: first */
AWDEntity*   first(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKey,AWDEntityKey,first)
	(this, ev);
}


/* method: next */
AWDEntity*   next(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKey,AWDEntityKey,next)
	(this, ev);
}


/* method: last */
AWDEntity*   last(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKey,AWDEntityKey,last)
	(this, ev);
}


/* method: previous */
AWDEntity*   previous(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKey,AWDEntityKey,previous)
	(this, ev);
}


/* method: item */
AWDEntity*   item(Environment *ev,
		unsigned short usIndex)
{
   return SOM_ResolveD(this,AWDEntityKey,AWDEntityKey,item)
	(this, ev,usIndex);
}


/* initializer method: withName */
void   withName(Environment *ev,
		somInitCtrl* ctrl,
		char* pszName)
{
   SOM_ResolveD(this,AWDEntityKey,AWDEntityKey,withName)
	(this, ev,ctrl,pszName);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,AWDEntityKey,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKey,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDEntityKey,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKey,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDEntityKey,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDEntityKey,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDEntityKey,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDEntityKey,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntityKey,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDEntityKey*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntityKey,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntityKey,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntityKey,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntityKey,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDEntityKey*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntityKey,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDEntityKey*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntityKey,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDEntityKey*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntityKey,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDEntityKey,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDEntityKey,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDEntityKey,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDEntityKey,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDEntityKey,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDEntityKey,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDEntityKey,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDEntityKey,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDEntityKey_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDEntityKey,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDEntityKey,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDEntityKey_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDEntityKey,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDEntityKey,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDEntityKey,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDEntityKey,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDEntityKey,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDEntityKey,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDEntityKey,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDEntityKey */



#endif       /* SOM_AWDEntityKey_xh */

#ifndef SOM_AWDEntityKeyList_xh
#define SOM_AWDEntityKeyList_xh

class AWDEntityKeyList;

#define AWDEntityKeyList_MajorVersion 2
#define AWDEntityKeyList_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef AWDEntityKeyList_API
#define AWDEntityKeyList_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDEntityKeyList Class */
SOMEXTERN
#if (defined(SOM_Module_entity_Source) || defined(AWDEntityKeyList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDEntityKeyList))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDEntityKeyListNewClass(
		integer4,
		integer4 );

/* The API to the AWDEntityKeyList class object, and the methods it introduces. */
SOMEXTERN struct AWDEntityKeyListClassDataStructure {
	SOMClass *classObject;
	somMToken first;
	somMToken next;
	somMToken last;
	somMToken previous;
	somMToken get;
}
#if !(defined(SOM_Module_entity_Source) || defined(AWDEntityKeyList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDEntityKeyList))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDEntityKeyListClassData;
#define _AWDEntityKeyList AWDEntityKeyListClassData.classObject

/* The API to parentMtabs for AWDEntityKeyList, and the instance data it introduces. */
SOMEXTERN struct AWDEntityKeyListCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_entity_Source) || defined(AWDEntityKeyList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDEntityKeyList))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDEntityKeyListCClassData;

/*
 * -- Typedefs for AWDEntityKeyList Method Procedures
 */
extern "C" {
typedef AWDEntityKey*   SOMLINK somTP_AWDEntityKeyList_first(AWDEntityKeyList *somSelf, Environment *ev);
typedef somTP_AWDEntityKeyList_first *somTD_AWDEntityKeyList_first;
typedef AWDEntityKey*   SOMLINK somTP_AWDEntityKeyList_next(AWDEntityKeyList *somSelf, Environment *ev);
typedef somTP_AWDEntityKeyList_next *somTD_AWDEntityKeyList_next;
typedef AWDEntityKey*   SOMLINK somTP_AWDEntityKeyList_last(AWDEntityKeyList *somSelf, Environment *ev);
typedef somTP_AWDEntityKeyList_last *somTD_AWDEntityKeyList_last;
typedef AWDEntityKey*   SOMLINK somTP_AWDEntityKeyList_previous(AWDEntityKeyList *somSelf, Environment *ev);
typedef somTP_AWDEntityKeyList_previous *somTD_AWDEntityKeyList_previous;
typedef AWDEntityKey*   SOMLINK somTP_AWDEntityKeyList_get(AWDEntityKeyList *somSelf, Environment *ev,
		char* pszName);
typedef somTP_AWDEntityKeyList_get *somTD_AWDEntityKeyList_get;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_AWDEntityKeyList_somDefaultInit(AWDEntityKeyList *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDEntityKeyList_somDefaultInit *somTD_AWDEntityKeyList_somDefaultInit;
typedef void   SOMLINK somTP_AWDEntityKeyList_somDestruct(AWDEntityKeyList *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDEntityKeyList_somDestruct *somTD_AWDEntityKeyList_somDestruct;
typedef void   SOMLINK somTP_AWDEntityKeyList_somDefaultCopyInit(AWDEntityKeyList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKeyList_somDefaultCopyInit *somTD_AWDEntityKeyList_somDefaultCopyInit;
typedef AWDEntityKeyList*   SOMLINK somTP_AWDEntityKeyList_somDefaultAssign(AWDEntityKeyList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKeyList_somDefaultAssign *somTD_AWDEntityKeyList_somDefaultAssign;
typedef void   SOMLINK somTP_AWDEntityKeyList_somDefaultConstCopyInit(AWDEntityKeyList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKeyList_somDefaultConstCopyInit *somTD_AWDEntityKeyList_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDEntityKeyList_somDefaultVCopyInit(AWDEntityKeyList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKeyList_somDefaultVCopyInit *somTD_AWDEntityKeyList_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDEntityKeyList_somDefaultConstVCopyInit(AWDEntityKeyList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKeyList_somDefaultConstVCopyInit *somTD_AWDEntityKeyList_somDefaultConstVCopyInit;
typedef AWDEntityKeyList*   SOMLINK somTP_AWDEntityKeyList_somDefaultConstAssign(AWDEntityKeyList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKeyList_somDefaultConstAssign *somTD_AWDEntityKeyList_somDefaultConstAssign;
typedef AWDEntityKeyList*   SOMLINK somTP_AWDEntityKeyList_somDefaultVAssign(AWDEntityKeyList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKeyList_somDefaultVAssign *somTD_AWDEntityKeyList_somDefaultVAssign;
typedef AWDEntityKeyList*   SOMLINK somTP_AWDEntityKeyList_somDefaultConstVAssign(AWDEntityKeyList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntityKeyList_somDefaultConstVAssign *somTD_AWDEntityKeyList_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDEntityKeyList_somInit(AWDEntityKeyList *somSelf);
typedef somTP_AWDEntityKeyList_somInit *somTD_AWDEntityKeyList_somInit;
typedef void   SOMLINK somTP_AWDEntityKeyList_somFree(AWDEntityKeyList *somSelf);
typedef somTP_AWDEntityKeyList_somFree *somTD_AWDEntityKeyList_somFree;
typedef void   SOMLINK somTP_AWDEntityKeyList_somUninit(AWDEntityKeyList *somSelf);
typedef somTP_AWDEntityKeyList_somUninit *somTD_AWDEntityKeyList_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDEntityKeyList_somGetClass(AWDEntityKeyList *somSelf);
typedef somTP_AWDEntityKeyList_somGetClass *somTD_AWDEntityKeyList_somGetClass;
typedef string   SOMLINK somTP_AWDEntityKeyList_somGetClassName(AWDEntityKeyList *somSelf);
typedef somTP_AWDEntityKeyList_somGetClassName *somTD_AWDEntityKeyList_somGetClassName;
typedef long   SOMLINK somTP_AWDEntityKeyList_somGetSize(AWDEntityKeyList *somSelf);
typedef somTP_AWDEntityKeyList_somGetSize *somTD_AWDEntityKeyList_somGetSize;
typedef boolean   SOMLINK somTP_AWDEntityKeyList_somIsA(AWDEntityKeyList *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDEntityKeyList_somIsA *somTD_AWDEntityKeyList_somIsA;
typedef boolean   SOMLINK somTP_AWDEntityKeyList_somIsInstanceOf(AWDEntityKeyList *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDEntityKeyList_somIsInstanceOf *somTD_AWDEntityKeyList_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDEntityKeyList_somRespondsTo(AWDEntityKeyList *somSelf,
		somId mId);
typedef somTP_AWDEntityKeyList_somRespondsTo *somTD_AWDEntityKeyList_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDEntityKeyList_somDispatch(AWDEntityKeyList *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDEntityKeyList_somDispatch *somTD_AWDEntityKeyList_somDispatch;
typedef boolean   SOMLINK somTP_AWDEntityKeyList_somClassDispatch(AWDEntityKeyList *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDEntityKeyList_somClassDispatch *somTD_AWDEntityKeyList_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDEntityKeyList_somCastObj(AWDEntityKeyList *somSelf,
		SOMClass* cls);
typedef somTP_AWDEntityKeyList_somCastObj *somTD_AWDEntityKeyList_somCastObj;
typedef boolean   SOMLINK somTP_AWDEntityKeyList_somResetObj(AWDEntityKeyList *somSelf);
typedef somTP_AWDEntityKeyList_somResetObj *somTD_AWDEntityKeyList_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDEntityKeyList_somPrintSelf(AWDEntityKeyList *somSelf);
typedef somTP_AWDEntityKeyList_somPrintSelf *somTD_AWDEntityKeyList_somPrintSelf;
typedef void   SOMLINK somTP_AWDEntityKeyList_somDumpSelf(AWDEntityKeyList *somSelf,
		long level);
typedef somTP_AWDEntityKeyList_somDumpSelf *somTD_AWDEntityKeyList_somDumpSelf;
typedef void   SOMLINK somTP_AWDEntityKeyList_somDumpSelfInt(AWDEntityKeyList *somSelf,
		long level);
typedef somTP_AWDEntityKeyList_somDumpSelfInt *somTD_AWDEntityKeyList_somDumpSelfInt;
}

#endif /* AWDEntityKeyList_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDEntityKeyList
 */
class AWDEntityKeyList : public SOMObject
{
public:

// AWDEntityKeyList::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDEntityKeyList) AWDEntityKeyListNewClass(AWDEntityKeyList_MajorVersion,AWDEntityKeyList_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDEntityKeyList,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDEntityKeyList));
}

// AWDEntityKeyList::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDEntityKeyList()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDEntityKeyListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDEntityKeyList(AWDEntityKeyList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDEntityKeyListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDEntityKeyList(const AWDEntityKeyList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDEntityKeyListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: first */
AWDEntityKey*   first(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKeyList,AWDEntityKeyList,first)
	(this, ev);
}


/* method: next */
AWDEntityKey*   next(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKeyList,AWDEntityKeyList,next)
	(this, ev);
}


/* method: last */
AWDEntityKey*   last(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKeyList,AWDEntityKeyList,last)
	(this, ev);
}


/* method: previous */
AWDEntityKey*   previous(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntityKeyList,AWDEntityKeyList,previous)
	(this, ev);
}


/* method: get */
AWDEntityKey*   get(Environment *ev,
		char* pszName)
{
   return SOM_ResolveD(this,AWDEntityKeyList,AWDEntityKeyList,get)
	(this, ev,pszName);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDEntityKeyList*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDEntityKeyList*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDEntityKeyList*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDEntityKeyList*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDEntityKeyList_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDEntityKeyList_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDEntityKeyList,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDEntityKeyList */



#endif       /* SOM_AWDEntityKeyList_xh */

#ifndef SOM_AWDEntity_xh
#define SOM_AWDEntity_xh

class AWDEntity;

#define AWDEntity_MajorVersion 2
#define AWDEntity_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <acbl0340.xh>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_ACBL0340Record_xh
#include <acbl0340.xh>
#endif

#ifndef AWDEntity_API
#define AWDEntity_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDEntity Class */
SOMEXTERN
#if (defined(SOM_Module_entity_Source) || defined(AWDEntity_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDEntity))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDEntityNewClass(
		integer4,
		integer4 );

/* The API to the AWDEntity class object, and the methods it introduces. */
SOMEXTERN struct AWDEntityClassDataStructure {
	SOMClass *classObject;
}
#if !(defined(SOM_Module_entity_Source) || defined(AWDEntity_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDEntity))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDEntityClassData;
#define _AWDEntity AWDEntityClassData.classObject

/* The API to parentMtabs for AWDEntity, and the instance data it introduces. */
SOMEXTERN struct AWDEntityCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_entity_Source) || defined(AWDEntity_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDEntity))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDEntityCClassData;

/*
 * -- Typedefs for AWDEntity Method Procedures
 */
extern "C" {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef char*   SOMLINK somTP_AWDEntity_key(AWDEntity *somSelf, Environment *ev);
typedef somTP_AWDEntity_key *somTD_AWDEntity_key;
typedef char*   SOMLINK somTP_AWDEntity_name(AWDEntity *somSelf, Environment *ev);
typedef somTP_AWDEntity_name *somTD_AWDEntity_name;
typedef void   SOMLINK somTP_AWDEntity_setInfo(AWDEntity *somSelf, Environment *ev,
		ACBL0340Record_ACBL0340BUFFER* pRecord);
typedef somTP_AWDEntity_setInfo *somTD_AWDEntity_setInfo;
typedef char*   SOMLINK somTP_AWDEntity_value(AWDEntity *somSelf, Environment *ev);
typedef somTP_AWDEntity_value *somTD_AWDEntity_value;
typedef void   SOMLINK somTP_AWDEntity_somDefaultInit(AWDEntity *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDEntity_somDefaultInit *somTD_AWDEntity_somDefaultInit;
typedef void   SOMLINK somTP_AWDEntity_somDestruct(AWDEntity *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDEntity_somDestruct *somTD_AWDEntity_somDestruct;
typedef void*   SOMLINK somTP_AWDEntity_buffer(AWDEntity *somSelf, Environment *ev);
typedef somTP_AWDEntity_buffer *somTD_AWDEntity_buffer;
typedef void   SOMLINK somTP_AWDEntity_setBuffer(AWDEntity *somSelf, Environment *ev,
		void* pv);
typedef somTP_AWDEntity_setBuffer *somTD_AWDEntity_setBuffer;
typedef somf_MLinkable*   SOMLINK somTP_AWDEntity_somfMLinkableInit(AWDEntity *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_AWDEntity_somfMLinkableInit *somTD_AWDEntity_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_AWDEntity_somfGetNext(AWDEntity *somSelf, Environment *ev);
typedef somTP_AWDEntity_somfGetNext *somTD_AWDEntity_somfGetNext;
typedef void   SOMLINK somTP_AWDEntity_somfSetNext(AWDEntity *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDEntity_somfSetNext *somTD_AWDEntity_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_AWDEntity_somfGetPrevious(AWDEntity *somSelf, Environment *ev);
typedef somTP_AWDEntity_somfGetPrevious *somTD_AWDEntity_somfGetPrevious;
typedef void   SOMLINK somTP_AWDEntity_somfSetPrevious(AWDEntity *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDEntity_somfSetPrevious *somTD_AWDEntity_somfSetPrevious;
typedef void   SOMLINK somTP_AWDEntity_somInit(AWDEntity *somSelf);
typedef somTP_AWDEntity_somInit *somTD_AWDEntity_somInit;
typedef void   SOMLINK somTP_AWDEntity_somDefaultCopyInit(AWDEntity *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntity_somDefaultCopyInit *somTD_AWDEntity_somDefaultCopyInit;
typedef AWDEntity*   SOMLINK somTP_AWDEntity_somDefaultAssign(AWDEntity *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntity_somDefaultAssign *somTD_AWDEntity_somDefaultAssign;
typedef void   SOMLINK somTP_AWDEntity_somDefaultConstCopyInit(AWDEntity *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntity_somDefaultConstCopyInit *somTD_AWDEntity_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDEntity_somDefaultVCopyInit(AWDEntity *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntity_somDefaultVCopyInit *somTD_AWDEntity_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDEntity_somDefaultConstVCopyInit(AWDEntity *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntity_somDefaultConstVCopyInit *somTD_AWDEntity_somDefaultConstVCopyInit;
typedef AWDEntity*   SOMLINK somTP_AWDEntity_somDefaultConstAssign(AWDEntity *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntity_somDefaultConstAssign *somTD_AWDEntity_somDefaultConstAssign;
typedef AWDEntity*   SOMLINK somTP_AWDEntity_somDefaultVAssign(AWDEntity *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntity_somDefaultVAssign *somTD_AWDEntity_somDefaultVAssign;
typedef AWDEntity*   SOMLINK somTP_AWDEntity_somDefaultConstVAssign(AWDEntity *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDEntity_somDefaultConstVAssign *somTD_AWDEntity_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDEntity_somFree(AWDEntity *somSelf);
typedef somTP_AWDEntity_somFree *somTD_AWDEntity_somFree;
typedef void   SOMLINK somTP_AWDEntity_somUninit(AWDEntity *somSelf);
typedef somTP_AWDEntity_somUninit *somTD_AWDEntity_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDEntity_somGetClass(AWDEntity *somSelf);
typedef somTP_AWDEntity_somGetClass *somTD_AWDEntity_somGetClass;
typedef string   SOMLINK somTP_AWDEntity_somGetClassName(AWDEntity *somSelf);
typedef somTP_AWDEntity_somGetClassName *somTD_AWDEntity_somGetClassName;
typedef long   SOMLINK somTP_AWDEntity_somGetSize(AWDEntity *somSelf);
typedef somTP_AWDEntity_somGetSize *somTD_AWDEntity_somGetSize;
typedef boolean   SOMLINK somTP_AWDEntity_somIsA(AWDEntity *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDEntity_somIsA *somTD_AWDEntity_somIsA;
typedef boolean   SOMLINK somTP_AWDEntity_somIsInstanceOf(AWDEntity *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDEntity_somIsInstanceOf *somTD_AWDEntity_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDEntity_somRespondsTo(AWDEntity *somSelf,
		somId mId);
typedef somTP_AWDEntity_somRespondsTo *somTD_AWDEntity_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDEntity_somDispatch(AWDEntity *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDEntity_somDispatch *somTD_AWDEntity_somDispatch;
typedef boolean   SOMLINK somTP_AWDEntity_somClassDispatch(AWDEntity *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDEntity_somClassDispatch *somTD_AWDEntity_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDEntity_somCastObj(AWDEntity *somSelf,
		SOMClass* cls);
typedef somTP_AWDEntity_somCastObj *somTD_AWDEntity_somCastObj;
typedef boolean   SOMLINK somTP_AWDEntity_somResetObj(AWDEntity *somSelf);
typedef somTP_AWDEntity_somResetObj *somTD_AWDEntity_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDEntity_somPrintSelf(AWDEntity *somSelf);
typedef somTP_AWDEntity_somPrintSelf *somTD_AWDEntity_somPrintSelf;
typedef void   SOMLINK somTP_AWDEntity_somDumpSelf(AWDEntity *somSelf,
		long level);
typedef somTP_AWDEntity_somDumpSelf *somTD_AWDEntity_somDumpSelf;
typedef void   SOMLINK somTP_AWDEntity_somDumpSelfInt(AWDEntity *somSelf,
		long level);
typedef somTP_AWDEntity_somDumpSelfInt *somTD_AWDEntity_somDumpSelfInt;
}

#endif /* AWDEntity_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDEntity
 */
class AWDEntity : public ACBL0340Record
{
public:

// AWDEntity::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDEntity) AWDEntityNewClass(AWDEntity_MajorVersion,AWDEntity_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDEntity,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDEntity));
}

// AWDEntity::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDEntity()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDEntityCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDEntity(AWDEntity* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDEntityCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDEntity(const AWDEntity* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDEntityCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: key */
char*   key(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntity,ACBL0340Record,key)
	(this, ev);
}


/* method: name */
char*   name(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntity,ACBL0340Record,name)
	(this, ev);
}


/* method: setInfo */
void   setInfo(Environment *ev,
		ACBL0340Record_ACBL0340BUFFER* pRecord)
{
   SOM_ResolveD(this,AWDEntity,ACBL0340Record,setInfo)
	(this, ev,pRecord);
}


/* method: value */
char*   value(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntity,ACBL0340Record,value)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDEntity,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDEntity,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: buffer */
void*   buffer(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntity,RECORD,buffer)
	(this, ev);
}


/* method: setBuffer */
void   setBuffer(Environment *ev,
		void* pv)
{
   SOM_ResolveD(this,AWDEntity,RECORD,setBuffer)
	(this, ev,pv);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,AWDEntity,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntity,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDEntity,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,AWDEntity,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDEntity,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDEntity,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntity,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDEntity*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntity,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntity,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntity,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDEntity,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDEntity*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntity,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDEntity*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntity,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDEntity*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDEntity,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDEntity,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDEntity,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDEntity,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDEntity,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDEntity,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDEntity,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDEntity,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDEntity,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDEntity_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDEntity,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDEntity,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDEntity_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDEntity,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDEntity,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDEntity,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDEntity,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDEntity,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDEntity,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDEntity,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDEntity */



#endif       /* SOM_AWDEntity_xh */
