
#ifndef SOM_AWDConnection_xh
#define SOM_AWDConnection_xh

class AWDConnection;

#define AWDConnection_MajorVersion 0
#define AWDConnection_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "view.xh"

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_MLinkable_xh
#include <mlink.xh>
#endif

#ifndef AWDConnection_API
#define AWDConnection_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class somf_MLinkable;
class AWDConnection;
class AWDException;
class ViewList;
class AWDMutexSem;

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDConnection Class */
SOMEXTERN
#if (defined(SOM_Module_connect_Source) || defined(AWDConnection_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDConnection))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDConnectionNewClass(
		integer4,
		integer4 );

/* The API to the AWDConnection class object, and the methods it introduces. */
SOMEXTERN struct AWDConnectionClassDataStructure {
	SOMClass *classObject;
	somMToken name;
	somMToken count;
	somMToken addPendingView;
	somMToken deletePendingView;
	somMToken call;
	somMToken check;
	somMToken recall;
	somMToken setHost;
	somMToken host;
	somMToken withName;
	somMToken close;
	somMToken setName;
}
#if !(defined(SOM_Module_connect_Source) || defined(AWDConnection_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDConnection))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDConnectionClassData;
#define _AWDConnection AWDConnectionClassData.classObject

/* The API to parentMtabs for AWDConnection, and the instance data it introduces. */
SOMEXTERN struct AWDConnectionCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_connect_Source) || defined(AWDConnection_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDConnection))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDConnectionCClassData;

/*
 * -- Typedefs for AWDConnection Method Procedures
 */
extern "C" {
typedef string   SOMLINK somTP_AWDConnection_name(AWDConnection *somSelf, Environment *ev);
typedef somTP_AWDConnection_name *somTD_AWDConnection_name;
typedef void   SOMLINK somTP_AWDConnection_setName(AWDConnection *somSelf, Environment *ev,
		string pszName);
typedef somTP_AWDConnection_setName *somTD_AWDConnection_setName;
typedef unsigned short   SOMLINK somTP_AWDConnection_count(AWDConnection *somSelf, Environment *ev);
typedef somTP_AWDConnection_count *somTD_AWDConnection_count;
typedef boolean   SOMLINK somTP_AWDConnection_addPendingView(AWDConnection *somSelf, Environment *ev,
		AWDView* viewobj);
typedef somTP_AWDConnection_addPendingView *somTD_AWDConnection_addPendingView;
typedef boolean   SOMLINK somTP_AWDConnection_deletePendingView(AWDConnection *somSelf, Environment *ev,
		AWDView* viewobj);
typedef somTP_AWDConnection_deletePendingView *somTD_AWDConnection_deletePendingView;
typedef void*   SOMLINK somTP_AWDConnection_call(AWDConnection *somSelf, Environment *ev,
		AWDView* viewobj);
typedef somTP_AWDConnection_call *somTD_AWDConnection_call;
typedef void*   SOMLINK somTP_AWDConnection_check(AWDConnection *somSelf, Environment *ev,
		void* pReceiveData);
typedef somTP_AWDConnection_check *somTD_AWDConnection_check;
typedef void   SOMLINK somTP_AWDConnection_withName(AWDConnection *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName);
typedef somTP_AWDConnection_withName *somTD_AWDConnection_withName;
typedef void*   SOMLINK somTP_AWDConnection_recall(AWDConnection *somSelf, Environment *ev,
		AWDView* viewobj);
typedef somTP_AWDConnection_recall *somTD_AWDConnection_recall;
typedef void   SOMLINK somTP_AWDConnection_setHost(AWDConnection *somSelf, Environment *ev,
		string pszHost);
typedef somTP_AWDConnection_setHost *somTD_AWDConnection_setHost;
typedef string   SOMLINK somTP_AWDConnection_host(AWDConnection *somSelf, Environment *ev);
typedef somTP_AWDConnection_host *somTD_AWDConnection_host;
typedef void   SOMLINK somTP_AWDConnection_close(AWDConnection *somSelf, Environment *ev);
typedef somTP_AWDConnection_close *somTD_AWDConnection_close;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef somf_MLinkable*   SOMLINK somTP_AWDConnection_somfMLinkableInit(AWDConnection *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_AWDConnection_somfMLinkableInit *somTD_AWDConnection_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_AWDConnection_somfGetNext(AWDConnection *somSelf, Environment *ev);
typedef somTP_AWDConnection_somfGetNext *somTD_AWDConnection_somfGetNext;
typedef void   SOMLINK somTP_AWDConnection_somfSetNext(AWDConnection *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDConnection_somfSetNext *somTD_AWDConnection_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_AWDConnection_somfGetPrevious(AWDConnection *somSelf, Environment *ev);
typedef somTP_AWDConnection_somfGetPrevious *somTD_AWDConnection_somfGetPrevious;
typedef void   SOMLINK somTP_AWDConnection_somfSetPrevious(AWDConnection *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDConnection_somfSetPrevious *somTD_AWDConnection_somfSetPrevious;
typedef void   SOMLINK somTP_AWDConnection_somInit(AWDConnection *somSelf);
typedef somTP_AWDConnection_somInit *somTD_AWDConnection_somInit;
typedef void   SOMLINK somTP_AWDConnection_somDefaultInit(AWDConnection *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDConnection_somDefaultInit *somTD_AWDConnection_somDefaultInit;
typedef void   SOMLINK somTP_AWDConnection_somDestruct(AWDConnection *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDConnection_somDestruct *somTD_AWDConnection_somDestruct;
typedef void   SOMLINK somTP_AWDConnection_somDefaultCopyInit(AWDConnection *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnection_somDefaultCopyInit *somTD_AWDConnection_somDefaultCopyInit;
typedef AWDConnection*   SOMLINK somTP_AWDConnection_somDefaultAssign(AWDConnection *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnection_somDefaultAssign *somTD_AWDConnection_somDefaultAssign;
typedef void   SOMLINK somTP_AWDConnection_somDefaultConstCopyInit(AWDConnection *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnection_somDefaultConstCopyInit *somTD_AWDConnection_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDConnection_somDefaultVCopyInit(AWDConnection *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnection_somDefaultVCopyInit *somTD_AWDConnection_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDConnection_somDefaultConstVCopyInit(AWDConnection *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnection_somDefaultConstVCopyInit *somTD_AWDConnection_somDefaultConstVCopyInit;
typedef AWDConnection*   SOMLINK somTP_AWDConnection_somDefaultConstAssign(AWDConnection *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnection_somDefaultConstAssign *somTD_AWDConnection_somDefaultConstAssign;
typedef AWDConnection*   SOMLINK somTP_AWDConnection_somDefaultVAssign(AWDConnection *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnection_somDefaultVAssign *somTD_AWDConnection_somDefaultVAssign;
typedef AWDConnection*   SOMLINK somTP_AWDConnection_somDefaultConstVAssign(AWDConnection *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnection_somDefaultConstVAssign *somTD_AWDConnection_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDConnection_somFree(AWDConnection *somSelf);
typedef somTP_AWDConnection_somFree *somTD_AWDConnection_somFree;
typedef void   SOMLINK somTP_AWDConnection_somUninit(AWDConnection *somSelf);
typedef somTP_AWDConnection_somUninit *somTD_AWDConnection_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDConnection_somGetClass(AWDConnection *somSelf);
typedef somTP_AWDConnection_somGetClass *somTD_AWDConnection_somGetClass;
typedef string   SOMLINK somTP_AWDConnection_somGetClassName(AWDConnection *somSelf);
typedef somTP_AWDConnection_somGetClassName *somTD_AWDConnection_somGetClassName;
typedef long   SOMLINK somTP_AWDConnection_somGetSize(AWDConnection *somSelf);
typedef somTP_AWDConnection_somGetSize *somTD_AWDConnection_somGetSize;
typedef boolean   SOMLINK somTP_AWDConnection_somIsA(AWDConnection *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDConnection_somIsA *somTD_AWDConnection_somIsA;
typedef boolean   SOMLINK somTP_AWDConnection_somIsInstanceOf(AWDConnection *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDConnection_somIsInstanceOf *somTD_AWDConnection_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDConnection_somRespondsTo(AWDConnection *somSelf,
		somId mId);
typedef somTP_AWDConnection_somRespondsTo *somTD_AWDConnection_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDConnection_somDispatch(AWDConnection *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDConnection_somDispatch *somTD_AWDConnection_somDispatch;
typedef boolean   SOMLINK somTP_AWDConnection_somClassDispatch(AWDConnection *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDConnection_somClassDispatch *somTD_AWDConnection_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDConnection_somCastObj(AWDConnection *somSelf,
		SOMClass* cls);
typedef somTP_AWDConnection_somCastObj *somTD_AWDConnection_somCastObj;
typedef boolean   SOMLINK somTP_AWDConnection_somResetObj(AWDConnection *somSelf);
typedef somTP_AWDConnection_somResetObj *somTD_AWDConnection_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDConnection_somPrintSelf(AWDConnection *somSelf);
typedef somTP_AWDConnection_somPrintSelf *somTD_AWDConnection_somPrintSelf;
typedef void   SOMLINK somTP_AWDConnection_somDumpSelf(AWDConnection *somSelf,
		long level);
typedef somTP_AWDConnection_somDumpSelf *somTD_AWDConnection_somDumpSelf;
typedef void   SOMLINK somTP_AWDConnection_somDumpSelfInt(AWDConnection *somSelf,
		long level);
typedef somTP_AWDConnection_somDumpSelfInt *somTD_AWDConnection_somDumpSelfInt;
}

#endif /* AWDConnection_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDConnection
 */
class AWDConnection : public somf_MLinkable
{
public:

// AWDConnection::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDConnection) AWDConnectionNewClass(AWDConnection_MajorVersion,AWDConnection_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDConnection,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDConnection));
}

// AWDConnection::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDConnection()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDConnectionCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDConnection(AWDConnection* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDConnectionCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDConnection(const AWDConnection* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDConnectionCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDConnection(Environment *ev,string aName) 
{
   withName(ev,0,aName);
}


/* method: name */
string   name(Environment *ev)
{
   return SOM_ResolveD(this,AWDConnection,AWDConnection,name)
	(this, ev);
}


/* method: setName */
void   setName(Environment *ev,
		string pszName)
{
   SOM_ResolveD(this,AWDConnection,AWDConnection,setName)
	(this, ev,pszName);
}


/* method: count */
unsigned short   count(Environment *ev)
{
   return SOM_ResolveD(this,AWDConnection,AWDConnection,count)
	(this, ev);
}


/* method: addPendingView */
boolean   addPendingView(Environment *ev,
		AWDView* viewobj)
{
   return SOM_ResolveD(this,AWDConnection,AWDConnection,addPendingView)
	(this, ev,viewobj);
}


/* method: deletePendingView */
boolean   deletePendingView(Environment *ev,
		AWDView* viewobj)
{
   return SOM_ResolveD(this,AWDConnection,AWDConnection,deletePendingView)
	(this, ev,viewobj);
}


/* method: call */
void*   call(Environment *ev,
		AWDView* viewobj)
{
   return SOM_ResolveD(this,AWDConnection,AWDConnection,call)
	(this, ev,viewobj);
}


/* method: check */
void*   check(Environment *ev,
		void* pReceiveData)
{
   return SOM_ResolveD(this,AWDConnection,AWDConnection,check)
	(this, ev,pReceiveData);
}


/* initializer method: withName */
void   withName(Environment *ev,
		somInitCtrl* ctrl,
		string aName)
{
   SOM_ResolveD(this,AWDConnection,AWDConnection,withName)
	(this, ev,ctrl,aName);
}


/* method: recall */
void*   recall(Environment *ev,
		AWDView* viewobj)
{
   return SOM_ResolveD(this,AWDConnection,AWDConnection,recall)
	(this, ev,viewobj);
}


/* method: setHost */
void   setHost(Environment *ev,
		string pszHost)
{
   SOM_ResolveD(this,AWDConnection,AWDConnection,setHost)
	(this, ev,pszHost);
}


/* method: host */
string   host(Environment *ev)
{
   return SOM_ResolveD(this,AWDConnection,AWDConnection,host)
	(this, ev);
}


/* method: close */
void   close(Environment *ev)
{
   SOM_ResolveD(this,AWDConnection,AWDConnection,close)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,AWDConnection,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,AWDConnection,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDConnection,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,AWDConnection,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDConnection,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDConnection,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDConnection,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDConnection,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDConnection,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDConnection*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDConnection,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDConnection,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDConnection,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDConnection,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDConnection*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDConnection,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDConnection*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDConnection,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDConnection*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDConnection,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDConnection,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDConnection,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDConnection,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDConnection,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDConnection,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDConnection,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDConnection,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDConnection,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDConnection_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDConnection,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDConnection,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDConnection_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDConnection,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDConnection,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDConnection,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDConnection,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDConnection,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDConnection,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDConnection,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDConnection */



#endif       /* SOM_AWDConnection_xh */

#ifndef SOM_ViewList_xh
#define SOM_ViewList_xh

class ViewList;

#define ViewList_MajorVersion 0
#define ViewList_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "view.xh"

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_TPrimitiveLinkedList_xh
#include <tpll.xh>
#endif

#ifndef ViewList_API
#define ViewList_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the ViewList Class */
SOMEXTERN
#if (defined(SOM_Module_connect_Source) || defined(ViewList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ViewList))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK ViewListNewClass(
		integer4,
		integer4 );

/* The API to the ViewList class object, and the methods it introduces. */
SOMEXTERN struct ViewListClassDataStructure {
	SOMClass *classObject;
	somMToken add;
	somMToken remove;
	somMToken count;
}
#if !(defined(SOM_Module_connect_Source) || defined(ViewList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ViewList))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ViewListClassData;
#define _ViewList ViewListClassData.classObject

/* The API to parentMtabs for ViewList, and the instance data it introduces. */
SOMEXTERN struct ViewListCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_connect_Source) || defined(ViewList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ViewList))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ViewListCClassData;

/*
 * -- Typedefs for ViewList Method Procedures
 */
extern "C" {
typedef boolean   SOMLINK somTP_ViewList_add(ViewList *somSelf, Environment *ev,
		AWDView* viewobj);
typedef somTP_ViewList_add *somTD_ViewList_add;
typedef boolean   SOMLINK somTP_ViewList_remove(ViewList *somSelf, Environment *ev,
		AWDView* viewobj);
typedef somTP_ViewList_remove *somTD_ViewList_remove;
typedef unsigned short   SOMLINK somTP_ViewList_count(ViewList *somSelf, Environment *ev);
typedef somTP_ViewList_count *somTD_ViewList_count;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef unsigned long   SOMLINK somTP_ViewList_somfCount(ViewList *somSelf, Environment *ev);
typedef somTP_ViewList_somfCount *somTD_ViewList_somfCount;
typedef void   SOMLINK somTP_ViewList_somfRemove(ViewList *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ViewList_somfRemove *somTD_ViewList_somfRemove;
typedef void   SOMLINK somTP_ViewList_somfRemoveAll(ViewList *somSelf, Environment *ev);
typedef somTP_ViewList_somfRemoveAll *somTD_ViewList_somfRemoveAll;
typedef somf_MLinkable*   SOMLINK somTP_ViewList_somfRemoveFirst(ViewList *somSelf, Environment *ev);
typedef somTP_ViewList_somfRemoveFirst *somTD_ViewList_somfRemoveFirst;
typedef somf_MLinkable*   SOMLINK somTP_ViewList_somfRemoveLast(ViewList *somSelf, Environment *ev);
typedef somTP_ViewList_somfRemoveLast *somTD_ViewList_somfRemoveLast;
typedef void   SOMLINK somTP_ViewList_somfAddBefore(ViewList *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_ViewList_somfAddBefore *somTD_ViewList_somfAddBefore;
typedef void   SOMLINK somTP_ViewList_somfAddAfter(ViewList *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_ViewList_somfAddAfter *somTD_ViewList_somfAddAfter;
typedef void   SOMLINK somTP_ViewList_somfAddFirst(ViewList *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_ViewList_somfAddFirst *somTD_ViewList_somfAddFirst;
typedef void   SOMLINK somTP_ViewList_somfAddLast(ViewList *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_ViewList_somfAddLast *somTD_ViewList_somfAddLast;
typedef somf_MLinkable*   SOMLINK somTP_ViewList_somfAfter(ViewList *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_ViewList_somfAfter *somTD_ViewList_somfAfter;
typedef somf_MLinkable*   SOMLINK somTP_ViewList_somfBefore(ViewList *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_ViewList_somfBefore *somTD_ViewList_somfBefore;
typedef somf_MLinkable*   SOMLINK somTP_ViewList_somfFirst(ViewList *somSelf, Environment *ev);
typedef somTP_ViewList_somfFirst *somTD_ViewList_somfFirst;
typedef somf_MLinkable*   SOMLINK somTP_ViewList_somfLast(ViewList *somSelf, Environment *ev);
typedef somTP_ViewList_somfLast *somTD_ViewList_somfLast;
typedef void   SOMLINK somTP_ViewList_somInit(ViewList *somSelf);
typedef somTP_ViewList_somInit *somTD_ViewList_somInit;
typedef void   SOMLINK somTP_ViewList_somUninit(ViewList *somSelf);
typedef somTP_ViewList_somUninit *somTD_ViewList_somUninit;
typedef void   SOMLINK somTP_ViewList_somDefaultInit(ViewList *somSelf,
		somInitCtrl* ctrl);
typedef somTP_ViewList_somDefaultInit *somTD_ViewList_somDefaultInit;
typedef void   SOMLINK somTP_ViewList_somDestruct(ViewList *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_ViewList_somDestruct *somTD_ViewList_somDestruct;
typedef void   SOMLINK somTP_ViewList_somDefaultCopyInit(ViewList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ViewList_somDefaultCopyInit *somTD_ViewList_somDefaultCopyInit;
typedef ViewList*   SOMLINK somTP_ViewList_somDefaultAssign(ViewList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ViewList_somDefaultAssign *somTD_ViewList_somDefaultAssign;
typedef void   SOMLINK somTP_ViewList_somDefaultConstCopyInit(ViewList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ViewList_somDefaultConstCopyInit *somTD_ViewList_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ViewList_somDefaultVCopyInit(ViewList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ViewList_somDefaultVCopyInit *somTD_ViewList_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ViewList_somDefaultConstVCopyInit(ViewList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ViewList_somDefaultConstVCopyInit *somTD_ViewList_somDefaultConstVCopyInit;
typedef ViewList*   SOMLINK somTP_ViewList_somDefaultConstAssign(ViewList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ViewList_somDefaultConstAssign *somTD_ViewList_somDefaultConstAssign;
typedef ViewList*   SOMLINK somTP_ViewList_somDefaultVAssign(ViewList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ViewList_somDefaultVAssign *somTD_ViewList_somDefaultVAssign;
typedef ViewList*   SOMLINK somTP_ViewList_somDefaultConstVAssign(ViewList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ViewList_somDefaultConstVAssign *somTD_ViewList_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ViewList_somFree(ViewList *somSelf);
typedef somTP_ViewList_somFree *somTD_ViewList_somFree;
typedef SOMClass*   SOMLINK somTP_ViewList_somGetClass(ViewList *somSelf);
typedef somTP_ViewList_somGetClass *somTD_ViewList_somGetClass;
typedef string   SOMLINK somTP_ViewList_somGetClassName(ViewList *somSelf);
typedef somTP_ViewList_somGetClassName *somTD_ViewList_somGetClassName;
typedef long   SOMLINK somTP_ViewList_somGetSize(ViewList *somSelf);
typedef somTP_ViewList_somGetSize *somTD_ViewList_somGetSize;
typedef boolean   SOMLINK somTP_ViewList_somIsA(ViewList *somSelf,
		SOMClass* aClassObj);
typedef somTP_ViewList_somIsA *somTD_ViewList_somIsA;
typedef boolean   SOMLINK somTP_ViewList_somIsInstanceOf(ViewList *somSelf,
		SOMClass* aClassObj);
typedef somTP_ViewList_somIsInstanceOf *somTD_ViewList_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ViewList_somRespondsTo(ViewList *somSelf,
		somId mId);
typedef somTP_ViewList_somRespondsTo *somTD_ViewList_somRespondsTo;
typedef boolean   SOMLINK somTP_ViewList_somDispatch(ViewList *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ViewList_somDispatch *somTD_ViewList_somDispatch;
typedef boolean   SOMLINK somTP_ViewList_somClassDispatch(ViewList *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ViewList_somClassDispatch *somTD_ViewList_somClassDispatch;
typedef boolean   SOMLINK somTP_ViewList_somCastObj(ViewList *somSelf,
		SOMClass* cls);
typedef somTP_ViewList_somCastObj *somTD_ViewList_somCastObj;
typedef boolean   SOMLINK somTP_ViewList_somResetObj(ViewList *somSelf);
typedef somTP_ViewList_somResetObj *somTD_ViewList_somResetObj;
typedef SOMObject*   SOMLINK somTP_ViewList_somPrintSelf(ViewList *somSelf);
typedef somTP_ViewList_somPrintSelf *somTD_ViewList_somPrintSelf;
typedef void   SOMLINK somTP_ViewList_somDumpSelf(ViewList *somSelf,
		long level);
typedef somTP_ViewList_somDumpSelf *somTD_ViewList_somDumpSelf;
typedef void   SOMLINK somTP_ViewList_somDumpSelfInt(ViewList *somSelf,
		long level);
typedef somTP_ViewList_somDumpSelfInt *somTD_ViewList_somDumpSelfInt;
}

#endif /* ViewList_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for ViewList
 */
class ViewList : public somf_TPrimitiveLinkedList
{
public:

// ViewList::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ViewList) ViewListNewClass(ViewList_MajorVersion,ViewList_MinorVersion);
   return (void*)
      SOM_Resolve(_ViewList,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ViewList));
}

// ViewList::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ViewList()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ViewListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ViewList(ViewList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ViewListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ViewList(const ViewList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ViewListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: add */
boolean   add(Environment *ev,
		AWDView* viewobj)
{
   return SOM_ResolveD(this,ViewList,ViewList,add)
	(this, ev,viewobj);
}


/* method: remove */
boolean   remove(Environment *ev,
		AWDView* viewobj)
{
   return SOM_ResolveD(this,ViewList,ViewList,remove)
	(this, ev,viewobj);
}


/* method: count */
unsigned short   count(Environment *ev)
{
   return SOM_ResolveD(this,ViewList,ViewList,count)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfCount */
unsigned long   somfCount(Environment *ev)
{
   return SOM_ResolveD(this,ViewList,somf_TPrimitiveLinkedList,somfCount)
	(this, ev);
}


/* method: somfRemove */
void   somfRemove(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ViewList,somf_TPrimitiveLinkedList,somfRemove)
	(this, ev,aLink);
}


/* method: somfRemoveAll */
void   somfRemoveAll(Environment *ev)
{
   SOM_ResolveD(this,ViewList,somf_TPrimitiveLinkedList,somfRemoveAll)
	(this, ev);
}


/* method: somfRemoveFirst */
somf_MLinkable*   somfRemoveFirst(Environment *ev)
{
   return SOM_ResolveD(this,ViewList,somf_TPrimitiveLinkedList,somfRemoveFirst)
	(this, ev);
}


/* method: somfRemoveLast */
somf_MLinkable*   somfRemoveLast(Environment *ev)
{
   return SOM_ResolveD(this,ViewList,somf_TPrimitiveLinkedList,somfRemoveLast)
	(this, ev);
}


/* method: somfAddBefore */
void   somfAddBefore(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,ViewList,somf_TPrimitiveLinkedList,somfAddBefore)
	(this, ev,existing,obj);
}


/* method: somfAddAfter */
void   somfAddAfter(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,ViewList,somf_TPrimitiveLinkedList,somfAddAfter)
	(this, ev,existing,obj);
}


/* method: somfAddFirst */
void   somfAddFirst(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,ViewList,somf_TPrimitiveLinkedList,somfAddFirst)
	(this, ev,obj);
}


/* method: somfAddLast */
void   somfAddLast(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,ViewList,somf_TPrimitiveLinkedList,somfAddLast)
	(this, ev,obj);
}


/* method: somfAfter */
somf_MLinkable*   somfAfter(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,ViewList,somf_TPrimitiveLinkedList,somfAfter)
	(this, ev,existingobj);
}


/* method: somfBefore */
somf_MLinkable*   somfBefore(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,ViewList,somf_TPrimitiveLinkedList,somfBefore)
	(this, ev,existingobj);
}


/* method: somfFirst */
somf_MLinkable*   somfFirst(Environment *ev)
{
   return SOM_ResolveD(this,ViewList,somf_TPrimitiveLinkedList,somfFirst)
	(this, ev);
}


/* method: somfLast */
somf_MLinkable*   somfLast(Environment *ev)
{
   return SOM_ResolveD(this,ViewList,somf_TPrimitiveLinkedList,somfLast)
	(this, ev);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,ViewList,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ViewList,SOMObject,somUninit)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,ViewList,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,ViewList,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ViewList,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ViewList*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ViewList,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ViewList,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ViewList,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ViewList,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ViewList*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ViewList,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ViewList*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ViewList,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ViewList*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ViewList,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ViewList,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,ViewList,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,ViewList,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,ViewList,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ViewList,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ViewList,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,ViewList,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   ViewList_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ViewList,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ViewList,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   ViewList_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ViewList,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ViewList,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,ViewList,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,ViewList,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,ViewList,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ViewList,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ViewList,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ViewList */



#endif       /* SOM_ViewList_xh */
