
#ifndef SOM_OrderBy_xh
#define SOM_OrderBy_xh

class OrderBy;

#define OrderBy_MajorVersion 2
#define OrderBy_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <somobj.xh>  

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_MLinkable_xh
#include <mlink.xh>
#endif

#ifndef OrderBy_API
#define OrderBy_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class AWDVisitor;
class AWDPersist;
class AWDBase;
class iostream;
class AWDServiceManager;
class AWDCommentAid;
class AWDString;
class AWDAlphaField;
class AWDDateTime;
class AWDBaseField;
class AWDDictionary;
class AWDDateTimeField;
class AWDGroupField;
class AWDApplication;
class AWDFieldFactory;
class AWDEntityKey;
class AWDMenu;
class CCriticalSection;
class FieldList;
class AWDRelationship;
class AWDConnection;
class AWDException;
class ACBL0024Record;
class AWDData;
class AWDTree;
class AWDMask;

/*
 * End of user-defined types.
 */

/* A procedure to create the OrderBy Class */
SOMEXTERN
#if (defined(SOM_Module_lkupaid_Source) || defined(OrderBy_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_OrderBy))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK OrderByNewClass(
		integer4,
		integer4 );

/* The API to the OrderBy class object, and the methods it introduces. */
SOMEXTERN struct OrderByClassDataStructure {
	SOMClass *classObject;
	somMToken setAWDData;
	somMToken setOrder;
	somMToken getData;
	somMToken getOrder;
	somMToken withAWDData;
	somMToken withAWDDataandOrder;
}
#if !(defined(SOM_Module_lkupaid_Source) || defined(OrderBy_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_OrderBy))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK OrderByClassData;
#define _OrderBy OrderByClassData.classObject

/* The API to parentMtabs for OrderBy, and the instance data it introduces. */
SOMEXTERN struct OrderByCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_lkupaid_Source) || defined(OrderBy_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_OrderBy))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK OrderByCClassData;

/*
 * -- Typedefs for OrderBy Method Procedures
 */
extern "C" {
typedef void   SOMLINK somTP_OrderBy_setAWDData(OrderBy *somSelf, Environment *ev,
		AWDData* pData);
typedef somTP_OrderBy_setAWDData *somTD_OrderBy_setAWDData;
typedef void   SOMLINK somTP_OrderBy_setOrder(OrderBy *somSelf, Environment *ev,
		unsigned long ulOrderNum);
typedef somTP_OrderBy_setOrder *somTD_OrderBy_setOrder;
typedef AWDData*   SOMLINK somTP_OrderBy_getData(OrderBy *somSelf, Environment *ev);
typedef somTP_OrderBy_getData *somTD_OrderBy_getData;
typedef unsigned long   SOMLINK somTP_OrderBy_getOrder(OrderBy *somSelf, Environment *ev);
typedef somTP_OrderBy_getOrder *somTD_OrderBy_getOrder;
typedef void   SOMLINK somTP_OrderBy_withAWDData(OrderBy *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDData* pData);
typedef somTP_OrderBy_withAWDData *somTD_OrderBy_withAWDData;
typedef void   SOMLINK somTP_OrderBy_withAWDDataandOrder(OrderBy *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDData* pData,
		unsigned long ulOrderNum);
typedef somTP_OrderBy_withAWDDataandOrder *somTD_OrderBy_withAWDDataandOrder;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef somf_MLinkable*   SOMLINK somTP_OrderBy_somfMLinkableInit(OrderBy *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_OrderBy_somfMLinkableInit *somTD_OrderBy_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_OrderBy_somfGetNext(OrderBy *somSelf, Environment *ev);
typedef somTP_OrderBy_somfGetNext *somTD_OrderBy_somfGetNext;
typedef void   SOMLINK somTP_OrderBy_somfSetNext(OrderBy *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_OrderBy_somfSetNext *somTD_OrderBy_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_OrderBy_somfGetPrevious(OrderBy *somSelf, Environment *ev);
typedef somTP_OrderBy_somfGetPrevious *somTD_OrderBy_somfGetPrevious;
typedef void   SOMLINK somTP_OrderBy_somfSetPrevious(OrderBy *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_OrderBy_somfSetPrevious *somTD_OrderBy_somfSetPrevious;
typedef void   SOMLINK somTP_OrderBy_somInit(OrderBy *somSelf);
typedef somTP_OrderBy_somInit *somTD_OrderBy_somInit;
typedef void   SOMLINK somTP_OrderBy_somDefaultInit(OrderBy *somSelf,
		somInitCtrl* ctrl);
typedef somTP_OrderBy_somDefaultInit *somTD_OrderBy_somDefaultInit;
typedef void   SOMLINK somTP_OrderBy_somDestruct(OrderBy *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_OrderBy_somDestruct *somTD_OrderBy_somDestruct;
typedef void   SOMLINK somTP_OrderBy_somDefaultCopyInit(OrderBy *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OrderBy_somDefaultCopyInit *somTD_OrderBy_somDefaultCopyInit;
typedef OrderBy*   SOMLINK somTP_OrderBy_somDefaultAssign(OrderBy *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OrderBy_somDefaultAssign *somTD_OrderBy_somDefaultAssign;
typedef void   SOMLINK somTP_OrderBy_somDefaultConstCopyInit(OrderBy *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OrderBy_somDefaultConstCopyInit *somTD_OrderBy_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_OrderBy_somDefaultVCopyInit(OrderBy *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OrderBy_somDefaultVCopyInit *somTD_OrderBy_somDefaultVCopyInit;
typedef void   SOMLINK somTP_OrderBy_somDefaultConstVCopyInit(OrderBy *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OrderBy_somDefaultConstVCopyInit *somTD_OrderBy_somDefaultConstVCopyInit;
typedef OrderBy*   SOMLINK somTP_OrderBy_somDefaultConstAssign(OrderBy *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OrderBy_somDefaultConstAssign *somTD_OrderBy_somDefaultConstAssign;
typedef OrderBy*   SOMLINK somTP_OrderBy_somDefaultVAssign(OrderBy *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OrderBy_somDefaultVAssign *somTD_OrderBy_somDefaultVAssign;
typedef OrderBy*   SOMLINK somTP_OrderBy_somDefaultConstVAssign(OrderBy *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OrderBy_somDefaultConstVAssign *somTD_OrderBy_somDefaultConstVAssign;
typedef void   SOMLINK somTP_OrderBy_somFree(OrderBy *somSelf);
typedef somTP_OrderBy_somFree *somTD_OrderBy_somFree;
typedef void   SOMLINK somTP_OrderBy_somUninit(OrderBy *somSelf);
typedef somTP_OrderBy_somUninit *somTD_OrderBy_somUninit;
typedef SOMClass*   SOMLINK somTP_OrderBy_somGetClass(OrderBy *somSelf);
typedef somTP_OrderBy_somGetClass *somTD_OrderBy_somGetClass;
typedef string   SOMLINK somTP_OrderBy_somGetClassName(OrderBy *somSelf);
typedef somTP_OrderBy_somGetClassName *somTD_OrderBy_somGetClassName;
typedef long   SOMLINK somTP_OrderBy_somGetSize(OrderBy *somSelf);
typedef somTP_OrderBy_somGetSize *somTD_OrderBy_somGetSize;
typedef boolean   SOMLINK somTP_OrderBy_somIsA(OrderBy *somSelf,
		SOMClass* aClassObj);
typedef somTP_OrderBy_somIsA *somTD_OrderBy_somIsA;
typedef boolean   SOMLINK somTP_OrderBy_somIsInstanceOf(OrderBy *somSelf,
		SOMClass* aClassObj);
typedef somTP_OrderBy_somIsInstanceOf *somTD_OrderBy_somIsInstanceOf;
typedef boolean   SOMLINK somTP_OrderBy_somRespondsTo(OrderBy *somSelf,
		somId mId);
typedef somTP_OrderBy_somRespondsTo *somTD_OrderBy_somRespondsTo;
typedef boolean   SOMLINK somTP_OrderBy_somDispatch(OrderBy *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_OrderBy_somDispatch *somTD_OrderBy_somDispatch;
typedef boolean   SOMLINK somTP_OrderBy_somClassDispatch(OrderBy *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_OrderBy_somClassDispatch *somTD_OrderBy_somClassDispatch;
typedef boolean   SOMLINK somTP_OrderBy_somCastObj(OrderBy *somSelf,
		SOMClass* cls);
typedef somTP_OrderBy_somCastObj *somTD_OrderBy_somCastObj;
typedef boolean   SOMLINK somTP_OrderBy_somResetObj(OrderBy *somSelf);
typedef somTP_OrderBy_somResetObj *somTD_OrderBy_somResetObj;
typedef SOMObject*   SOMLINK somTP_OrderBy_somPrintSelf(OrderBy *somSelf);
typedef somTP_OrderBy_somPrintSelf *somTD_OrderBy_somPrintSelf;
typedef void   SOMLINK somTP_OrderBy_somDumpSelf(OrderBy *somSelf,
		long level);
typedef somTP_OrderBy_somDumpSelf *somTD_OrderBy_somDumpSelf;
typedef void   SOMLINK somTP_OrderBy_somDumpSelfInt(OrderBy *somSelf,
		long level);
typedef somTP_OrderBy_somDumpSelfInt *somTD_OrderBy_somDumpSelfInt;
}

#endif /* OrderBy_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for OrderBy
 */
class OrderBy : public somf_MLinkable
{
public:

// OrderBy::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_OrderBy) OrderByNewClass(OrderBy_MajorVersion,OrderBy_MinorVersion);
   return (void*)
      SOM_Resolve(_OrderBy,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_OrderBy));
}

// OrderBy::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

OrderBy()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (OrderByCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

OrderBy(OrderBy* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (OrderByCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

OrderBy(const OrderBy* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (OrderByCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

OrderBy(Environment *ev,AWDData* pData) 
{
   withAWDData(ev,0,pData);
}

OrderBy(Environment *ev,AWDData* pData,unsigned long ulOrderNum) 
{
   withAWDDataandOrder(ev,0,pData,ulOrderNum);
}


/* method: setAWDData */
void   setAWDData(Environment *ev,
		AWDData* pData)
{
   SOM_ResolveD(this,OrderBy,OrderBy,setAWDData)
	(this, ev,pData);
}


/* method: setOrder */
void   setOrder(Environment *ev,
		unsigned long ulOrderNum)
{
   SOM_ResolveD(this,OrderBy,OrderBy,setOrder)
	(this, ev,ulOrderNum);
}


/* method: getData */
AWDData*   getData(Environment *ev)
{
   return SOM_ResolveD(this,OrderBy,OrderBy,getData)
	(this, ev);
}


/* method: getOrder */
unsigned long   getOrder(Environment *ev)
{
   return SOM_ResolveD(this,OrderBy,OrderBy,getOrder)
	(this, ev);
}


/* initializer method: withAWDData */
void   withAWDData(Environment *ev,
		somInitCtrl* ctrl,
		AWDData* pData)
{
   SOM_ResolveD(this,OrderBy,OrderBy,withAWDData)
	(this, ev,ctrl,pData);
}


/* initializer method: withAWDDataandOrder */
void   withAWDDataandOrder(Environment *ev,
		somInitCtrl* ctrl,
		AWDData* pData,
		unsigned long ulOrderNum)
{
   SOM_ResolveD(this,OrderBy,OrderBy,withAWDDataandOrder)
	(this, ev,ctrl,pData,ulOrderNum);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,OrderBy,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,OrderBy,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,OrderBy,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,OrderBy,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,OrderBy,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,OrderBy,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,OrderBy,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,OrderBy,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,OrderBy,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
OrderBy*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,OrderBy,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,OrderBy,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,OrderBy,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,OrderBy,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
OrderBy*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,OrderBy,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
OrderBy*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,OrderBy,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
OrderBy*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,OrderBy,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,OrderBy,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,OrderBy,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,OrderBy,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,OrderBy,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,OrderBy,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,OrderBy,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,OrderBy,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,OrderBy,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   OrderBy_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,OrderBy,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,OrderBy,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   OrderBy_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,OrderBy,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,OrderBy,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,OrderBy,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,OrderBy,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,OrderBy,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,OrderBy,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,OrderBy,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* OrderBy */



#endif       /* SOM_OrderBy_xh */

#ifndef SOM_FieldIterator_xh
#define SOM_FieldIterator_xh

class FieldIterator;

#define FieldIterator_MajorVersion 2
#define FieldIterator_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <somobj.xh>  
#include <acbl0049.xh>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_TPrimitiveLinkedListIterator_xh
#include <tpllitr.xh>
#endif

#ifndef FieldIterator_API
#define FieldIterator_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
typedef unsigned long FieldIterator_ITERATOR_DIRECTION;
#define FieldIterator_FIRST 1UL
#define FieldIterator_NEXT 2UL
#define FieldIterator_PREVIOUS 3UL
#define FieldIterator_LAST 4UL
typedef unsigned long FieldIterator_LOOKUP_TYPE;
#define FieldIterator_ALL 1UL
#define FieldIterator_SOURCE 2UL
#define FieldIterator_WORK 3UL
#define FieldIterator_FOLDER 4UL

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ITERATOR_DIRECTION
    #ifdef ITERATOR_DIRECTION
        #undef ITERATOR_DIRECTION
        #define SOMTGD_ITERATOR_DIRECTION 1
    #else
        #define ITERATOR_DIRECTION FieldIterator_ITERATOR_DIRECTION
    #endif /* ITERATOR_DIRECTION */
#endif /* SOMTGD_ITERATOR_DIRECTION */
#ifndef SOMTGD_LOOKUP_TYPE
    #ifdef LOOKUP_TYPE
        #undef LOOKUP_TYPE
        #define SOMTGD_LOOKUP_TYPE 1
    #else
        #define LOOKUP_TYPE FieldIterator_LOOKUP_TYPE
    #endif /* LOOKUP_TYPE */
#endif /* SOMTGD_LOOKUP_TYPE */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the FieldIterator Class */
SOMEXTERN
#if (defined(SOM_Module_lkupaid_Source) || defined(FieldIterator_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_FieldIterator))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK FieldIteratorNewClass(
		integer4,
		integer4 );

/* The API to the FieldIterator class object, and the methods it introduces. */
SOMEXTERN struct FieldIteratorClassDataStructure {
	SOMClass *classObject;
	somMToken getCount;
	somMToken getDictNode;
	somMToken setFieldType;
	somMToken setLookupType;
	somMToken setDataDictionary;
	somMToken fieldType;
	somMToken lookupType;
	somMToken find;
	somMToken withFieldTypeandLookupType;
}
#if !(defined(SOM_Module_lkupaid_Source) || defined(FieldIterator_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_FieldIterator))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK FieldIteratorClassData;
#define _FieldIterator FieldIteratorClassData.classObject

/* The API to parentMtabs for FieldIterator, and the instance data it introduces. */
SOMEXTERN struct FieldIteratorCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_lkupaid_Source) || defined(FieldIterator_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_FieldIterator))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK FieldIteratorCClassData;

/*
 * -- Typedefs for FieldIterator Method Procedures
 */
extern "C" {
typedef unsigned long   SOMLINK somTP_FieldIterator_getCount(FieldIterator *somSelf, Environment *ev);
typedef somTP_FieldIterator_getCount *somTD_FieldIterator_getCount;
typedef AWDData*   SOMLINK somTP_FieldIterator_getDictNode(FieldIterator *somSelf, Environment *ev,
		FieldIterator_ITERATOR_DIRECTION eItrDirection);
typedef somTP_FieldIterator_getDictNode *somTD_FieldIterator_getDictNode;
typedef void   SOMLINK somTP_FieldIterator_setFieldType(FieldIterator *somSelf, Environment *ev,
		ACBL0049_FIELD_TYPE eFieldType);
typedef somTP_FieldIterator_setFieldType *somTD_FieldIterator_setFieldType;
typedef void   SOMLINK somTP_FieldIterator_setLookupType(FieldIterator *somSelf, Environment *ev,
		FieldIterator_LOOKUP_TYPE fLookType);
typedef somTP_FieldIterator_setLookupType *somTD_FieldIterator_setLookupType;
typedef void   SOMLINK somTP_FieldIterator_setDataDictionary(FieldIterator *somSelf, Environment *ev,
		AWDDictionary* awdDict);
typedef somTP_FieldIterator_setDataDictionary *somTD_FieldIterator_setDataDictionary;
typedef ACBL0049_FIELD_TYPE   SOMLINK somTP_FieldIterator_fieldType(FieldIterator *somSelf, Environment *ev);
typedef somTP_FieldIterator_fieldType *somTD_FieldIterator_fieldType;
typedef FieldIterator_LOOKUP_TYPE   SOMLINK somTP_FieldIterator_lookupType(FieldIterator *somSelf, Environment *ev);
typedef somTP_FieldIterator_lookupType *somTD_FieldIterator_lookupType;
typedef AWDData*   SOMLINK somTP_FieldIterator_find(FieldIterator *somSelf, Environment *ev,
		string szDataname);
typedef somTP_FieldIterator_find *somTD_FieldIterator_find;
typedef void   SOMLINK somTP_FieldIterator_withFieldTypeandLookupType(FieldIterator *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		ACBL0049_FIELD_TYPE eFieldType,
		FieldIterator_LOOKUP_TYPE eLookupType);
typedef somTP_FieldIterator_withFieldTypeandLookupType *somTD_FieldIterator_withFieldTypeandLookupType;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef somf_TPrimitiveLinkedListIterator*   SOMLINK somTP_FieldIterator_somfTPrimitiveLinkedListIteratorInit(FieldIterator *somSelf, Environment *ev,
		somf_TPrimitiveLinkedList* list);
typedef somTP_FieldIterator_somfTPrimitiveLinkedListIteratorInit *somTD_FieldIterator_somfTPrimitiveLinkedListIteratorInit;
typedef somf_MLinkable*   SOMLINK somTP_FieldIterator_somfFirst(FieldIterator *somSelf, Environment *ev);
typedef somTP_FieldIterator_somfFirst *somTD_FieldIterator_somfFirst;
typedef somf_MLinkable*   SOMLINK somTP_FieldIterator_somfNext(FieldIterator *somSelf, Environment *ev);
typedef somTP_FieldIterator_somfNext *somTD_FieldIterator_somfNext;
typedef somf_MLinkable*   SOMLINK somTP_FieldIterator_somfLast(FieldIterator *somSelf, Environment *ev);
typedef somTP_FieldIterator_somfLast *somTD_FieldIterator_somfLast;
typedef somf_MLinkable*   SOMLINK somTP_FieldIterator_somfPrevious(FieldIterator *somSelf, Environment *ev);
typedef somTP_FieldIterator_somfPrevious *somTD_FieldIterator_somfPrevious;
typedef void   SOMLINK somTP_FieldIterator_somUninit(FieldIterator *somSelf);
typedef somTP_FieldIterator_somUninit *somTD_FieldIterator_somUninit;
typedef void   SOMLINK somTP_FieldIterator_somDefaultInit(FieldIterator *somSelf,
		somInitCtrl* ctrl);
typedef somTP_FieldIterator_somDefaultInit *somTD_FieldIterator_somDefaultInit;
typedef void   SOMLINK somTP_FieldIterator_somDestruct(FieldIterator *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_FieldIterator_somDestruct *somTD_FieldIterator_somDestruct;
typedef void   SOMLINK somTP_FieldIterator_somDefaultCopyInit(FieldIterator *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldIterator_somDefaultCopyInit *somTD_FieldIterator_somDefaultCopyInit;
typedef FieldIterator*   SOMLINK somTP_FieldIterator_somDefaultAssign(FieldIterator *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldIterator_somDefaultAssign *somTD_FieldIterator_somDefaultAssign;
typedef void   SOMLINK somTP_FieldIterator_somDefaultConstCopyInit(FieldIterator *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldIterator_somDefaultConstCopyInit *somTD_FieldIterator_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_FieldIterator_somDefaultVCopyInit(FieldIterator *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldIterator_somDefaultVCopyInit *somTD_FieldIterator_somDefaultVCopyInit;
typedef void   SOMLINK somTP_FieldIterator_somDefaultConstVCopyInit(FieldIterator *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldIterator_somDefaultConstVCopyInit *somTD_FieldIterator_somDefaultConstVCopyInit;
typedef FieldIterator*   SOMLINK somTP_FieldIterator_somDefaultConstAssign(FieldIterator *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldIterator_somDefaultConstAssign *somTD_FieldIterator_somDefaultConstAssign;
typedef FieldIterator*   SOMLINK somTP_FieldIterator_somDefaultVAssign(FieldIterator *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldIterator_somDefaultVAssign *somTD_FieldIterator_somDefaultVAssign;
typedef FieldIterator*   SOMLINK somTP_FieldIterator_somDefaultConstVAssign(FieldIterator *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldIterator_somDefaultConstVAssign *somTD_FieldIterator_somDefaultConstVAssign;
typedef void   SOMLINK somTP_FieldIterator_somInit(FieldIterator *somSelf);
typedef somTP_FieldIterator_somInit *somTD_FieldIterator_somInit;
typedef void   SOMLINK somTP_FieldIterator_somFree(FieldIterator *somSelf);
typedef somTP_FieldIterator_somFree *somTD_FieldIterator_somFree;
typedef SOMClass*   SOMLINK somTP_FieldIterator_somGetClass(FieldIterator *somSelf);
typedef somTP_FieldIterator_somGetClass *somTD_FieldIterator_somGetClass;
typedef string   SOMLINK somTP_FieldIterator_somGetClassName(FieldIterator *somSelf);
typedef somTP_FieldIterator_somGetClassName *somTD_FieldIterator_somGetClassName;
typedef long   SOMLINK somTP_FieldIterator_somGetSize(FieldIterator *somSelf);
typedef somTP_FieldIterator_somGetSize *somTD_FieldIterator_somGetSize;
typedef boolean   SOMLINK somTP_FieldIterator_somIsA(FieldIterator *somSelf,
		SOMClass* aClassObj);
typedef somTP_FieldIterator_somIsA *somTD_FieldIterator_somIsA;
typedef boolean   SOMLINK somTP_FieldIterator_somIsInstanceOf(FieldIterator *somSelf,
		SOMClass* aClassObj);
typedef somTP_FieldIterator_somIsInstanceOf *somTD_FieldIterator_somIsInstanceOf;
typedef boolean   SOMLINK somTP_FieldIterator_somRespondsTo(FieldIterator *somSelf,
		somId mId);
typedef somTP_FieldIterator_somRespondsTo *somTD_FieldIterator_somRespondsTo;
typedef boolean   SOMLINK somTP_FieldIterator_somDispatch(FieldIterator *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_FieldIterator_somDispatch *somTD_FieldIterator_somDispatch;
typedef boolean   SOMLINK somTP_FieldIterator_somClassDispatch(FieldIterator *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_FieldIterator_somClassDispatch *somTD_FieldIterator_somClassDispatch;
typedef boolean   SOMLINK somTP_FieldIterator_somCastObj(FieldIterator *somSelf,
		SOMClass* cls);
typedef somTP_FieldIterator_somCastObj *somTD_FieldIterator_somCastObj;
typedef boolean   SOMLINK somTP_FieldIterator_somResetObj(FieldIterator *somSelf);
typedef somTP_FieldIterator_somResetObj *somTD_FieldIterator_somResetObj;
typedef SOMObject*   SOMLINK somTP_FieldIterator_somPrintSelf(FieldIterator *somSelf);
typedef somTP_FieldIterator_somPrintSelf *somTD_FieldIterator_somPrintSelf;
typedef void   SOMLINK somTP_FieldIterator_somDumpSelf(FieldIterator *somSelf,
		long level);
typedef somTP_FieldIterator_somDumpSelf *somTD_FieldIterator_somDumpSelf;
typedef void   SOMLINK somTP_FieldIterator_somDumpSelfInt(FieldIterator *somSelf,
		long level);
typedef somTP_FieldIterator_somDumpSelfInt *somTD_FieldIterator_somDumpSelfInt;
}

#endif /* FieldIterator_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for FieldIterator
 */
class FieldIterator : public somf_TPrimitiveLinkedListIterator
{
public:

// FieldIterator::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_FieldIterator) FieldIteratorNewClass(FieldIterator_MajorVersion,FieldIterator_MinorVersion);
   return (void*)
      SOM_Resolve(_FieldIterator,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_FieldIterator));
}

// FieldIterator::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

FieldIterator()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (FieldIteratorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

FieldIterator(FieldIterator* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (FieldIteratorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

FieldIterator(const FieldIterator* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (FieldIteratorCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

FieldIterator(Environment *ev,ACBL0049_FIELD_TYPE eFieldType,FieldIterator_LOOKUP_TYPE eLookupType) 
{
   withFieldTypeandLookupType(ev,0,eFieldType,eLookupType);
}


/* method: getCount */
unsigned long   getCount(Environment *ev)
{
   return SOM_ResolveD(this,FieldIterator,FieldIterator,getCount)
	(this, ev);
}


/* method: getDictNode */
AWDData*   getDictNode(Environment *ev,
		FieldIterator_ITERATOR_DIRECTION eItrDirection)
{
   return SOM_ResolveD(this,FieldIterator,FieldIterator,getDictNode)
	(this, ev,eItrDirection);
}


/* method: setFieldType */
void   setFieldType(Environment *ev,
		ACBL0049_FIELD_TYPE eFieldType)
{
   SOM_ResolveD(this,FieldIterator,FieldIterator,setFieldType)
	(this, ev,eFieldType);
}


/* method: setLookupType */
void   setLookupType(Environment *ev,
		FieldIterator_LOOKUP_TYPE fLookType)
{
   SOM_ResolveD(this,FieldIterator,FieldIterator,setLookupType)
	(this, ev,fLookType);
}


/* method: setDataDictionary */
void   setDataDictionary(Environment *ev,
		AWDDictionary* awdDict)
{
   SOM_ResolveD(this,FieldIterator,FieldIterator,setDataDictionary)
	(this, ev,awdDict);
}


/* method: fieldType */
ACBL0049_FIELD_TYPE   fieldType(Environment *ev)
{
   return SOM_ResolveD(this,FieldIterator,FieldIterator,fieldType)
	(this, ev);
}


/* method: lookupType */
FieldIterator_LOOKUP_TYPE   lookupType(Environment *ev)
{
   return SOM_ResolveD(this,FieldIterator,FieldIterator,lookupType)
	(this, ev);
}


/* method: find */
AWDData*   find(Environment *ev,
		string szDataname)
{
   return SOM_ResolveD(this,FieldIterator,FieldIterator,find)
	(this, ev,szDataname);
}


/* initializer method: withFieldTypeandLookupType */
void   withFieldTypeandLookupType(Environment *ev,
		somInitCtrl* ctrl,
		ACBL0049_FIELD_TYPE eFieldType,
		FieldIterator_LOOKUP_TYPE eLookupType)
{
   SOM_ResolveD(this,FieldIterator,FieldIterator,withFieldTypeandLookupType)
	(this, ev,ctrl,eFieldType,eLookupType);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfTPrimitiveLinkedListIteratorInit */
somf_TPrimitiveLinkedListIterator*   somfTPrimitiveLinkedListIteratorInit(Environment *ev,
		somf_TPrimitiveLinkedList* list)
{
   return SOM_ResolveD(this,FieldIterator,somf_TPrimitiveLinkedListIterator,somfTPrimitiveLinkedListIteratorInit)
	(this, ev,list);
}


/* method: somfFirst */
somf_MLinkable*   somfFirst(Environment *ev)
{
   return SOM_ResolveD(this,FieldIterator,somf_TPrimitiveLinkedListIterator,somfFirst)
	(this, ev);
}


/* method: somfNext */
somf_MLinkable*   somfNext(Environment *ev)
{
   return SOM_ResolveD(this,FieldIterator,somf_TPrimitiveLinkedListIterator,somfNext)
	(this, ev);
}


/* method: somfLast */
somf_MLinkable*   somfLast(Environment *ev)
{
   return SOM_ResolveD(this,FieldIterator,somf_TPrimitiveLinkedListIterator,somfLast)
	(this, ev);
}


/* method: somfPrevious */
somf_MLinkable*   somfPrevious(Environment *ev)
{
   return SOM_ResolveD(this,FieldIterator,somf_TPrimitiveLinkedListIterator,somfPrevious)
	(this, ev);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,FieldIterator,SOMObject,somUninit)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,FieldIterator,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,FieldIterator,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,FieldIterator,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
FieldIterator*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,FieldIterator,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,FieldIterator,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,FieldIterator,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,FieldIterator,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
FieldIterator*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,FieldIterator,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
FieldIterator*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,FieldIterator,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
FieldIterator*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,FieldIterator,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,FieldIterator,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,FieldIterator,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,FieldIterator,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,FieldIterator,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,FieldIterator,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,FieldIterator,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,FieldIterator,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,FieldIterator,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   FieldIterator_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,FieldIterator,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,FieldIterator,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   FieldIterator_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,FieldIterator,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,FieldIterator,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,FieldIterator,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,FieldIterator,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,FieldIterator,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,FieldIterator,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,FieldIterator,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* FieldIterator */



#endif       /* SOM_FieldIterator_xh */

#ifndef SOM_LookupCriteria_xh
#define SOM_LookupCriteria_xh

class LookupCriteria;

#define LookupCriteria_MajorVersion 2
#define LookupCriteria_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <somobj.xh>  
#include <acbl0049.xh>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_MLinkable_xh
#include <mlink.xh>
#endif

#ifndef LookupCriteria_API
#define LookupCriteria_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
typedef unsigned long LookupCriteria_COMPARISON_OPERATOR;
#define LookupCriteria_EQUAL_TO 1UL
#define LookupCriteria_LESS_THAN 2UL
#define LookupCriteria_GREATER_THAN 3UL
#define LookupCriteria_GREATER_THAN_OR_EQUAL 4UL
#define LookupCriteria_LESS_THAN_OR_EQUAL 5UL
#define LookupCriteria_NOT_EQUAL 6UL
#define LookupCriteria_LIKE 7UL
typedef unsigned long LookupCriteria_WILD_CARD;
#define LookupCriteria_WILDCARD_NONE 1UL
#define LookupCriteria_WILDCARD_PERCENT 2UL
#define LookupCriteria_WILDCARD_UNDERSCORE 3UL
#define LookupCriteria_WILDCARD_BOTH 4UL

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_COMPARISON_OPERATOR
    #ifdef COMPARISON_OPERATOR
        #undef COMPARISON_OPERATOR
        #define SOMTGD_COMPARISON_OPERATOR 1
    #else
        #define COMPARISON_OPERATOR LookupCriteria_COMPARISON_OPERATOR
    #endif /* COMPARISON_OPERATOR */
#endif /* SOMTGD_COMPARISON_OPERATOR */
#ifndef SOMTGD_WILD_CARD
    #ifdef WILD_CARD
        #undef WILD_CARD
        #define SOMTGD_WILD_CARD 1
    #else
        #define WILD_CARD LookupCriteria_WILD_CARD
    #endif /* WILD_CARD */
#endif /* SOMTGD_WILD_CARD */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the LookupCriteria Class */
SOMEXTERN
#if (defined(SOM_Module_lkupaid_Source) || defined(LookupCriteria_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_LookupCriteria))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK LookupCriteriaNewClass(
		integer4,
		integer4 );

/* The API to the LookupCriteria class object, and the methods it introduces. */
SOMEXTERN struct LookupCriteriaClassDataStructure {
	SOMClass *classObject;
	somMToken dataname;
	somMToken hasWildcard;
	somMToken mask;
	somMToken datavalue;
	somMToken datavaluewithmask;
	somMToken comparator;
	somMToken comparatorasString;
	somMToken setAWDData;
	somMToken setAWDDataName;
	somMToken setComparator;
	somMToken setComparatorwithString;
	somMToken setWildcard;
	somMToken setDatavalue;
	somMToken asLookupString;
	somMToken isValidValue;
	somMToken getData;
	somMToken isProcessed;
	somMToken setProcessed;
	somMToken withAWDDataNameOperatorandValue;
	somMToken withAWDDataandValue;
	somMToken withAWDDataOperatorandValue;
	somMToken withAWDCriteria;
	somMToken formatWildValue;
}
#if !(defined(SOM_Module_lkupaid_Source) || defined(LookupCriteria_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_LookupCriteria))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK LookupCriteriaClassData;
#define _LookupCriteria LookupCriteriaClassData.classObject

/* The API to parentMtabs for LookupCriteria, and the instance data it introduces. */
SOMEXTERN struct LookupCriteriaCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_lkupaid_Source) || defined(LookupCriteria_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_LookupCriteria))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK LookupCriteriaCClassData;

/*
 * -- Typedefs for LookupCriteria Method Procedures
 */
extern "C" {
typedef string   SOMLINK somTP_LookupCriteria_dataname(LookupCriteria *somSelf, Environment *ev);
typedef somTP_LookupCriteria_dataname *somTD_LookupCriteria_dataname;
typedef string   SOMLINK somTP_LookupCriteria_mask(LookupCriteria *somSelf, Environment *ev);
typedef somTP_LookupCriteria_mask *somTD_LookupCriteria_mask;
typedef string   SOMLINK somTP_LookupCriteria_datavalue(LookupCriteria *somSelf, Environment *ev);
typedef somTP_LookupCriteria_datavalue *somTD_LookupCriteria_datavalue;
typedef string   SOMLINK somTP_LookupCriteria_datavaluewithmask(LookupCriteria *somSelf, Environment *ev,
		string pszValue);
typedef somTP_LookupCriteria_datavaluewithmask *somTD_LookupCriteria_datavaluewithmask;
typedef LookupCriteria_COMPARISON_OPERATOR   SOMLINK somTP_LookupCriteria_comparator(LookupCriteria *somSelf, Environment *ev);
typedef somTP_LookupCriteria_comparator *somTD_LookupCriteria_comparator;
typedef string   SOMLINK somTP_LookupCriteria_comparatorasString(LookupCriteria *somSelf, Environment *ev);
typedef somTP_LookupCriteria_comparatorasString *somTD_LookupCriteria_comparatorasString;
typedef void   SOMLINK somTP_LookupCriteria_setAWDData(LookupCriteria *somSelf, Environment *ev,
		AWDData* pData);
typedef somTP_LookupCriteria_setAWDData *somTD_LookupCriteria_setAWDData;
typedef void   SOMLINK somTP_LookupCriteria_setAWDDataName(LookupCriteria *somSelf, Environment *ev,
		string szDataName);
typedef somTP_LookupCriteria_setAWDDataName *somTD_LookupCriteria_setAWDDataName;
typedef void   SOMLINK somTP_LookupCriteria_setComparator(LookupCriteria *somSelf, Environment *ev,
		LookupCriteria_COMPARISON_OPERATOR eOperator);
typedef somTP_LookupCriteria_setComparator *somTD_LookupCriteria_setComparator;
typedef void   SOMLINK somTP_LookupCriteria_setComparatorwithString(LookupCriteria *somSelf, Environment *ev,
		string szComparator);
typedef somTP_LookupCriteria_setComparatorwithString *somTD_LookupCriteria_setComparatorwithString;
typedef void   SOMLINK somTP_LookupCriteria_setDatavalue(LookupCriteria *somSelf, Environment *ev,
		string szDatavalue);
typedef somTP_LookupCriteria_setDatavalue *somTD_LookupCriteria_setDatavalue;
typedef string   SOMLINK somTP_LookupCriteria_asLookupString(LookupCriteria *somSelf, Environment *ev);
typedef somTP_LookupCriteria_asLookupString *somTD_LookupCriteria_asLookupString;
typedef AWDData*   SOMLINK somTP_LookupCriteria_getData(LookupCriteria *somSelf, Environment *ev);
typedef somTP_LookupCriteria_getData *somTD_LookupCriteria_getData;
typedef boolean   SOMLINK somTP_LookupCriteria_isProcessed(LookupCriteria *somSelf, Environment *ev);
typedef somTP_LookupCriteria_isProcessed *somTD_LookupCriteria_isProcessed;
typedef void   SOMLINK somTP_LookupCriteria_setProcessed(LookupCriteria *somSelf, Environment *ev,
		boolean fProcessed);
typedef somTP_LookupCriteria_setProcessed *somTD_LookupCriteria_setProcessed;
typedef boolean   SOMLINK somTP_LookupCriteria_hasWildcard(LookupCriteria *somSelf, Environment *ev);
typedef somTP_LookupCriteria_hasWildcard *somTD_LookupCriteria_hasWildcard;
typedef void   SOMLINK somTP_LookupCriteria_setWildcard(LookupCriteria *somSelf, Environment *ev);
typedef somTP_LookupCriteria_setWildcard *somTD_LookupCriteria_setWildcard;
typedef boolean   SOMLINK somTP_LookupCriteria_isValidValue(LookupCriteria *somSelf, Environment *ev);
typedef somTP_LookupCriteria_isValidValue *somTD_LookupCriteria_isValidValue;
typedef void   SOMLINK somTP_LookupCriteria_formatWildValue(LookupCriteria *somSelf, Environment *ev);
typedef somTP_LookupCriteria_formatWildValue *somTD_LookupCriteria_formatWildValue;
typedef void   SOMLINK somTP_LookupCriteria_withAWDDataNameOperatorandValue(LookupCriteria *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string szDataName,
		string szOperator,
		string szValue);
typedef somTP_LookupCriteria_withAWDDataNameOperatorandValue *somTD_LookupCriteria_withAWDDataNameOperatorandValue;
typedef void   SOMLINK somTP_LookupCriteria_withAWDDataandValue(LookupCriteria *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDData* pData,
		string szValue);
typedef somTP_LookupCriteria_withAWDDataandValue *somTD_LookupCriteria_withAWDDataandValue;
typedef void   SOMLINK somTP_LookupCriteria_withAWDDataOperatorandValue(LookupCriteria *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDData* pData,
		string szOperator,
		string szValue);
typedef somTP_LookupCriteria_withAWDDataOperatorandValue *somTD_LookupCriteria_withAWDDataOperatorandValue;
typedef void   SOMLINK somTP_LookupCriteria_withAWDCriteria(LookupCriteria *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		LookupCriteria* pLookup);
typedef somTP_LookupCriteria_withAWDCriteria *somTD_LookupCriteria_withAWDCriteria;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef somf_MLinkable*   SOMLINK somTP_LookupCriteria_somfMLinkableInit(LookupCriteria *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_LookupCriteria_somfMLinkableInit *somTD_LookupCriteria_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_LookupCriteria_somfGetNext(LookupCriteria *somSelf, Environment *ev);
typedef somTP_LookupCriteria_somfGetNext *somTD_LookupCriteria_somfGetNext;
typedef void   SOMLINK somTP_LookupCriteria_somfSetNext(LookupCriteria *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_LookupCriteria_somfSetNext *somTD_LookupCriteria_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_LookupCriteria_somfGetPrevious(LookupCriteria *somSelf, Environment *ev);
typedef somTP_LookupCriteria_somfGetPrevious *somTD_LookupCriteria_somfGetPrevious;
typedef void   SOMLINK somTP_LookupCriteria_somfSetPrevious(LookupCriteria *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_LookupCriteria_somfSetPrevious *somTD_LookupCriteria_somfSetPrevious;
typedef void   SOMLINK somTP_LookupCriteria_somInit(LookupCriteria *somSelf);
typedef somTP_LookupCriteria_somInit *somTD_LookupCriteria_somInit;
typedef void   SOMLINK somTP_LookupCriteria_somDefaultInit(LookupCriteria *somSelf,
		somInitCtrl* ctrl);
typedef somTP_LookupCriteria_somDefaultInit *somTD_LookupCriteria_somDefaultInit;
typedef void   SOMLINK somTP_LookupCriteria_somDestruct(LookupCriteria *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_LookupCriteria_somDestruct *somTD_LookupCriteria_somDestruct;
typedef void   SOMLINK somTP_LookupCriteria_somDefaultCopyInit(LookupCriteria *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupCriteria_somDefaultCopyInit *somTD_LookupCriteria_somDefaultCopyInit;
typedef LookupCriteria*   SOMLINK somTP_LookupCriteria_somDefaultAssign(LookupCriteria *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupCriteria_somDefaultAssign *somTD_LookupCriteria_somDefaultAssign;
typedef void   SOMLINK somTP_LookupCriteria_somDefaultConstCopyInit(LookupCriteria *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupCriteria_somDefaultConstCopyInit *somTD_LookupCriteria_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_LookupCriteria_somDefaultVCopyInit(LookupCriteria *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupCriteria_somDefaultVCopyInit *somTD_LookupCriteria_somDefaultVCopyInit;
typedef void   SOMLINK somTP_LookupCriteria_somDefaultConstVCopyInit(LookupCriteria *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupCriteria_somDefaultConstVCopyInit *somTD_LookupCriteria_somDefaultConstVCopyInit;
typedef LookupCriteria*   SOMLINK somTP_LookupCriteria_somDefaultConstAssign(LookupCriteria *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupCriteria_somDefaultConstAssign *somTD_LookupCriteria_somDefaultConstAssign;
typedef LookupCriteria*   SOMLINK somTP_LookupCriteria_somDefaultVAssign(LookupCriteria *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupCriteria_somDefaultVAssign *somTD_LookupCriteria_somDefaultVAssign;
typedef LookupCriteria*   SOMLINK somTP_LookupCriteria_somDefaultConstVAssign(LookupCriteria *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupCriteria_somDefaultConstVAssign *somTD_LookupCriteria_somDefaultConstVAssign;
typedef void   SOMLINK somTP_LookupCriteria_somFree(LookupCriteria *somSelf);
typedef somTP_LookupCriteria_somFree *somTD_LookupCriteria_somFree;
typedef void   SOMLINK somTP_LookupCriteria_somUninit(LookupCriteria *somSelf);
typedef somTP_LookupCriteria_somUninit *somTD_LookupCriteria_somUninit;
typedef SOMClass*   SOMLINK somTP_LookupCriteria_somGetClass(LookupCriteria *somSelf);
typedef somTP_LookupCriteria_somGetClass *somTD_LookupCriteria_somGetClass;
typedef string   SOMLINK somTP_LookupCriteria_somGetClassName(LookupCriteria *somSelf);
typedef somTP_LookupCriteria_somGetClassName *somTD_LookupCriteria_somGetClassName;
typedef long   SOMLINK somTP_LookupCriteria_somGetSize(LookupCriteria *somSelf);
typedef somTP_LookupCriteria_somGetSize *somTD_LookupCriteria_somGetSize;
typedef boolean   SOMLINK somTP_LookupCriteria_somIsA(LookupCriteria *somSelf,
		SOMClass* aClassObj);
typedef somTP_LookupCriteria_somIsA *somTD_LookupCriteria_somIsA;
typedef boolean   SOMLINK somTP_LookupCriteria_somIsInstanceOf(LookupCriteria *somSelf,
		SOMClass* aClassObj);
typedef somTP_LookupCriteria_somIsInstanceOf *somTD_LookupCriteria_somIsInstanceOf;
typedef boolean   SOMLINK somTP_LookupCriteria_somRespondsTo(LookupCriteria *somSelf,
		somId mId);
typedef somTP_LookupCriteria_somRespondsTo *somTD_LookupCriteria_somRespondsTo;
typedef boolean   SOMLINK somTP_LookupCriteria_somDispatch(LookupCriteria *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_LookupCriteria_somDispatch *somTD_LookupCriteria_somDispatch;
typedef boolean   SOMLINK somTP_LookupCriteria_somClassDispatch(LookupCriteria *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_LookupCriteria_somClassDispatch *somTD_LookupCriteria_somClassDispatch;
typedef boolean   SOMLINK somTP_LookupCriteria_somCastObj(LookupCriteria *somSelf,
		SOMClass* cls);
typedef somTP_LookupCriteria_somCastObj *somTD_LookupCriteria_somCastObj;
typedef boolean   SOMLINK somTP_LookupCriteria_somResetObj(LookupCriteria *somSelf);
typedef somTP_LookupCriteria_somResetObj *somTD_LookupCriteria_somResetObj;
typedef SOMObject*   SOMLINK somTP_LookupCriteria_somPrintSelf(LookupCriteria *somSelf);
typedef somTP_LookupCriteria_somPrintSelf *somTD_LookupCriteria_somPrintSelf;
typedef void   SOMLINK somTP_LookupCriteria_somDumpSelf(LookupCriteria *somSelf,
		long level);
typedef somTP_LookupCriteria_somDumpSelf *somTD_LookupCriteria_somDumpSelf;
typedef void   SOMLINK somTP_LookupCriteria_somDumpSelfInt(LookupCriteria *somSelf,
		long level);
typedef somTP_LookupCriteria_somDumpSelfInt *somTD_LookupCriteria_somDumpSelfInt;
}

#endif /* LookupCriteria_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for LookupCriteria
 */
class LookupCriteria : public somf_MLinkable
{
public:

// LookupCriteria::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_LookupCriteria) LookupCriteriaNewClass(LookupCriteria_MajorVersion,LookupCriteria_MinorVersion);
   return (void*)
      SOM_Resolve(_LookupCriteria,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_LookupCriteria));
}

// LookupCriteria::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

LookupCriteria()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LookupCriteriaCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

LookupCriteria(LookupCriteria* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LookupCriteriaCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

LookupCriteria(const LookupCriteria* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LookupCriteriaCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

LookupCriteria(Environment *ev,string szDataName,string szOperator,string szValue) 
{
   withAWDDataNameOperatorandValue(ev,0,szDataName,szOperator,szValue);
}

LookupCriteria(Environment *ev,AWDData* pData,string szValue) 
{
   withAWDDataandValue(ev,0,pData,szValue);
}

LookupCriteria(Environment *ev,AWDData* pData,string szOperator,string szValue) 
{
   withAWDDataOperatorandValue(ev,0,pData,szOperator,szValue);
}

LookupCriteria(Environment *ev,LookupCriteria* pLookup) 
{
   withAWDCriteria(ev,0,pLookup);
}


/* method: dataname */
string   dataname(Environment *ev)
{
   return SOM_ResolveD(this,LookupCriteria,LookupCriteria,dataname)
	(this, ev);
}


/* method: mask */
string   mask(Environment *ev)
{
   return SOM_ResolveD(this,LookupCriteria,LookupCriteria,mask)
	(this, ev);
}


/* method: datavalue */
string   datavalue(Environment *ev)
{
   return SOM_ResolveD(this,LookupCriteria,LookupCriteria,datavalue)
	(this, ev);
}


/* method: datavaluewithmask */
string   datavaluewithmask(Environment *ev,
		string pszValue)
{
   return SOM_ResolveD(this,LookupCriteria,LookupCriteria,datavaluewithmask)
	(this, ev,pszValue);
}


/* method: comparator */
LookupCriteria_COMPARISON_OPERATOR   comparator(Environment *ev)
{
   return SOM_ResolveD(this,LookupCriteria,LookupCriteria,comparator)
	(this, ev);
}


/* method: comparatorasString */
string   comparatorasString(Environment *ev)
{
   return SOM_ResolveD(this,LookupCriteria,LookupCriteria,comparatorasString)
	(this, ev);
}


/* method: setAWDData */
void   setAWDData(Environment *ev,
		AWDData* pData)
{
   SOM_ResolveD(this,LookupCriteria,LookupCriteria,setAWDData)
	(this, ev,pData);
}


/* method: setAWDDataName */
void   setAWDDataName(Environment *ev,
		string szDataName)
{
   SOM_ResolveD(this,LookupCriteria,LookupCriteria,setAWDDataName)
	(this, ev,szDataName);
}


/* method: setComparator */
void   setComparator(Environment *ev,
		LookupCriteria_COMPARISON_OPERATOR eOperator)
{
   SOM_ResolveD(this,LookupCriteria,LookupCriteria,setComparator)
	(this, ev,eOperator);
}


/* method: setComparatorwithString */
void   setComparatorwithString(Environment *ev,
		string szComparator)
{
   SOM_ResolveD(this,LookupCriteria,LookupCriteria,setComparatorwithString)
	(this, ev,szComparator);
}


/* method: setDatavalue */
void   setDatavalue(Environment *ev,
		string szDatavalue)
{
   SOM_ResolveD(this,LookupCriteria,LookupCriteria,setDatavalue)
	(this, ev,szDatavalue);
}


/* method: asLookupString */
string   asLookupString(Environment *ev)
{
   return SOM_ResolveD(this,LookupCriteria,LookupCriteria,asLookupString)
	(this, ev);
}


/* method: getData */
AWDData*   getData(Environment *ev)
{
   return SOM_ResolveD(this,LookupCriteria,LookupCriteria,getData)
	(this, ev);
}


/* method: isProcessed */
boolean   isProcessed(Environment *ev)
{
   return SOM_ResolveD(this,LookupCriteria,LookupCriteria,isProcessed)
	(this, ev);
}


/* method: setProcessed */
void   setProcessed(Environment *ev,
		boolean fProcessed)
{
   SOM_ResolveD(this,LookupCriteria,LookupCriteria,setProcessed)
	(this, ev,fProcessed);
}


/* method: hasWildcard */
boolean   hasWildcard(Environment *ev)
{
   return SOM_ResolveD(this,LookupCriteria,LookupCriteria,hasWildcard)
	(this, ev);
}


/* method: setWildcard */
void   setWildcard(Environment *ev)
{
   SOM_ResolveD(this,LookupCriteria,LookupCriteria,setWildcard)
	(this, ev);
}


/* method: isValidValue */
boolean   isValidValue(Environment *ev)
{
   return SOM_ResolveD(this,LookupCriteria,LookupCriteria,isValidValue)
	(this, ev);
}


/* method: formatWildValue */
void   formatWildValue(Environment *ev)
{
   SOM_ResolveD(this,LookupCriteria,LookupCriteria,formatWildValue)
	(this, ev);
}


/* initializer method: withAWDDataNameOperatorandValue */
void   withAWDDataNameOperatorandValue(Environment *ev,
		somInitCtrl* ctrl,
		string szDataName,
		string szOperator,
		string szValue)
{
   SOM_ResolveD(this,LookupCriteria,LookupCriteria,withAWDDataNameOperatorandValue)
	(this, ev,ctrl,szDataName,szOperator,szValue);
}


/* initializer method: withAWDDataandValue */
void   withAWDDataandValue(Environment *ev,
		somInitCtrl* ctrl,
		AWDData* pData,
		string szValue)
{
   SOM_ResolveD(this,LookupCriteria,LookupCriteria,withAWDDataandValue)
	(this, ev,ctrl,pData,szValue);
}


/* initializer method: withAWDDataOperatorandValue */
void   withAWDDataOperatorandValue(Environment *ev,
		somInitCtrl* ctrl,
		AWDData* pData,
		string szOperator,
		string szValue)
{
   SOM_ResolveD(this,LookupCriteria,LookupCriteria,withAWDDataOperatorandValue)
	(this, ev,ctrl,pData,szOperator,szValue);
}


/* initializer method: withAWDCriteria */
void   withAWDCriteria(Environment *ev,
		somInitCtrl* ctrl,
		LookupCriteria* pLookup)
{
   SOM_ResolveD(this,LookupCriteria,LookupCriteria,withAWDCriteria)
	(this, ev,ctrl,pLookup);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,LookupCriteria,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,LookupCriteria,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,LookupCriteria,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,LookupCriteria,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,LookupCriteria,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,LookupCriteria,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,LookupCriteria,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,LookupCriteria,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LookupCriteria,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
LookupCriteria*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LookupCriteria,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LookupCriteria,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LookupCriteria,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LookupCriteria,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
LookupCriteria*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LookupCriteria,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
LookupCriteria*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LookupCriteria,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
LookupCriteria*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LookupCriteria,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,LookupCriteria,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,LookupCriteria,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,LookupCriteria,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,LookupCriteria,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,LookupCriteria,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,LookupCriteria,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,LookupCriteria,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,LookupCriteria,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   LookupCriteria_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,LookupCriteria,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,LookupCriteria,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   LookupCriteria_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,LookupCriteria,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,LookupCriteria,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,LookupCriteria,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,LookupCriteria,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,LookupCriteria,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,LookupCriteria,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,LookupCriteria,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* LookupCriteria */



#endif       /* SOM_LookupCriteria_xh */

#ifndef SOM_LookupServiceAid_xh
#define SOM_LookupServiceAid_xh

class LookupServiceAid;

#define LookupServiceAid_MajorVersion 2
#define LookupServiceAid_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <somobj.xh>  
#include <awdtree.xh> 
#include <acbl0024.xh>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_BaseServiceAid_xh
#include <baseaid.xh>
#endif

#ifndef LookupServiceAid_API
#define LookupServiceAid_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
typedef unsigned long LookupServiceAid_LOOKUP_OPTION;
#define LookupServiceAid_ALWAYS 1UL
#define LookupServiceAid_NEVER 2UL
#define LookupServiceAid_SOMETIMES 3UL
#define LookupServiceAid_USERCHOICE 4UL
typedef unsigned long LookupServiceAid_LOOKUP_ORDER;
#define LookupServiceAid_ASCENDING 1UL
#define LookupServiceAid_DESCENDING 2UL

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_LOOKUP_OPTION
    #ifdef LOOKUP_OPTION
        #undef LOOKUP_OPTION
        #define SOMTGD_LOOKUP_OPTION 1
    #else
        #define LOOKUP_OPTION LookupServiceAid_LOOKUP_OPTION
    #endif /* LOOKUP_OPTION */
#endif /* SOMTGD_LOOKUP_OPTION */
#ifndef SOMTGD_LOOKUP_ORDER
    #ifdef LOOKUP_ORDER
        #undef LOOKUP_ORDER
        #define SOMTGD_LOOKUP_ORDER 1
    #else
        #define LOOKUP_ORDER LookupServiceAid_LOOKUP_ORDER
    #endif /* LOOKUP_ORDER */
#endif /* SOMTGD_LOOKUP_ORDER */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the LookupServiceAid Class */
SOMEXTERN
#if (defined(SOM_Module_lkupaid_Source) || defined(LookupServiceAid_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_LookupServiceAid))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK LookupServiceAidNewClass(
		integer4,
		integer4 );

/* The API to the LookupServiceAid class object, and the methods it introduces. */
SOMEXTERN struct LookupServiceAidClassDataStructure {
	SOMClass *classObject;
	somMToken AWDFields;
	somMToken AWDFolderFields;
	somMToken AWDSourceFields;
	somMToken AWDWorkFields;
	somMToken LOBFields;
	somMToken LOBFolderFields;
	somMToken LOBSourceFields;
	somMToken LOBWorkFields;
	somMToken getDictionary;
	somMToken criteriaList;
	somMToken orderByList;
	somMToken setOrder;
	somMToken findOrderNode;
	somMToken addOrderbyName;
	somMToken addOrderbyData;
	somMToken removeOrderbyNumber;
	somMToken removeOrderbyName;
	somMToken reOrder;
	somMToken lookupType;
	somMToken lookupMethod;
	somMToken setTree;
	somMToken processLookup;
	somMToken more;
	somMToken isMore;
	somMToken lookupOption;
	somMToken setLookupOption;
	somMToken setLookupType;
	somMToken setLookupMethod;
	somMToken useSQL;
	somMToken resolveGroupSubFields;
	somMToken resolveLkupDateTag;
	somMToken SQLStatement;
	somMToken NonSQLStatementasStructure;
	somMToken ProcessOutputCondition;
	somMToken withFileName;
	somMToken withLkupAid;
	somMToken removeBlankFields;
	somMToken initialize;
}
#if !(defined(SOM_Module_lkupaid_Source) || defined(LookupServiceAid_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_LookupServiceAid))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK LookupServiceAidClassData;
#define _LookupServiceAid LookupServiceAidClassData.classObject

/* The API to parentMtabs for LookupServiceAid, and the instance data it introduces. */
SOMEXTERN struct LookupServiceAidCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_lkupaid_Source) || defined(LookupServiceAid_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_LookupServiceAid))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK LookupServiceAidCClassData;

/*
 * -- Typedefs for LookupServiceAid Method Procedures
 */
extern "C" {
typedef FieldIterator*   SOMLINK somTP_LookupServiceAid_AWDFields(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_AWDFields *somTD_LookupServiceAid_AWDFields;
typedef FieldIterator*   SOMLINK somTP_LookupServiceAid_AWDFolderFields(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_AWDFolderFields *somTD_LookupServiceAid_AWDFolderFields;
typedef FieldIterator*   SOMLINK somTP_LookupServiceAid_AWDSourceFields(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_AWDSourceFields *somTD_LookupServiceAid_AWDSourceFields;
typedef FieldIterator*   SOMLINK somTP_LookupServiceAid_AWDWorkFields(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_AWDWorkFields *somTD_LookupServiceAid_AWDWorkFields;
typedef FieldIterator*   SOMLINK somTP_LookupServiceAid_LOBFields(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_LOBFields *somTD_LookupServiceAid_LOBFields;
typedef FieldIterator*   SOMLINK somTP_LookupServiceAid_LOBFolderFields(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_LOBFolderFields *somTD_LookupServiceAid_LOBFolderFields;
typedef FieldIterator*   SOMLINK somTP_LookupServiceAid_LOBSourceFields(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_LOBSourceFields *somTD_LookupServiceAid_LOBSourceFields;
typedef FieldIterator*   SOMLINK somTP_LookupServiceAid_LOBWorkFields(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_LOBWorkFields *somTD_LookupServiceAid_LOBWorkFields;
typedef AWDDictionary*   SOMLINK somTP_LookupServiceAid_getDictionary(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_getDictionary *somTD_LookupServiceAid_getDictionary;
typedef SOMList*   SOMLINK somTP_LookupServiceAid_criteriaList(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_criteriaList *somTD_LookupServiceAid_criteriaList;
typedef SOMList*   SOMLINK somTP_LookupServiceAid_orderByList(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_orderByList *somTD_LookupServiceAid_orderByList;
typedef void   SOMLINK somTP_LookupServiceAid_setOrder(LookupServiceAid *somSelf, Environment *ev,
		LookupServiceAid_LOOKUP_ORDER eOrder);
typedef somTP_LookupServiceAid_setOrder *somTD_LookupServiceAid_setOrder;
typedef boolean   SOMLINK somTP_LookupServiceAid_findOrderNode(LookupServiceAid *somSelf, Environment *ev,
		string szOrderName);
typedef somTP_LookupServiceAid_findOrderNode *somTD_LookupServiceAid_findOrderNode;
typedef unsigned long   SOMLINK somTP_LookupServiceAid_addOrderbyName(LookupServiceAid *somSelf, Environment *ev,
		string szOrderName);
typedef somTP_LookupServiceAid_addOrderbyName *somTD_LookupServiceAid_addOrderbyName;
typedef unsigned long   SOMLINK somTP_LookupServiceAid_addOrderbyData(LookupServiceAid *somSelf, Environment *ev,
		AWDData* pData);
typedef somTP_LookupServiceAid_addOrderbyData *somTD_LookupServiceAid_addOrderbyData;
typedef void   SOMLINK somTP_LookupServiceAid_removeOrderbyNumber(LookupServiceAid *somSelf, Environment *ev,
		unsigned long ulOrderNum);
typedef somTP_LookupServiceAid_removeOrderbyNumber *somTD_LookupServiceAid_removeOrderbyNumber;
typedef void   SOMLINK somTP_LookupServiceAid_removeOrderbyName(LookupServiceAid *somSelf, Environment *ev,
		string szOrderName);
typedef somTP_LookupServiceAid_removeOrderbyName *somTD_LookupServiceAid_removeOrderbyName;
typedef void   SOMLINK somTP_LookupServiceAid_reOrder(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_reOrder *somTD_LookupServiceAid_reOrder;
typedef string   SOMLINK somTP_LookupServiceAid_SQLStatement(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_SQLStatement *somTD_LookupServiceAid_SQLStatement;
typedef ACBL0024_PCRITERIA   SOMLINK somTP_LookupServiceAid_NonSQLStatementasStructure(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_NonSQLStatementasStructure *somTD_LookupServiceAid_NonSQLStatementasStructure;
typedef void   SOMLINK somTP_LookupServiceAid_initialize(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_initialize *somTD_LookupServiceAid_initialize;
typedef void   SOMLINK somTP_LookupServiceAid_ProcessOutputCondition(LookupServiceAid *somSelf, Environment *ev,
		LookupCriteria* pCriteria,
		string szTableName,
		unsigned long ulIndex);
typedef somTP_LookupServiceAid_ProcessOutputCondition *somTD_LookupServiceAid_ProcessOutputCondition;
typedef boolean   SOMLINK somTP_LookupServiceAid_useSQL(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_useSQL *somTD_LookupServiceAid_useSQL;
typedef void   SOMLINK somTP_LookupServiceAid_resolveGroupSubFields(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_resolveGroupSubFields *somTD_LookupServiceAid_resolveGroupSubFields;
typedef void   SOMLINK somTP_LookupServiceAid_resolveLkupDateTag(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_resolveLkupDateTag *somTD_LookupServiceAid_resolveLkupDateTag;
typedef void   SOMLINK somTP_LookupServiceAid_removeBlankFields(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_removeBlankFields *somTD_LookupServiceAid_removeBlankFields;
typedef void   SOMLINK somTP_LookupServiceAid_setTree(LookupServiceAid *somSelf, Environment *ev,
		AWDTree* pTree);
typedef somTP_LookupServiceAid_setTree *somTD_LookupServiceAid_setTree;
typedef AWDTree*   SOMLINK somTP_LookupServiceAid_processLookup(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_processLookup *somTD_LookupServiceAid_processLookup;
typedef AWDTree*   SOMLINK somTP_LookupServiceAid_more(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_more *somTD_LookupServiceAid_more;
typedef boolean   SOMLINK somTP_LookupServiceAid_isMore(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_isMore *somTD_LookupServiceAid_isMore;
typedef FieldIterator_LOOKUP_TYPE   SOMLINK somTP_LookupServiceAid_lookupType(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_lookupType *somTD_LookupServiceAid_lookupType;
typedef void   SOMLINK somTP_LookupServiceAid_setLookupType(LookupServiceAid *somSelf, Environment *ev,
		FieldIterator_LOOKUP_TYPE eLookupType);
typedef somTP_LookupServiceAid_setLookupType *somTD_LookupServiceAid_setLookupType;
typedef LookupServiceAid_LOOKUP_OPTION   SOMLINK somTP_LookupServiceAid_lookupOption(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_lookupOption *somTD_LookupServiceAid_lookupOption;
typedef void   SOMLINK somTP_LookupServiceAid_setLookupOption(LookupServiceAid *somSelf, Environment *ev,
		LookupServiceAid_LOOKUP_OPTION eLookupOption);
typedef somTP_LookupServiceAid_setLookupOption *somTD_LookupServiceAid_setLookupOption;
typedef boolean   SOMLINK somTP_LookupServiceAid_lookupMethod(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_lookupMethod *somTD_LookupServiceAid_lookupMethod;
typedef void   SOMLINK somTP_LookupServiceAid_setLookupMethod(LookupServiceAid *somSelf, Environment *ev,
		boolean fUseSQL);
typedef somTP_LookupServiceAid_setLookupMethod *somTD_LookupServiceAid_setLookupMethod;
typedef void   SOMLINK somTP_LookupServiceAid_withFileName(LookupServiceAid *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string szFileName);
typedef somTP_LookupServiceAid_withFileName *somTD_LookupServiceAid_withFileName;
typedef void   SOMLINK somTP_LookupServiceAid_withLkupAid(LookupServiceAid *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		LookupServiceAid* pLkupAid);
typedef somTP_LookupServiceAid_withLkupAid *somTD_LookupServiceAid_withLkupAid;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_LookupServiceAid_setReceiver(LookupServiceAid *somSelf, Environment *ev,
		AWDBase* pAwdObj);
typedef somTP_LookupServiceAid_setReceiver *somTD_LookupServiceAid_setReceiver;
typedef AWDBase*   SOMLINK somTP_LookupServiceAid_receiver(LookupServiceAid *somSelf, Environment *ev);
typedef somTP_LookupServiceAid_receiver *somTD_LookupServiceAid_receiver;
typedef void   SOMLINK somTP_LookupServiceAid_somDefaultInit(LookupServiceAid *somSelf,
		somInitCtrl* ctrl);
typedef somTP_LookupServiceAid_somDefaultInit *somTD_LookupServiceAid_somDefaultInit;
typedef void   SOMLINK somTP_LookupServiceAid_somDestruct(LookupServiceAid *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_LookupServiceAid_somDestruct *somTD_LookupServiceAid_somDestruct;
typedef void   SOMLINK somTP_LookupServiceAid_somDefaultCopyInit(LookupServiceAid *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupServiceAid_somDefaultCopyInit *somTD_LookupServiceAid_somDefaultCopyInit;
typedef LookupServiceAid*   SOMLINK somTP_LookupServiceAid_somDefaultAssign(LookupServiceAid *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupServiceAid_somDefaultAssign *somTD_LookupServiceAid_somDefaultAssign;
typedef void   SOMLINK somTP_LookupServiceAid_somDefaultConstCopyInit(LookupServiceAid *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupServiceAid_somDefaultConstCopyInit *somTD_LookupServiceAid_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_LookupServiceAid_somDefaultVCopyInit(LookupServiceAid *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupServiceAid_somDefaultVCopyInit *somTD_LookupServiceAid_somDefaultVCopyInit;
typedef void   SOMLINK somTP_LookupServiceAid_somDefaultConstVCopyInit(LookupServiceAid *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupServiceAid_somDefaultConstVCopyInit *somTD_LookupServiceAid_somDefaultConstVCopyInit;
typedef LookupServiceAid*   SOMLINK somTP_LookupServiceAid_somDefaultConstAssign(LookupServiceAid *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupServiceAid_somDefaultConstAssign *somTD_LookupServiceAid_somDefaultConstAssign;
typedef LookupServiceAid*   SOMLINK somTP_LookupServiceAid_somDefaultVAssign(LookupServiceAid *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupServiceAid_somDefaultVAssign *somTD_LookupServiceAid_somDefaultVAssign;
typedef LookupServiceAid*   SOMLINK somTP_LookupServiceAid_somDefaultConstVAssign(LookupServiceAid *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_LookupServiceAid_somDefaultConstVAssign *somTD_LookupServiceAid_somDefaultConstVAssign;
typedef void   SOMLINK somTP_LookupServiceAid_somInit(LookupServiceAid *somSelf);
typedef somTP_LookupServiceAid_somInit *somTD_LookupServiceAid_somInit;
typedef void   SOMLINK somTP_LookupServiceAid_somFree(LookupServiceAid *somSelf);
typedef somTP_LookupServiceAid_somFree *somTD_LookupServiceAid_somFree;
typedef void   SOMLINK somTP_LookupServiceAid_somUninit(LookupServiceAid *somSelf);
typedef somTP_LookupServiceAid_somUninit *somTD_LookupServiceAid_somUninit;
typedef SOMClass*   SOMLINK somTP_LookupServiceAid_somGetClass(LookupServiceAid *somSelf);
typedef somTP_LookupServiceAid_somGetClass *somTD_LookupServiceAid_somGetClass;
typedef string   SOMLINK somTP_LookupServiceAid_somGetClassName(LookupServiceAid *somSelf);
typedef somTP_LookupServiceAid_somGetClassName *somTD_LookupServiceAid_somGetClassName;
typedef long   SOMLINK somTP_LookupServiceAid_somGetSize(LookupServiceAid *somSelf);
typedef somTP_LookupServiceAid_somGetSize *somTD_LookupServiceAid_somGetSize;
typedef boolean   SOMLINK somTP_LookupServiceAid_somIsA(LookupServiceAid *somSelf,
		SOMClass* aClassObj);
typedef somTP_LookupServiceAid_somIsA *somTD_LookupServiceAid_somIsA;
typedef boolean   SOMLINK somTP_LookupServiceAid_somIsInstanceOf(LookupServiceAid *somSelf,
		SOMClass* aClassObj);
typedef somTP_LookupServiceAid_somIsInstanceOf *somTD_LookupServiceAid_somIsInstanceOf;
typedef boolean   SOMLINK somTP_LookupServiceAid_somRespondsTo(LookupServiceAid *somSelf,
		somId mId);
typedef somTP_LookupServiceAid_somRespondsTo *somTD_LookupServiceAid_somRespondsTo;
typedef boolean   SOMLINK somTP_LookupServiceAid_somDispatch(LookupServiceAid *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_LookupServiceAid_somDispatch *somTD_LookupServiceAid_somDispatch;
typedef boolean   SOMLINK somTP_LookupServiceAid_somClassDispatch(LookupServiceAid *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_LookupServiceAid_somClassDispatch *somTD_LookupServiceAid_somClassDispatch;
typedef boolean   SOMLINK somTP_LookupServiceAid_somCastObj(LookupServiceAid *somSelf,
		SOMClass* cls);
typedef somTP_LookupServiceAid_somCastObj *somTD_LookupServiceAid_somCastObj;
typedef boolean   SOMLINK somTP_LookupServiceAid_somResetObj(LookupServiceAid *somSelf);
typedef somTP_LookupServiceAid_somResetObj *somTD_LookupServiceAid_somResetObj;
typedef SOMObject*   SOMLINK somTP_LookupServiceAid_somPrintSelf(LookupServiceAid *somSelf);
typedef somTP_LookupServiceAid_somPrintSelf *somTD_LookupServiceAid_somPrintSelf;
typedef void   SOMLINK somTP_LookupServiceAid_somDumpSelf(LookupServiceAid *somSelf,
		long level);
typedef somTP_LookupServiceAid_somDumpSelf *somTD_LookupServiceAid_somDumpSelf;
typedef void   SOMLINK somTP_LookupServiceAid_somDumpSelfInt(LookupServiceAid *somSelf,
		long level);
typedef somTP_LookupServiceAid_somDumpSelfInt *somTD_LookupServiceAid_somDumpSelfInt;
}

#endif /* LookupServiceAid_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for LookupServiceAid
 */
class LookupServiceAid : public BaseServiceAid
{
public:

// LookupServiceAid::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_LookupServiceAid) LookupServiceAidNewClass(LookupServiceAid_MajorVersion,LookupServiceAid_MinorVersion);
   return (void*)
      SOM_Resolve(_LookupServiceAid,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_LookupServiceAid));
}

// LookupServiceAid::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

LookupServiceAid()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LookupServiceAidCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

LookupServiceAid(LookupServiceAid* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LookupServiceAidCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

LookupServiceAid(const LookupServiceAid* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LookupServiceAidCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

LookupServiceAid(Environment *ev,string szFileName) 
{
   withFileName(ev,0,szFileName);
}

LookupServiceAid(Environment *ev,LookupServiceAid* pLkupAid) 
{
   withLkupAid(ev,0,pLkupAid);
}


/* method: AWDFields */
FieldIterator*   AWDFields(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,AWDFields)
	(this, ev);
}


/* method: AWDFolderFields */
FieldIterator*   AWDFolderFields(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,AWDFolderFields)
	(this, ev);
}


/* method: AWDSourceFields */
FieldIterator*   AWDSourceFields(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,AWDSourceFields)
	(this, ev);
}


/* method: AWDWorkFields */
FieldIterator*   AWDWorkFields(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,AWDWorkFields)
	(this, ev);
}


/* method: LOBFields */
FieldIterator*   LOBFields(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,LOBFields)
	(this, ev);
}


/* method: LOBFolderFields */
FieldIterator*   LOBFolderFields(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,LOBFolderFields)
	(this, ev);
}


/* method: LOBSourceFields */
FieldIterator*   LOBSourceFields(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,LOBSourceFields)
	(this, ev);
}


/* method: LOBWorkFields */
FieldIterator*   LOBWorkFields(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,LOBWorkFields)
	(this, ev);
}


/* method: getDictionary */
AWDDictionary*   getDictionary(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,getDictionary)
	(this, ev);
}


/* method: criteriaList */
SOMList*   criteriaList(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,criteriaList)
	(this, ev);
}


/* method: orderByList */
SOMList*   orderByList(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,orderByList)
	(this, ev);
}


/* method: setOrder */
void   setOrder(Environment *ev,
		LookupServiceAid_LOOKUP_ORDER eOrder)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,setOrder)
	(this, ev,eOrder);
}


/* method: findOrderNode */
boolean   findOrderNode(Environment *ev,
		string szOrderName)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,findOrderNode)
	(this, ev,szOrderName);
}


/* method: addOrderbyName */
unsigned long   addOrderbyName(Environment *ev,
		string szOrderName)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,addOrderbyName)
	(this, ev,szOrderName);
}


/* method: addOrderbyData */
unsigned long   addOrderbyData(Environment *ev,
		AWDData* pData)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,addOrderbyData)
	(this, ev,pData);
}


/* method: removeOrderbyNumber */
void   removeOrderbyNumber(Environment *ev,
		unsigned long ulOrderNum)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,removeOrderbyNumber)
	(this, ev,ulOrderNum);
}


/* method: removeOrderbyName */
void   removeOrderbyName(Environment *ev,
		string szOrderName)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,removeOrderbyName)
	(this, ev,szOrderName);
}


/* method: reOrder */
void   reOrder(Environment *ev)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,reOrder)
	(this, ev);
}


/* method: SQLStatement */
string   SQLStatement(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,SQLStatement)
	(this, ev);
}


/* method: NonSQLStatementasStructure */
ACBL0024_PCRITERIA   NonSQLStatementasStructure(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,NonSQLStatementasStructure)
	(this, ev);
}


/* method: initialize */
void   initialize(Environment *ev)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,initialize)
	(this, ev);
}


/* method: ProcessOutputCondition */
void   ProcessOutputCondition(Environment *ev,
		LookupCriteria* pCriteria,
		string szTableName,
		unsigned long ulIndex)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,ProcessOutputCondition)
	(this, ev,pCriteria,szTableName,ulIndex);
}


/* method: useSQL */
boolean   useSQL(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,useSQL)
	(this, ev);
}


/* method: resolveGroupSubFields */
void   resolveGroupSubFields(Environment *ev)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,resolveGroupSubFields)
	(this, ev);
}


/* method: resolveLkupDateTag */
void   resolveLkupDateTag(Environment *ev)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,resolveLkupDateTag)
	(this, ev);
}


/* method: removeBlankFields */
void   removeBlankFields(Environment *ev)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,removeBlankFields)
	(this, ev);
}


/* method: setTree */
void   setTree(Environment *ev,
		AWDTree* pTree)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,setTree)
	(this, ev,pTree);
}


/* method: processLookup */
AWDTree*   processLookup(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,processLookup)
	(this, ev);
}


/* method: more */
AWDTree*   more(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,more)
	(this, ev);
}


/* method: isMore */
boolean   isMore(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,isMore)
	(this, ev);
}


/* method: lookupType */
FieldIterator_LOOKUP_TYPE   lookupType(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,lookupType)
	(this, ev);
}


/* method: setLookupType */
void   setLookupType(Environment *ev,
		FieldIterator_LOOKUP_TYPE eLookupType)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,setLookupType)
	(this, ev,eLookupType);
}


/* method: lookupOption */
LookupServiceAid_LOOKUP_OPTION   lookupOption(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,lookupOption)
	(this, ev);
}


/* method: setLookupOption */
void   setLookupOption(Environment *ev,
		LookupServiceAid_LOOKUP_OPTION eLookupOption)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,setLookupOption)
	(this, ev,eLookupOption);
}


/* method: lookupMethod */
boolean   lookupMethod(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,lookupMethod)
	(this, ev);
}


/* method: setLookupMethod */
void   setLookupMethod(Environment *ev,
		boolean fUseSQL)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,setLookupMethod)
	(this, ev,fUseSQL);
}


/* initializer method: withFileName */
void   withFileName(Environment *ev,
		somInitCtrl* ctrl,
		string szFileName)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,withFileName)
	(this, ev,ctrl,szFileName);
}


/* initializer method: withLkupAid */
void   withLkupAid(Environment *ev,
		somInitCtrl* ctrl,
		LookupServiceAid* pLkupAid)
{
   SOM_ResolveD(this,LookupServiceAid,LookupServiceAid,withLkupAid)
	(this, ev,ctrl,pLkupAid);
}


/*
 * Reintroduce inherited methods
 */

/* method: setReceiver */
void   setReceiver(Environment *ev,
		AWDBase* pAwdObj)
{
   SOM_ResolveD(this,LookupServiceAid,BaseServiceAid,setReceiver)
	(this, ev,pAwdObj);
}


/* method: receiver */
AWDBase*   receiver(Environment *ev)
{
   return SOM_ResolveD(this,LookupServiceAid,BaseServiceAid,receiver)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,LookupServiceAid,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,LookupServiceAid,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LookupServiceAid,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
LookupServiceAid*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LookupServiceAid,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LookupServiceAid,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LookupServiceAid,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LookupServiceAid,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
LookupServiceAid*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LookupServiceAid,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
LookupServiceAid*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LookupServiceAid,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
LookupServiceAid*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LookupServiceAid,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,LookupServiceAid,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,LookupServiceAid,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,LookupServiceAid,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,LookupServiceAid,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,LookupServiceAid,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,LookupServiceAid,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,LookupServiceAid,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,LookupServiceAid,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,LookupServiceAid,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   LookupServiceAid_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,LookupServiceAid,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,LookupServiceAid,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   LookupServiceAid_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,LookupServiceAid,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,LookupServiceAid,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,LookupServiceAid,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,LookupServiceAid,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,LookupServiceAid,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,LookupServiceAid,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,LookupServiceAid,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* LookupServiceAid */



#endif       /* SOM_LookupServiceAid_xh */
