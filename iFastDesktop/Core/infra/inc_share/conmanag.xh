
#ifndef SOM_AWDConnectionManager_xh
#define SOM_AWDConnectionManager_xh

class AWDConnectionManager;

#define AWDConnectionManager_MajorVersion 0
#define AWDConnectionManager_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <view.xh>
#include <connect.xh>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef AWDConnectionManager_API
#define AWDConnectionManager_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class somf_MLinkable;
class AWDConnection;
class AWDException;
class ViewList;
class AWDMutexSem;
class AWDVisitor;
class UserList;
class ConnectionList;
class ConnectionUser;

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDConnectionManager Class */
SOMEXTERN
#if (defined(SOM_Module_conmanag_Source) || defined(AWDConnectionManager_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDConnectionManager))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDConnectionManagerNewClass(
		integer4,
		integer4 );

/* The API to the AWDConnectionManager class object, and the methods it introduces. */
SOMEXTERN struct AWDConnectionManagerClassDataStructure {
	SOMClass *classObject;
	somMToken setDefaultConnection;
	somMToken defaultConnection;
	somMToken addConnection;
	somMToken registerByName;
	somMToken registerByConnection;
	somMToken registerByBestName;
	somMToken deregisterUser;
	somMToken setDefaultView;
	somMToken defaultView;
	somMToken getConnection;
	somMToken removeConnection;
	somMToken removeConnections;
	somMToken setOwner;
}
#if !(defined(SOM_Module_conmanag_Source) || defined(AWDConnectionManager_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDConnectionManager))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDConnectionManagerClassData;
#define _AWDConnectionManager AWDConnectionManagerClassData.classObject

/* The API to parentMtabs for AWDConnectionManager, and the instance data it introduces. */
SOMEXTERN struct AWDConnectionManagerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_conmanag_Source) || defined(AWDConnectionManager_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDConnectionManager))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDConnectionManagerCClassData;

/*
 * -- Typedefs for AWDConnectionManager Method Procedures
 */
extern "C" {
typedef void   SOMLINK somTP_AWDConnectionManager_setDefaultConnection(AWDConnectionManager *somSelf, Environment *ev,
		AWDConnection* conObj);
typedef somTP_AWDConnectionManager_setDefaultConnection *somTD_AWDConnectionManager_setDefaultConnection;
typedef AWDConnection*   SOMLINK somTP_AWDConnectionManager_defaultConnection(AWDConnectionManager *somSelf, Environment *ev);
typedef somTP_AWDConnectionManager_defaultConnection *somTD_AWDConnectionManager_defaultConnection;
typedef boolean   SOMLINK somTP_AWDConnectionManager_addConnection(AWDConnectionManager *somSelf, Environment *ev,
		AWDConnection* conObj);
typedef somTP_AWDConnectionManager_addConnection *somTD_AWDConnectionManager_addConnection;
typedef boolean   SOMLINK somTP_AWDConnectionManager_registerByName(AWDConnectionManager *somSelf, Environment *ev,
		string conName);
typedef somTP_AWDConnectionManager_registerByName *somTD_AWDConnectionManager_registerByName;
typedef boolean   SOMLINK somTP_AWDConnectionManager_registerByConnection(AWDConnectionManager *somSelf, Environment *ev,
		AWDConnection* conObj);
typedef somTP_AWDConnectionManager_registerByConnection *somTD_AWDConnectionManager_registerByConnection;
typedef boolean   SOMLINK somTP_AWDConnectionManager_registerByBestName(AWDConnectionManager *somSelf, Environment *ev,
		string conName);
typedef somTP_AWDConnectionManager_registerByBestName *somTD_AWDConnectionManager_registerByBestName;
typedef boolean   SOMLINK somTP_AWDConnectionManager_deregisterUser(AWDConnectionManager *somSelf, Environment *ev);
typedef somTP_AWDConnectionManager_deregisterUser *somTD_AWDConnectionManager_deregisterUser;
typedef AWDConnection*   SOMLINK somTP_AWDConnectionManager_getConnection(AWDConnectionManager *somSelf, Environment *ev);
typedef somTP_AWDConnectionManager_getConnection *somTD_AWDConnectionManager_getConnection;
typedef boolean   SOMLINK somTP_AWDConnectionManager_removeConnection(AWDConnectionManager *somSelf, Environment *ev,
		AWDConnection* con);
typedef somTP_AWDConnectionManager_removeConnection *somTD_AWDConnectionManager_removeConnection;
typedef boolean   SOMLINK somTP_AWDConnectionManager_removeConnections(AWDConnectionManager *somSelf, Environment *ev);
typedef somTP_AWDConnectionManager_removeConnections *somTD_AWDConnectionManager_removeConnections;
typedef boolean   SOMLINK somTP_AWDConnectionManager_setOwner(AWDConnectionManager *somSelf, Environment *ev,
		AWDConnection* con);
typedef somTP_AWDConnectionManager_setOwner *somTD_AWDConnectionManager_setOwner;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_AWDConnectionManager_somDefaultInit(AWDConnectionManager *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDConnectionManager_somDefaultInit *somTD_AWDConnectionManager_somDefaultInit;
typedef void   SOMLINK somTP_AWDConnectionManager_somDestruct(AWDConnectionManager *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDConnectionManager_somDestruct *somTD_AWDConnectionManager_somDestruct;
typedef void   SOMLINK somTP_AWDConnectionManager_somDefaultCopyInit(AWDConnectionManager *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnectionManager_somDefaultCopyInit *somTD_AWDConnectionManager_somDefaultCopyInit;
typedef AWDConnectionManager*   SOMLINK somTP_AWDConnectionManager_somDefaultAssign(AWDConnectionManager *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnectionManager_somDefaultAssign *somTD_AWDConnectionManager_somDefaultAssign;
typedef void   SOMLINK somTP_AWDConnectionManager_somDefaultConstCopyInit(AWDConnectionManager *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnectionManager_somDefaultConstCopyInit *somTD_AWDConnectionManager_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDConnectionManager_somDefaultVCopyInit(AWDConnectionManager *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnectionManager_somDefaultVCopyInit *somTD_AWDConnectionManager_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDConnectionManager_somDefaultConstVCopyInit(AWDConnectionManager *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnectionManager_somDefaultConstVCopyInit *somTD_AWDConnectionManager_somDefaultConstVCopyInit;
typedef AWDConnectionManager*   SOMLINK somTP_AWDConnectionManager_somDefaultConstAssign(AWDConnectionManager *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnectionManager_somDefaultConstAssign *somTD_AWDConnectionManager_somDefaultConstAssign;
typedef AWDConnectionManager*   SOMLINK somTP_AWDConnectionManager_somDefaultVAssign(AWDConnectionManager *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnectionManager_somDefaultVAssign *somTD_AWDConnectionManager_somDefaultVAssign;
typedef AWDConnectionManager*   SOMLINK somTP_AWDConnectionManager_somDefaultConstVAssign(AWDConnectionManager *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDConnectionManager_somDefaultConstVAssign *somTD_AWDConnectionManager_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDConnectionManager_somInit(AWDConnectionManager *somSelf);
typedef somTP_AWDConnectionManager_somInit *somTD_AWDConnectionManager_somInit;
typedef void   SOMLINK somTP_AWDConnectionManager_somFree(AWDConnectionManager *somSelf);
typedef somTP_AWDConnectionManager_somFree *somTD_AWDConnectionManager_somFree;
typedef void   SOMLINK somTP_AWDConnectionManager_somUninit(AWDConnectionManager *somSelf);
typedef somTP_AWDConnectionManager_somUninit *somTD_AWDConnectionManager_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDConnectionManager_somGetClass(AWDConnectionManager *somSelf);
typedef somTP_AWDConnectionManager_somGetClass *somTD_AWDConnectionManager_somGetClass;
typedef string   SOMLINK somTP_AWDConnectionManager_somGetClassName(AWDConnectionManager *somSelf);
typedef somTP_AWDConnectionManager_somGetClassName *somTD_AWDConnectionManager_somGetClassName;
typedef long   SOMLINK somTP_AWDConnectionManager_somGetSize(AWDConnectionManager *somSelf);
typedef somTP_AWDConnectionManager_somGetSize *somTD_AWDConnectionManager_somGetSize;
typedef boolean   SOMLINK somTP_AWDConnectionManager_somIsA(AWDConnectionManager *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDConnectionManager_somIsA *somTD_AWDConnectionManager_somIsA;
typedef boolean   SOMLINK somTP_AWDConnectionManager_somIsInstanceOf(AWDConnectionManager *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDConnectionManager_somIsInstanceOf *somTD_AWDConnectionManager_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDConnectionManager_somRespondsTo(AWDConnectionManager *somSelf,
		somId mId);
typedef somTP_AWDConnectionManager_somRespondsTo *somTD_AWDConnectionManager_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDConnectionManager_somDispatch(AWDConnectionManager *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDConnectionManager_somDispatch *somTD_AWDConnectionManager_somDispatch;
typedef boolean   SOMLINK somTP_AWDConnectionManager_somClassDispatch(AWDConnectionManager *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDConnectionManager_somClassDispatch *somTD_AWDConnectionManager_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDConnectionManager_somCastObj(AWDConnectionManager *somSelf,
		SOMClass* cls);
typedef somTP_AWDConnectionManager_somCastObj *somTD_AWDConnectionManager_somCastObj;
typedef boolean   SOMLINK somTP_AWDConnectionManager_somResetObj(AWDConnectionManager *somSelf);
typedef somTP_AWDConnectionManager_somResetObj *somTD_AWDConnectionManager_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDConnectionManager_somPrintSelf(AWDConnectionManager *somSelf);
typedef somTP_AWDConnectionManager_somPrintSelf *somTD_AWDConnectionManager_somPrintSelf;
typedef void   SOMLINK somTP_AWDConnectionManager_somDumpSelf(AWDConnectionManager *somSelf,
		long level);
typedef somTP_AWDConnectionManager_somDumpSelf *somTD_AWDConnectionManager_somDumpSelf;
typedef void   SOMLINK somTP_AWDConnectionManager_somDumpSelfInt(AWDConnectionManager *somSelf,
		long level);
typedef somTP_AWDConnectionManager_somDumpSelfInt *somTD_AWDConnectionManager_somDumpSelfInt;
}

#endif /* AWDConnectionManager_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDConnectionManager
 */
class AWDConnectionManager : public SOMObject
{
public:

// AWDConnectionManager::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDConnectionManager) AWDConnectionManagerNewClass(AWDConnectionManager_MajorVersion,AWDConnectionManager_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDConnectionManager,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDConnectionManager));
}

// AWDConnectionManager::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDConnectionManager()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDConnectionManagerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDConnectionManager(AWDConnectionManager* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDConnectionManagerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDConnectionManager(const AWDConnectionManager* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDConnectionManagerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: setDefaultConnection */
void   setDefaultConnection(Environment *ev,
		AWDConnection* conObj)
{
   SOM_ResolveD(this,AWDConnectionManager,AWDConnectionManager,setDefaultConnection)
	(this, ev,conObj);
}


/* method: defaultConnection */
AWDConnection*   defaultConnection(Environment *ev)
{
   return SOM_ResolveD(this,AWDConnectionManager,AWDConnectionManager,defaultConnection)
	(this, ev);
}


/* method: addConnection */
boolean   addConnection(Environment *ev,
		AWDConnection* conObj)
{
   return SOM_ResolveD(this,AWDConnectionManager,AWDConnectionManager,addConnection)
	(this, ev,conObj);
}


/* method: registerByName */
boolean   registerByName(Environment *ev,
		string conName)
{
   return SOM_ResolveD(this,AWDConnectionManager,AWDConnectionManager,registerByName)
	(this, ev,conName);
}


/* method: registerByConnection */
boolean   registerByConnection(Environment *ev,
		AWDConnection* conObj)
{
   return SOM_ResolveD(this,AWDConnectionManager,AWDConnectionManager,registerByConnection)
	(this, ev,conObj);
}


/* method: registerByBestName */
boolean   registerByBestName(Environment *ev,
		string conName)
{
   return SOM_ResolveD(this,AWDConnectionManager,AWDConnectionManager,registerByBestName)
	(this, ev,conName);
}


/* method: deregisterUser */
boolean   deregisterUser(Environment *ev)
{
   return SOM_ResolveD(this,AWDConnectionManager,AWDConnectionManager,deregisterUser)
	(this, ev);
}


/* method: getConnection */
AWDConnection*   getConnection(Environment *ev)
{
   return SOM_ResolveD(this,AWDConnectionManager,AWDConnectionManager,getConnection)
	(this, ev);
}


/* method: removeConnection */
boolean   removeConnection(Environment *ev,
		AWDConnection* con)
{
   return SOM_ResolveD(this,AWDConnectionManager,AWDConnectionManager,removeConnection)
	(this, ev,con);
}


/* method: removeConnections */
boolean   removeConnections(Environment *ev)
{
   return SOM_ResolveD(this,AWDConnectionManager,AWDConnectionManager,removeConnections)
	(this, ev);
}


/* method: setOwner */
boolean   setOwner(Environment *ev,
		AWDConnection* con)
{
   return SOM_ResolveD(this,AWDConnectionManager,AWDConnectionManager,setOwner)
	(this, ev,con);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDConnectionManager,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDConnectionManager,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDConnectionManager,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDConnectionManager*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDConnectionManager,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDConnectionManager,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDConnectionManager,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDConnectionManager*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDConnectionManager*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDConnectionManager*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDConnectionManager,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDConnectionManager,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDConnectionManager,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDConnectionManager_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDConnectionManager,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDConnectionManager_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDConnectionManager,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDConnectionManager,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDConnectionManager,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDConnectionManager,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDConnectionManager */



#endif       /* SOM_AWDConnectionManager_xh */

#ifndef SOM_UserList_xh
#define SOM_UserList_xh

class UserList;

#define UserList_MajorVersion 0
#define UserList_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <view.xh>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_TPrimitiveLinkedList_xh
#include <tpll.xh>
#endif

#ifndef UserList_API
#define UserList_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the UserList Class */
SOMEXTERN
#if (defined(SOM_Module_conmanag_Source) || defined(UserList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_UserList))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK UserListNewClass(
		integer4,
		integer4 );

/* The API to the UserList class object, and the methods it introduces. */
SOMEXTERN struct UserListClassDataStructure {
	SOMClass *classObject;
	somMToken add;
	somMToken remove;
	somMToken count;
	somMToken getID;
	somMToken findUser;
}
#if !(defined(SOM_Module_conmanag_Source) || defined(UserList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_UserList))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK UserListClassData;
#define _UserList UserListClassData.classObject

/* The API to parentMtabs for UserList, and the instance data it introduces. */
SOMEXTERN struct UserListCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_conmanag_Source) || defined(UserList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_UserList))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK UserListCClassData;

/*
 * -- Typedefs for UserList Method Procedures
 */
extern "C" {
typedef boolean   SOMLINK somTP_UserList_add(UserList *somSelf, Environment *ev,
		ConnectionUser* userObj);
typedef somTP_UserList_add *somTD_UserList_add;
typedef boolean   SOMLINK somTP_UserList_remove(UserList *somSelf, Environment *ev);
typedef somTP_UserList_remove *somTD_UserList_remove;
typedef unsigned short   SOMLINK somTP_UserList_count(UserList *somSelf, Environment *ev);
typedef somTP_UserList_count *somTD_UserList_count;
typedef unsigned long   SOMLINK somTP_UserList_getID(UserList *somSelf, Environment *ev);
typedef somTP_UserList_getID *somTD_UserList_getID;
typedef ConnectionUser*   SOMLINK somTP_UserList_findUser(UserList *somSelf, Environment *ev);
typedef somTP_UserList_findUser *somTD_UserList_findUser;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef unsigned long   SOMLINK somTP_UserList_somfCount(UserList *somSelf, Environment *ev);
typedef somTP_UserList_somfCount *somTD_UserList_somfCount;
typedef void   SOMLINK somTP_UserList_somfRemove(UserList *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_UserList_somfRemove *somTD_UserList_somfRemove;
typedef void   SOMLINK somTP_UserList_somfRemoveAll(UserList *somSelf, Environment *ev);
typedef somTP_UserList_somfRemoveAll *somTD_UserList_somfRemoveAll;
typedef somf_MLinkable*   SOMLINK somTP_UserList_somfRemoveFirst(UserList *somSelf, Environment *ev);
typedef somTP_UserList_somfRemoveFirst *somTD_UserList_somfRemoveFirst;
typedef somf_MLinkable*   SOMLINK somTP_UserList_somfRemoveLast(UserList *somSelf, Environment *ev);
typedef somTP_UserList_somfRemoveLast *somTD_UserList_somfRemoveLast;
typedef void   SOMLINK somTP_UserList_somfAddBefore(UserList *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_UserList_somfAddBefore *somTD_UserList_somfAddBefore;
typedef void   SOMLINK somTP_UserList_somfAddAfter(UserList *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_UserList_somfAddAfter *somTD_UserList_somfAddAfter;
typedef void   SOMLINK somTP_UserList_somfAddFirst(UserList *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_UserList_somfAddFirst *somTD_UserList_somfAddFirst;
typedef void   SOMLINK somTP_UserList_somfAddLast(UserList *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_UserList_somfAddLast *somTD_UserList_somfAddLast;
typedef somf_MLinkable*   SOMLINK somTP_UserList_somfAfter(UserList *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_UserList_somfAfter *somTD_UserList_somfAfter;
typedef somf_MLinkable*   SOMLINK somTP_UserList_somfBefore(UserList *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_UserList_somfBefore *somTD_UserList_somfBefore;
typedef somf_MLinkable*   SOMLINK somTP_UserList_somfFirst(UserList *somSelf, Environment *ev);
typedef somTP_UserList_somfFirst *somTD_UserList_somfFirst;
typedef somf_MLinkable*   SOMLINK somTP_UserList_somfLast(UserList *somSelf, Environment *ev);
typedef somTP_UserList_somfLast *somTD_UserList_somfLast;
typedef void   SOMLINK somTP_UserList_somInit(UserList *somSelf);
typedef somTP_UserList_somInit *somTD_UserList_somInit;
typedef void   SOMLINK somTP_UserList_somUninit(UserList *somSelf);
typedef somTP_UserList_somUninit *somTD_UserList_somUninit;
typedef void   SOMLINK somTP_UserList_somDefaultInit(UserList *somSelf,
		somInitCtrl* ctrl);
typedef somTP_UserList_somDefaultInit *somTD_UserList_somDefaultInit;
typedef void   SOMLINK somTP_UserList_somDestruct(UserList *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_UserList_somDestruct *somTD_UserList_somDestruct;
typedef void   SOMLINK somTP_UserList_somDefaultCopyInit(UserList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_UserList_somDefaultCopyInit *somTD_UserList_somDefaultCopyInit;
typedef UserList*   SOMLINK somTP_UserList_somDefaultAssign(UserList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_UserList_somDefaultAssign *somTD_UserList_somDefaultAssign;
typedef void   SOMLINK somTP_UserList_somDefaultConstCopyInit(UserList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_UserList_somDefaultConstCopyInit *somTD_UserList_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_UserList_somDefaultVCopyInit(UserList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_UserList_somDefaultVCopyInit *somTD_UserList_somDefaultVCopyInit;
typedef void   SOMLINK somTP_UserList_somDefaultConstVCopyInit(UserList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_UserList_somDefaultConstVCopyInit *somTD_UserList_somDefaultConstVCopyInit;
typedef UserList*   SOMLINK somTP_UserList_somDefaultConstAssign(UserList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_UserList_somDefaultConstAssign *somTD_UserList_somDefaultConstAssign;
typedef UserList*   SOMLINK somTP_UserList_somDefaultVAssign(UserList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_UserList_somDefaultVAssign *somTD_UserList_somDefaultVAssign;
typedef UserList*   SOMLINK somTP_UserList_somDefaultConstVAssign(UserList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_UserList_somDefaultConstVAssign *somTD_UserList_somDefaultConstVAssign;
typedef void   SOMLINK somTP_UserList_somFree(UserList *somSelf);
typedef somTP_UserList_somFree *somTD_UserList_somFree;
typedef SOMClass*   SOMLINK somTP_UserList_somGetClass(UserList *somSelf);
typedef somTP_UserList_somGetClass *somTD_UserList_somGetClass;
typedef string   SOMLINK somTP_UserList_somGetClassName(UserList *somSelf);
typedef somTP_UserList_somGetClassName *somTD_UserList_somGetClassName;
typedef long   SOMLINK somTP_UserList_somGetSize(UserList *somSelf);
typedef somTP_UserList_somGetSize *somTD_UserList_somGetSize;
typedef boolean   SOMLINK somTP_UserList_somIsA(UserList *somSelf,
		SOMClass* aClassObj);
typedef somTP_UserList_somIsA *somTD_UserList_somIsA;
typedef boolean   SOMLINK somTP_UserList_somIsInstanceOf(UserList *somSelf,
		SOMClass* aClassObj);
typedef somTP_UserList_somIsInstanceOf *somTD_UserList_somIsInstanceOf;
typedef boolean   SOMLINK somTP_UserList_somRespondsTo(UserList *somSelf,
		somId mId);
typedef somTP_UserList_somRespondsTo *somTD_UserList_somRespondsTo;
typedef boolean   SOMLINK somTP_UserList_somDispatch(UserList *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_UserList_somDispatch *somTD_UserList_somDispatch;
typedef boolean   SOMLINK somTP_UserList_somClassDispatch(UserList *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_UserList_somClassDispatch *somTD_UserList_somClassDispatch;
typedef boolean   SOMLINK somTP_UserList_somCastObj(UserList *somSelf,
		SOMClass* cls);
typedef somTP_UserList_somCastObj *somTD_UserList_somCastObj;
typedef boolean   SOMLINK somTP_UserList_somResetObj(UserList *somSelf);
typedef somTP_UserList_somResetObj *somTD_UserList_somResetObj;
typedef SOMObject*   SOMLINK somTP_UserList_somPrintSelf(UserList *somSelf);
typedef somTP_UserList_somPrintSelf *somTD_UserList_somPrintSelf;
typedef void   SOMLINK somTP_UserList_somDumpSelf(UserList *somSelf,
		long level);
typedef somTP_UserList_somDumpSelf *somTD_UserList_somDumpSelf;
typedef void   SOMLINK somTP_UserList_somDumpSelfInt(UserList *somSelf,
		long level);
typedef somTP_UserList_somDumpSelfInt *somTD_UserList_somDumpSelfInt;
}

#endif /* UserList_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for UserList
 */
class UserList : public somf_TPrimitiveLinkedList
{
public:

// UserList::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_UserList) UserListNewClass(UserList_MajorVersion,UserList_MinorVersion);
   return (void*)
      SOM_Resolve(_UserList,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_UserList));
}

// UserList::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

UserList()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (UserListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

UserList(UserList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (UserListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

UserList(const UserList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (UserListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: add */
boolean   add(Environment *ev,
		ConnectionUser* userObj)
{
   return SOM_ResolveD(this,UserList,UserList,add)
	(this, ev,userObj);
}


/* method: remove */
boolean   remove(Environment *ev)
{
   return SOM_ResolveD(this,UserList,UserList,remove)
	(this, ev);
}


/* method: count */
unsigned short   count(Environment *ev)
{
   return SOM_ResolveD(this,UserList,UserList,count)
	(this, ev);
}


/* method: getID */
unsigned long   getID(Environment *ev)
{
   return SOM_ResolveD(this,UserList,UserList,getID)
	(this, ev);
}


/* method: findUser */
ConnectionUser*   findUser(Environment *ev)
{
   return SOM_ResolveD(this,UserList,UserList,findUser)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfCount */
unsigned long   somfCount(Environment *ev)
{
   return SOM_ResolveD(this,UserList,somf_TPrimitiveLinkedList,somfCount)
	(this, ev);
}


/* method: somfRemove */
void   somfRemove(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,UserList,somf_TPrimitiveLinkedList,somfRemove)
	(this, ev,aLink);
}


/* method: somfRemoveAll */
void   somfRemoveAll(Environment *ev)
{
   SOM_ResolveD(this,UserList,somf_TPrimitiveLinkedList,somfRemoveAll)
	(this, ev);
}


/* method: somfRemoveFirst */
somf_MLinkable*   somfRemoveFirst(Environment *ev)
{
   return SOM_ResolveD(this,UserList,somf_TPrimitiveLinkedList,somfRemoveFirst)
	(this, ev);
}


/* method: somfRemoveLast */
somf_MLinkable*   somfRemoveLast(Environment *ev)
{
   return SOM_ResolveD(this,UserList,somf_TPrimitiveLinkedList,somfRemoveLast)
	(this, ev);
}


/* method: somfAddBefore */
void   somfAddBefore(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,UserList,somf_TPrimitiveLinkedList,somfAddBefore)
	(this, ev,existing,obj);
}


/* method: somfAddAfter */
void   somfAddAfter(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,UserList,somf_TPrimitiveLinkedList,somfAddAfter)
	(this, ev,existing,obj);
}


/* method: somfAddFirst */
void   somfAddFirst(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,UserList,somf_TPrimitiveLinkedList,somfAddFirst)
	(this, ev,obj);
}


/* method: somfAddLast */
void   somfAddLast(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,UserList,somf_TPrimitiveLinkedList,somfAddLast)
	(this, ev,obj);
}


/* method: somfAfter */
somf_MLinkable*   somfAfter(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,UserList,somf_TPrimitiveLinkedList,somfAfter)
	(this, ev,existingobj);
}


/* method: somfBefore */
somf_MLinkable*   somfBefore(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,UserList,somf_TPrimitiveLinkedList,somfBefore)
	(this, ev,existingobj);
}


/* method: somfFirst */
somf_MLinkable*   somfFirst(Environment *ev)
{
   return SOM_ResolveD(this,UserList,somf_TPrimitiveLinkedList,somfFirst)
	(this, ev);
}


/* method: somfLast */
somf_MLinkable*   somfLast(Environment *ev)
{
   return SOM_ResolveD(this,UserList,somf_TPrimitiveLinkedList,somfLast)
	(this, ev);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,UserList,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,UserList,SOMObject,somUninit)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,UserList,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,UserList,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,UserList,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
UserList*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,UserList,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,UserList,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,UserList,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,UserList,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
UserList*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,UserList,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
UserList*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,UserList,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
UserList*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,UserList,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,UserList,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,UserList,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,UserList,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,UserList,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,UserList,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,UserList,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,UserList,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   UserList_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,UserList,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,UserList,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   UserList_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,UserList,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,UserList,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,UserList,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,UserList,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,UserList,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,UserList,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,UserList,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* UserList */



#endif       /* SOM_UserList_xh */

#ifndef SOM_ConnectionList_xh
#define SOM_ConnectionList_xh

class ConnectionList;

#define ConnectionList_MajorVersion 0
#define ConnectionList_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <view.xh>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMList_xh
#include <somlist.xh>
#endif

#ifndef ConnectionList_API
#define ConnectionList_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the ConnectionList Class */
SOMEXTERN
#if (defined(SOM_Module_conmanag_Source) || defined(ConnectionList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ConnectionList))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK ConnectionListNewClass(
		integer4,
		integer4 );

/* The API to the ConnectionList class object, and the methods it introduces. */
SOMEXTERN struct ConnectionListClassDataStructure {
	SOMClass *classObject;
	somMToken add;
	somMToken remove;
	somMToken count;
	somMToken getByName;
	somMToken getBestByName;
}
#if !(defined(SOM_Module_conmanag_Source) || defined(ConnectionList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ConnectionList))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ConnectionListClassData;
#define _ConnectionList ConnectionListClassData.classObject

/* The API to parentMtabs for ConnectionList, and the instance data it introduces. */
SOMEXTERN struct ConnectionListCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_conmanag_Source) || defined(ConnectionList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ConnectionList))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ConnectionListCClassData;

/*
 * -- Typedefs for ConnectionList Method Procedures
 */
extern "C" {
typedef boolean   SOMLINK somTP_ConnectionList_add(ConnectionList *somSelf, Environment *ev,
		AWDConnection* conobj);
typedef somTP_ConnectionList_add *somTD_ConnectionList_add;
typedef boolean   SOMLINK somTP_ConnectionList_remove(ConnectionList *somSelf, Environment *ev,
		AWDConnection* conobj);
typedef somTP_ConnectionList_remove *somTD_ConnectionList_remove;
typedef unsigned short   SOMLINK somTP_ConnectionList_count(ConnectionList *somSelf, Environment *ev);
typedef somTP_ConnectionList_count *somTD_ConnectionList_count;
typedef AWDConnection*   SOMLINK somTP_ConnectionList_getByName(ConnectionList *somSelf, Environment *ev,
		string aName);
typedef somTP_ConnectionList_getByName *somTD_ConnectionList_getByName;
typedef AWDConnection*   SOMLINK somTP_ConnectionList_getBestByName(ConnectionList *somSelf, Environment *ev,
		string aName);
typedef somTP_ConnectionList_getBestByName *somTD_ConnectionList_getBestByName;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_ConnectionList_deleteAll(ConnectionList *somSelf, Environment *ev);
typedef somTP_ConnectionList_deleteAll *somTD_ConnectionList_deleteAll;
typedef boolean   SOMLINK somTP_ConnectionList_forAll(ConnectionList *somSelf, Environment *ev,
		void* pfn,
		void* pData,
		somf_MLinkable** pLastObject);
typedef somTP_ConnectionList_forAll *somTD_ConnectionList_forAll;
typedef boolean   SOMLINK somTP_ConnectionList_visitAll(ConnectionList *somSelf, Environment *ev,
		AWDVisitor* visitor);
typedef somTP_ConnectionList_visitAll *somTD_ConnectionList_visitAll;
typedef boolean   SOMLINK somTP_ConnectionList_invariantOK(ConnectionList *somSelf, Environment *ev);
typedef somTP_ConnectionList_invariantOK *somTD_ConnectionList_invariantOK;
typedef void   SOMLINK somTP_ConnectionList_somDefaultInit(ConnectionList *somSelf,
		somInitCtrl* ctrl);
typedef somTP_ConnectionList_somDefaultInit *somTD_ConnectionList_somDefaultInit;
typedef void   SOMLINK somTP_ConnectionList_somDestruct(ConnectionList *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_ConnectionList_somDestruct *somTD_ConnectionList_somDestruct;
typedef unsigned long   SOMLINK somTP_ConnectionList_somfCount(ConnectionList *somSelf, Environment *ev);
typedef somTP_ConnectionList_somfCount *somTD_ConnectionList_somfCount;
typedef void   SOMLINK somTP_ConnectionList_somfRemove(ConnectionList *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ConnectionList_somfRemove *somTD_ConnectionList_somfRemove;
typedef void   SOMLINK somTP_ConnectionList_somfRemoveAll(ConnectionList *somSelf, Environment *ev);
typedef somTP_ConnectionList_somfRemoveAll *somTD_ConnectionList_somfRemoveAll;
typedef somf_MLinkable*   SOMLINK somTP_ConnectionList_somfRemoveFirst(ConnectionList *somSelf, Environment *ev);
typedef somTP_ConnectionList_somfRemoveFirst *somTD_ConnectionList_somfRemoveFirst;
typedef somf_MLinkable*   SOMLINK somTP_ConnectionList_somfRemoveLast(ConnectionList *somSelf, Environment *ev);
typedef somTP_ConnectionList_somfRemoveLast *somTD_ConnectionList_somfRemoveLast;
typedef void   SOMLINK somTP_ConnectionList_somfAddBefore(ConnectionList *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_ConnectionList_somfAddBefore *somTD_ConnectionList_somfAddBefore;
typedef void   SOMLINK somTP_ConnectionList_somfAddAfter(ConnectionList *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_ConnectionList_somfAddAfter *somTD_ConnectionList_somfAddAfter;
typedef void   SOMLINK somTP_ConnectionList_somfAddFirst(ConnectionList *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_ConnectionList_somfAddFirst *somTD_ConnectionList_somfAddFirst;
typedef void   SOMLINK somTP_ConnectionList_somfAddLast(ConnectionList *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_ConnectionList_somfAddLast *somTD_ConnectionList_somfAddLast;
typedef somf_MLinkable*   SOMLINK somTP_ConnectionList_somfAfter(ConnectionList *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_ConnectionList_somfAfter *somTD_ConnectionList_somfAfter;
typedef somf_MLinkable*   SOMLINK somTP_ConnectionList_somfBefore(ConnectionList *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_ConnectionList_somfBefore *somTD_ConnectionList_somfBefore;
typedef somf_MLinkable*   SOMLINK somTP_ConnectionList_somfFirst(ConnectionList *somSelf, Environment *ev);
typedef somTP_ConnectionList_somfFirst *somTD_ConnectionList_somfFirst;
typedef somf_MLinkable*   SOMLINK somTP_ConnectionList_somfLast(ConnectionList *somSelf, Environment *ev);
typedef somTP_ConnectionList_somfLast *somTD_ConnectionList_somfLast;
typedef void   SOMLINK somTP_ConnectionList_somInit(ConnectionList *somSelf);
typedef somTP_ConnectionList_somInit *somTD_ConnectionList_somInit;
typedef void   SOMLINK somTP_ConnectionList_somUninit(ConnectionList *somSelf);
typedef somTP_ConnectionList_somUninit *somTD_ConnectionList_somUninit;
typedef void   SOMLINK somTP_ConnectionList_somDefaultCopyInit(ConnectionList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionList_somDefaultCopyInit *somTD_ConnectionList_somDefaultCopyInit;
typedef ConnectionList*   SOMLINK somTP_ConnectionList_somDefaultAssign(ConnectionList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionList_somDefaultAssign *somTD_ConnectionList_somDefaultAssign;
typedef void   SOMLINK somTP_ConnectionList_somDefaultConstCopyInit(ConnectionList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionList_somDefaultConstCopyInit *somTD_ConnectionList_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ConnectionList_somDefaultVCopyInit(ConnectionList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionList_somDefaultVCopyInit *somTD_ConnectionList_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ConnectionList_somDefaultConstVCopyInit(ConnectionList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionList_somDefaultConstVCopyInit *somTD_ConnectionList_somDefaultConstVCopyInit;
typedef ConnectionList*   SOMLINK somTP_ConnectionList_somDefaultConstAssign(ConnectionList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionList_somDefaultConstAssign *somTD_ConnectionList_somDefaultConstAssign;
typedef ConnectionList*   SOMLINK somTP_ConnectionList_somDefaultVAssign(ConnectionList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionList_somDefaultVAssign *somTD_ConnectionList_somDefaultVAssign;
typedef ConnectionList*   SOMLINK somTP_ConnectionList_somDefaultConstVAssign(ConnectionList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionList_somDefaultConstVAssign *somTD_ConnectionList_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ConnectionList_somFree(ConnectionList *somSelf);
typedef somTP_ConnectionList_somFree *somTD_ConnectionList_somFree;
typedef SOMClass*   SOMLINK somTP_ConnectionList_somGetClass(ConnectionList *somSelf);
typedef somTP_ConnectionList_somGetClass *somTD_ConnectionList_somGetClass;
typedef string   SOMLINK somTP_ConnectionList_somGetClassName(ConnectionList *somSelf);
typedef somTP_ConnectionList_somGetClassName *somTD_ConnectionList_somGetClassName;
typedef long   SOMLINK somTP_ConnectionList_somGetSize(ConnectionList *somSelf);
typedef somTP_ConnectionList_somGetSize *somTD_ConnectionList_somGetSize;
typedef boolean   SOMLINK somTP_ConnectionList_somIsA(ConnectionList *somSelf,
		SOMClass* aClassObj);
typedef somTP_ConnectionList_somIsA *somTD_ConnectionList_somIsA;
typedef boolean   SOMLINK somTP_ConnectionList_somIsInstanceOf(ConnectionList *somSelf,
		SOMClass* aClassObj);
typedef somTP_ConnectionList_somIsInstanceOf *somTD_ConnectionList_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ConnectionList_somRespondsTo(ConnectionList *somSelf,
		somId mId);
typedef somTP_ConnectionList_somRespondsTo *somTD_ConnectionList_somRespondsTo;
typedef boolean   SOMLINK somTP_ConnectionList_somDispatch(ConnectionList *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ConnectionList_somDispatch *somTD_ConnectionList_somDispatch;
typedef boolean   SOMLINK somTP_ConnectionList_somClassDispatch(ConnectionList *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ConnectionList_somClassDispatch *somTD_ConnectionList_somClassDispatch;
typedef boolean   SOMLINK somTP_ConnectionList_somCastObj(ConnectionList *somSelf,
		SOMClass* cls);
typedef somTP_ConnectionList_somCastObj *somTD_ConnectionList_somCastObj;
typedef boolean   SOMLINK somTP_ConnectionList_somResetObj(ConnectionList *somSelf);
typedef somTP_ConnectionList_somResetObj *somTD_ConnectionList_somResetObj;
typedef SOMObject*   SOMLINK somTP_ConnectionList_somPrintSelf(ConnectionList *somSelf);
typedef somTP_ConnectionList_somPrintSelf *somTD_ConnectionList_somPrintSelf;
typedef void   SOMLINK somTP_ConnectionList_somDumpSelf(ConnectionList *somSelf,
		long level);
typedef somTP_ConnectionList_somDumpSelf *somTD_ConnectionList_somDumpSelf;
typedef void   SOMLINK somTP_ConnectionList_somDumpSelfInt(ConnectionList *somSelf,
		long level);
typedef somTP_ConnectionList_somDumpSelfInt *somTD_ConnectionList_somDumpSelfInt;
}

#endif /* ConnectionList_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for ConnectionList
 */
class ConnectionList : public SOMList
{
public:

// ConnectionList::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ConnectionList) ConnectionListNewClass(ConnectionList_MajorVersion,ConnectionList_MinorVersion);
   return (void*)
      SOM_Resolve(_ConnectionList,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ConnectionList));
}

// ConnectionList::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ConnectionList()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ConnectionListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ConnectionList(ConnectionList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ConnectionListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ConnectionList(const ConnectionList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ConnectionListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: add */
boolean   add(Environment *ev,
		AWDConnection* conobj)
{
   return SOM_ResolveD(this,ConnectionList,ConnectionList,add)
	(this, ev,conobj);
}


/* method: remove */
boolean   remove(Environment *ev,
		AWDConnection* conobj)
{
   return SOM_ResolveD(this,ConnectionList,ConnectionList,remove)
	(this, ev,conobj);
}


/* method: count */
unsigned short   count(Environment *ev)
{
   return SOM_ResolveD(this,ConnectionList,ConnectionList,count)
	(this, ev);
}


/* method: getByName */
AWDConnection*   getByName(Environment *ev,
		string aName)
{
   return SOM_ResolveD(this,ConnectionList,ConnectionList,getByName)
	(this, ev,aName);
}


/* method: getBestByName */
AWDConnection*   getBestByName(Environment *ev,
		string aName)
{
   return SOM_ResolveD(this,ConnectionList,ConnectionList,getBestByName)
	(this, ev,aName);
}


/*
 * Reintroduce inherited methods
 */

/* method: deleteAll */
boolean   deleteAll(Environment *ev)
{
   return SOM_ResolveD(this,ConnectionList,SOMList,deleteAll)
	(this, ev);
}


/* method: forAll */
boolean   forAll(Environment *ev,
		void* pfn,
		void* pData,
		somf_MLinkable** pLastObject)
{
   return SOM_ResolveD(this,ConnectionList,SOMList,forAll)
	(this, ev,pfn,pData,pLastObject);
}


/* method: visitAll */
boolean   visitAll(Environment *ev,
		AWDVisitor* visitor)
{
   return SOM_ResolveD(this,ConnectionList,SOMList,visitAll)
	(this, ev,visitor);
}


/* method: invariantOK */
boolean   invariantOK(Environment *ev)
{
   return SOM_ResolveD(this,ConnectionList,SOMList,invariantOK)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,ConnectionList,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,ConnectionList,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfCount */
unsigned long   somfCount(Environment *ev)
{
   return SOM_ResolveD(this,ConnectionList,somf_TPrimitiveLinkedList,somfCount)
	(this, ev);
}


/* method: somfRemove */
void   somfRemove(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ConnectionList,somf_TPrimitiveLinkedList,somfRemove)
	(this, ev,aLink);
}


/* method: somfRemoveAll */
void   somfRemoveAll(Environment *ev)
{
   SOM_ResolveD(this,ConnectionList,somf_TPrimitiveLinkedList,somfRemoveAll)
	(this, ev);
}


/* method: somfRemoveFirst */
somf_MLinkable*   somfRemoveFirst(Environment *ev)
{
   return SOM_ResolveD(this,ConnectionList,somf_TPrimitiveLinkedList,somfRemoveFirst)
	(this, ev);
}


/* method: somfRemoveLast */
somf_MLinkable*   somfRemoveLast(Environment *ev)
{
   return SOM_ResolveD(this,ConnectionList,somf_TPrimitiveLinkedList,somfRemoveLast)
	(this, ev);
}


/* method: somfAddBefore */
void   somfAddBefore(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,ConnectionList,somf_TPrimitiveLinkedList,somfAddBefore)
	(this, ev,existing,obj);
}


/* method: somfAddAfter */
void   somfAddAfter(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,ConnectionList,somf_TPrimitiveLinkedList,somfAddAfter)
	(this, ev,existing,obj);
}


/* method: somfAddFirst */
void   somfAddFirst(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,ConnectionList,somf_TPrimitiveLinkedList,somfAddFirst)
	(this, ev,obj);
}


/* method: somfAddLast */
void   somfAddLast(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,ConnectionList,somf_TPrimitiveLinkedList,somfAddLast)
	(this, ev,obj);
}


/* method: somfAfter */
somf_MLinkable*   somfAfter(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,ConnectionList,somf_TPrimitiveLinkedList,somfAfter)
	(this, ev,existingobj);
}


/* method: somfBefore */
somf_MLinkable*   somfBefore(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,ConnectionList,somf_TPrimitiveLinkedList,somfBefore)
	(this, ev,existingobj);
}


/* method: somfFirst */
somf_MLinkable*   somfFirst(Environment *ev)
{
   return SOM_ResolveD(this,ConnectionList,somf_TPrimitiveLinkedList,somfFirst)
	(this, ev);
}


/* method: somfLast */
somf_MLinkable*   somfLast(Environment *ev)
{
   return SOM_ResolveD(this,ConnectionList,somf_TPrimitiveLinkedList,somfLast)
	(this, ev);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,ConnectionList,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ConnectionList,SOMObject,somUninit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ConnectionList,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ConnectionList*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ConnectionList,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ConnectionList,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ConnectionList,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ConnectionList,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ConnectionList*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ConnectionList,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ConnectionList*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ConnectionList,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ConnectionList*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ConnectionList,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ConnectionList,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,ConnectionList,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,ConnectionList,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,ConnectionList,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ConnectionList,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ConnectionList,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,ConnectionList,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   ConnectionList_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ConnectionList,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ConnectionList,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   ConnectionList_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ConnectionList,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ConnectionList,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,ConnectionList,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,ConnectionList,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,ConnectionList,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ConnectionList,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ConnectionList,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ConnectionList */



#endif       /* SOM_ConnectionList_xh */

#ifndef SOM_ConnectionUser_xh
#define SOM_ConnectionUser_xh

class ConnectionUser;

#define ConnectionUser_MajorVersion 0
#define ConnectionUser_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <view.xh>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_MLinkable_xh
#include <mlink.xh>
#endif

#ifndef ConnectionUser_API
#define ConnectionUser_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
typedef unsigned long ConnectionUser_CONNECTIONMODE;
#define ConnectionUser_BYTHENAME 1UL
#define ConnectionUser_BESTBYNAME 2UL
#define ConnectionUser_DIRECT 3UL

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_CONNECTIONMODE
    #ifdef CONNECTIONMODE
        #undef CONNECTIONMODE
        #define SOMTGD_CONNECTIONMODE 1
    #else
        #define CONNECTIONMODE ConnectionUser_CONNECTIONMODE
    #endif /* CONNECTIONMODE */
#endif /* SOMTGD_CONNECTIONMODE */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the ConnectionUser Class */
SOMEXTERN
#if (defined(SOM_Module_conmanag_Source) || defined(ConnectionUser_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ConnectionUser))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK ConnectionUserNewClass(
		integer4,
		integer4 );

/* The API to the ConnectionUser class object, and the methods it introduces. */
SOMEXTERN struct ConnectionUserClassDataStructure {
	SOMClass *classObject;
	somMToken mode;
	somMToken name;
	somMToken connect;
	somMToken setID;
	somMToken id;
	somMToken initialize;
	somMToken withModeandName;
	somMToken withName;
	somMToken withConnection;
	somMToken withModeandConnection;
}
#if !(defined(SOM_Module_conmanag_Source) || defined(ConnectionUser_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ConnectionUser))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ConnectionUserClassData;
#define _ConnectionUser ConnectionUserClassData.classObject

/* The API to parentMtabs for ConnectionUser, and the instance data it introduces. */
SOMEXTERN struct ConnectionUserCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_conmanag_Source) || defined(ConnectionUser_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ConnectionUser))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ConnectionUserCClassData;

/*
 * -- Typedefs for ConnectionUser Method Procedures
 */
extern "C" {
typedef ConnectionUser_CONNECTIONMODE   SOMLINK somTP_ConnectionUser_mode(ConnectionUser *somSelf, Environment *ev);
typedef somTP_ConnectionUser_mode *somTD_ConnectionUser_mode;
typedef string   SOMLINK somTP_ConnectionUser_name(ConnectionUser *somSelf, Environment *ev);
typedef somTP_ConnectionUser_name *somTD_ConnectionUser_name;
typedef AWDConnection*   SOMLINK somTP_ConnectionUser_connect(ConnectionUser *somSelf, Environment *ev);
typedef somTP_ConnectionUser_connect *somTD_ConnectionUser_connect;
typedef void   SOMLINK somTP_ConnectionUser_setID(ConnectionUser *somSelf, Environment *ev);
typedef somTP_ConnectionUser_setID *somTD_ConnectionUser_setID;
typedef unsigned long   SOMLINK somTP_ConnectionUser_id(ConnectionUser *somSelf, Environment *ev);
typedef somTP_ConnectionUser_id *somTD_ConnectionUser_id;
typedef void   SOMLINK somTP_ConnectionUser_withModeandName(ConnectionUser *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		ConnectionUser_CONNECTIONMODE mode,
		string aName);
typedef somTP_ConnectionUser_withModeandName *somTD_ConnectionUser_withModeandName;
typedef void   SOMLINK somTP_ConnectionUser_withModeandConnection(ConnectionUser *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		ConnectionUser_CONNECTIONMODE mode,
		AWDConnection* con);
typedef somTP_ConnectionUser_withModeandConnection *somTD_ConnectionUser_withModeandConnection;
typedef void   SOMLINK somTP_ConnectionUser_withName(ConnectionUser *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName);
typedef somTP_ConnectionUser_withName *somTD_ConnectionUser_withName;
typedef void   SOMLINK somTP_ConnectionUser_withConnection(ConnectionUser *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDConnection* con);
typedef somTP_ConnectionUser_withConnection *somTD_ConnectionUser_withConnection;
typedef void   SOMLINK somTP_ConnectionUser_initialize(ConnectionUser *somSelf, Environment *ev);
typedef somTP_ConnectionUser_initialize *somTD_ConnectionUser_initialize;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef somf_MLinkable*   SOMLINK somTP_ConnectionUser_somfMLinkableInit(ConnectionUser *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_ConnectionUser_somfMLinkableInit *somTD_ConnectionUser_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_ConnectionUser_somfGetNext(ConnectionUser *somSelf, Environment *ev);
typedef somTP_ConnectionUser_somfGetNext *somTD_ConnectionUser_somfGetNext;
typedef void   SOMLINK somTP_ConnectionUser_somfSetNext(ConnectionUser *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ConnectionUser_somfSetNext *somTD_ConnectionUser_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_ConnectionUser_somfGetPrevious(ConnectionUser *somSelf, Environment *ev);
typedef somTP_ConnectionUser_somfGetPrevious *somTD_ConnectionUser_somfGetPrevious;
typedef void   SOMLINK somTP_ConnectionUser_somfSetPrevious(ConnectionUser *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ConnectionUser_somfSetPrevious *somTD_ConnectionUser_somfSetPrevious;
typedef void   SOMLINK somTP_ConnectionUser_somInit(ConnectionUser *somSelf);
typedef somTP_ConnectionUser_somInit *somTD_ConnectionUser_somInit;
typedef void   SOMLINK somTP_ConnectionUser_somDefaultInit(ConnectionUser *somSelf,
		somInitCtrl* ctrl);
typedef somTP_ConnectionUser_somDefaultInit *somTD_ConnectionUser_somDefaultInit;
typedef void   SOMLINK somTP_ConnectionUser_somDestruct(ConnectionUser *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_ConnectionUser_somDestruct *somTD_ConnectionUser_somDestruct;
typedef void   SOMLINK somTP_ConnectionUser_somDefaultCopyInit(ConnectionUser *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionUser_somDefaultCopyInit *somTD_ConnectionUser_somDefaultCopyInit;
typedef ConnectionUser*   SOMLINK somTP_ConnectionUser_somDefaultAssign(ConnectionUser *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionUser_somDefaultAssign *somTD_ConnectionUser_somDefaultAssign;
typedef void   SOMLINK somTP_ConnectionUser_somDefaultConstCopyInit(ConnectionUser *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionUser_somDefaultConstCopyInit *somTD_ConnectionUser_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ConnectionUser_somDefaultVCopyInit(ConnectionUser *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionUser_somDefaultVCopyInit *somTD_ConnectionUser_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ConnectionUser_somDefaultConstVCopyInit(ConnectionUser *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionUser_somDefaultConstVCopyInit *somTD_ConnectionUser_somDefaultConstVCopyInit;
typedef ConnectionUser*   SOMLINK somTP_ConnectionUser_somDefaultConstAssign(ConnectionUser *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionUser_somDefaultConstAssign *somTD_ConnectionUser_somDefaultConstAssign;
typedef ConnectionUser*   SOMLINK somTP_ConnectionUser_somDefaultVAssign(ConnectionUser *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionUser_somDefaultVAssign *somTD_ConnectionUser_somDefaultVAssign;
typedef ConnectionUser*   SOMLINK somTP_ConnectionUser_somDefaultConstVAssign(ConnectionUser *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ConnectionUser_somDefaultConstVAssign *somTD_ConnectionUser_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ConnectionUser_somFree(ConnectionUser *somSelf);
typedef somTP_ConnectionUser_somFree *somTD_ConnectionUser_somFree;
typedef void   SOMLINK somTP_ConnectionUser_somUninit(ConnectionUser *somSelf);
typedef somTP_ConnectionUser_somUninit *somTD_ConnectionUser_somUninit;
typedef SOMClass*   SOMLINK somTP_ConnectionUser_somGetClass(ConnectionUser *somSelf);
typedef somTP_ConnectionUser_somGetClass *somTD_ConnectionUser_somGetClass;
typedef string   SOMLINK somTP_ConnectionUser_somGetClassName(ConnectionUser *somSelf);
typedef somTP_ConnectionUser_somGetClassName *somTD_ConnectionUser_somGetClassName;
typedef long   SOMLINK somTP_ConnectionUser_somGetSize(ConnectionUser *somSelf);
typedef somTP_ConnectionUser_somGetSize *somTD_ConnectionUser_somGetSize;
typedef boolean   SOMLINK somTP_ConnectionUser_somIsA(ConnectionUser *somSelf,
		SOMClass* aClassObj);
typedef somTP_ConnectionUser_somIsA *somTD_ConnectionUser_somIsA;
typedef boolean   SOMLINK somTP_ConnectionUser_somIsInstanceOf(ConnectionUser *somSelf,
		SOMClass* aClassObj);
typedef somTP_ConnectionUser_somIsInstanceOf *somTD_ConnectionUser_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ConnectionUser_somRespondsTo(ConnectionUser *somSelf,
		somId mId);
typedef somTP_ConnectionUser_somRespondsTo *somTD_ConnectionUser_somRespondsTo;
typedef boolean   SOMLINK somTP_ConnectionUser_somDispatch(ConnectionUser *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ConnectionUser_somDispatch *somTD_ConnectionUser_somDispatch;
typedef boolean   SOMLINK somTP_ConnectionUser_somClassDispatch(ConnectionUser *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ConnectionUser_somClassDispatch *somTD_ConnectionUser_somClassDispatch;
typedef boolean   SOMLINK somTP_ConnectionUser_somCastObj(ConnectionUser *somSelf,
		SOMClass* cls);
typedef somTP_ConnectionUser_somCastObj *somTD_ConnectionUser_somCastObj;
typedef boolean   SOMLINK somTP_ConnectionUser_somResetObj(ConnectionUser *somSelf);
typedef somTP_ConnectionUser_somResetObj *somTD_ConnectionUser_somResetObj;
typedef SOMObject*   SOMLINK somTP_ConnectionUser_somPrintSelf(ConnectionUser *somSelf);
typedef somTP_ConnectionUser_somPrintSelf *somTD_ConnectionUser_somPrintSelf;
typedef void   SOMLINK somTP_ConnectionUser_somDumpSelf(ConnectionUser *somSelf,
		long level);
typedef somTP_ConnectionUser_somDumpSelf *somTD_ConnectionUser_somDumpSelf;
typedef void   SOMLINK somTP_ConnectionUser_somDumpSelfInt(ConnectionUser *somSelf,
		long level);
typedef somTP_ConnectionUser_somDumpSelfInt *somTD_ConnectionUser_somDumpSelfInt;
}

#endif /* ConnectionUser_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for ConnectionUser
 */
class ConnectionUser : public somf_MLinkable
{
public:

// ConnectionUser::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ConnectionUser) ConnectionUserNewClass(ConnectionUser_MajorVersion,ConnectionUser_MinorVersion);
   return (void*)
      SOM_Resolve(_ConnectionUser,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ConnectionUser));
}

// ConnectionUser::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ConnectionUser()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ConnectionUserCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ConnectionUser(ConnectionUser* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ConnectionUserCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ConnectionUser(const ConnectionUser* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ConnectionUserCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ConnectionUser(Environment *ev,ConnectionUser_CONNECTIONMODE mode,string aName) 
{
   withModeandName(ev,0,mode,aName);
}

ConnectionUser(Environment *ev,ConnectionUser_CONNECTIONMODE mode,AWDConnection* con) 
{
   withModeandConnection(ev,0,mode,con);
}

ConnectionUser(Environment *ev,string aName) 
{
   withName(ev,0,aName);
}

ConnectionUser(Environment *ev,AWDConnection* con) 
{
   withConnection(ev,0,con);
}


/* method: mode */
ConnectionUser_CONNECTIONMODE   mode(Environment *ev)
{
   return SOM_ResolveD(this,ConnectionUser,ConnectionUser,mode)
	(this, ev);
}


/* method: name */
string   name(Environment *ev)
{
   return SOM_ResolveD(this,ConnectionUser,ConnectionUser,name)
	(this, ev);
}


/* method: connect */
AWDConnection*   connect(Environment *ev)
{
   return SOM_ResolveD(this,ConnectionUser,ConnectionUser,connect)
	(this, ev);
}


/* method: setID */
void   setID(Environment *ev)
{
   SOM_ResolveD(this,ConnectionUser,ConnectionUser,setID)
	(this, ev);
}


/* method: id */
unsigned long   id(Environment *ev)
{
   return SOM_ResolveD(this,ConnectionUser,ConnectionUser,id)
	(this, ev);
}


/* initializer method: withModeandName */
void   withModeandName(Environment *ev,
		somInitCtrl* ctrl,
		ConnectionUser_CONNECTIONMODE mode,
		string aName)
{
   SOM_ResolveD(this,ConnectionUser,ConnectionUser,withModeandName)
	(this, ev,ctrl,mode,aName);
}


/* initializer method: withModeandConnection */
void   withModeandConnection(Environment *ev,
		somInitCtrl* ctrl,
		ConnectionUser_CONNECTIONMODE mode,
		AWDConnection* con)
{
   SOM_ResolveD(this,ConnectionUser,ConnectionUser,withModeandConnection)
	(this, ev,ctrl,mode,con);
}


/* initializer method: withName */
void   withName(Environment *ev,
		somInitCtrl* ctrl,
		string aName)
{
   SOM_ResolveD(this,ConnectionUser,ConnectionUser,withName)
	(this, ev,ctrl,aName);
}


/* initializer method: withConnection */
void   withConnection(Environment *ev,
		somInitCtrl* ctrl,
		AWDConnection* con)
{
   SOM_ResolveD(this,ConnectionUser,ConnectionUser,withConnection)
	(this, ev,ctrl,con);
}


/* method: initialize */
void   initialize(Environment *ev)
{
   SOM_ResolveD(this,ConnectionUser,ConnectionUser,initialize)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,ConnectionUser,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,ConnectionUser,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ConnectionUser,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,ConnectionUser,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ConnectionUser,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,ConnectionUser,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,ConnectionUser,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,ConnectionUser,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ConnectionUser,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ConnectionUser*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ConnectionUser,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ConnectionUser,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ConnectionUser,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ConnectionUser,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ConnectionUser*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ConnectionUser,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ConnectionUser*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ConnectionUser,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ConnectionUser*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ConnectionUser,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ConnectionUser,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ConnectionUser,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,ConnectionUser,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,ConnectionUser,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,ConnectionUser,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ConnectionUser,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ConnectionUser,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,ConnectionUser,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   ConnectionUser_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ConnectionUser,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ConnectionUser,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   ConnectionUser_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ConnectionUser,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ConnectionUser,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,ConnectionUser,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,ConnectionUser,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,ConnectionUser,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ConnectionUser,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ConnectionUser,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ConnectionUser */



#endif       /* SOM_ConnectionUser_xh */
