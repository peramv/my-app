
#ifndef SOM_AWDBaseService_xh
#define SOM_AWDBaseService_xh

class AWDBaseService;

#define AWDBaseService_MajorVersion 2
#define AWDBaseService_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef AWDBaseService_API
#define AWDBaseService_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class AWDBase;
class AWDEvent;
class AWDTree;

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDBaseService Class */
SOMEXTERN
#if (defined(SOM_Module_AWDBSrv_Source) || defined(AWDBaseService_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBaseService))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDBaseServiceNewClass(
		integer4,
		integer4 );

/* The API to the AWDBaseService class object, and the methods it introduces. */
SOMEXTERN struct AWDBaseServiceClassDataStructure {
	SOMClass *classObject;
	somMToken start;
	somMToken stop;
	somMToken receiveEvent;
	somMToken startBatch;
	somMToken stopBatch;
	somMToken getWindowHandle;
	somMToken setWindowHandle;
}
#if !(defined(SOM_Module_AWDBSrv_Source) || defined(AWDBaseService_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBaseService))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDBaseServiceClassData;
#define _AWDBaseService AWDBaseServiceClassData.classObject

/* The API to parentMtabs for AWDBaseService, and the instance data it introduces. */
SOMEXTERN struct AWDBaseServiceCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_AWDBSrv_Source) || defined(AWDBaseService_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBaseService))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDBaseServiceCClassData;

/*
 * -- Typedefs for AWDBaseService Method Procedures
 */
extern "C" {
typedef boolean   SOMLINK somTP_AWDBaseService_start(AWDBaseService *somSelf, Environment *ev,
		AWDBase* pAwdObj);
typedef somTP_AWDBaseService_start *somTD_AWDBaseService_start;
typedef boolean   SOMLINK somTP_AWDBaseService_startBatch(AWDBaseService *somSelf, Environment *ev,
		AWDBase** pAwdObj,
		AWDTree* pAWDTree);
typedef somTP_AWDBaseService_startBatch *somTD_AWDBaseService_startBatch;
typedef boolean   SOMLINK somTP_AWDBaseService_stopBatch(AWDBaseService *somSelf, Environment *ev,
		AWDBase** pAwdObj,
		AWDTree* pAWDTree);
typedef somTP_AWDBaseService_stopBatch *somTD_AWDBaseService_stopBatch;
typedef boolean   SOMLINK somTP_AWDBaseService_stop(AWDBaseService *somSelf, Environment *ev);
typedef somTP_AWDBaseService_stop *somTD_AWDBaseService_stop;
typedef void   SOMLINK somTP_AWDBaseService_receiveEvent(AWDBaseService *somSelf, Environment *ev,
		AWDEvent* pzAWDEVENT);
typedef somTP_AWDBaseService_receiveEvent *somTD_AWDBaseService_receiveEvent;
typedef unsigned long   SOMLINK somTP_AWDBaseService_getWindowHandle(AWDBaseService *somSelf, Environment *ev);
typedef somTP_AWDBaseService_getWindowHandle *somTD_AWDBaseService_getWindowHandle;
typedef void   SOMLINK somTP_AWDBaseService_setWindowHandle(AWDBaseService *somSelf, Environment *ev,
		unsigned long ulHandle);
typedef somTP_AWDBaseService_setWindowHandle *somTD_AWDBaseService_setWindowHandle;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_AWDBaseService_somDefaultInit(AWDBaseService *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDBaseService_somDefaultInit *somTD_AWDBaseService_somDefaultInit;
typedef void   SOMLINK somTP_AWDBaseService_somDestruct(AWDBaseService *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDBaseService_somDestruct *somTD_AWDBaseService_somDestruct;
typedef void   SOMLINK somTP_AWDBaseService_somDefaultCopyInit(AWDBaseService *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseService_somDefaultCopyInit *somTD_AWDBaseService_somDefaultCopyInit;
typedef AWDBaseService*   SOMLINK somTP_AWDBaseService_somDefaultAssign(AWDBaseService *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseService_somDefaultAssign *somTD_AWDBaseService_somDefaultAssign;
typedef void   SOMLINK somTP_AWDBaseService_somDefaultConstCopyInit(AWDBaseService *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseService_somDefaultConstCopyInit *somTD_AWDBaseService_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDBaseService_somDefaultVCopyInit(AWDBaseService *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseService_somDefaultVCopyInit *somTD_AWDBaseService_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDBaseService_somDefaultConstVCopyInit(AWDBaseService *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseService_somDefaultConstVCopyInit *somTD_AWDBaseService_somDefaultConstVCopyInit;
typedef AWDBaseService*   SOMLINK somTP_AWDBaseService_somDefaultConstAssign(AWDBaseService *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseService_somDefaultConstAssign *somTD_AWDBaseService_somDefaultConstAssign;
typedef AWDBaseService*   SOMLINK somTP_AWDBaseService_somDefaultVAssign(AWDBaseService *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseService_somDefaultVAssign *somTD_AWDBaseService_somDefaultVAssign;
typedef AWDBaseService*   SOMLINK somTP_AWDBaseService_somDefaultConstVAssign(AWDBaseService *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseService_somDefaultConstVAssign *somTD_AWDBaseService_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDBaseService_somInit(AWDBaseService *somSelf);
typedef somTP_AWDBaseService_somInit *somTD_AWDBaseService_somInit;
typedef void   SOMLINK somTP_AWDBaseService_somFree(AWDBaseService *somSelf);
typedef somTP_AWDBaseService_somFree *somTD_AWDBaseService_somFree;
typedef void   SOMLINK somTP_AWDBaseService_somUninit(AWDBaseService *somSelf);
typedef somTP_AWDBaseService_somUninit *somTD_AWDBaseService_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDBaseService_somGetClass(AWDBaseService *somSelf);
typedef somTP_AWDBaseService_somGetClass *somTD_AWDBaseService_somGetClass;
typedef string   SOMLINK somTP_AWDBaseService_somGetClassName(AWDBaseService *somSelf);
typedef somTP_AWDBaseService_somGetClassName *somTD_AWDBaseService_somGetClassName;
typedef long   SOMLINK somTP_AWDBaseService_somGetSize(AWDBaseService *somSelf);
typedef somTP_AWDBaseService_somGetSize *somTD_AWDBaseService_somGetSize;
typedef boolean   SOMLINK somTP_AWDBaseService_somIsA(AWDBaseService *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDBaseService_somIsA *somTD_AWDBaseService_somIsA;
typedef boolean   SOMLINK somTP_AWDBaseService_somIsInstanceOf(AWDBaseService *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDBaseService_somIsInstanceOf *somTD_AWDBaseService_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDBaseService_somRespondsTo(AWDBaseService *somSelf,
		somId mId);
typedef somTP_AWDBaseService_somRespondsTo *somTD_AWDBaseService_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDBaseService_somDispatch(AWDBaseService *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDBaseService_somDispatch *somTD_AWDBaseService_somDispatch;
typedef boolean   SOMLINK somTP_AWDBaseService_somClassDispatch(AWDBaseService *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDBaseService_somClassDispatch *somTD_AWDBaseService_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDBaseService_somCastObj(AWDBaseService *somSelf,
		SOMClass* cls);
typedef somTP_AWDBaseService_somCastObj *somTD_AWDBaseService_somCastObj;
typedef boolean   SOMLINK somTP_AWDBaseService_somResetObj(AWDBaseService *somSelf);
typedef somTP_AWDBaseService_somResetObj *somTD_AWDBaseService_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDBaseService_somPrintSelf(AWDBaseService *somSelf);
typedef somTP_AWDBaseService_somPrintSelf *somTD_AWDBaseService_somPrintSelf;
typedef void   SOMLINK somTP_AWDBaseService_somDumpSelf(AWDBaseService *somSelf,
		long level);
typedef somTP_AWDBaseService_somDumpSelf *somTD_AWDBaseService_somDumpSelf;
typedef void   SOMLINK somTP_AWDBaseService_somDumpSelfInt(AWDBaseService *somSelf,
		long level);
typedef somTP_AWDBaseService_somDumpSelfInt *somTD_AWDBaseService_somDumpSelfInt;
}

#endif /* AWDBaseService_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDBaseService
 */
class AWDBaseService : public SOMObject
{
public:

// AWDBaseService::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDBaseService) AWDBaseServiceNewClass(AWDBaseService_MajorVersion,AWDBaseService_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDBaseService,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDBaseService));
}

// AWDBaseService::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDBaseService()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBaseServiceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDBaseService(AWDBaseService* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBaseServiceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDBaseService(const AWDBaseService* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBaseServiceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: start */
boolean   start(Environment *ev,
		AWDBase* pAwdObj)
{
   return SOM_ResolveD(this,AWDBaseService,AWDBaseService,start)
	(this, ev,pAwdObj);
}


/* method: startBatch */
boolean   startBatch(Environment *ev,
		AWDBase** pAwdObj,
		AWDTree* pAWDTree)
{
   return SOM_ResolveD(this,AWDBaseService,AWDBaseService,startBatch)
	(this, ev,pAwdObj,pAWDTree);
}


/* method: stopBatch */
boolean   stopBatch(Environment *ev,
		AWDBase** pAwdObj,
		AWDTree* pAWDTree)
{
   return SOM_ResolveD(this,AWDBaseService,AWDBaseService,stopBatch)
	(this, ev,pAwdObj,pAWDTree);
}


/* method: stop */
boolean   stop(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseService,AWDBaseService,stop)
	(this, ev);
}


/* method: receiveEvent */
void   receiveEvent(Environment *ev,
		AWDEvent* pzAWDEVENT)
{
   SOM_ResolveD(this,AWDBaseService,AWDBaseService,receiveEvent)
	(this, ev,pzAWDEVENT);
}


/* method: getWindowHandle */
unsigned long   getWindowHandle(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseService,AWDBaseService,getWindowHandle)
	(this, ev);
}


/* method: setWindowHandle */
void   setWindowHandle(Environment *ev,
		unsigned long ulHandle)
{
   SOM_ResolveD(this,AWDBaseService,AWDBaseService,setWindowHandle)
	(this, ev,ulHandle);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDBaseService,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDBaseService,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBaseService,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDBaseService*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBaseService,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBaseService,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBaseService,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBaseService,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDBaseService*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBaseService,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDBaseService*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBaseService,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDBaseService*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBaseService,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDBaseService,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDBaseService,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDBaseService,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDBaseService,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDBaseService,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDBaseService,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDBaseService,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDBaseService,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDBaseService,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDBaseService_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDBaseService,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDBaseService,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDBaseService_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDBaseService,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDBaseService,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDBaseService,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDBaseService,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDBaseService,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDBaseService,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDBaseService,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDBaseService */



#endif       /* SOM_AWDBaseService_xh */

#ifndef SOM_AWDBaseTempService_xh
#define SOM_AWDBaseTempService_xh

class AWDBaseTempService;

#define AWDBaseTempService_MajorVersion 2
#define AWDBaseTempService_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "awdobj.xh"
#include "awdevent.xh"

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDBaseService_xh
#include <AWDBSrv.xh>
#endif

#ifndef AWDBaseTempService_API
#define AWDBaseTempService_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
#define AWDBaseTempService_AWDTSRET 2 /* 2 */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_AWDTSRET
    #ifdef AWDTSRET
        #undef AWDTSRET
        #define SOMTGD_AWDTSRET 1
    #else
        #define AWDTSRET AWDBaseTempService_AWDTSRET
    #endif /* AWDTSRET */
#endif /* SOMTGD_AWDTSRET */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDBaseTempService Class */
SOMEXTERN
#if (defined(SOM_Module_AWDBSrv_Source) || defined(AWDBaseTempService_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBaseTempService))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDBaseTempServiceNewClass(
		integer4,
		integer4 );

/* The API to the AWDBaseTempService class object, and the methods it introduces. */
SOMEXTERN struct AWDBaseTempServiceClassDataStructure {
	SOMClass *classObject;
}
#if !(defined(SOM_Module_AWDBSrv_Source) || defined(AWDBaseTempService_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBaseTempService))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDBaseTempServiceClassData;
#define _AWDBaseTempService AWDBaseTempServiceClassData.classObject

/* The API to parentMtabs for AWDBaseTempService, and the instance data it introduces. */
SOMEXTERN struct AWDBaseTempServiceCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_AWDBSrv_Source) || defined(AWDBaseTempService_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBaseTempService))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDBaseTempServiceCClassData;

/*
 * -- Typedefs for AWDBaseTempService Method Procedures
 */
extern "C" {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_AWDBaseTempService_start(AWDBaseTempService *somSelf, Environment *ev,
		AWDBase* pAwdObj);
typedef somTP_AWDBaseTempService_start *somTD_AWDBaseTempService_start;
typedef boolean   SOMLINK somTP_AWDBaseTempService_startBatch(AWDBaseTempService *somSelf, Environment *ev,
		AWDBase** pAwdObj,
		AWDTree* pAWDTree);
typedef somTP_AWDBaseTempService_startBatch *somTD_AWDBaseTempService_startBatch;
typedef boolean   SOMLINK somTP_AWDBaseTempService_stopBatch(AWDBaseTempService *somSelf, Environment *ev,
		AWDBase** pAwdObj,
		AWDTree* pAWDTree);
typedef somTP_AWDBaseTempService_stopBatch *somTD_AWDBaseTempService_stopBatch;
typedef boolean   SOMLINK somTP_AWDBaseTempService_stop(AWDBaseTempService *somSelf, Environment *ev);
typedef somTP_AWDBaseTempService_stop *somTD_AWDBaseTempService_stop;
typedef void   SOMLINK somTP_AWDBaseTempService_receiveEvent(AWDBaseTempService *somSelf, Environment *ev,
		AWDEvent* pzAWDEVENT);
typedef somTP_AWDBaseTempService_receiveEvent *somTD_AWDBaseTempService_receiveEvent;
typedef unsigned long   SOMLINK somTP_AWDBaseTempService_getWindowHandle(AWDBaseTempService *somSelf, Environment *ev);
typedef somTP_AWDBaseTempService_getWindowHandle *somTD_AWDBaseTempService_getWindowHandle;
typedef void   SOMLINK somTP_AWDBaseTempService_setWindowHandle(AWDBaseTempService *somSelf, Environment *ev,
		unsigned long ulHandle);
typedef somTP_AWDBaseTempService_setWindowHandle *somTD_AWDBaseTempService_setWindowHandle;
typedef void   SOMLINK somTP_AWDBaseTempService_somDefaultInit(AWDBaseTempService *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDBaseTempService_somDefaultInit *somTD_AWDBaseTempService_somDefaultInit;
typedef void   SOMLINK somTP_AWDBaseTempService_somDestruct(AWDBaseTempService *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDBaseTempService_somDestruct *somTD_AWDBaseTempService_somDestruct;
typedef void   SOMLINK somTP_AWDBaseTempService_somDefaultCopyInit(AWDBaseTempService *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseTempService_somDefaultCopyInit *somTD_AWDBaseTempService_somDefaultCopyInit;
typedef AWDBaseTempService*   SOMLINK somTP_AWDBaseTempService_somDefaultAssign(AWDBaseTempService *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseTempService_somDefaultAssign *somTD_AWDBaseTempService_somDefaultAssign;
typedef void   SOMLINK somTP_AWDBaseTempService_somDefaultConstCopyInit(AWDBaseTempService *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseTempService_somDefaultConstCopyInit *somTD_AWDBaseTempService_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDBaseTempService_somDefaultVCopyInit(AWDBaseTempService *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseTempService_somDefaultVCopyInit *somTD_AWDBaseTempService_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDBaseTempService_somDefaultConstVCopyInit(AWDBaseTempService *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseTempService_somDefaultConstVCopyInit *somTD_AWDBaseTempService_somDefaultConstVCopyInit;
typedef AWDBaseTempService*   SOMLINK somTP_AWDBaseTempService_somDefaultConstAssign(AWDBaseTempService *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseTempService_somDefaultConstAssign *somTD_AWDBaseTempService_somDefaultConstAssign;
typedef AWDBaseTempService*   SOMLINK somTP_AWDBaseTempService_somDefaultVAssign(AWDBaseTempService *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseTempService_somDefaultVAssign *somTD_AWDBaseTempService_somDefaultVAssign;
typedef AWDBaseTempService*   SOMLINK somTP_AWDBaseTempService_somDefaultConstVAssign(AWDBaseTempService *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseTempService_somDefaultConstVAssign *somTD_AWDBaseTempService_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDBaseTempService_somInit(AWDBaseTempService *somSelf);
typedef somTP_AWDBaseTempService_somInit *somTD_AWDBaseTempService_somInit;
typedef void   SOMLINK somTP_AWDBaseTempService_somFree(AWDBaseTempService *somSelf);
typedef somTP_AWDBaseTempService_somFree *somTD_AWDBaseTempService_somFree;
typedef void   SOMLINK somTP_AWDBaseTempService_somUninit(AWDBaseTempService *somSelf);
typedef somTP_AWDBaseTempService_somUninit *somTD_AWDBaseTempService_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDBaseTempService_somGetClass(AWDBaseTempService *somSelf);
typedef somTP_AWDBaseTempService_somGetClass *somTD_AWDBaseTempService_somGetClass;
typedef string   SOMLINK somTP_AWDBaseTempService_somGetClassName(AWDBaseTempService *somSelf);
typedef somTP_AWDBaseTempService_somGetClassName *somTD_AWDBaseTempService_somGetClassName;
typedef long   SOMLINK somTP_AWDBaseTempService_somGetSize(AWDBaseTempService *somSelf);
typedef somTP_AWDBaseTempService_somGetSize *somTD_AWDBaseTempService_somGetSize;
typedef boolean   SOMLINK somTP_AWDBaseTempService_somIsA(AWDBaseTempService *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDBaseTempService_somIsA *somTD_AWDBaseTempService_somIsA;
typedef boolean   SOMLINK somTP_AWDBaseTempService_somIsInstanceOf(AWDBaseTempService *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDBaseTempService_somIsInstanceOf *somTD_AWDBaseTempService_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDBaseTempService_somRespondsTo(AWDBaseTempService *somSelf,
		somId mId);
typedef somTP_AWDBaseTempService_somRespondsTo *somTD_AWDBaseTempService_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDBaseTempService_somDispatch(AWDBaseTempService *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDBaseTempService_somDispatch *somTD_AWDBaseTempService_somDispatch;
typedef boolean   SOMLINK somTP_AWDBaseTempService_somClassDispatch(AWDBaseTempService *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDBaseTempService_somClassDispatch *somTD_AWDBaseTempService_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDBaseTempService_somCastObj(AWDBaseTempService *somSelf,
		SOMClass* cls);
typedef somTP_AWDBaseTempService_somCastObj *somTD_AWDBaseTempService_somCastObj;
typedef boolean   SOMLINK somTP_AWDBaseTempService_somResetObj(AWDBaseTempService *somSelf);
typedef somTP_AWDBaseTempService_somResetObj *somTD_AWDBaseTempService_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDBaseTempService_somPrintSelf(AWDBaseTempService *somSelf);
typedef somTP_AWDBaseTempService_somPrintSelf *somTD_AWDBaseTempService_somPrintSelf;
typedef void   SOMLINK somTP_AWDBaseTempService_somDumpSelf(AWDBaseTempService *somSelf,
		long level);
typedef somTP_AWDBaseTempService_somDumpSelf *somTD_AWDBaseTempService_somDumpSelf;
typedef void   SOMLINK somTP_AWDBaseTempService_somDumpSelfInt(AWDBaseTempService *somSelf,
		long level);
typedef somTP_AWDBaseTempService_somDumpSelfInt *somTD_AWDBaseTempService_somDumpSelfInt;
}

#endif /* AWDBaseTempService_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDBaseTempService
 */
class AWDBaseTempService : public AWDBaseService
{
public:

// AWDBaseTempService::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDBaseTempService) AWDBaseTempServiceNewClass(AWDBaseTempService_MajorVersion,AWDBaseTempService_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDBaseTempService,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDBaseTempService));
}

// AWDBaseTempService::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDBaseTempService()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBaseTempServiceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDBaseTempService(AWDBaseTempService* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBaseTempServiceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDBaseTempService(const AWDBaseTempService* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBaseTempServiceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: start */
boolean   start(Environment *ev,
		AWDBase* pAwdObj)
{
   return SOM_ResolveD(this,AWDBaseTempService,AWDBaseService,start)
	(this, ev,pAwdObj);
}


/* method: startBatch */
boolean   startBatch(Environment *ev,
		AWDBase** pAwdObj,
		AWDTree* pAWDTree)
{
   return SOM_ResolveD(this,AWDBaseTempService,AWDBaseService,startBatch)
	(this, ev,pAwdObj,pAWDTree);
}


/* method: stopBatch */
boolean   stopBatch(Environment *ev,
		AWDBase** pAwdObj,
		AWDTree* pAWDTree)
{
   return SOM_ResolveD(this,AWDBaseTempService,AWDBaseService,stopBatch)
	(this, ev,pAwdObj,pAWDTree);
}


/* method: stop */
boolean   stop(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseTempService,AWDBaseService,stop)
	(this, ev);
}


/* method: receiveEvent */
void   receiveEvent(Environment *ev,
		AWDEvent* pzAWDEVENT)
{
   SOM_ResolveD(this,AWDBaseTempService,AWDBaseService,receiveEvent)
	(this, ev,pzAWDEVENT);
}


/* method: getWindowHandle */
unsigned long   getWindowHandle(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseTempService,AWDBaseService,getWindowHandle)
	(this, ev);
}


/* method: setWindowHandle */
void   setWindowHandle(Environment *ev,
		unsigned long ulHandle)
{
   SOM_ResolveD(this,AWDBaseTempService,AWDBaseService,setWindowHandle)
	(this, ev,ulHandle);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDBaseTempService,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDBaseTempService,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBaseTempService,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDBaseTempService*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBaseTempService,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBaseTempService,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBaseTempService,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDBaseTempService*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDBaseTempService*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDBaseTempService*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDBaseTempService,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDBaseTempService,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDBaseTempService,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDBaseTempService_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDBaseTempService,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDBaseTempService_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDBaseTempService,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDBaseTempService,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDBaseTempService,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDBaseTempService,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDBaseTempService */



#endif       /* SOM_AWDBaseTempService_xh */
