
#ifndef SOM_BaseServiceAid_xh
#define SOM_BaseServiceAid_xh

class BaseServiceAid;

#define BaseServiceAid_MajorVersion 2
#define BaseServiceAid_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "awdobj.xh"

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef BaseServiceAid_API
#define BaseServiceAid_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class AWDPersist;
class AWDBase;
class iostream;
class AWDVisitor;
class AWDServiceManager;
class AWDCommentAid;
class AWDString;
class AWDAlphaField;
class AWDDateTime;
class AWDBaseField;
class AWDDictionary;
class AWDDateTimeField;
class AWDGroupField;
class AWDApplication;
class AWDFieldFactory;
class AWDEntityKey;
class AWDMenu;
class CCriticalSection;
class FieldList;
class AWDRelationship;

/*
 * End of user-defined types.
 */

/* A procedure to create the BaseServiceAid Class */
SOMEXTERN
#if (defined(SOM_Module_baseaid_Source) || defined(BaseServiceAid_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_BaseServiceAid))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK BaseServiceAidNewClass(
		integer4,
		integer4 );

/* The API to the BaseServiceAid class object, and the methods it introduces. */
SOMEXTERN struct BaseServiceAidClassDataStructure {
	SOMClass *classObject;
	somMToken setReceiver;
	somMToken receiver;
}
#if !(defined(SOM_Module_baseaid_Source) || defined(BaseServiceAid_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_BaseServiceAid))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK BaseServiceAidClassData;
#define _BaseServiceAid BaseServiceAidClassData.classObject

/* The API to parentMtabs for BaseServiceAid, and the instance data it introduces. */
SOMEXTERN struct BaseServiceAidCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_baseaid_Source) || defined(BaseServiceAid_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_BaseServiceAid))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK BaseServiceAidCClassData;

/*
 * -- Typedefs for BaseServiceAid Method Procedures
 */
extern "C" {
typedef void   SOMLINK somTP_BaseServiceAid_setReceiver(BaseServiceAid *somSelf, Environment *ev,
		AWDBase* pAwdObj);
typedef somTP_BaseServiceAid_setReceiver *somTD_BaseServiceAid_setReceiver;
typedef AWDBase*   SOMLINK somTP_BaseServiceAid_receiver(BaseServiceAid *somSelf, Environment *ev);
typedef somTP_BaseServiceAid_receiver *somTD_BaseServiceAid_receiver;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_BaseServiceAid_somDefaultInit(BaseServiceAid *somSelf,
		somInitCtrl* ctrl);
typedef somTP_BaseServiceAid_somDefaultInit *somTD_BaseServiceAid_somDefaultInit;
typedef void   SOMLINK somTP_BaseServiceAid_somDestruct(BaseServiceAid *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_BaseServiceAid_somDestruct *somTD_BaseServiceAid_somDestruct;
typedef void   SOMLINK somTP_BaseServiceAid_somDefaultCopyInit(BaseServiceAid *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_BaseServiceAid_somDefaultCopyInit *somTD_BaseServiceAid_somDefaultCopyInit;
typedef BaseServiceAid*   SOMLINK somTP_BaseServiceAid_somDefaultAssign(BaseServiceAid *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_BaseServiceAid_somDefaultAssign *somTD_BaseServiceAid_somDefaultAssign;
typedef void   SOMLINK somTP_BaseServiceAid_somDefaultConstCopyInit(BaseServiceAid *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_BaseServiceAid_somDefaultConstCopyInit *somTD_BaseServiceAid_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_BaseServiceAid_somDefaultVCopyInit(BaseServiceAid *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_BaseServiceAid_somDefaultVCopyInit *somTD_BaseServiceAid_somDefaultVCopyInit;
typedef void   SOMLINK somTP_BaseServiceAid_somDefaultConstVCopyInit(BaseServiceAid *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_BaseServiceAid_somDefaultConstVCopyInit *somTD_BaseServiceAid_somDefaultConstVCopyInit;
typedef BaseServiceAid*   SOMLINK somTP_BaseServiceAid_somDefaultConstAssign(BaseServiceAid *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_BaseServiceAid_somDefaultConstAssign *somTD_BaseServiceAid_somDefaultConstAssign;
typedef BaseServiceAid*   SOMLINK somTP_BaseServiceAid_somDefaultVAssign(BaseServiceAid *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_BaseServiceAid_somDefaultVAssign *somTD_BaseServiceAid_somDefaultVAssign;
typedef BaseServiceAid*   SOMLINK somTP_BaseServiceAid_somDefaultConstVAssign(BaseServiceAid *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_BaseServiceAid_somDefaultConstVAssign *somTD_BaseServiceAid_somDefaultConstVAssign;
typedef void   SOMLINK somTP_BaseServiceAid_somInit(BaseServiceAid *somSelf);
typedef somTP_BaseServiceAid_somInit *somTD_BaseServiceAid_somInit;
typedef void   SOMLINK somTP_BaseServiceAid_somFree(BaseServiceAid *somSelf);
typedef somTP_BaseServiceAid_somFree *somTD_BaseServiceAid_somFree;
typedef void   SOMLINK somTP_BaseServiceAid_somUninit(BaseServiceAid *somSelf);
typedef somTP_BaseServiceAid_somUninit *somTD_BaseServiceAid_somUninit;
typedef SOMClass*   SOMLINK somTP_BaseServiceAid_somGetClass(BaseServiceAid *somSelf);
typedef somTP_BaseServiceAid_somGetClass *somTD_BaseServiceAid_somGetClass;
typedef string   SOMLINK somTP_BaseServiceAid_somGetClassName(BaseServiceAid *somSelf);
typedef somTP_BaseServiceAid_somGetClassName *somTD_BaseServiceAid_somGetClassName;
typedef long   SOMLINK somTP_BaseServiceAid_somGetSize(BaseServiceAid *somSelf);
typedef somTP_BaseServiceAid_somGetSize *somTD_BaseServiceAid_somGetSize;
typedef boolean   SOMLINK somTP_BaseServiceAid_somIsA(BaseServiceAid *somSelf,
		SOMClass* aClassObj);
typedef somTP_BaseServiceAid_somIsA *somTD_BaseServiceAid_somIsA;
typedef boolean   SOMLINK somTP_BaseServiceAid_somIsInstanceOf(BaseServiceAid *somSelf,
		SOMClass* aClassObj);
typedef somTP_BaseServiceAid_somIsInstanceOf *somTD_BaseServiceAid_somIsInstanceOf;
typedef boolean   SOMLINK somTP_BaseServiceAid_somRespondsTo(BaseServiceAid *somSelf,
		somId mId);
typedef somTP_BaseServiceAid_somRespondsTo *somTD_BaseServiceAid_somRespondsTo;
typedef boolean   SOMLINK somTP_BaseServiceAid_somDispatch(BaseServiceAid *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_BaseServiceAid_somDispatch *somTD_BaseServiceAid_somDispatch;
typedef boolean   SOMLINK somTP_BaseServiceAid_somClassDispatch(BaseServiceAid *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_BaseServiceAid_somClassDispatch *somTD_BaseServiceAid_somClassDispatch;
typedef boolean   SOMLINK somTP_BaseServiceAid_somCastObj(BaseServiceAid *somSelf,
		SOMClass* cls);
typedef somTP_BaseServiceAid_somCastObj *somTD_BaseServiceAid_somCastObj;
typedef boolean   SOMLINK somTP_BaseServiceAid_somResetObj(BaseServiceAid *somSelf);
typedef somTP_BaseServiceAid_somResetObj *somTD_BaseServiceAid_somResetObj;
typedef SOMObject*   SOMLINK somTP_BaseServiceAid_somPrintSelf(BaseServiceAid *somSelf);
typedef somTP_BaseServiceAid_somPrintSelf *somTD_BaseServiceAid_somPrintSelf;
typedef void   SOMLINK somTP_BaseServiceAid_somDumpSelf(BaseServiceAid *somSelf,
		long level);
typedef somTP_BaseServiceAid_somDumpSelf *somTD_BaseServiceAid_somDumpSelf;
typedef void   SOMLINK somTP_BaseServiceAid_somDumpSelfInt(BaseServiceAid *somSelf,
		long level);
typedef somTP_BaseServiceAid_somDumpSelfInt *somTD_BaseServiceAid_somDumpSelfInt;
}

#endif /* BaseServiceAid_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for BaseServiceAid
 */
class BaseServiceAid : public SOMObject
{
public:

// BaseServiceAid::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_BaseServiceAid) BaseServiceAidNewClass(BaseServiceAid_MajorVersion,BaseServiceAid_MinorVersion);
   return (void*)
      SOM_Resolve(_BaseServiceAid,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_BaseServiceAid));
}

// BaseServiceAid::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

BaseServiceAid()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (BaseServiceAidCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

BaseServiceAid(BaseServiceAid* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (BaseServiceAidCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

BaseServiceAid(const BaseServiceAid* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (BaseServiceAidCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: setReceiver */
void   setReceiver(Environment *ev,
		AWDBase* pAwdObj)
{
   SOM_ResolveD(this,BaseServiceAid,BaseServiceAid,setReceiver)
	(this, ev,pAwdObj);
}


/* method: receiver */
AWDBase*   receiver(Environment *ev)
{
   return SOM_ResolveD(this,BaseServiceAid,BaseServiceAid,receiver)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,BaseServiceAid,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,BaseServiceAid,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,BaseServiceAid,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
BaseServiceAid*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,BaseServiceAid,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,BaseServiceAid,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,BaseServiceAid,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,BaseServiceAid,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
BaseServiceAid*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,BaseServiceAid,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
BaseServiceAid*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,BaseServiceAid,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
BaseServiceAid*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,BaseServiceAid,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,BaseServiceAid,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,BaseServiceAid,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,BaseServiceAid,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,BaseServiceAid,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,BaseServiceAid,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,BaseServiceAid,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,BaseServiceAid,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,BaseServiceAid,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,BaseServiceAid,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   BaseServiceAid_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,BaseServiceAid,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,BaseServiceAid,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   BaseServiceAid_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,BaseServiceAid,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,BaseServiceAid,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,BaseServiceAid,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,BaseServiceAid,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,BaseServiceAid,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,BaseServiceAid,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,BaseServiceAid,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* BaseServiceAid */



#endif       /* SOM_BaseServiceAid_xh */
