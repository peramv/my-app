
#ifndef SOM_AWDBase_xh
#define SOM_AWDBase_xh

class AWDBase;

#define AWDBase_MajorVersion 2
#define AWDBase_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <mlink.xh>    
#include <structs.xh>  
#include <field.xh>    
#include <group.xh>    
#include <alpha.xh>    
#include <awdtime.xh>     
#include <awddate.xh>     
#include <acbl0022.xh> 
#include <datetime.xh> 
#include <fact.xh>     
#include <entity.xh>   
#include <awdstrng.xh> 

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDCommon_xh
#include <common.xh>
#endif

#ifndef AWDBase_API
#define AWDBase_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class AWDPersist;
class AWDBase;
class iostream;
class AWDVisitor;
class AWDServiceManager;
class AWDCommentAid;
class AWDString;
class AWDAlphaField;
class AWDDateTime;
class AWDBaseField;
class AWDDictionary;
class AWDDateTimeField;
class AWDGroupField;
class AWDApplication;
class AWDFieldFactory;
class AWDEntityKey;
class AWDMenu;
class CCriticalSection;
class FieldList;
class AWDRelationship;
#define AWDBase_MAX_ICONTEXT 256 /* 256 */
typedef unsigned long AWDBase_PRIVILEGE;
#define AWDBase_PRIVILEGE_NONE 1UL
#define AWDBase_PRIVILEGE_EXIST 2UL
#define AWDBase_PRIVILEGE_VIEW 3UL
#define AWDBase_PRIVILEGE_SELECT 4UL
#define AWDBase_PRIVILEGE_UPDATE 5UL
typedef unsigned long AWDBase_STATE;
#define AWDBase_STATE_UNDEFINED 1UL
#define AWDBase_STATE_NEW 2UL
#define AWDBase_STATE_LOBABSENT 3UL
#define AWDBase_STATE_LOBPRESENT 4UL
typedef unsigned long AWDBase_COMMENTS;
#define AWDBase_COMMENT_UNDEFINED 1UL
#define AWDBase_COMMENT_FILE 2UL
#define AWDBase_COMMENT_STRING 3UL
typedef unsigned long AWDBase_CREATE_MODE;
#define AWDBase_UNLOCKED 1UL
#define AWDBase_LOCKED 2UL
#define AWDBase_BATCH 3UL
typedef unsigned long AWDBase_LOCKRESULT;
#define AWDBase_SUCCESSFULLY_LOCKED 1UL
#define AWDBase_LOCKED_BY_CURRENT_USER 2UL
#define AWDBase_LOCKED_BY_OTHER_USER 3UL
#define AWDBase_INSUFFICIENT_PRIVILEGE 4UL
typedef unsigned long AWDBase_RELATION;
#define AWDBase_RELATION_PARENT 1UL
#define AWDBase_RELATION_CHILD 2UL
#define AWDBase_RELATION_SIBLING 3UL

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_MAX_ICONTEXT
    #ifdef MAX_ICONTEXT
        #undef MAX_ICONTEXT
        #define SOMTGD_MAX_ICONTEXT 1
    #else
        #define MAX_ICONTEXT AWDBase_MAX_ICONTEXT
    #endif /* MAX_ICONTEXT */
#endif /* SOMTGD_MAX_ICONTEXT */
#ifndef SOMTGD_PRIVILEGE
    #ifdef PRIVILEGE
        #undef PRIVILEGE
        #define SOMTGD_PRIVILEGE 1
    #else
        #define PRIVILEGE AWDBase_PRIVILEGE
    #endif /* PRIVILEGE */
#endif /* SOMTGD_PRIVILEGE */
#ifndef SOMTGD_STATE
    #ifdef STATE
        #undef STATE
        #define SOMTGD_STATE 1
    #else
        #define STATE AWDBase_STATE
    #endif /* STATE */
#endif /* SOMTGD_STATE */
#ifndef SOMTGD_COMMENTS
    #ifdef COMMENTS
        #undef COMMENTS
        #define SOMTGD_COMMENTS 1
    #else
        #define COMMENTS AWDBase_COMMENTS
    #endif /* COMMENTS */
#endif /* SOMTGD_COMMENTS */
#ifndef SOMTGD_CREATE_MODE
    #ifdef CREATE_MODE
        #undef CREATE_MODE
        #define SOMTGD_CREATE_MODE 1
    #else
        #define CREATE_MODE AWDBase_CREATE_MODE
    #endif /* CREATE_MODE */
#endif /* SOMTGD_CREATE_MODE */
#ifndef SOMTGD_LOCKRESULT
    #ifdef LOCKRESULT
        #undef LOCKRESULT
        #define SOMTGD_LOCKRESULT 1
    #else
        #define LOCKRESULT AWDBase_LOCKRESULT
    #endif /* LOCKRESULT */
#endif /* SOMTGD_LOCKRESULT */
#ifndef SOMTGD_RELATION
    #ifdef RELATION
        #undef RELATION
        #define SOMTGD_RELATION 1
    #else
        #define RELATION AWDBase_RELATION
    #endif /* RELATION */
#endif /* SOMTGD_RELATION */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDBase Class */
SOMEXTERN
#if (defined(SOM_Module_awdobj_Source) || defined(AWDBase_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBase))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDBaseNewClass(
		integer4,
		integer4 );

/* The API to the AWDBase class object, and the methods it introduces. */
SOMEXTERN struct AWDBaseClassDataStructure {
	SOMClass *classObject;
	somMToken iOwn;
	somMToken addComments;
	somMToken autoFlags;
	somMToken businessArea;
	somMToken canContain;
	somMToken child;
	somMToken clone;
	somMToken copyFrom;
	somMToken createNode;
	somMToken creationDateTime;
	somMToken csdName;
	somMToken displayComments;
	somMToken displayCsd;
	somMToken displayHistory;
	somMToken field;
	somMToken fieldAsLong;
	somMToken fieldAsString;
	somMToken fieldCount;
	somMToken getCreateArray;
	somMToken getFieldArray;
	somMToken getFieldList;
	somMToken getKeyStrct;
	somMToken getState;
	somMToken getStructure;
	somMToken hasChanged;
	somMToken hasComments;
	somMToken iconName;
	somMToken iconText;
	somMToken indexField;
	somMToken initialize;
	somMToken isAutoChildSource;
	somMToken isAutoComments;
	somMToken isAutoHistory;
	somMToken isAutoLob;
	somMToken isAutoSiblingSource;
	somMToken isAutoViewSource;
	somMToken isFieldValid;
	somMToken isLocked;
	somMToken isSelected;
	somMToken isShowable;
	somMToken isUpdateable;
	somMToken isViewable;
	somMToken key;
	somMToken lock;
	somMToken unlock;
	somMToken lockedBy;
	somMToken next;
	somMToken ownerNode;
	somMToken recordCode;
	somMToken parent;
	somMToken previous;
	somMToken retrieve;
	somMToken retrieveSecondaryFields;
	somMToken setBusinessArea;
	somMToken setChild;
	somMToken setField;
	somMToken setFieldFromLong;
	somMToken setFieldFromString;
	somMToken setIndexField;
	somMToken setIndexFieldFromString;
	somMToken setNext;
	somMToken setPrevious;
	somMToken setParent;
	somMToken startService;
	somMToken stopCsd;
	somMToken stopHistory;
	somMToken stopComments;
	somMToken stopService;
	somMToken update;
	somMToken updateFromArray;
	somMToken updateFromStructure;
	somMToken validate;
	somMToken withKey;
	somMToken withStructure;
	somMToken withArray;
	somMToken withStructureandArray;
	somMToken relationship;
	somMToken usageToken;
	somMToken setUsageToken;
	somMToken create;
	somMToken updateFromKey;
	somMToken withEntityKey;
	somMToken withPersist;
	somMToken setCsdName;
	somMToken withObject;
	somMToken isSourceObject;
	somMToken isFolderObject;
	somMToken isTransactionObject;
	somMToken isCaseObject;
	somMToken withHandle;
	somMToken getTag;
	somMToken setTag;
	somMToken createRelationship;
	somMToken makeChild;
	somMToken makeParent;
	somMToken isAutoCsd;
	somMToken isInUse;
	somMToken setInUse;
	somMToken autoFlagFocus;
	somMToken type;
	somMToken isType;
	somMToken setBeginTime;
	somMToken setBeginTimeFromTimestamp;
	somMToken setEndTime;
	somMToken setEndTimeFromTimestamp;
	somMToken setElapsedTime;
	somMToken getBeginTime;
	somMToken getEndTime;
	somMToken startServiceByIndex;
	somMToken iLocked;
	somMToken setILockedFlag;
	somMToken unlockRegardless;
	somMToken removeWorkselect;
	somMToken createRelationshipWithNotify;
}
#if !(defined(SOM_Module_awdobj_Source) || defined(AWDBase_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBase))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDBaseClassData;
#define _AWDBase AWDBaseClassData.classObject

/* The API to parentMtabs for AWDBase, and the instance data it introduces. */
SOMEXTERN struct AWDBaseCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_awdobj_Source) || defined(AWDBase_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBase))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDBaseCClassData;

/*
 * -- Typedefs for AWDBase Method Procedures
 */
extern "C" {
typedef boolean   SOMLINK somTP_AWDBase_iOwn(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_iOwn *somTD_AWDBase_iOwn;
typedef boolean   SOMLINK somTP_AWDBase_iLocked(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_iLocked *somTD_AWDBase_iLocked;
typedef boolean   SOMLINK somTP_AWDBase_addComments(AWDBase *somSelf, Environment *ev,
		char* pCommentBuffer,
		AWDBase_COMMENTS dType);
typedef somTP_AWDBase_addComments *somTD_AWDBase_addComments;
typedef unsigned long   SOMLINK somTP_AWDBase_autoFlags(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_autoFlags *somTD_AWDBase_autoFlags;
typedef unsigned short   SOMLINK somTP_AWDBase_autoFlagFocus(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_autoFlagFocus *somTD_AWDBase_autoFlagFocus;
typedef char*   SOMLINK somTP_AWDBase_businessArea(AWDBase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDBase_businessArea *somTD_AWDBase_businessArea;
typedef boolean   SOMLINK somTP_AWDBase_canContain(AWDBase *somSelf, Environment *ev,
		AWDBase* awdObj);
typedef somTP_AWDBase_canContain *somTD_AWDBase_canContain;
typedef boolean   SOMLINK somTP_AWDBase_copyFrom(AWDBase *somSelf, Environment *ev,
		AWDBase* awdObj);
typedef somTP_AWDBase_copyFrom *somTD_AWDBase_copyFrom;
typedef void   SOMLINK somTP_AWDBase_clone(AWDBase *somSelf, Environment *ev,
		unsigned short usCount,
		boolean fCreateRelationship,
		boolean fLock,
		AWDBase** ppClonedObjs,
		string shareMemName);
typedef somTP_AWDBase_clone *somTD_AWDBase_clone;
typedef void   SOMLINK somTP_AWDBase_create(AWDBase *somSelf, Environment *ev,
		AWDBase_CREATE_MODE mode,
		unsigned long ulBatch);
typedef somTP_AWDBase_create *somTD_AWDBase_create;
typedef char*   SOMLINK somTP_AWDBase_createNode(AWDBase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDBase_createNode *somTD_AWDBase_createNode;
typedef char*   SOMLINK somTP_AWDBase_creationDateTime(AWDBase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDBase_creationDateTime *somTD_AWDBase_creationDateTime;
typedef char*   SOMLINK somTP_AWDBase_csdName(AWDBase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDBase_csdName *somTD_AWDBase_csdName;
typedef boolean   SOMLINK somTP_AWDBase_displayComments(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_displayComments *somTD_AWDBase_displayComments;
typedef boolean   SOMLINK somTP_AWDBase_displayCsd(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_displayCsd *somTD_AWDBase_displayCsd;
typedef boolean   SOMLINK somTP_AWDBase_displayHistory(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_displayHistory *somTD_AWDBase_displayHistory;
typedef AWDBaseField*   SOMLINK somTP_AWDBase_field(AWDBase *somSelf, Environment *ev,
		string aname,
		unsigned short seqnum);
typedef somTP_AWDBase_field *somTD_AWDBase_field;
typedef unsigned long   SOMLINK somTP_AWDBase_fieldAsLong(AWDBase *somSelf, Environment *ev,
		string aname,
		unsigned short seqnum);
typedef somTP_AWDBase_fieldAsLong *somTD_AWDBase_fieldAsLong;
typedef char*   SOMLINK somTP_AWDBase_fieldAsString(AWDBase *somSelf, Environment *ev,
		string aname,
		unsigned short seqnum,
		AWDString* str);
typedef somTP_AWDBase_fieldAsString *somTD_AWDBase_fieldAsString;
typedef unsigned short   SOMLINK somTP_AWDBase_fieldCount(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_fieldCount *somTD_AWDBase_fieldCount;
typedef char*   SOMLINK somTP_AWDBase_getBeginTime(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_getBeginTime *somTD_AWDBase_getBeginTime;
typedef boolean   SOMLINK somTP_AWDBase_getCreateArray(AWDBase *somSelf, Environment *ev,
		AWD_PAWDCREATELOBARRAY pAwdLobArray);
typedef somTP_AWDBase_getCreateArray *somTD_AWDBase_getCreateArray;
typedef FieldList*   SOMLINK somTP_AWDBase_getFieldList(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_getFieldList *somTD_AWDBase_getFieldList;
typedef char*   SOMLINK somTP_AWDBase_getEndTime(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_getEndTime *somTD_AWDBase_getEndTime;
typedef boolean   SOMLINK somTP_AWDBase_getKeyStrct(AWDBase *somSelf, Environment *ev,
		AWD_PAWDOBJECTKEYSTRCT pKey);
typedef somTP_AWDBase_getKeyStrct *somTD_AWDBase_getKeyStrct;
typedef boolean   SOMLINK somTP_AWDBase_getFieldArray(AWDBase *somSelf, Environment *ev,
		AWD_AWDLOBARRAYSTRCT* pAwdLobArray);
typedef somTP_AWDBase_getFieldArray *somTD_AWDBase_getFieldArray;
typedef AWDBase_STATE   SOMLINK somTP_AWDBase_getState(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_getState *somTD_AWDBase_getState;
typedef boolean   SOMLINK somTP_AWDBase_getStructure(AWDBase *somSelf, Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct);
typedef somTP_AWDBase_getStructure *somTD_AWDBase_getStructure;
typedef boolean   SOMLINK somTP_AWDBase_hasChanged(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_hasChanged *somTD_AWDBase_hasChanged;
typedef boolean   SOMLINK somTP_AWDBase_hasComments(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_hasComments *somTD_AWDBase_hasComments;
typedef char*   SOMLINK somTP_AWDBase_iconName(AWDBase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDBase_iconName *somTD_AWDBase_iconName;
typedef char*   SOMLINK somTP_AWDBase_iconText(AWDBase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDBase_iconText *somTD_AWDBase_iconText;
typedef AWDBaseField*   SOMLINK somTP_AWDBase_indexField(AWDBase *somSelf, Environment *ev,
		unsigned short indexnumber);
typedef somTP_AWDBase_indexField *somTD_AWDBase_indexField;
typedef void   SOMLINK somTP_AWDBase_initialize(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_initialize *somTD_AWDBase_initialize;
typedef boolean   SOMLINK somTP_AWDBase_isAutoChildSource(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isAutoChildSource *somTD_AWDBase_isAutoChildSource;
typedef boolean   SOMLINK somTP_AWDBase_isAutoComments(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isAutoComments *somTD_AWDBase_isAutoComments;
typedef boolean   SOMLINK somTP_AWDBase_isAutoCsd(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isAutoCsd *somTD_AWDBase_isAutoCsd;
typedef boolean   SOMLINK somTP_AWDBase_isAutoHistory(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isAutoHistory *somTD_AWDBase_isAutoHistory;
typedef boolean   SOMLINK somTP_AWDBase_isAutoLob(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isAutoLob *somTD_AWDBase_isAutoLob;
typedef boolean   SOMLINK somTP_AWDBase_isAutoSiblingSource(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isAutoSiblingSource *somTD_AWDBase_isAutoSiblingSource;
typedef boolean   SOMLINK somTP_AWDBase_isAutoViewSource(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isAutoViewSource *somTD_AWDBase_isAutoViewSource;
typedef boolean   SOMLINK somTP_AWDBase_isFieldValid(AWDBase *somSelf, Environment *ev,
		string pszField);
typedef somTP_AWDBase_isFieldValid *somTD_AWDBase_isFieldValid;
typedef boolean   SOMLINK somTP_AWDBase_isInUse(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isInUse *somTD_AWDBase_isInUse;
typedef boolean   SOMLINK somTP_AWDBase_isLocked(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isLocked *somTD_AWDBase_isLocked;
typedef boolean   SOMLINK somTP_AWDBase_isSelected(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isSelected *somTD_AWDBase_isSelected;
typedef boolean   SOMLINK somTP_AWDBase_isShowable(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isShowable *somTD_AWDBase_isShowable;
typedef boolean   SOMLINK somTP_AWDBase_isType(AWDBase *somSelf, Environment *ev,
		unsigned long ulType);
typedef somTP_AWDBase_isType *somTD_AWDBase_isType;
typedef boolean   SOMLINK somTP_AWDBase_isUpdateable(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isUpdateable *somTD_AWDBase_isUpdateable;
typedef boolean   SOMLINK somTP_AWDBase_isViewable(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isViewable *somTD_AWDBase_isViewable;
typedef boolean   SOMLINK somTP_AWDBase_isSourceObject(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isSourceObject *somTD_AWDBase_isSourceObject;
typedef boolean   SOMLINK somTP_AWDBase_isFolderObject(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isFolderObject *somTD_AWDBase_isFolderObject;
typedef boolean   SOMLINK somTP_AWDBase_isTransactionObject(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isTransactionObject *somTD_AWDBase_isTransactionObject;
typedef boolean   SOMLINK somTP_AWDBase_isCaseObject(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_isCaseObject *somTD_AWDBase_isCaseObject;
typedef char*   SOMLINK somTP_AWDBase_key(AWDBase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDBase_key *somTD_AWDBase_key;
typedef AWDBase_LOCKRESULT   SOMLINK somTP_AWDBase_lock(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_lock *somTD_AWDBase_lock;
typedef boolean   SOMLINK somTP_AWDBase_unlock(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_unlock *somTD_AWDBase_unlock;
typedef boolean   SOMLINK somTP_AWDBase_unlockRegardless(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_unlockRegardless *somTD_AWDBase_unlockRegardless;
typedef char*   SOMLINK somTP_AWDBase_lockedBy(AWDBase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDBase_lockedBy *somTD_AWDBase_lockedBy;
typedef char*   SOMLINK somTP_AWDBase_ownerNode(AWDBase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDBase_ownerNode *somTD_AWDBase_ownerNode;
typedef char*   SOMLINK somTP_AWDBase_recordCode(AWDBase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDBase_recordCode *somTD_AWDBase_recordCode;
typedef boolean   SOMLINK somTP_AWDBase_removeWorkselect(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_removeWorkselect *somTD_AWDBase_removeWorkselect;
typedef boolean   SOMLINK somTP_AWDBase_retrieve(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_retrieve *somTD_AWDBase_retrieve;
typedef boolean   SOMLINK somTP_AWDBase_retrieveSecondaryFields(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_retrieveSecondaryFields *somTD_AWDBase_retrieveSecondaryFields;
typedef void   SOMLINK somTP_AWDBase_setBeginTime(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_setBeginTime *somTD_AWDBase_setBeginTime;
typedef void   SOMLINK somTP_AWDBase_setBeginTimeFromTimestamp(AWDBase *somSelf, Environment *ev,
		string pszTimestamp);
typedef somTP_AWDBase_setBeginTimeFromTimestamp *somTD_AWDBase_setBeginTimeFromTimestamp;
typedef boolean   SOMLINK somTP_AWDBase_setBusinessArea(AWDBase *somSelf, Environment *ev,
		string pszba);
typedef somTP_AWDBase_setBusinessArea *somTD_AWDBase_setBusinessArea;
typedef void   SOMLINK somTP_AWDBase_setCsdName(AWDBase *somSelf, Environment *ev,
		char* pszCsd);
typedef somTP_AWDBase_setCsdName *somTD_AWDBase_setCsdName;
typedef void   SOMLINK somTP_AWDBase_setEndTime(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_setEndTime *somTD_AWDBase_setEndTime;
typedef void   SOMLINK somTP_AWDBase_setEndTimeFromTimestamp(AWDBase *somSelf, Environment *ev,
		string pszTimestamp);
typedef somTP_AWDBase_setEndTimeFromTimestamp *somTD_AWDBase_setEndTimeFromTimestamp;
typedef void   SOMLINK somTP_AWDBase_setElapsedTime(AWDBase *somSelf, Environment *ev,
		unsigned long ulElapsedTime);
typedef somTP_AWDBase_setElapsedTime *somTD_AWDBase_setElapsedTime;
typedef boolean   SOMLINK somTP_AWDBase_setField(AWDBase *somSelf, Environment *ev,
		AWDBaseField* fld);
typedef somTP_AWDBase_setField *somTD_AWDBase_setField;
typedef boolean   SOMLINK somTP_AWDBase_setFieldFromLong(AWDBase *somSelf, Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		unsigned long ulvalue);
typedef somTP_AWDBase_setFieldFromLong *somTD_AWDBase_setFieldFromLong;
typedef boolean   SOMLINK somTP_AWDBase_setFieldFromString(AWDBase *somSelf, Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		string pszvalue);
typedef somTP_AWDBase_setFieldFromString *somTD_AWDBase_setFieldFromString;
typedef boolean   SOMLINK somTP_AWDBase_setIndexField(AWDBase *somSelf, Environment *ev,
		unsigned short usindex,
		AWDBaseField* fld);
typedef somTP_AWDBase_setIndexField *somTD_AWDBase_setIndexField;
typedef boolean   SOMLINK somTP_AWDBase_setIndexFieldFromString(AWDBase *somSelf, Environment *ev,
		unsigned short usindex,
		string pszField);
typedef somTP_AWDBase_setIndexFieldFromString *somTD_AWDBase_setIndexFieldFromString;
typedef void   SOMLINK somTP_AWDBase_setInUse(AWDBase *somSelf, Environment *ev,
		boolean fUse);
typedef somTP_AWDBase_setInUse *somTD_AWDBase_setInUse;
typedef boolean   SOMLINK somTP_AWDBase_setILockedFlag(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_setILockedFlag *somTD_AWDBase_setILockedFlag;
typedef boolean   SOMLINK somTP_AWDBase_startService(AWDBase *somSelf, Environment *ev,
		string pszServiceClass);
typedef somTP_AWDBase_startService *somTD_AWDBase_startService;
typedef boolean   SOMLINK somTP_AWDBase_startServiceByIndex(AWDBase *somSelf, Environment *ev,
		unsigned long ulCategory);
typedef somTP_AWDBase_startServiceByIndex *somTD_AWDBase_startServiceByIndex;
typedef boolean   SOMLINK somTP_AWDBase_stopCsd(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_stopCsd *somTD_AWDBase_stopCsd;
typedef boolean   SOMLINK somTP_AWDBase_stopHistory(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_stopHistory *somTD_AWDBase_stopHistory;
typedef boolean   SOMLINK somTP_AWDBase_stopComments(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_stopComments *somTD_AWDBase_stopComments;
typedef boolean   SOMLINK somTP_AWDBase_stopService(AWDBase *somSelf, Environment *ev,
		string pszServiceClass);
typedef somTP_AWDBase_stopService *somTD_AWDBase_stopService;
typedef unsigned long   SOMLINK somTP_AWDBase_type(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_type *somTD_AWDBase_type;
typedef boolean   SOMLINK somTP_AWDBase_update(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_update *somTD_AWDBase_update;
typedef boolean   SOMLINK somTP_AWDBase_updateFromArray(AWDBase *somSelf, Environment *ev,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDBase_updateFromArray *somTD_AWDBase_updateFromArray;
typedef void   SOMLINK somTP_AWDBase_updateFromKey(AWDBase *somSelf, Environment *ev,
		AWDEntityKey* pKey);
typedef somTP_AWDBase_updateFromKey *somTD_AWDBase_updateFromKey;
typedef boolean   SOMLINK somTP_AWDBase_updateFromStructure(AWDBase *somSelf, Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct);
typedef somTP_AWDBase_updateFromStructure *somTD_AWDBase_updateFromStructure;
typedef boolean   SOMLINK somTP_AWDBase_validate(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_validate *somTD_AWDBase_validate;
typedef void   SOMLINK somTP_AWDBase_withEntityKey(AWDBase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey);
typedef somTP_AWDBase_withEntityKey *somTD_AWDBase_withEntityKey;
typedef void   SOMLINK somTP_AWDBase_withKey(AWDBase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct);
typedef somTP_AWDBase_withKey *somTD_AWDBase_withKey;
typedef void   SOMLINK somTP_AWDBase_withStructure(AWDBase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj);
typedef somTP_AWDBase_withStructure *somTD_AWDBase_withStructure;
typedef void   SOMLINK somTP_AWDBase_withArray(AWDBase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDBase_withArray *somTD_AWDBase_withArray;
typedef void   SOMLINK somTP_AWDBase_withStructureandArray(AWDBase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDBase_withStructureandArray *somTD_AWDBase_withStructureandArray;
typedef void   SOMLINK somTP_AWDBase_withPersist(AWDBase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDBase_withPersist *somTD_AWDBase_withPersist;
typedef void   SOMLINK somTP_AWDBase_withObject(AWDBase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDBase* obj);
typedef somTP_AWDBase_withObject *somTD_AWDBase_withObject;
typedef void   SOMLINK somTP_AWDBase_withHandle(AWDBase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject);
typedef somTP_AWDBase_withHandle *somTD_AWDBase_withHandle;
typedef AWDBase*   SOMLINK somTP_AWDBase_next(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_next *somTD_AWDBase_next;
typedef AWDBase*   SOMLINK somTP_AWDBase_previous(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_previous *somTD_AWDBase_previous;
typedef AWDBase*   SOMLINK somTP_AWDBase_child(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_child *somTD_AWDBase_child;
typedef AWDBase*   SOMLINK somTP_AWDBase_parent(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_parent *somTD_AWDBase_parent;
typedef AWDRelationship*   SOMLINK somTP_AWDBase_relationship(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_relationship *somTD_AWDBase_relationship;
typedef void   SOMLINK somTP_AWDBase_setNext(AWDBase *somSelf, Environment *ev,
		AWDBase* next);
typedef somTP_AWDBase_setNext *somTD_AWDBase_setNext;
typedef void   SOMLINK somTP_AWDBase_setPrevious(AWDBase *somSelf, Environment *ev,
		AWDBase* previous);
typedef somTP_AWDBase_setPrevious *somTD_AWDBase_setPrevious;
typedef void   SOMLINK somTP_AWDBase_setChild(AWDBase *somSelf, Environment *ev,
		AWDBase* child);
typedef somTP_AWDBase_setChild *somTD_AWDBase_setChild;
typedef void   SOMLINK somTP_AWDBase_setParent(AWDBase *somSelf, Environment *ev,
		AWDBase* parent);
typedef somTP_AWDBase_setParent *somTD_AWDBase_setParent;
typedef void*   SOMLINK somTP_AWDBase_usageToken(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_usageToken *somTD_AWDBase_usageToken;
typedef void   SOMLINK somTP_AWDBase_setUsageToken(AWDBase *somSelf, Environment *ev,
		void* pv);
typedef somTP_AWDBase_setUsageToken *somTD_AWDBase_setUsageToken;
typedef unsigned long   SOMLINK somTP_AWDBase_getTag(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_getTag *somTD_AWDBase_getTag;
typedef void   SOMLINK somTP_AWDBase_setTag(AWDBase *somSelf, Environment *ev,
		unsigned long ulTag);
typedef somTP_AWDBase_setTag *somTD_AWDBase_setTag;
typedef boolean   SOMLINK somTP_AWDBase_createRelationship(AWDBase *somSelf, Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation);
typedef somTP_AWDBase_createRelationship *somTD_AWDBase_createRelationship;
typedef boolean   SOMLINK somTP_AWDBase_createRelationshipWithNotify(AWDBase *somSelf, Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation);
typedef somTP_AWDBase_createRelationshipWithNotify *somTD_AWDBase_createRelationshipWithNotify;
typedef boolean   SOMLINK somTP_AWDBase_makeChild(AWDBase *somSelf, Environment *ev,
		AWDBase* pChild);
typedef somTP_AWDBase_makeChild *somTD_AWDBase_makeChild;
typedef boolean   SOMLINK somTP_AWDBase_makeParent(AWDBase *somSelf, Environment *ev,
		AWDBase* pParent);
typedef somTP_AWDBase_makeParent *somTD_AWDBase_makeParent;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_AWDBase_store(AWDBase *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDBase_store *somTD_AWDBase_store;
typedef void   SOMLINK somTP_AWDBase_restore(AWDBase *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDBase_restore *somTD_AWDBase_restore;
typedef void   SOMLINK somTP_AWDBase_somDefaultInit(AWDBase *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDBase_somDefaultInit *somTD_AWDBase_somDefaultInit;
typedef void   SOMLINK somTP_AWDBase_somDestruct(AWDBase *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDBase_somDestruct *somTD_AWDBase_somDestruct;
typedef somf_MLinkable*   SOMLINK somTP_AWDBase_somfMLinkableInit(AWDBase *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_AWDBase_somfMLinkableInit *somTD_AWDBase_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_AWDBase_somfGetNext(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_somfGetNext *somTD_AWDBase_somfGetNext;
typedef void   SOMLINK somTP_AWDBase_somfSetNext(AWDBase *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDBase_somfSetNext *somTD_AWDBase_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_AWDBase_somfGetPrevious(AWDBase *somSelf, Environment *ev);
typedef somTP_AWDBase_somfGetPrevious *somTD_AWDBase_somfGetPrevious;
typedef void   SOMLINK somTP_AWDBase_somfSetPrevious(AWDBase *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDBase_somfSetPrevious *somTD_AWDBase_somfSetPrevious;
typedef void   SOMLINK somTP_AWDBase_somInit(AWDBase *somSelf);
typedef somTP_AWDBase_somInit *somTD_AWDBase_somInit;
typedef void   SOMLINK somTP_AWDBase_somDefaultCopyInit(AWDBase *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBase_somDefaultCopyInit *somTD_AWDBase_somDefaultCopyInit;
typedef AWDBase*   SOMLINK somTP_AWDBase_somDefaultAssign(AWDBase *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBase_somDefaultAssign *somTD_AWDBase_somDefaultAssign;
typedef void   SOMLINK somTP_AWDBase_somDefaultConstCopyInit(AWDBase *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBase_somDefaultConstCopyInit *somTD_AWDBase_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDBase_somDefaultVCopyInit(AWDBase *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBase_somDefaultVCopyInit *somTD_AWDBase_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDBase_somDefaultConstVCopyInit(AWDBase *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBase_somDefaultConstVCopyInit *somTD_AWDBase_somDefaultConstVCopyInit;
typedef AWDBase*   SOMLINK somTP_AWDBase_somDefaultConstAssign(AWDBase *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBase_somDefaultConstAssign *somTD_AWDBase_somDefaultConstAssign;
typedef AWDBase*   SOMLINK somTP_AWDBase_somDefaultVAssign(AWDBase *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBase_somDefaultVAssign *somTD_AWDBase_somDefaultVAssign;
typedef AWDBase*   SOMLINK somTP_AWDBase_somDefaultConstVAssign(AWDBase *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBase_somDefaultConstVAssign *somTD_AWDBase_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDBase_somFree(AWDBase *somSelf);
typedef somTP_AWDBase_somFree *somTD_AWDBase_somFree;
typedef void   SOMLINK somTP_AWDBase_somUninit(AWDBase *somSelf);
typedef somTP_AWDBase_somUninit *somTD_AWDBase_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDBase_somGetClass(AWDBase *somSelf);
typedef somTP_AWDBase_somGetClass *somTD_AWDBase_somGetClass;
typedef string   SOMLINK somTP_AWDBase_somGetClassName(AWDBase *somSelf);
typedef somTP_AWDBase_somGetClassName *somTD_AWDBase_somGetClassName;
typedef long   SOMLINK somTP_AWDBase_somGetSize(AWDBase *somSelf);
typedef somTP_AWDBase_somGetSize *somTD_AWDBase_somGetSize;
typedef boolean   SOMLINK somTP_AWDBase_somIsA(AWDBase *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDBase_somIsA *somTD_AWDBase_somIsA;
typedef boolean   SOMLINK somTP_AWDBase_somIsInstanceOf(AWDBase *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDBase_somIsInstanceOf *somTD_AWDBase_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDBase_somRespondsTo(AWDBase *somSelf,
		somId mId);
typedef somTP_AWDBase_somRespondsTo *somTD_AWDBase_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDBase_somDispatch(AWDBase *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDBase_somDispatch *somTD_AWDBase_somDispatch;
typedef boolean   SOMLINK somTP_AWDBase_somClassDispatch(AWDBase *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDBase_somClassDispatch *somTD_AWDBase_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDBase_somCastObj(AWDBase *somSelf,
		SOMClass* cls);
typedef somTP_AWDBase_somCastObj *somTD_AWDBase_somCastObj;
typedef boolean   SOMLINK somTP_AWDBase_somResetObj(AWDBase *somSelf);
typedef somTP_AWDBase_somResetObj *somTD_AWDBase_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDBase_somPrintSelf(AWDBase *somSelf);
typedef somTP_AWDBase_somPrintSelf *somTD_AWDBase_somPrintSelf;
typedef void   SOMLINK somTP_AWDBase_somDumpSelf(AWDBase *somSelf,
		long level);
typedef somTP_AWDBase_somDumpSelf *somTD_AWDBase_somDumpSelf;
typedef void   SOMLINK somTP_AWDBase_somDumpSelfInt(AWDBase *somSelf,
		long level);
typedef somTP_AWDBase_somDumpSelfInt *somTD_AWDBase_somDumpSelfInt;
}

#endif /* AWDBase_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDBase
 */
class AWDBase : public AWDCommon
{
public:

// AWDBase::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDBase) AWDBaseNewClass(AWDBase_MajorVersion,AWDBase_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDBase,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDBase));
}

// AWDBase::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDBase()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBaseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDBase(AWDBase* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBaseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDBase(const AWDBase* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBaseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDBase(Environment *ev,AWDEntityKey* pKey) 
{
   withEntityKey(ev,0,pKey);
}

AWDBase(Environment *ev,AWD_PAWDOBJECTKEYSTRCT pKeyStrct) 
{
   withKey(ev,0,pKeyStrct);
}

AWDBase(Environment *ev,AWD_PAWDOBJECTSTRCT pAwdObj) 
{
   withStructure(ev,0,pAwdObj);
}

AWDBase(Environment *ev,AWD_PAWDLOBARRAYSTRCT pAwdLobArray) 
{
   withArray(ev,0,pAwdLobArray);
}

AWDBase(Environment *ev,AWD_PAWDOBJECTSTRCT pAwdObj,AWD_PAWDLOBARRAYSTRCT pAwdLobArray) 
{
   withStructureandArray(ev,0,pAwdObj,pAwdLobArray);
}

AWDBase(Environment *ev,AWDPersist* pPersist) 
{
   withPersist(ev,0,pPersist);
}

AWDBase(Environment *ev,AWDBase* obj) 
{
   withObject(ev,0,obj);
}

AWDBase(Environment *ev,unsigned long hObject) 
{
   withHandle(ev,0,hObject);
}


/* method: iOwn */
boolean   iOwn(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,iOwn)
	(this, ev);
}


/* method: iLocked */
boolean   iLocked(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,iLocked)
	(this, ev);
}


/* method: addComments */
boolean   addComments(Environment *ev,
		char* pCommentBuffer,
		AWDBase_COMMENTS dType)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,addComments)
	(this, ev,pCommentBuffer,dType);
}


/* method: autoFlags */
unsigned long   autoFlags(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,autoFlags)
	(this, ev);
}


/* method: autoFlagFocus */
unsigned short   autoFlagFocus(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,autoFlagFocus)
	(this, ev);
}


/* method: businessArea */
char*   businessArea(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,businessArea)
	(this, ev,str);
}


/* method: canContain */
boolean   canContain(Environment *ev,
		AWDBase* awdObj)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,canContain)
	(this, ev,awdObj);
}


/* method: copyFrom */
boolean   copyFrom(Environment *ev,
		AWDBase* awdObj)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,copyFrom)
	(this, ev,awdObj);
}


/* method: clone */
void   clone(Environment *ev,
		unsigned short usCount,
		boolean fCreateRelationship,
		boolean fLock,
		AWDBase** ppClonedObjs,
		string shareMemName)
{
   SOM_ResolveD(this,AWDBase,AWDBase,clone)
	(this, ev,usCount,fCreateRelationship,fLock,ppClonedObjs,shareMemName);
}


/* method: create */
void   create(Environment *ev,
		AWDBase_CREATE_MODE mode,
		unsigned long ulBatch)
{
   SOM_ResolveD(this,AWDBase,AWDBase,create)
	(this, ev,mode,ulBatch);
}


/* method: createNode */
char*   createNode(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,createNode)
	(this, ev,str);
}


/* method: creationDateTime */
char*   creationDateTime(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,creationDateTime)
	(this, ev,str);
}


/* method: csdName */
char*   csdName(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,csdName)
	(this, ev,str);
}


/* method: displayComments */
boolean   displayComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,displayComments)
	(this, ev);
}


/* method: displayCsd */
boolean   displayCsd(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,displayCsd)
	(this, ev);
}


/* method: displayHistory */
boolean   displayHistory(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,displayHistory)
	(this, ev);
}


/* method: field */
AWDBaseField*   field(Environment *ev,
		string aname,
		unsigned short seqnum)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,field)
	(this, ev,aname,seqnum);
}


/* method: fieldAsLong */
unsigned long   fieldAsLong(Environment *ev,
		string aname,
		unsigned short seqnum)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,fieldAsLong)
	(this, ev,aname,seqnum);
}


/* method: fieldAsString */
char*   fieldAsString(Environment *ev,
		string aname,
		unsigned short seqnum,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,fieldAsString)
	(this, ev,aname,seqnum,str);
}


/* method: fieldCount */
unsigned short   fieldCount(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,fieldCount)
	(this, ev);
}


/* method: getBeginTime */
char*   getBeginTime(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,getBeginTime)
	(this, ev);
}


/* method: getCreateArray */
boolean   getCreateArray(Environment *ev,
		AWD_PAWDCREATELOBARRAY pAwdLobArray)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,getCreateArray)
	(this, ev,pAwdLobArray);
}


/* method: getFieldList */
FieldList*   getFieldList(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,getFieldList)
	(this, ev);
}


/* method: getEndTime */
char*   getEndTime(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,getEndTime)
	(this, ev);
}


/* method: getKeyStrct */
boolean   getKeyStrct(Environment *ev,
		AWD_PAWDOBJECTKEYSTRCT pKey)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,getKeyStrct)
	(this, ev,pKey);
}


/* method: getFieldArray */
boolean   getFieldArray(Environment *ev,
		AWD_AWDLOBARRAYSTRCT* pAwdLobArray)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,getFieldArray)
	(this, ev,pAwdLobArray);
}


/* method: getState */
AWDBase_STATE   getState(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,getState)
	(this, ev);
}


/* method: getStructure */
boolean   getStructure(Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,getStructure)
	(this, ev,pAwdObjStrct);
}


/* method: hasChanged */
boolean   hasChanged(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,hasChanged)
	(this, ev);
}


/* method: hasComments */
boolean   hasComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,hasComments)
	(this, ev);
}


/* method: iconName */
char*   iconName(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,iconName)
	(this, ev,str);
}


/* method: iconText */
char*   iconText(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,iconText)
	(this, ev,str);
}


/* method: indexField */
AWDBaseField*   indexField(Environment *ev,
		unsigned short indexnumber)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,indexField)
	(this, ev,indexnumber);
}


/* method: initialize */
void   initialize(Environment *ev)
{
   SOM_ResolveD(this,AWDBase,AWDBase,initialize)
	(this, ev);
}


/* method: isAutoChildSource */
boolean   isAutoChildSource(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isAutoChildSource)
	(this, ev);
}


/* method: isAutoComments */
boolean   isAutoComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isAutoComments)
	(this, ev);
}


/* method: isAutoCsd */
boolean   isAutoCsd(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isAutoCsd)
	(this, ev);
}


/* method: isAutoHistory */
boolean   isAutoHistory(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isAutoHistory)
	(this, ev);
}


/* method: isAutoLob */
boolean   isAutoLob(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isAutoLob)
	(this, ev);
}


/* method: isAutoSiblingSource */
boolean   isAutoSiblingSource(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isAutoSiblingSource)
	(this, ev);
}


/* method: isAutoViewSource */
boolean   isAutoViewSource(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isAutoViewSource)
	(this, ev);
}


/* method: isFieldValid */
boolean   isFieldValid(Environment *ev,
		string pszField)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isFieldValid)
	(this, ev,pszField);
}


/* method: isInUse */
boolean   isInUse(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isInUse)
	(this, ev);
}


/* method: isLocked */
boolean   isLocked(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isLocked)
	(this, ev);
}


/* method: isSelected */
boolean   isSelected(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isSelected)
	(this, ev);
}


/* method: isShowable */
boolean   isShowable(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isShowable)
	(this, ev);
}


/* method: isType */
boolean   isType(Environment *ev,
		unsigned long ulType)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isType)
	(this, ev,ulType);
}


/* method: isUpdateable */
boolean   isUpdateable(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isUpdateable)
	(this, ev);
}


/* method: isViewable */
boolean   isViewable(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isViewable)
	(this, ev);
}


/* method: isSourceObject */
boolean   isSourceObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isSourceObject)
	(this, ev);
}


/* method: isFolderObject */
boolean   isFolderObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isFolderObject)
	(this, ev);
}


/* method: isTransactionObject */
boolean   isTransactionObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isTransactionObject)
	(this, ev);
}


/* method: isCaseObject */
boolean   isCaseObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,isCaseObject)
	(this, ev);
}


/* method: key */
char*   key(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,key)
	(this, ev,str);
}


/* method: lock */
AWDBase_LOCKRESULT   lock(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,lock)
	(this, ev);
}


/* method: unlock */
boolean   unlock(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,unlock)
	(this, ev);
}


/* method: unlockRegardless */
boolean   unlockRegardless(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,unlockRegardless)
	(this, ev);
}


/* method: lockedBy */
char*   lockedBy(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,lockedBy)
	(this, ev,str);
}


/* method: ownerNode */
char*   ownerNode(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,ownerNode)
	(this, ev,str);
}


/* method: recordCode */
char*   recordCode(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,recordCode)
	(this, ev,str);
}


/* method: removeWorkselect */
boolean   removeWorkselect(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,removeWorkselect)
	(this, ev);
}


/* method: retrieve */
boolean   retrieve(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,retrieve)
	(this, ev);
}


/* method: retrieveSecondaryFields */
boolean   retrieveSecondaryFields(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,retrieveSecondaryFields)
	(this, ev);
}


/* method: setBeginTime */
void   setBeginTime(Environment *ev)
{
   SOM_ResolveD(this,AWDBase,AWDBase,setBeginTime)
	(this, ev);
}


/* method: setBeginTimeFromTimestamp */
void   setBeginTimeFromTimestamp(Environment *ev,
		string pszTimestamp)
{
   SOM_ResolveD(this,AWDBase,AWDBase,setBeginTimeFromTimestamp)
	(this, ev,pszTimestamp);
}


/* method: setBusinessArea */
boolean   setBusinessArea(Environment *ev,
		string pszba)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,setBusinessArea)
	(this, ev,pszba);
}


/* method: setCsdName */
void   setCsdName(Environment *ev,
		char* pszCsd)
{
   SOM_ResolveD(this,AWDBase,AWDBase,setCsdName)
	(this, ev,pszCsd);
}


/* method: setEndTime */
void   setEndTime(Environment *ev)
{
   SOM_ResolveD(this,AWDBase,AWDBase,setEndTime)
	(this, ev);
}


/* method: setEndTimeFromTimestamp */
void   setEndTimeFromTimestamp(Environment *ev,
		string pszTimestamp)
{
   SOM_ResolveD(this,AWDBase,AWDBase,setEndTimeFromTimestamp)
	(this, ev,pszTimestamp);
}


/* method: setElapsedTime */
void   setElapsedTime(Environment *ev,
		unsigned long ulElapsedTime)
{
   SOM_ResolveD(this,AWDBase,AWDBase,setElapsedTime)
	(this, ev,ulElapsedTime);
}


/* method: setField */
boolean   setField(Environment *ev,
		AWDBaseField* fld)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,setField)
	(this, ev,fld);
}


/* method: setFieldFromLong */
boolean   setFieldFromLong(Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		unsigned long ulvalue)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,setFieldFromLong)
	(this, ev,pszdataname,seqnum,ulvalue);
}


/* method: setFieldFromString */
boolean   setFieldFromString(Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		string pszvalue)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,setFieldFromString)
	(this, ev,pszdataname,seqnum,pszvalue);
}


/* method: setIndexField */
boolean   setIndexField(Environment *ev,
		unsigned short usindex,
		AWDBaseField* fld)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,setIndexField)
	(this, ev,usindex,fld);
}


/* method: setIndexFieldFromString */
boolean   setIndexFieldFromString(Environment *ev,
		unsigned short usindex,
		string pszField)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,setIndexFieldFromString)
	(this, ev,usindex,pszField);
}


/* method: setInUse */
void   setInUse(Environment *ev,
		boolean fUse)
{
   SOM_ResolveD(this,AWDBase,AWDBase,setInUse)
	(this, ev,fUse);
}


/* method: setILockedFlag */
boolean   setILockedFlag(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,setILockedFlag)
	(this, ev);
}


/* method: startService */
boolean   startService(Environment *ev,
		string pszServiceClass)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,startService)
	(this, ev,pszServiceClass);
}


/* method: startServiceByIndex */
boolean   startServiceByIndex(Environment *ev,
		unsigned long ulCategory)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,startServiceByIndex)
	(this, ev,ulCategory);
}


/* method: stopCsd */
boolean   stopCsd(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,stopCsd)
	(this, ev);
}


/* method: stopHistory */
boolean   stopHistory(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,stopHistory)
	(this, ev);
}


/* method: stopComments */
boolean   stopComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,stopComments)
	(this, ev);
}


/* method: stopService */
boolean   stopService(Environment *ev,
		string pszServiceClass)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,stopService)
	(this, ev,pszServiceClass);
}


/* method: type */
unsigned long   type(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,type)
	(this, ev);
}


/* method: update */
boolean   update(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,update)
	(this, ev);
}


/* method: updateFromArray */
boolean   updateFromArray(Environment *ev,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,updateFromArray)
	(this, ev,pAwdLobArray);
}


/* method: updateFromKey */
void   updateFromKey(Environment *ev,
		AWDEntityKey* pKey)
{
   SOM_ResolveD(this,AWDBase,AWDBase,updateFromKey)
	(this, ev,pKey);
}


/* method: updateFromStructure */
boolean   updateFromStructure(Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,updateFromStructure)
	(this, ev,pAwdObjStrct);
}


/* method: validate */
boolean   validate(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,validate)
	(this, ev);
}


/* initializer method: withEntityKey */
void   withEntityKey(Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey)
{
   SOM_ResolveD(this,AWDBase,AWDBase,withEntityKey)
	(this, ev,ctrl,pKey);
}


/* initializer method: withKey */
void   withKey(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct)
{
   SOM_ResolveD(this,AWDBase,AWDBase,withKey)
	(this, ev,ctrl,pKeyStrct);
}


/* initializer method: withStructure */
void   withStructure(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj)
{
   SOM_ResolveD(this,AWDBase,AWDBase,withStructure)
	(this, ev,ctrl,pAwdObj);
}


/* initializer method: withArray */
void   withArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDBase,AWDBase,withArray)
	(this, ev,ctrl,pAwdLobArray);
}


/* initializer method: withStructureandArray */
void   withStructureandArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDBase,AWDBase,withStructureandArray)
	(this, ev,ctrl,pAwdObj,pAwdLobArray);
}


/* initializer method: withPersist */
void   withPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDBase,AWDBase,withPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: withObject */
void   withObject(Environment *ev,
		somInitCtrl* ctrl,
		AWDBase* obj)
{
   SOM_ResolveD(this,AWDBase,AWDBase,withObject)
	(this, ev,ctrl,obj);
}


/* initializer method: withHandle */
void   withHandle(Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject)
{
   SOM_ResolveD(this,AWDBase,AWDBase,withHandle)
	(this, ev,ctrl,hObject);
}


/* method: next */
AWDBase*   next(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,next)
	(this, ev);
}


/* method: previous */
AWDBase*   previous(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,previous)
	(this, ev);
}


/* method: child */
AWDBase*   child(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,child)
	(this, ev);
}


/* method: parent */
AWDBase*   parent(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,parent)
	(this, ev);
}


/* method: relationship */
AWDRelationship*   relationship(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,relationship)
	(this, ev);
}


/* method: setNext */
void   setNext(Environment *ev,
		AWDBase* next)
{
   SOM_ResolveD(this,AWDBase,AWDBase,setNext)
	(this, ev,next);
}


/* method: setPrevious */
void   setPrevious(Environment *ev,
		AWDBase* previous)
{
   SOM_ResolveD(this,AWDBase,AWDBase,setPrevious)
	(this, ev,previous);
}


/* method: setChild */
void   setChild(Environment *ev,
		AWDBase* child)
{
   SOM_ResolveD(this,AWDBase,AWDBase,setChild)
	(this, ev,child);
}


/* method: setParent */
void   setParent(Environment *ev,
		AWDBase* parent)
{
   SOM_ResolveD(this,AWDBase,AWDBase,setParent)
	(this, ev,parent);
}


/* method: usageToken */
void*   usageToken(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,usageToken)
	(this, ev);
}


/* method: setUsageToken */
void   setUsageToken(Environment *ev,
		void* pv)
{
   SOM_ResolveD(this,AWDBase,AWDBase,setUsageToken)
	(this, ev,pv);
}


/* method: getTag */
unsigned long   getTag(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,getTag)
	(this, ev);
}


/* method: setTag */
void   setTag(Environment *ev,
		unsigned long ulTag)
{
   SOM_ResolveD(this,AWDBase,AWDBase,setTag)
	(this, ev,ulTag);
}


/* method: createRelationship */
boolean   createRelationship(Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,createRelationship)
	(this, ev,pRelationObj,relation);
}


/* method: createRelationshipWithNotify */
boolean   createRelationshipWithNotify(Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,createRelationshipWithNotify)
	(this, ev,pRelationObj,relation);
}


/* method: makeChild */
boolean   makeChild(Environment *ev,
		AWDBase* pChild)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,makeChild)
	(this, ev,pChild);
}


/* method: makeParent */
boolean   makeParent(Environment *ev,
		AWDBase* pParent)
{
   return SOM_ResolveD(this,AWDBase,AWDBase,makeParent)
	(this, ev,pParent);
}


/*
 * Reintroduce inherited methods
 */

/* method: store */
void   store(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDBase,AWDCommon,store)
	(this, ev,pPersist);
}


/* method: restore */
void   restore(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDBase,AWDCommon,restore)
	(this, ev,pPersist);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDBase,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDBase,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,AWDBase,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDBase,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,AWDBase,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDBase,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDBase,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBase,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDBase*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBase,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBase,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBase,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBase,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDBase*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBase,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDBase*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBase,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDBase*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBase,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDBase,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDBase,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDBase,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDBase,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDBase,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDBase,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDBase,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDBase,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDBase_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDBase,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDBase,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDBase_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDBase,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDBase,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDBase,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDBase,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDBase,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDBase,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDBase,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDBase */



#endif       /* SOM_AWDBase_xh */

#ifndef SOM_FieldList_xh
#define SOM_FieldList_xh

class FieldList;

#define FieldList_MajorVersion 2
#define FieldList_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <field.xh>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMList_xh
#include <somlist.xh>
#endif

#ifndef FieldList_API
#define FieldList_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the FieldList Class */
SOMEXTERN
#if (defined(SOM_Module_awdobj_Source) || defined(FieldList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_FieldList))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK FieldListNewClass(
		integer4,
		integer4 );

/* The API to the FieldList class object, and the methods it introduces. */
SOMEXTERN struct FieldListClassDataStructure {
	SOMClass *classObject;
	somMToken count;
	somMToken hasChanged;
	somMToken findField;
	somMToken removeBlank;
	somMToken validate;
	somMToken updateStatusAllFields;
	somMToken addNode;
}
#if !(defined(SOM_Module_awdobj_Source) || defined(FieldList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_FieldList))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK FieldListClassData;
#define _FieldList FieldListClassData.classObject

/* The API to parentMtabs for FieldList, and the instance data it introduces. */
SOMEXTERN struct FieldListCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_awdobj_Source) || defined(FieldList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_FieldList))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK FieldListCClassData;

/*
 * -- Typedefs for FieldList Method Procedures
 */
extern "C" {
typedef unsigned short   SOMLINK somTP_FieldList_addNode(FieldList *somSelf, Environment *ev,
		AWDBaseField* field);
typedef somTP_FieldList_addNode *somTD_FieldList_addNode;
typedef unsigned short   SOMLINK somTP_FieldList_count(FieldList *somSelf, Environment *ev);
typedef somTP_FieldList_count *somTD_FieldList_count;
typedef AWDBaseField*   SOMLINK somTP_FieldList_findField(FieldList *somSelf, Environment *ev,
		string fieldName,
		unsigned short usSeqNumber);
typedef somTP_FieldList_findField *somTD_FieldList_findField;
typedef boolean   SOMLINK somTP_FieldList_hasChanged(FieldList *somSelf, Environment *ev);
typedef somTP_FieldList_hasChanged *somTD_FieldList_hasChanged;
typedef unsigned short   SOMLINK somTP_FieldList_removeBlank(FieldList *somSelf, Environment *ev);
typedef somTP_FieldList_removeBlank *somTD_FieldList_removeBlank;
typedef boolean   SOMLINK somTP_FieldList_validate(FieldList *somSelf, Environment *ev);
typedef somTP_FieldList_validate *somTD_FieldList_validate;
typedef boolean   SOMLINK somTP_FieldList_updateStatusAllFields(FieldList *somSelf, Environment *ev,
		void* status);
typedef somTP_FieldList_updateStatusAllFields *somTD_FieldList_updateStatusAllFields;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_FieldList_deleteAll(FieldList *somSelf, Environment *ev);
typedef somTP_FieldList_deleteAll *somTD_FieldList_deleteAll;
typedef boolean   SOMLINK somTP_FieldList_forAll(FieldList *somSelf, Environment *ev,
		void* pfn,
		void* pData,
		somf_MLinkable** pLastObject);
typedef somTP_FieldList_forAll *somTD_FieldList_forAll;
typedef boolean   SOMLINK somTP_FieldList_visitAll(FieldList *somSelf, Environment *ev,
		AWDVisitor* visitor);
typedef somTP_FieldList_visitAll *somTD_FieldList_visitAll;
typedef boolean   SOMLINK somTP_FieldList_invariantOK(FieldList *somSelf, Environment *ev);
typedef somTP_FieldList_invariantOK *somTD_FieldList_invariantOK;
typedef void   SOMLINK somTP_FieldList_somDefaultInit(FieldList *somSelf,
		somInitCtrl* ctrl);
typedef somTP_FieldList_somDefaultInit *somTD_FieldList_somDefaultInit;
typedef void   SOMLINK somTP_FieldList_somDestruct(FieldList *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_FieldList_somDestruct *somTD_FieldList_somDestruct;
typedef unsigned long   SOMLINK somTP_FieldList_somfCount(FieldList *somSelf, Environment *ev);
typedef somTP_FieldList_somfCount *somTD_FieldList_somfCount;
typedef void   SOMLINK somTP_FieldList_somfRemove(FieldList *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_FieldList_somfRemove *somTD_FieldList_somfRemove;
typedef void   SOMLINK somTP_FieldList_somfRemoveAll(FieldList *somSelf, Environment *ev);
typedef somTP_FieldList_somfRemoveAll *somTD_FieldList_somfRemoveAll;
typedef somf_MLinkable*   SOMLINK somTP_FieldList_somfRemoveFirst(FieldList *somSelf, Environment *ev);
typedef somTP_FieldList_somfRemoveFirst *somTD_FieldList_somfRemoveFirst;
typedef somf_MLinkable*   SOMLINK somTP_FieldList_somfRemoveLast(FieldList *somSelf, Environment *ev);
typedef somTP_FieldList_somfRemoveLast *somTD_FieldList_somfRemoveLast;
typedef void   SOMLINK somTP_FieldList_somfAddBefore(FieldList *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_FieldList_somfAddBefore *somTD_FieldList_somfAddBefore;
typedef void   SOMLINK somTP_FieldList_somfAddAfter(FieldList *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_FieldList_somfAddAfter *somTD_FieldList_somfAddAfter;
typedef void   SOMLINK somTP_FieldList_somfAddFirst(FieldList *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_FieldList_somfAddFirst *somTD_FieldList_somfAddFirst;
typedef void   SOMLINK somTP_FieldList_somfAddLast(FieldList *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_FieldList_somfAddLast *somTD_FieldList_somfAddLast;
typedef somf_MLinkable*   SOMLINK somTP_FieldList_somfAfter(FieldList *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_FieldList_somfAfter *somTD_FieldList_somfAfter;
typedef somf_MLinkable*   SOMLINK somTP_FieldList_somfBefore(FieldList *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_FieldList_somfBefore *somTD_FieldList_somfBefore;
typedef somf_MLinkable*   SOMLINK somTP_FieldList_somfFirst(FieldList *somSelf, Environment *ev);
typedef somTP_FieldList_somfFirst *somTD_FieldList_somfFirst;
typedef somf_MLinkable*   SOMLINK somTP_FieldList_somfLast(FieldList *somSelf, Environment *ev);
typedef somTP_FieldList_somfLast *somTD_FieldList_somfLast;
typedef void   SOMLINK somTP_FieldList_somInit(FieldList *somSelf);
typedef somTP_FieldList_somInit *somTD_FieldList_somInit;
typedef void   SOMLINK somTP_FieldList_somUninit(FieldList *somSelf);
typedef somTP_FieldList_somUninit *somTD_FieldList_somUninit;
typedef void   SOMLINK somTP_FieldList_somDefaultCopyInit(FieldList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldList_somDefaultCopyInit *somTD_FieldList_somDefaultCopyInit;
typedef FieldList*   SOMLINK somTP_FieldList_somDefaultAssign(FieldList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldList_somDefaultAssign *somTD_FieldList_somDefaultAssign;
typedef void   SOMLINK somTP_FieldList_somDefaultConstCopyInit(FieldList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldList_somDefaultConstCopyInit *somTD_FieldList_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_FieldList_somDefaultVCopyInit(FieldList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldList_somDefaultVCopyInit *somTD_FieldList_somDefaultVCopyInit;
typedef void   SOMLINK somTP_FieldList_somDefaultConstVCopyInit(FieldList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldList_somDefaultConstVCopyInit *somTD_FieldList_somDefaultConstVCopyInit;
typedef FieldList*   SOMLINK somTP_FieldList_somDefaultConstAssign(FieldList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldList_somDefaultConstAssign *somTD_FieldList_somDefaultConstAssign;
typedef FieldList*   SOMLINK somTP_FieldList_somDefaultVAssign(FieldList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldList_somDefaultVAssign *somTD_FieldList_somDefaultVAssign;
typedef FieldList*   SOMLINK somTP_FieldList_somDefaultConstVAssign(FieldList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_FieldList_somDefaultConstVAssign *somTD_FieldList_somDefaultConstVAssign;
typedef void   SOMLINK somTP_FieldList_somFree(FieldList *somSelf);
typedef somTP_FieldList_somFree *somTD_FieldList_somFree;
typedef SOMClass*   SOMLINK somTP_FieldList_somGetClass(FieldList *somSelf);
typedef somTP_FieldList_somGetClass *somTD_FieldList_somGetClass;
typedef string   SOMLINK somTP_FieldList_somGetClassName(FieldList *somSelf);
typedef somTP_FieldList_somGetClassName *somTD_FieldList_somGetClassName;
typedef long   SOMLINK somTP_FieldList_somGetSize(FieldList *somSelf);
typedef somTP_FieldList_somGetSize *somTD_FieldList_somGetSize;
typedef boolean   SOMLINK somTP_FieldList_somIsA(FieldList *somSelf,
		SOMClass* aClassObj);
typedef somTP_FieldList_somIsA *somTD_FieldList_somIsA;
typedef boolean   SOMLINK somTP_FieldList_somIsInstanceOf(FieldList *somSelf,
		SOMClass* aClassObj);
typedef somTP_FieldList_somIsInstanceOf *somTD_FieldList_somIsInstanceOf;
typedef boolean   SOMLINK somTP_FieldList_somRespondsTo(FieldList *somSelf,
		somId mId);
typedef somTP_FieldList_somRespondsTo *somTD_FieldList_somRespondsTo;
typedef boolean   SOMLINK somTP_FieldList_somDispatch(FieldList *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_FieldList_somDispatch *somTD_FieldList_somDispatch;
typedef boolean   SOMLINK somTP_FieldList_somClassDispatch(FieldList *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_FieldList_somClassDispatch *somTD_FieldList_somClassDispatch;
typedef boolean   SOMLINK somTP_FieldList_somCastObj(FieldList *somSelf,
		SOMClass* cls);
typedef somTP_FieldList_somCastObj *somTD_FieldList_somCastObj;
typedef boolean   SOMLINK somTP_FieldList_somResetObj(FieldList *somSelf);
typedef somTP_FieldList_somResetObj *somTD_FieldList_somResetObj;
typedef SOMObject*   SOMLINK somTP_FieldList_somPrintSelf(FieldList *somSelf);
typedef somTP_FieldList_somPrintSelf *somTD_FieldList_somPrintSelf;
typedef void   SOMLINK somTP_FieldList_somDumpSelf(FieldList *somSelf,
		long level);
typedef somTP_FieldList_somDumpSelf *somTD_FieldList_somDumpSelf;
typedef void   SOMLINK somTP_FieldList_somDumpSelfInt(FieldList *somSelf,
		long level);
typedef somTP_FieldList_somDumpSelfInt *somTD_FieldList_somDumpSelfInt;
}

#endif /* FieldList_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for FieldList
 */
class FieldList : public SOMList
{
public:

// FieldList::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_FieldList) FieldListNewClass(FieldList_MajorVersion,FieldList_MinorVersion);
   return (void*)
      SOM_Resolve(_FieldList,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_FieldList));
}

// FieldList::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

FieldList()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (FieldListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

FieldList(FieldList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (FieldListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

FieldList(const FieldList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (FieldListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: addNode */
unsigned short   addNode(Environment *ev,
		AWDBaseField* field)
{
   return SOM_ResolveD(this,FieldList,FieldList,addNode)
	(this, ev,field);
}


/* method: count */
unsigned short   count(Environment *ev)
{
   return SOM_ResolveD(this,FieldList,FieldList,count)
	(this, ev);
}


/* method: findField */
AWDBaseField*   findField(Environment *ev,
		string fieldName,
		unsigned short usSeqNumber)
{
   return SOM_ResolveD(this,FieldList,FieldList,findField)
	(this, ev,fieldName,usSeqNumber);
}


/* method: hasChanged */
boolean   hasChanged(Environment *ev)
{
   return SOM_ResolveD(this,FieldList,FieldList,hasChanged)
	(this, ev);
}


/* method: removeBlank */
unsigned short   removeBlank(Environment *ev)
{
   return SOM_ResolveD(this,FieldList,FieldList,removeBlank)
	(this, ev);
}


/* method: validate */
boolean   validate(Environment *ev)
{
   return SOM_ResolveD(this,FieldList,FieldList,validate)
	(this, ev);
}


/* method: updateStatusAllFields */
boolean   updateStatusAllFields(Environment *ev,
		void* status)
{
   return SOM_ResolveD(this,FieldList,FieldList,updateStatusAllFields)
	(this, ev,status);
}


/*
 * Reintroduce inherited methods
 */

/* method: deleteAll */
boolean   deleteAll(Environment *ev)
{
   return SOM_ResolveD(this,FieldList,SOMList,deleteAll)
	(this, ev);
}


/* method: forAll */
boolean   forAll(Environment *ev,
		void* pfn,
		void* pData,
		somf_MLinkable** pLastObject)
{
   return SOM_ResolveD(this,FieldList,SOMList,forAll)
	(this, ev,pfn,pData,pLastObject);
}


/* method: visitAll */
boolean   visitAll(Environment *ev,
		AWDVisitor* visitor)
{
   return SOM_ResolveD(this,FieldList,SOMList,visitAll)
	(this, ev,visitor);
}


/* method: invariantOK */
boolean   invariantOK(Environment *ev)
{
   return SOM_ResolveD(this,FieldList,SOMList,invariantOK)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,FieldList,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,FieldList,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfCount */
unsigned long   somfCount(Environment *ev)
{
   return SOM_ResolveD(this,FieldList,somf_TPrimitiveLinkedList,somfCount)
	(this, ev);
}


/* method: somfRemove */
void   somfRemove(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,FieldList,somf_TPrimitiveLinkedList,somfRemove)
	(this, ev,aLink);
}


/* method: somfRemoveAll */
void   somfRemoveAll(Environment *ev)
{
   SOM_ResolveD(this,FieldList,somf_TPrimitiveLinkedList,somfRemoveAll)
	(this, ev);
}


/* method: somfRemoveFirst */
somf_MLinkable*   somfRemoveFirst(Environment *ev)
{
   return SOM_ResolveD(this,FieldList,somf_TPrimitiveLinkedList,somfRemoveFirst)
	(this, ev);
}


/* method: somfRemoveLast */
somf_MLinkable*   somfRemoveLast(Environment *ev)
{
   return SOM_ResolveD(this,FieldList,somf_TPrimitiveLinkedList,somfRemoveLast)
	(this, ev);
}


/* method: somfAddBefore */
void   somfAddBefore(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,FieldList,somf_TPrimitiveLinkedList,somfAddBefore)
	(this, ev,existing,obj);
}


/* method: somfAddAfter */
void   somfAddAfter(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,FieldList,somf_TPrimitiveLinkedList,somfAddAfter)
	(this, ev,existing,obj);
}


/* method: somfAddFirst */
void   somfAddFirst(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,FieldList,somf_TPrimitiveLinkedList,somfAddFirst)
	(this, ev,obj);
}


/* method: somfAddLast */
void   somfAddLast(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,FieldList,somf_TPrimitiveLinkedList,somfAddLast)
	(this, ev,obj);
}


/* method: somfAfter */
somf_MLinkable*   somfAfter(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,FieldList,somf_TPrimitiveLinkedList,somfAfter)
	(this, ev,existingobj);
}


/* method: somfBefore */
somf_MLinkable*   somfBefore(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,FieldList,somf_TPrimitiveLinkedList,somfBefore)
	(this, ev,existingobj);
}


/* method: somfFirst */
somf_MLinkable*   somfFirst(Environment *ev)
{
   return SOM_ResolveD(this,FieldList,somf_TPrimitiveLinkedList,somfFirst)
	(this, ev);
}


/* method: somfLast */
somf_MLinkable*   somfLast(Environment *ev)
{
   return SOM_ResolveD(this,FieldList,somf_TPrimitiveLinkedList,somfLast)
	(this, ev);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,FieldList,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,FieldList,SOMObject,somUninit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,FieldList,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
FieldList*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,FieldList,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,FieldList,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,FieldList,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,FieldList,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
FieldList*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,FieldList,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
FieldList*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,FieldList,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
FieldList*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,FieldList,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,FieldList,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,FieldList,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,FieldList,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,FieldList,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,FieldList,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,FieldList,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,FieldList,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   FieldList_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,FieldList,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,FieldList,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   FieldList_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,FieldList,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,FieldList,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,FieldList,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,FieldList,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,FieldList,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,FieldList,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,FieldList,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* FieldList */



#endif       /* SOM_FieldList_xh */

#ifndef SOM_AWDRelationship_xh
#define SOM_AWDRelationship_xh

class AWDRelationship;

#define AWDRelationship_MajorVersion 2
#define AWDRelationship_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDCommon_xh
#include <common.xh>
#endif

#ifndef AWDRelationship_API
#define AWDRelationship_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDRelationship Class */
SOMEXTERN
#if (defined(SOM_Module_awdobj_Source) || defined(AWDRelationship_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDRelationship))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDRelationshipNewClass(
		integer4,
		integer4 );

/* The API to the AWDRelationship class object, and the methods it introduces. */
SOMEXTERN struct AWDRelationshipClassDataStructure {
	SOMClass *classObject;
	somMToken isNew;
	somMToken relation;
	somMToken setNew;
	somMToken setOld;
	somMToken setRelation;
}
#if !(defined(SOM_Module_awdobj_Source) || defined(AWDRelationship_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDRelationship))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDRelationshipClassData;
#define _AWDRelationship AWDRelationshipClassData.classObject

/* The API to parentMtabs for AWDRelationship, and the instance data it introduces. */
SOMEXTERN struct AWDRelationshipCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_awdobj_Source) || defined(AWDRelationship_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDRelationship))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDRelationshipCClassData;

/*
 * -- Typedefs for AWDRelationship Method Procedures
 */
extern "C" {
typedef boolean   SOMLINK somTP_AWDRelationship_isNew(AWDRelationship *somSelf, Environment *ev);
typedef somTP_AWDRelationship_isNew *somTD_AWDRelationship_isNew;
typedef AWDBase*   SOMLINK somTP_AWDRelationship_relation(AWDRelationship *somSelf, Environment *ev);
typedef somTP_AWDRelationship_relation *somTD_AWDRelationship_relation;
typedef void   SOMLINK somTP_AWDRelationship_setNew(AWDRelationship *somSelf, Environment *ev);
typedef somTP_AWDRelationship_setNew *somTD_AWDRelationship_setNew;
typedef void   SOMLINK somTP_AWDRelationship_setOld(AWDRelationship *somSelf, Environment *ev);
typedef somTP_AWDRelationship_setOld *somTD_AWDRelationship_setOld;
typedef void   SOMLINK somTP_AWDRelationship_setRelation(AWDRelationship *somSelf, Environment *ev,
		AWDBase* relative);
typedef somTP_AWDRelationship_setRelation *somTD_AWDRelationship_setRelation;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_AWDRelationship_store(AWDRelationship *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDRelationship_store *somTD_AWDRelationship_store;
typedef void   SOMLINK somTP_AWDRelationship_restore(AWDRelationship *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDRelationship_restore *somTD_AWDRelationship_restore;
typedef void   SOMLINK somTP_AWDRelationship_somDefaultInit(AWDRelationship *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDRelationship_somDefaultInit *somTD_AWDRelationship_somDefaultInit;
typedef void   SOMLINK somTP_AWDRelationship_somDestruct(AWDRelationship *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDRelationship_somDestruct *somTD_AWDRelationship_somDestruct;
typedef somf_MLinkable*   SOMLINK somTP_AWDRelationship_somfMLinkableInit(AWDRelationship *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_AWDRelationship_somfMLinkableInit *somTD_AWDRelationship_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_AWDRelationship_somfGetNext(AWDRelationship *somSelf, Environment *ev);
typedef somTP_AWDRelationship_somfGetNext *somTD_AWDRelationship_somfGetNext;
typedef void   SOMLINK somTP_AWDRelationship_somfSetNext(AWDRelationship *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDRelationship_somfSetNext *somTD_AWDRelationship_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_AWDRelationship_somfGetPrevious(AWDRelationship *somSelf, Environment *ev);
typedef somTP_AWDRelationship_somfGetPrevious *somTD_AWDRelationship_somfGetPrevious;
typedef void   SOMLINK somTP_AWDRelationship_somfSetPrevious(AWDRelationship *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDRelationship_somfSetPrevious *somTD_AWDRelationship_somfSetPrevious;
typedef void   SOMLINK somTP_AWDRelationship_somInit(AWDRelationship *somSelf);
typedef somTP_AWDRelationship_somInit *somTD_AWDRelationship_somInit;
typedef void   SOMLINK somTP_AWDRelationship_somDefaultCopyInit(AWDRelationship *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRelationship_somDefaultCopyInit *somTD_AWDRelationship_somDefaultCopyInit;
typedef AWDRelationship*   SOMLINK somTP_AWDRelationship_somDefaultAssign(AWDRelationship *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRelationship_somDefaultAssign *somTD_AWDRelationship_somDefaultAssign;
typedef void   SOMLINK somTP_AWDRelationship_somDefaultConstCopyInit(AWDRelationship *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRelationship_somDefaultConstCopyInit *somTD_AWDRelationship_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDRelationship_somDefaultVCopyInit(AWDRelationship *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRelationship_somDefaultVCopyInit *somTD_AWDRelationship_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDRelationship_somDefaultConstVCopyInit(AWDRelationship *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRelationship_somDefaultConstVCopyInit *somTD_AWDRelationship_somDefaultConstVCopyInit;
typedef AWDRelationship*   SOMLINK somTP_AWDRelationship_somDefaultConstAssign(AWDRelationship *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRelationship_somDefaultConstAssign *somTD_AWDRelationship_somDefaultConstAssign;
typedef AWDRelationship*   SOMLINK somTP_AWDRelationship_somDefaultVAssign(AWDRelationship *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRelationship_somDefaultVAssign *somTD_AWDRelationship_somDefaultVAssign;
typedef AWDRelationship*   SOMLINK somTP_AWDRelationship_somDefaultConstVAssign(AWDRelationship *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDRelationship_somDefaultConstVAssign *somTD_AWDRelationship_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDRelationship_somFree(AWDRelationship *somSelf);
typedef somTP_AWDRelationship_somFree *somTD_AWDRelationship_somFree;
typedef void   SOMLINK somTP_AWDRelationship_somUninit(AWDRelationship *somSelf);
typedef somTP_AWDRelationship_somUninit *somTD_AWDRelationship_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDRelationship_somGetClass(AWDRelationship *somSelf);
typedef somTP_AWDRelationship_somGetClass *somTD_AWDRelationship_somGetClass;
typedef string   SOMLINK somTP_AWDRelationship_somGetClassName(AWDRelationship *somSelf);
typedef somTP_AWDRelationship_somGetClassName *somTD_AWDRelationship_somGetClassName;
typedef long   SOMLINK somTP_AWDRelationship_somGetSize(AWDRelationship *somSelf);
typedef somTP_AWDRelationship_somGetSize *somTD_AWDRelationship_somGetSize;
typedef boolean   SOMLINK somTP_AWDRelationship_somIsA(AWDRelationship *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDRelationship_somIsA *somTD_AWDRelationship_somIsA;
typedef boolean   SOMLINK somTP_AWDRelationship_somIsInstanceOf(AWDRelationship *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDRelationship_somIsInstanceOf *somTD_AWDRelationship_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDRelationship_somRespondsTo(AWDRelationship *somSelf,
		somId mId);
typedef somTP_AWDRelationship_somRespondsTo *somTD_AWDRelationship_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDRelationship_somDispatch(AWDRelationship *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDRelationship_somDispatch *somTD_AWDRelationship_somDispatch;
typedef boolean   SOMLINK somTP_AWDRelationship_somClassDispatch(AWDRelationship *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDRelationship_somClassDispatch *somTD_AWDRelationship_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDRelationship_somCastObj(AWDRelationship *somSelf,
		SOMClass* cls);
typedef somTP_AWDRelationship_somCastObj *somTD_AWDRelationship_somCastObj;
typedef boolean   SOMLINK somTP_AWDRelationship_somResetObj(AWDRelationship *somSelf);
typedef somTP_AWDRelationship_somResetObj *somTD_AWDRelationship_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDRelationship_somPrintSelf(AWDRelationship *somSelf);
typedef somTP_AWDRelationship_somPrintSelf *somTD_AWDRelationship_somPrintSelf;
typedef void   SOMLINK somTP_AWDRelationship_somDumpSelf(AWDRelationship *somSelf,
		long level);
typedef somTP_AWDRelationship_somDumpSelf *somTD_AWDRelationship_somDumpSelf;
typedef void   SOMLINK somTP_AWDRelationship_somDumpSelfInt(AWDRelationship *somSelf,
		long level);
typedef somTP_AWDRelationship_somDumpSelfInt *somTD_AWDRelationship_somDumpSelfInt;
}

#endif /* AWDRelationship_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDRelationship
 */
class AWDRelationship : public AWDCommon
{
public:

// AWDRelationship::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDRelationship) AWDRelationshipNewClass(AWDRelationship_MajorVersion,AWDRelationship_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDRelationship,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDRelationship));
}

// AWDRelationship::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDRelationship()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDRelationshipCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDRelationship(AWDRelationship* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDRelationshipCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDRelationship(const AWDRelationship* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDRelationshipCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: isNew */
boolean   isNew(Environment *ev)
{
   return SOM_ResolveD(this,AWDRelationship,AWDRelationship,isNew)
	(this, ev);
}


/* method: relation */
AWDBase*   relation(Environment *ev)
{
   return SOM_ResolveD(this,AWDRelationship,AWDRelationship,relation)
	(this, ev);
}


/* method: setNew */
void   setNew(Environment *ev)
{
   SOM_ResolveD(this,AWDRelationship,AWDRelationship,setNew)
	(this, ev);
}


/* method: setOld */
void   setOld(Environment *ev)
{
   SOM_ResolveD(this,AWDRelationship,AWDRelationship,setOld)
	(this, ev);
}


/* method: setRelation */
void   setRelation(Environment *ev,
		AWDBase* relative)
{
   SOM_ResolveD(this,AWDRelationship,AWDRelationship,setRelation)
	(this, ev,relative);
}


/*
 * Reintroduce inherited methods
 */

/* method: store */
void   store(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDRelationship,AWDCommon,store)
	(this, ev,pPersist);
}


/* method: restore */
void   restore(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDRelationship,AWDCommon,restore)
	(this, ev,pPersist);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDRelationship,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDRelationship,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,AWDRelationship,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,AWDRelationship,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDRelationship,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,AWDRelationship,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDRelationship,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDRelationship,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDRelationship,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDRelationship*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDRelationship,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDRelationship,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDRelationship,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDRelationship,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDRelationship*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDRelationship,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDRelationship*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDRelationship,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDRelationship*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDRelationship,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDRelationship,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDRelationship,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDRelationship,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDRelationship,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDRelationship,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDRelationship,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDRelationship,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDRelationship,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDRelationship_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDRelationship,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDRelationship,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDRelationship_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDRelationship,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDRelationship,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDRelationship,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDRelationship,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDRelationship,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDRelationship,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDRelationship,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDRelationship */



#endif       /* SOM_AWDRelationship_xh */
