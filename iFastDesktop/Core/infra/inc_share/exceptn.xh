
#ifndef SOM_AWDException_xh
#define SOM_AWDException_xh

class AWDException;

#define AWDException_MajorVersion 0
#define AWDException_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef AWDException_API
#define AWDException_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class AWDApplication;
typedef unsigned long AWDException_EXCEPTION_TYPE;
#define AWDException_UNKNOWN 1UL
#define AWDException_BAD_PARAM 2UL
#define AWDException_NO_MEMORY 3UL
#define AWDException_COMM_FAILURE 4UL
#define AWDException_VIEW_FAILURE 5UL
#define AWDException_INFO_MSG 6UL
#define AWDException_WARNING_MSG 7UL
#define AWDException_OBJECT_MSG 8UL
#define AWDException_FILE_MSG 9UL

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_EXCEPTION_TYPE
    #ifdef EXCEPTION_TYPE
        #undef EXCEPTION_TYPE
        #define SOMTGD_EXCEPTION_TYPE 1
    #else
        #define EXCEPTION_TYPE AWDException_EXCEPTION_TYPE
    #endif /* EXCEPTION_TYPE */
#endif /* SOMTGD_EXCEPTION_TYPE */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDException Class */
SOMEXTERN
#if (defined(SOM_Module_exceptn_Source) || defined(AWDException_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDException))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDExceptionNewClass(
		integer4,
		integer4 );

/* The API to the AWDException class object, and the methods it introduces. */
SOMEXTERN struct AWDExceptionClassDataStructure {
	SOMClass *classObject;
	somMToken errorType;
	somMToken file;
	somMToken line;
	somMToken message;
	somMToken returnCode;
	somMToken withTypeFileLineMsgandReturnCode;
	somMToken log;
}
#if !(defined(SOM_Module_exceptn_Source) || defined(AWDException_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDException))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDExceptionClassData;
#define _AWDException AWDExceptionClassData.classObject

/* The API to parentMtabs for AWDException, and the instance data it introduces. */
SOMEXTERN struct AWDExceptionCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_exceptn_Source) || defined(AWDException_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDException))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDExceptionCClassData;

/*
 * -- Typedefs for AWDException Method Procedures
 */
extern "C" {
typedef AWDException_EXCEPTION_TYPE   SOMLINK somTP_AWDException_errorType(AWDException *somSelf, Environment *ev);
typedef somTP_AWDException_errorType *somTD_AWDException_errorType;
typedef string   SOMLINK somTP_AWDException_file(AWDException *somSelf, Environment *ev);
typedef somTP_AWDException_file *somTD_AWDException_file;
typedef unsigned long   SOMLINK somTP_AWDException_line(AWDException *somSelf, Environment *ev);
typedef somTP_AWDException_line *somTD_AWDException_line;
typedef void   SOMLINK somTP_AWDException_log(AWDException *somSelf, Environment *ev);
typedef somTP_AWDException_log *somTD_AWDException_log;
typedef string   SOMLINK somTP_AWDException_message(AWDException *somSelf, Environment *ev);
typedef somTP_AWDException_message *somTD_AWDException_message;
typedef unsigned long   SOMLINK somTP_AWDException_returnCode(AWDException *somSelf, Environment *ev);
typedef somTP_AWDException_returnCode *somTD_AWDException_returnCode;
typedef void   SOMLINK somTP_AWDException_withTypeFileLineMsgandReturnCode(AWDException *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDException_EXCEPTION_TYPE eType,
		string pszFile,
		unsigned long linenumber,
		string pszMsg,
		unsigned short rc);
typedef somTP_AWDException_withTypeFileLineMsgandReturnCode *somTD_AWDException_withTypeFileLineMsgandReturnCode;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_AWDException_somDefaultInit(AWDException *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDException_somDefaultInit *somTD_AWDException_somDefaultInit;
typedef void   SOMLINK somTP_AWDException_somDestruct(AWDException *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDException_somDestruct *somTD_AWDException_somDestruct;
typedef void   SOMLINK somTP_AWDException_somDefaultCopyInit(AWDException *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDException_somDefaultCopyInit *somTD_AWDException_somDefaultCopyInit;
typedef AWDException*   SOMLINK somTP_AWDException_somDefaultAssign(AWDException *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDException_somDefaultAssign *somTD_AWDException_somDefaultAssign;
typedef void   SOMLINK somTP_AWDException_somDefaultConstCopyInit(AWDException *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDException_somDefaultConstCopyInit *somTD_AWDException_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDException_somDefaultVCopyInit(AWDException *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDException_somDefaultVCopyInit *somTD_AWDException_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDException_somDefaultConstVCopyInit(AWDException *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDException_somDefaultConstVCopyInit *somTD_AWDException_somDefaultConstVCopyInit;
typedef AWDException*   SOMLINK somTP_AWDException_somDefaultConstAssign(AWDException *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDException_somDefaultConstAssign *somTD_AWDException_somDefaultConstAssign;
typedef AWDException*   SOMLINK somTP_AWDException_somDefaultVAssign(AWDException *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDException_somDefaultVAssign *somTD_AWDException_somDefaultVAssign;
typedef AWDException*   SOMLINK somTP_AWDException_somDefaultConstVAssign(AWDException *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDException_somDefaultConstVAssign *somTD_AWDException_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDException_somInit(AWDException *somSelf);
typedef somTP_AWDException_somInit *somTD_AWDException_somInit;
typedef void   SOMLINK somTP_AWDException_somFree(AWDException *somSelf);
typedef somTP_AWDException_somFree *somTD_AWDException_somFree;
typedef void   SOMLINK somTP_AWDException_somUninit(AWDException *somSelf);
typedef somTP_AWDException_somUninit *somTD_AWDException_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDException_somGetClass(AWDException *somSelf);
typedef somTP_AWDException_somGetClass *somTD_AWDException_somGetClass;
typedef string   SOMLINK somTP_AWDException_somGetClassName(AWDException *somSelf);
typedef somTP_AWDException_somGetClassName *somTD_AWDException_somGetClassName;
typedef long   SOMLINK somTP_AWDException_somGetSize(AWDException *somSelf);
typedef somTP_AWDException_somGetSize *somTD_AWDException_somGetSize;
typedef boolean   SOMLINK somTP_AWDException_somIsA(AWDException *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDException_somIsA *somTD_AWDException_somIsA;
typedef boolean   SOMLINK somTP_AWDException_somIsInstanceOf(AWDException *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDException_somIsInstanceOf *somTD_AWDException_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDException_somRespondsTo(AWDException *somSelf,
		somId mId);
typedef somTP_AWDException_somRespondsTo *somTD_AWDException_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDException_somDispatch(AWDException *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDException_somDispatch *somTD_AWDException_somDispatch;
typedef boolean   SOMLINK somTP_AWDException_somClassDispatch(AWDException *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDException_somClassDispatch *somTD_AWDException_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDException_somCastObj(AWDException *somSelf,
		SOMClass* cls);
typedef somTP_AWDException_somCastObj *somTD_AWDException_somCastObj;
typedef boolean   SOMLINK somTP_AWDException_somResetObj(AWDException *somSelf);
typedef somTP_AWDException_somResetObj *somTD_AWDException_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDException_somPrintSelf(AWDException *somSelf);
typedef somTP_AWDException_somPrintSelf *somTD_AWDException_somPrintSelf;
typedef void   SOMLINK somTP_AWDException_somDumpSelf(AWDException *somSelf,
		long level);
typedef somTP_AWDException_somDumpSelf *somTD_AWDException_somDumpSelf;
typedef void   SOMLINK somTP_AWDException_somDumpSelfInt(AWDException *somSelf,
		long level);
typedef somTP_AWDException_somDumpSelfInt *somTD_AWDException_somDumpSelfInt;
}

#endif /* AWDException_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDException
 */
class AWDException : public SOMObject
{
public:

// AWDException::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDException) AWDExceptionNewClass(AWDException_MajorVersion,AWDException_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDException,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDException));
}

// AWDException::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDException()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDExceptionCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDException(AWDException* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDExceptionCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDException(const AWDException* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDExceptionCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDException(Environment *ev,AWDException_EXCEPTION_TYPE eType,string pszFile,unsigned long linenumber,string pszMsg,unsigned short rc) 
{
   withTypeFileLineMsgandReturnCode(ev,0,eType,pszFile,linenumber,pszMsg,rc);
}


/* method: errorType */
AWDException_EXCEPTION_TYPE   errorType(Environment *ev)
{
   return SOM_ResolveD(this,AWDException,AWDException,errorType)
	(this, ev);
}


/* method: file */
string   file(Environment *ev)
{
   return SOM_ResolveD(this,AWDException,AWDException,file)
	(this, ev);
}


/* method: line */
unsigned long   line(Environment *ev)
{
   return SOM_ResolveD(this,AWDException,AWDException,line)
	(this, ev);
}


/* method: log */
void   log(Environment *ev)
{
   SOM_ResolveD(this,AWDException,AWDException,log)
	(this, ev);
}


/* method: message */
string   message(Environment *ev)
{
   return SOM_ResolveD(this,AWDException,AWDException,message)
	(this, ev);
}


/* method: returnCode */
unsigned long   returnCode(Environment *ev)
{
   return SOM_ResolveD(this,AWDException,AWDException,returnCode)
	(this, ev);
}


/* initializer method: withTypeFileLineMsgandReturnCode */
void   withTypeFileLineMsgandReturnCode(Environment *ev,
		somInitCtrl* ctrl,
		AWDException_EXCEPTION_TYPE eType,
		string pszFile,
		unsigned long linenumber,
		string pszMsg,
		unsigned short rc)
{
   SOM_ResolveD(this,AWDException,AWDException,withTypeFileLineMsgandReturnCode)
	(this, ev,ctrl,eType,pszFile,linenumber,pszMsg,rc);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDException,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDException,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDException,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDException*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDException,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDException,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDException,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDException,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDException*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDException,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDException*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDException,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDException*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDException,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDException,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDException,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDException,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDException,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDException,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDException,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDException,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDException,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDException,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDException_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDException,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDException,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDException_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDException,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDException,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDException,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDException,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDException,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDException,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDException,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDException */



#endif       /* SOM_AWDException_xh */
