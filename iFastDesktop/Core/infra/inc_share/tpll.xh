
/*
 * 
 *    COMPONENT_NAME: somuc
 * 
 *    ORIGINS: 82, 81, 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 * 
 * CLASS_NAME: somf_TPrimitiveLinkedList
 * 
 * DESCRIPTION: This class describes a primitive linked list, a sequence on 0
 *              or more items, with a link from one item to it's following
 *              item.
 * 
 */


#ifndef SOM_somf_TPrimitiveLinkedList_xh
#define SOM_somf_TPrimitiveLinkedList_xh

class somf_TPrimitiveLinkedList;

#define somf_TPrimitiveLinkedList_MajorVersion 2
#define somf_TPrimitiveLinkedList_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef somf_TPrimitiveLinkedList_API
#define somf_TPrimitiveLinkedList_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class somf_MLinkable;

/*
 * End of user-defined types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */


#include <mlink.xh>


/* A procedure to create the somf_TPrimitiveLinkedList Class */
SOMEXTERN
#if (defined(SOM_Module_tpll_Source) || defined(somf_TPrimitiveLinkedList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_somf_TPrimitiveLinkedList))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK somf_TPrimitiveLinkedListNewClass(
		integer4,
		integer4 );

/* The API to the somf_TPrimitiveLinkedList class object, and the methods it introduces. */
SOMEXTERN struct somf_TPrimitiveLinkedListClassDataStructure {
	SOMClass *classObject;
	somMToken somfCount;
	somMToken somfRemove;
	somMToken somfRemoveAll;
	somMToken somfRemoveFirst;
	somMToken somfRemoveLast;
	somMToken somfAddBefore;
	somMToken somfAddAfter;
	somMToken somfAddFirst;
	somMToken somfAddLast;
	somMToken somfAfter;
	somMToken somfBefore;
	somMToken somfFirst;
	somMToken somfLast;
}
#if !(defined(SOM_Module_tpll_Source) || defined(somf_TPrimitiveLinkedList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_somf_TPrimitiveLinkedList))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK somf_TPrimitiveLinkedListClassData;
#define _somf_TPrimitiveLinkedList somf_TPrimitiveLinkedListClassData.classObject

/* The API to parentMtabs for somf_TPrimitiveLinkedList, and the instance data it introduces. */
SOMEXTERN struct somf_TPrimitiveLinkedListCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_tpll_Source) || defined(somf_TPrimitiveLinkedList_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_somf_TPrimitiveLinkedList))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK somf_TPrimitiveLinkedListCClassData;

/*
 * -- Typedefs for somf_TPrimitiveLinkedList Method Procedures
 */
extern "C" {
typedef unsigned long   SOMLINK somTP_somf_TPrimitiveLinkedList_somfCount(somf_TPrimitiveLinkedList *somSelf, Environment *ev);
typedef somTP_somf_TPrimitiveLinkedList_somfCount *somTD_somf_TPrimitiveLinkedList_somfCount;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somfRemove(somf_TPrimitiveLinkedList *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_somf_TPrimitiveLinkedList_somfRemove *somTD_somf_TPrimitiveLinkedList_somfRemove;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somfRemoveAll(somf_TPrimitiveLinkedList *somSelf, Environment *ev);
typedef somTP_somf_TPrimitiveLinkedList_somfRemoveAll *somTD_somf_TPrimitiveLinkedList_somfRemoveAll;
typedef somf_MLinkable*   SOMLINK somTP_somf_TPrimitiveLinkedList_somfRemoveFirst(somf_TPrimitiveLinkedList *somSelf, Environment *ev);
typedef somTP_somf_TPrimitiveLinkedList_somfRemoveFirst *somTD_somf_TPrimitiveLinkedList_somfRemoveFirst;
typedef somf_MLinkable*   SOMLINK somTP_somf_TPrimitiveLinkedList_somfRemoveLast(somf_TPrimitiveLinkedList *somSelf, Environment *ev);
typedef somTP_somf_TPrimitiveLinkedList_somfRemoveLast *somTD_somf_TPrimitiveLinkedList_somfRemoveLast;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somfAddBefore(somf_TPrimitiveLinkedList *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_somf_TPrimitiveLinkedList_somfAddBefore *somTD_somf_TPrimitiveLinkedList_somfAddBefore;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somfAddAfter(somf_TPrimitiveLinkedList *somSelf, Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj);
typedef somTP_somf_TPrimitiveLinkedList_somfAddAfter *somTD_somf_TPrimitiveLinkedList_somfAddAfter;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somfAddFirst(somf_TPrimitiveLinkedList *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_somf_TPrimitiveLinkedList_somfAddFirst *somTD_somf_TPrimitiveLinkedList_somfAddFirst;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somfAddLast(somf_TPrimitiveLinkedList *somSelf, Environment *ev,
		somf_MLinkable* obj);
typedef somTP_somf_TPrimitiveLinkedList_somfAddLast *somTD_somf_TPrimitiveLinkedList_somfAddLast;
typedef somf_MLinkable*   SOMLINK somTP_somf_TPrimitiveLinkedList_somfAfter(somf_TPrimitiveLinkedList *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_somf_TPrimitiveLinkedList_somfAfter *somTD_somf_TPrimitiveLinkedList_somfAfter;
typedef somf_MLinkable*   SOMLINK somTP_somf_TPrimitiveLinkedList_somfBefore(somf_TPrimitiveLinkedList *somSelf, Environment *ev,
		somf_MLinkable* existingobj);
typedef somTP_somf_TPrimitiveLinkedList_somfBefore *somTD_somf_TPrimitiveLinkedList_somfBefore;
typedef somf_MLinkable*   SOMLINK somTP_somf_TPrimitiveLinkedList_somfFirst(somf_TPrimitiveLinkedList *somSelf, Environment *ev);
typedef somTP_somf_TPrimitiveLinkedList_somfFirst *somTD_somf_TPrimitiveLinkedList_somfFirst;
typedef somf_MLinkable*   SOMLINK somTP_somf_TPrimitiveLinkedList_somfLast(somf_TPrimitiveLinkedList *somSelf, Environment *ev);
typedef somTP_somf_TPrimitiveLinkedList_somfLast *somTD_somf_TPrimitiveLinkedList_somfLast;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somDefaultInit(somf_TPrimitiveLinkedList *somSelf,
		somInitCtrl* ctrl);
typedef somTP_somf_TPrimitiveLinkedList_somDefaultInit *somTD_somf_TPrimitiveLinkedList_somDefaultInit;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somDestruct(somf_TPrimitiveLinkedList *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_somf_TPrimitiveLinkedList_somDestruct *somTD_somf_TPrimitiveLinkedList_somDestruct;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somDefaultCopyInit(somf_TPrimitiveLinkedList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_somf_TPrimitiveLinkedList_somDefaultCopyInit *somTD_somf_TPrimitiveLinkedList_somDefaultCopyInit;
typedef somf_TPrimitiveLinkedList*   SOMLINK somTP_somf_TPrimitiveLinkedList_somDefaultAssign(somf_TPrimitiveLinkedList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_somf_TPrimitiveLinkedList_somDefaultAssign *somTD_somf_TPrimitiveLinkedList_somDefaultAssign;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somDefaultConstCopyInit(somf_TPrimitiveLinkedList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_somf_TPrimitiveLinkedList_somDefaultConstCopyInit *somTD_somf_TPrimitiveLinkedList_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somDefaultVCopyInit(somf_TPrimitiveLinkedList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_somf_TPrimitiveLinkedList_somDefaultVCopyInit *somTD_somf_TPrimitiveLinkedList_somDefaultVCopyInit;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somDefaultConstVCopyInit(somf_TPrimitiveLinkedList *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_somf_TPrimitiveLinkedList_somDefaultConstVCopyInit *somTD_somf_TPrimitiveLinkedList_somDefaultConstVCopyInit;
typedef somf_TPrimitiveLinkedList*   SOMLINK somTP_somf_TPrimitiveLinkedList_somDefaultConstAssign(somf_TPrimitiveLinkedList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_somf_TPrimitiveLinkedList_somDefaultConstAssign *somTD_somf_TPrimitiveLinkedList_somDefaultConstAssign;
typedef somf_TPrimitiveLinkedList*   SOMLINK somTP_somf_TPrimitiveLinkedList_somDefaultVAssign(somf_TPrimitiveLinkedList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_somf_TPrimitiveLinkedList_somDefaultVAssign *somTD_somf_TPrimitiveLinkedList_somDefaultVAssign;
typedef somf_TPrimitiveLinkedList*   SOMLINK somTP_somf_TPrimitiveLinkedList_somDefaultConstVAssign(somf_TPrimitiveLinkedList *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_somf_TPrimitiveLinkedList_somDefaultConstVAssign *somTD_somf_TPrimitiveLinkedList_somDefaultConstVAssign;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somInit(somf_TPrimitiveLinkedList *somSelf);
typedef somTP_somf_TPrimitiveLinkedList_somInit *somTD_somf_TPrimitiveLinkedList_somInit;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somFree(somf_TPrimitiveLinkedList *somSelf);
typedef somTP_somf_TPrimitiveLinkedList_somFree *somTD_somf_TPrimitiveLinkedList_somFree;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somUninit(somf_TPrimitiveLinkedList *somSelf);
typedef somTP_somf_TPrimitiveLinkedList_somUninit *somTD_somf_TPrimitiveLinkedList_somUninit;
typedef SOMClass*   SOMLINK somTP_somf_TPrimitiveLinkedList_somGetClass(somf_TPrimitiveLinkedList *somSelf);
typedef somTP_somf_TPrimitiveLinkedList_somGetClass *somTD_somf_TPrimitiveLinkedList_somGetClass;
typedef string   SOMLINK somTP_somf_TPrimitiveLinkedList_somGetClassName(somf_TPrimitiveLinkedList *somSelf);
typedef somTP_somf_TPrimitiveLinkedList_somGetClassName *somTD_somf_TPrimitiveLinkedList_somGetClassName;
typedef long   SOMLINK somTP_somf_TPrimitiveLinkedList_somGetSize(somf_TPrimitiveLinkedList *somSelf);
typedef somTP_somf_TPrimitiveLinkedList_somGetSize *somTD_somf_TPrimitiveLinkedList_somGetSize;
typedef boolean   SOMLINK somTP_somf_TPrimitiveLinkedList_somIsA(somf_TPrimitiveLinkedList *somSelf,
		SOMClass* aClassObj);
typedef somTP_somf_TPrimitiveLinkedList_somIsA *somTD_somf_TPrimitiveLinkedList_somIsA;
typedef boolean   SOMLINK somTP_somf_TPrimitiveLinkedList_somIsInstanceOf(somf_TPrimitiveLinkedList *somSelf,
		SOMClass* aClassObj);
typedef somTP_somf_TPrimitiveLinkedList_somIsInstanceOf *somTD_somf_TPrimitiveLinkedList_somIsInstanceOf;
typedef boolean   SOMLINK somTP_somf_TPrimitiveLinkedList_somRespondsTo(somf_TPrimitiveLinkedList *somSelf,
		somId mId);
typedef somTP_somf_TPrimitiveLinkedList_somRespondsTo *somTD_somf_TPrimitiveLinkedList_somRespondsTo;
typedef boolean   SOMLINK somTP_somf_TPrimitiveLinkedList_somDispatch(somf_TPrimitiveLinkedList *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_somf_TPrimitiveLinkedList_somDispatch *somTD_somf_TPrimitiveLinkedList_somDispatch;
typedef boolean   SOMLINK somTP_somf_TPrimitiveLinkedList_somClassDispatch(somf_TPrimitiveLinkedList *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_somf_TPrimitiveLinkedList_somClassDispatch *somTD_somf_TPrimitiveLinkedList_somClassDispatch;
typedef boolean   SOMLINK somTP_somf_TPrimitiveLinkedList_somCastObj(somf_TPrimitiveLinkedList *somSelf,
		SOMClass* cls);
typedef somTP_somf_TPrimitiveLinkedList_somCastObj *somTD_somf_TPrimitiveLinkedList_somCastObj;
typedef boolean   SOMLINK somTP_somf_TPrimitiveLinkedList_somResetObj(somf_TPrimitiveLinkedList *somSelf);
typedef somTP_somf_TPrimitiveLinkedList_somResetObj *somTD_somf_TPrimitiveLinkedList_somResetObj;
typedef SOMObject*   SOMLINK somTP_somf_TPrimitiveLinkedList_somPrintSelf(somf_TPrimitiveLinkedList *somSelf);
typedef somTP_somf_TPrimitiveLinkedList_somPrintSelf *somTD_somf_TPrimitiveLinkedList_somPrintSelf;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somDumpSelf(somf_TPrimitiveLinkedList *somSelf,
		long level);
typedef somTP_somf_TPrimitiveLinkedList_somDumpSelf *somTD_somf_TPrimitiveLinkedList_somDumpSelf;
typedef void   SOMLINK somTP_somf_TPrimitiveLinkedList_somDumpSelfInt(somf_TPrimitiveLinkedList *somSelf,
		long level);
typedef somTP_somf_TPrimitiveLinkedList_somDumpSelfInt *somTD_somf_TPrimitiveLinkedList_somDumpSelfInt;
}

#endif /* somf_TPrimitiveLinkedList_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for somf_TPrimitiveLinkedList
 */
class somf_TPrimitiveLinkedList : public SOMObject
{
public:

// somf_TPrimitiveLinkedList::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_somf_TPrimitiveLinkedList) somf_TPrimitiveLinkedListNewClass(somf_TPrimitiveLinkedList_MajorVersion,somf_TPrimitiveLinkedList_MinorVersion);
   return (void*)
      SOM_Resolve(_somf_TPrimitiveLinkedList,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_somf_TPrimitiveLinkedList));
}

// somf_TPrimitiveLinkedList::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

somf_TPrimitiveLinkedList()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_TPrimitiveLinkedListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

somf_TPrimitiveLinkedList(somf_TPrimitiveLinkedList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_TPrimitiveLinkedListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

somf_TPrimitiveLinkedList(const somf_TPrimitiveLinkedList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_TPrimitiveLinkedListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: somfCount */
unsigned long   somfCount(Environment *ev)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,somf_TPrimitiveLinkedList,somfCount)
	(this, ev);
}


/* method: somfRemove */
void   somfRemove(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,somf_TPrimitiveLinkedList,somfRemove)
	(this, ev,aLink);
}


/* method: somfRemoveAll */
void   somfRemoveAll(Environment *ev)
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,somf_TPrimitiveLinkedList,somfRemoveAll)
	(this, ev);
}


/* method: somfRemoveFirst */
somf_MLinkable*   somfRemoveFirst(Environment *ev)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,somf_TPrimitiveLinkedList,somfRemoveFirst)
	(this, ev);
}


/* method: somfRemoveLast */
somf_MLinkable*   somfRemoveLast(Environment *ev)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,somf_TPrimitiveLinkedList,somfRemoveLast)
	(this, ev);
}


/* method: somfAddBefore */
void   somfAddBefore(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,somf_TPrimitiveLinkedList,somfAddBefore)
	(this, ev,existing,obj);
}


/* method: somfAddAfter */
void   somfAddAfter(Environment *ev,
		somf_MLinkable* existing,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,somf_TPrimitiveLinkedList,somfAddAfter)
	(this, ev,existing,obj);
}


/* method: somfAddFirst */
void   somfAddFirst(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,somf_TPrimitiveLinkedList,somfAddFirst)
	(this, ev,obj);
}


/* method: somfAddLast */
void   somfAddLast(Environment *ev,
		somf_MLinkable* obj)
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,somf_TPrimitiveLinkedList,somfAddLast)
	(this, ev,obj);
}


/* method: somfAfter */
somf_MLinkable*   somfAfter(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,somf_TPrimitiveLinkedList,somfAfter)
	(this, ev,existingobj);
}


/* method: somfBefore */
somf_MLinkable*   somfBefore(Environment *ev,
		somf_MLinkable* existingobj)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,somf_TPrimitiveLinkedList,somfBefore)
	(this, ev,existingobj);
}


/* method: somfFirst */
somf_MLinkable*   somfFirst(Environment *ev)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,somf_TPrimitiveLinkedList,somfFirst)
	(this, ev);
}


/* method: somfLast */
somf_MLinkable*   somfLast(Environment *ev)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,somf_TPrimitiveLinkedList,somfLast)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
somf_TPrimitiveLinkedList*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
somf_TPrimitiveLinkedList*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
somf_TPrimitiveLinkedList*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
somf_TPrimitiveLinkedList*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   somf_TPrimitiveLinkedList_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   somf_TPrimitiveLinkedList_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,somf_TPrimitiveLinkedList,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* somf_TPrimitiveLinkedList */



#endif       /* SOM_somf_TPrimitiveLinkedList_xh */
