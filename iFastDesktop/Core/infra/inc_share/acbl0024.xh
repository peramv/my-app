
/*
 * //
 *                                                                         //
 *  this view does AWD Lookup (SQL or native)                              //
 *                                                                         //
 *  ref.  acpy0174, acpy0175, and acbl0024                                 //
 *                                                                         //
 *  Messages:                                                              //
 *     SYS0191     - limit reached, not entire dbase searched YET;         //
 *     SYS0189     - ENTIRE db searched, lookup completed;                 //
 *                                                                         //
 *  8/29/95                                                          dyxw  //
 *     -Userid is filled by the backend view, skip;                        //
 *     -continuation key area is left as 200 bytes string;                 //
 *      It could be broken down to Crdattim+LastPrimaryKey+SecondaryKey    //
 *                                                                         //
 *  9/05/95                                                          dyxw  //
 *     -SqlStatement and CriteriaArray share the same Input space,         //
 *        and they are Mutually Exclusive to each other.                   //
 *        _/If AccessType is 'S'ql, then SqlStatement is used;             //
 *         \If AccessType is 'R'ecord, then CriteriaArray is used.         //
 *                                                                         //
 * //
 */


#ifndef SOM_ACBL0024_xh
#define SOM_ACBL0024_xh

class ACBL0024;

#define ACBL0024_MajorVersion 0
#define ACBL0024_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "awdstrng.xh"

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDView_xh
#include <view.xh>
#endif

#ifndef ACBL0024_API
#define ACBL0024_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class somf_MLinkable;
class AWDConnection;
class AWDException;
class AWDPersist;
class AWDBase;
class iostream;
class ACBL0024Record;
#define ACBL0024_CC_WHITE_SPACE ' '
#define ACBL0024_CC_ZERO '0'
#define ACBL0024_CC_CONTINUE_YES 'Y'
#define ACBL0024_CC_CONTINUE_NO 'N'
#define ACBL0024_CC_COMPLETE_YES 'Y'
#define ACBL0024_CC_COMPLETE_NO 'N'
#define ACBL0024_CC_FORMAT_YES 'Y'
#define ACBL0024_CC_FORMAT_NO 'N'
#define ACBL0024_CC_UNDEFINED ' '
#define ACBL0024_CC_WORK 'W'
#define ACBL0024_CC_SOURCE 'S'
#define ACBL0024_CC_FOLDER 'F'
#define ACBL0024_CC_ALL 'A'
#define ACBL0024_CC_SQL 'S'
#define ACBL0024_CC_RECORD 'R'
typedef unsigned long ACBL0024_OBJECTTYPE;
#define ACBL0024_OBJECTTYPE_WORK 1UL
#define ACBL0024_OBJECTTYPE_SOURCE 2UL
#define ACBL0024_OBJECTTYPE_FOLDER 3UL
#define ACBL0024_OBJECTTYPE_ALL 4UL
typedef unsigned long ACBL0024_ACCESSTYPE;
#define ACBL0024_ACCESSTYPE_SQL 1UL
#define ACBL0024_ACCESSTYPE_RECORD 2UL
typedef
struct ACBL0024_CRITERIA_S {
char  dataname[4];
char  wildcard;
char  comparator[2];
char  datavalue[75];
} ACBL0024_CRITERIA_S;
typedef
struct ACBL0024_CRITERIA_S* ACBL0024_PCRITERIA;
typedef
struct ACBL0024_ACBL0024INPUT {
char  countrycd[3];
char  User[8];
char  ObjectType;
char  AccessType;
char  BypassGovernorFlag;
char  ContinuationFlag;
char  ContinuationKey[200];
struct ACBL0024_CRITERIA_S CriteriaArray[100];
} ACBL0024_ACBL0024INPUT;
typedef
struct ACBL0024_ACBL0024INPUT* ACBL0024_PACBL0024INPUT;
typedef
struct ACBL0024_ACBL0024OUTPUT {
char  return_code[7];
char  return_message[78];
char  viewComplete;
char  continuationKey[200];
struct AWD_AWDOBJECTSTRCT awdObjectArray[60];
} ACBL0024_ACBL0024OUTPUT;
typedef
struct ACBL0024_ACBL0024OUTPUT* ACBL0024_PACBL0024OUTPUT;

/*
 *    util to set input params
 */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_CC_WHITE_SPACE
    #ifdef CC_WHITE_SPACE
        #undef CC_WHITE_SPACE
        #define SOMTGD_CC_WHITE_SPACE 1
    #else
        #define CC_WHITE_SPACE ACBL0024_CC_WHITE_SPACE
    #endif /* CC_WHITE_SPACE */
#endif /* SOMTGD_CC_WHITE_SPACE */
#ifndef SOMTGD_CC_ZERO
    #ifdef CC_ZERO
        #undef CC_ZERO
        #define SOMTGD_CC_ZERO 1
    #else
        #define CC_ZERO ACBL0024_CC_ZERO
    #endif /* CC_ZERO */
#endif /* SOMTGD_CC_ZERO */
#ifndef SOMTGD_CC_CONTINUE_YES
    #ifdef CC_CONTINUE_YES
        #undef CC_CONTINUE_YES
        #define SOMTGD_CC_CONTINUE_YES 1
    #else
        #define CC_CONTINUE_YES ACBL0024_CC_CONTINUE_YES
    #endif /* CC_CONTINUE_YES */
#endif /* SOMTGD_CC_CONTINUE_YES */
#ifndef SOMTGD_CC_CONTINUE_NO
    #ifdef CC_CONTINUE_NO
        #undef CC_CONTINUE_NO
        #define SOMTGD_CC_CONTINUE_NO 1
    #else
        #define CC_CONTINUE_NO ACBL0024_CC_CONTINUE_NO
    #endif /* CC_CONTINUE_NO */
#endif /* SOMTGD_CC_CONTINUE_NO */
#ifndef SOMTGD_CC_COMPLETE_YES
    #ifdef CC_COMPLETE_YES
        #undef CC_COMPLETE_YES
        #define SOMTGD_CC_COMPLETE_YES 1
    #else
        #define CC_COMPLETE_YES ACBL0024_CC_COMPLETE_YES
    #endif /* CC_COMPLETE_YES */
#endif /* SOMTGD_CC_COMPLETE_YES */
#ifndef SOMTGD_CC_COMPLETE_NO
    #ifdef CC_COMPLETE_NO
        #undef CC_COMPLETE_NO
        #define SOMTGD_CC_COMPLETE_NO 1
    #else
        #define CC_COMPLETE_NO ACBL0024_CC_COMPLETE_NO
    #endif /* CC_COMPLETE_NO */
#endif /* SOMTGD_CC_COMPLETE_NO */
#ifndef SOMTGD_CC_FORMAT_YES
    #ifdef CC_FORMAT_YES
        #undef CC_FORMAT_YES
        #define SOMTGD_CC_FORMAT_YES 1
    #else
        #define CC_FORMAT_YES ACBL0024_CC_FORMAT_YES
    #endif /* CC_FORMAT_YES */
#endif /* SOMTGD_CC_FORMAT_YES */
#ifndef SOMTGD_CC_FORMAT_NO
    #ifdef CC_FORMAT_NO
        #undef CC_FORMAT_NO
        #define SOMTGD_CC_FORMAT_NO 1
    #else
        #define CC_FORMAT_NO ACBL0024_CC_FORMAT_NO
    #endif /* CC_FORMAT_NO */
#endif /* SOMTGD_CC_FORMAT_NO */
#ifndef SOMTGD_CC_UNDEFINED
    #ifdef CC_UNDEFINED
        #undef CC_UNDEFINED
        #define SOMTGD_CC_UNDEFINED 1
    #else
        #define CC_UNDEFINED ACBL0024_CC_UNDEFINED
    #endif /* CC_UNDEFINED */
#endif /* SOMTGD_CC_UNDEFINED */
#ifndef SOMTGD_CC_WORK
    #ifdef CC_WORK
        #undef CC_WORK
        #define SOMTGD_CC_WORK 1
    #else
        #define CC_WORK ACBL0024_CC_WORK
    #endif /* CC_WORK */
#endif /* SOMTGD_CC_WORK */
#ifndef SOMTGD_CC_SOURCE
    #ifdef CC_SOURCE
        #undef CC_SOURCE
        #define SOMTGD_CC_SOURCE 1
    #else
        #define CC_SOURCE ACBL0024_CC_SOURCE
    #endif /* CC_SOURCE */
#endif /* SOMTGD_CC_SOURCE */
#ifndef SOMTGD_CC_FOLDER
    #ifdef CC_FOLDER
        #undef CC_FOLDER
        #define SOMTGD_CC_FOLDER 1
    #else
        #define CC_FOLDER ACBL0024_CC_FOLDER
    #endif /* CC_FOLDER */
#endif /* SOMTGD_CC_FOLDER */
#ifndef SOMTGD_CC_ALL
    #ifdef CC_ALL
        #undef CC_ALL
        #define SOMTGD_CC_ALL 1
    #else
        #define CC_ALL ACBL0024_CC_ALL
    #endif /* CC_ALL */
#endif /* SOMTGD_CC_ALL */
#ifndef SOMTGD_CC_SQL
    #ifdef CC_SQL
        #undef CC_SQL
        #define SOMTGD_CC_SQL 1
    #else
        #define CC_SQL ACBL0024_CC_SQL
    #endif /* CC_SQL */
#endif /* SOMTGD_CC_SQL */
#ifndef SOMTGD_CC_RECORD
    #ifdef CC_RECORD
        #undef CC_RECORD
        #define SOMTGD_CC_RECORD 1
    #else
        #define CC_RECORD ACBL0024_CC_RECORD
    #endif /* CC_RECORD */
#endif /* SOMTGD_CC_RECORD */
#ifndef SOMTGD_OBJECTTYPE
    #ifdef OBJECTTYPE
        #undef OBJECTTYPE
        #define SOMTGD_OBJECTTYPE 1
    #else
        #define OBJECTTYPE ACBL0024_OBJECTTYPE
    #endif /* OBJECTTYPE */
#endif /* SOMTGD_OBJECTTYPE */
#ifndef SOMTGD_ACCESSTYPE
    #ifdef ACCESSTYPE
        #undef ACCESSTYPE
        #define SOMTGD_ACCESSTYPE 1
    #else
        #define ACCESSTYPE ACBL0024_ACCESSTYPE
    #endif /* ACCESSTYPE */
#endif /* SOMTGD_ACCESSTYPE */
#ifndef SOMTGD_CRITERIA_S
    #ifdef CRITERIA_S
        #undef CRITERIA_S
        #define SOMTGD_CRITERIA_S 1
    #else
        #define CRITERIA_S ACBL0024_CRITERIA_S
    #endif /* CRITERIA_S */
#endif /* SOMTGD_CRITERIA_S */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PCRITERIA
    #ifdef PCRITERIA
        #undef PCRITERIA
        #define SOMTGD_PCRITERIA 1
    #else
        #define PCRITERIA ACBL0024_PCRITERIA
    #endif /* PCRITERIA */
#endif /* SOMTGD_PCRITERIA */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#ifndef SOMTGD_ACBL0024INPUT
    #ifdef ACBL0024INPUT
        #undef ACBL0024INPUT
        #define SOMTGD_ACBL0024INPUT 1
    #else
        #define ACBL0024INPUT ACBL0024_ACBL0024INPUT
    #endif /* ACBL0024INPUT */
#endif /* SOMTGD_ACBL0024INPUT */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PACBL0024INPUT
    #ifdef PACBL0024INPUT
        #undef PACBL0024INPUT
        #define SOMTGD_PACBL0024INPUT 1
    #else
        #define PACBL0024INPUT ACBL0024_PACBL0024INPUT
    #endif /* PACBL0024INPUT */
#endif /* SOMTGD_PACBL0024INPUT */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#ifndef SOMTGD_ACBL0024OUTPUT
    #ifdef ACBL0024OUTPUT
        #undef ACBL0024OUTPUT
        #define SOMTGD_ACBL0024OUTPUT 1
    #else
        #define ACBL0024OUTPUT ACBL0024_ACBL0024OUTPUT
    #endif /* ACBL0024OUTPUT */
#endif /* SOMTGD_ACBL0024OUTPUT */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PACBL0024OUTPUT
    #ifdef PACBL0024OUTPUT
        #undef PACBL0024OUTPUT
        #define SOMTGD_PACBL0024OUTPUT 1
    #else
        #define PACBL0024OUTPUT ACBL0024_PACBL0024OUTPUT
    #endif /* PACBL0024OUTPUT */
#endif /* SOMTGD_PACBL0024OUTPUT */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the ACBL0024 Class */
SOMEXTERN
#if (defined(SOM_Module_acbl0024_Source) || defined(ACBL0024_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0024))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK ACBL0024NewClass(
		integer4,
		integer4 );

/* The API to the ACBL0024 class object, and the methods it introduces. */
SOMEXTERN struct ACBL0024ClassDataStructure {
	SOMClass *classObject;
	somMToken continuationKey;
	somMToken setAccessType;
	somMToken setBypassGovernorFlag;
	somMToken setContinuationFlag;
	somMToken setContinuationKey;
	somMToken setCriteriaArray;
	somMToken setObjectType;
	somMToken setSqlStatement;
}
#if !(defined(SOM_Module_acbl0024_Source) || defined(ACBL0024_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0024))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0024ClassData;
#define _ACBL0024 ACBL0024ClassData.classObject

/* The API to parentMtabs for ACBL0024, and the instance data it introduces. */
SOMEXTERN struct ACBL0024CClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_acbl0024_Source) || defined(ACBL0024_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0024))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0024CClassData;

/*
 * -- Typedefs for ACBL0024 Method Procedures
 */
extern "C" {
typedef void   SOMLINK somTP_ACBL0024_setAccessType(ACBL0024 *somSelf, Environment *ev,
		ACBL0024_ACCESSTYPE eAccessType);
typedef somTP_ACBL0024_setAccessType *somTD_ACBL0024_setAccessType;
typedef void   SOMLINK somTP_ACBL0024_setBypassGovernorFlag(ACBL0024 *somSelf, Environment *ev,
		char BypassGovernorFlag);
typedef somTP_ACBL0024_setBypassGovernorFlag *somTD_ACBL0024_setBypassGovernorFlag;
typedef void   SOMLINK somTP_ACBL0024_setContinuationFlag(ACBL0024 *somSelf, Environment *ev,
		char ContinuationFlag);
typedef somTP_ACBL0024_setContinuationFlag *somTD_ACBL0024_setContinuationFlag;
typedef void   SOMLINK somTP_ACBL0024_setContinuationKey(ACBL0024 *somSelf, Environment *ev,
		string ContinuationKey);
typedef somTP_ACBL0024_setContinuationKey *somTD_ACBL0024_setContinuationKey;
typedef void   SOMLINK somTP_ACBL0024_setCriteriaArray(ACBL0024 *somSelf, Environment *ev,
		ACBL0024_PCRITERIA CriteriaArray);
typedef somTP_ACBL0024_setCriteriaArray *somTD_ACBL0024_setCriteriaArray;
typedef void   SOMLINK somTP_ACBL0024_setObjectType(ACBL0024 *somSelf, Environment *ev,
		ACBL0024_OBJECTTYPE ObjectType);
typedef somTP_ACBL0024_setObjectType *somTD_ACBL0024_setObjectType;
typedef void   SOMLINK somTP_ACBL0024_setSqlStatement(ACBL0024 *somSelf, Environment *ev,
		string SqlStatement);
typedef somTP_ACBL0024_setSqlStatement *somTD_ACBL0024_setSqlStatement;
typedef string   SOMLINK somTP_ACBL0024_continuationKey(ACBL0024 *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_ACBL0024_continuationKey *somTD_ACBL0024_continuationKey;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef string   SOMLINK somTP_ACBL0024_app(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_app *somTD_ACBL0024_app;
typedef void   SOMLINK somTP_ACBL0024_setApp(ACBL0024 *somSelf, Environment *ev,
		string app);
typedef somTP_ACBL0024_setApp *somTD_ACBL0024_setApp;
typedef string   SOMLINK somTP_ACBL0024_targetApp(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_targetApp *somTD_ACBL0024_targetApp;
typedef void   SOMLINK somTP_ACBL0024_setTargetApp(ACBL0024 *somSelf, Environment *ev,
		string target);
typedef somTP_ACBL0024_setTargetApp *somTD_ACBL0024_setTargetApp;
typedef string   SOMLINK somTP_ACBL0024_name(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_name *somTD_ACBL0024_name;
typedef void   SOMLINK somTP_ACBL0024_setName(ACBL0024 *somSelf, Environment *ev,
		string aName);
typedef somTP_ACBL0024_setName *somTD_ACBL0024_setName;
typedef unsigned long   SOMLINK somTP_ACBL0024_size(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_size *somTD_ACBL0024_size;
typedef void   SOMLINK somTP_ACBL0024_setSize(ACBL0024 *somSelf, Environment *ev,
		unsigned long size);
typedef somTP_ACBL0024_setSize *somTD_ACBL0024_setSize;
typedef void*   SOMLINK somTP_ACBL0024_sendData(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_sendData *somTD_ACBL0024_sendData;
typedef void   SOMLINK somTP_ACBL0024_setSendData(ACBL0024 *somSelf, Environment *ev,
		void* data);
typedef somTP_ACBL0024_setSendData *somTD_ACBL0024_setSendData;
typedef AWDView_view_type   SOMLINK somTP_ACBL0024_mode(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_mode *somTD_ACBL0024_mode;
typedef void   SOMLINK somTP_ACBL0024_setMode(ACBL0024 *somSelf, Environment *ev,
		AWDView_view_type viewtype);
typedef somTP_ACBL0024_setMode *somTD_ACBL0024_setMode;
typedef unsigned long   SOMLINK somTP_ACBL0024_hwndNotify(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_hwndNotify *somTD_ACBL0024_hwndNotify;
typedef void   SOMLINK somTP_ACBL0024_sethwndNotify(ACBL0024 *somSelf, Environment *ev,
		unsigned long hwndNotify);
typedef somTP_ACBL0024_sethwndNotify *somTD_ACBL0024_sethwndNotify;
typedef unsigned long   SOMLINK somTP_ACBL0024_returnMsg(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_returnMsg *somTD_ACBL0024_returnMsg;
typedef void   SOMLINK somTP_ACBL0024_setReturnMsg(ACBL0024 *somSelf, Environment *ev,
		unsigned long msg);
typedef somTP_ACBL0024_setReturnMsg *somTD_ACBL0024_setReturnMsg;
typedef void*   SOMLINK somTP_ACBL0024_pfnCallBack(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_pfnCallBack *somTD_ACBL0024_pfnCallBack;
typedef void   SOMLINK somTP_ACBL0024_setpfnCallBack(ACBL0024 *somSelf, Environment *ev,
		void* pfnCallback);
typedef somTP_ACBL0024_setpfnCallBack *somTD_ACBL0024_setpfnCallBack;
typedef unsigned long   SOMLINK somTP_ACBL0024_timeOut(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_timeOut *somTD_ACBL0024_timeOut;
typedef void   SOMLINK somTP_ACBL0024_setTimeOut(ACBL0024 *somSelf, Environment *ev,
		unsigned long timeout);
typedef somTP_ACBL0024_setTimeOut *somTD_ACBL0024_setTimeOut;
typedef string   SOMLINK somTP_ACBL0024_host(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_host *somTD_ACBL0024_host;
typedef void   SOMLINK somTP_ACBL0024_setHost(ACBL0024 *somSelf, Environment *ev,
		string host);
typedef somTP_ACBL0024_setHost *somTD_ACBL0024_setHost;
typedef long   SOMLINK somTP_ACBL0024_queue(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_queue *somTD_ACBL0024_queue;
typedef void   SOMLINK somTP_ACBL0024_setMessageQueue(ACBL0024 *somSelf, Environment *ev,
		long que);
typedef somTP_ACBL0024_setMessageQueue *somTD_ACBL0024_setMessageQueue;
typedef void*   SOMLINK somTP_ACBL0024_receiveData(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_receiveData *somTD_ACBL0024_receiveData;
typedef void   SOMLINK somTP_ACBL0024_setReceiveData(ACBL0024 *somSelf, Environment *ev,
		void* pRData);
typedef somTP_ACBL0024_setReceiveData *somTD_ACBL0024_setReceiveData;
typedef unsigned long   SOMLINK somTP_ACBL0024_numRepeats(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_numRepeats *somTD_ACBL0024_numRepeats;
typedef void   SOMLINK somTP_ACBL0024_setNumRepeats(ACBL0024 *somSelf, Environment *ev,
		unsigned long repeats);
typedef somTP_ACBL0024_setNumRepeats *somTD_ACBL0024_setNumRepeats;
typedef unsigned long   SOMLINK somTP_ACBL0024_fixedLength(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_fixedLength *somTD_ACBL0024_fixedLength;
typedef void   SOMLINK somTP_ACBL0024_setFixedLength(ACBL0024 *somSelf, Environment *ev,
		unsigned long length);
typedef somTP_ACBL0024_setFixedLength *somTD_ACBL0024_setFixedLength;
typedef unsigned long   SOMLINK somTP_ACBL0024_repeatLength(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_repeatLength *somTD_ACBL0024_repeatLength;
typedef void   SOMLINK somTP_ACBL0024_setRepeatLength(ACBL0024 *somSelf, Environment *ev,
		unsigned long length);
typedef somTP_ACBL0024_setRepeatLength *somTD_ACBL0024_setRepeatLength;
typedef unsigned long   SOMLINK somTP_ACBL0024_currentIndex(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_currentIndex *somTD_ACBL0024_currentIndex;
typedef void   SOMLINK somTP_ACBL0024_setCurrentIndex(ACBL0024 *somSelf, Environment *ev,
		unsigned long index);
typedef somTP_ACBL0024_setCurrentIndex *somTD_ACBL0024_setCurrentIndex;
typedef void*   SOMLINK somTP_ACBL0024_lastView(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_lastView *somTD_ACBL0024_lastView;
typedef void   SOMLINK somTP_ACBL0024_setLastView(ACBL0024 *somSelf, Environment *ev,
		void* pRData);
typedef somTP_ACBL0024_setLastView *somTD_ACBL0024_setLastView;
typedef void*   SOMLINK somTP_ACBL0024_startData(ACBL0024 *somSelf, Environment *ev,
		string app,
		string targetapp,
		string viewname,
		void* senddata,
		unsigned long size,
		AWDView_view_type mode,
		void* pfn,
		unsigned long timeout,
		unsigned long hwndnotify,
		unsigned long returnmsg,
		long queue,
		string host);
typedef somTP_ACBL0024_startData *somTD_ACBL0024_startData;
typedef void*   SOMLINK somTP_ACBL0024_start(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_start *somTD_ACBL0024_start;
typedef void*   SOMLINK somTP_ACBL0024_getRecord(ACBL0024 *somSelf, Environment *ev,
		void* pv,
		unsigned long userIndex,
		AWDView_index_type indexvalue);
typedef somTP_ACBL0024_getRecord *somTD_ACBL0024_getRecord;
typedef boolean   SOMLINK somTP_ACBL0024_check(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_check *somTD_ACBL0024_check;
typedef void   SOMLINK somTP_ACBL0024_checkForException(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_checkForException *somTD_ACBL0024_checkForException;
typedef void   SOMLINK somTP_ACBL0024_setException(ACBL0024 *somSelf, Environment *ev,
		unsigned short excType,
		string pszFile,
		unsigned short usLine,
		string pszMessage,
		unsigned short usReturnCd);
typedef somTP_ACBL0024_setException *somTD_ACBL0024_setException;
typedef void   SOMLINK somTP_ACBL0024_setViewMessage(ACBL0024 *somSelf, Environment *ev,
		string pszMessage);
typedef somTP_ACBL0024_setViewMessage *somTD_ACBL0024_setViewMessage;
typedef string   SOMLINK somTP_ACBL0024_viewMessage(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_viewMessage *somTD_ACBL0024_viewMessage;
typedef void*   SOMLINK somTP_ACBL0024_startString(ACBL0024 *somSelf, Environment *ev,
		string pszSetupString);
typedef somTP_ACBL0024_startString *somTD_ACBL0024_startString;
typedef boolean   SOMLINK somTP_ACBL0024_scanArgString(ACBL0024 *somSelf, Environment *ev,
		string pszSetupString,
		string pszKey,
		string pszValue,
		unsigned long* pcbValue);
typedef somTP_ACBL0024_scanArgString *somTD_ACBL0024_scanArgString;
typedef boolean   SOMLINK somTP_ACBL0024_isComplete(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_isComplete *somTD_ACBL0024_isComplete;
typedef void*   SOMLINK somTP_ACBL0024_restart(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_restart *somTD_ACBL0024_restart;
typedef void*   SOMLINK somTP_ACBL0024_resolveIndex(ACBL0024 *somSelf, Environment *ev,
		unsigned long* ulIndex);
typedef somTP_ACBL0024_resolveIndex *somTD_ACBL0024_resolveIndex;
typedef boolean   SOMLINK somTP_ACBL0024_addData(ACBL0024 *somSelf, Environment *ev,
		void* pRcvData,
		unsigned long ulNumberofRepeats);
typedef somTP_ACBL0024_addData *somTD_ACBL0024_addData;
typedef void*   SOMLINK somTP_ACBL0024_buffer(ACBL0024 *somSelf, Environment *ev,
		AWDView_index_type index,
		unsigned long theindex,
		unsigned long* pulRepeats);
typedef somTP_ACBL0024_buffer *somTD_ACBL0024_buffer;
typedef unsigned long   SOMLINK somTP_ACBL0024_errCode(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_errCode *somTD_ACBL0024_errCode;
typedef string   SOMLINK somTP_ACBL0024_errMsg(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_errMsg *somTD_ACBL0024_errMsg;
typedef AWDConnection*   SOMLINK somTP_ACBL0024_setConnection(ACBL0024 *somSelf, Environment *ev,
		AWDConnection* con);
typedef somTP_ACBL0024_setConnection *somTD_ACBL0024_setConnection;
typedef AWDConnection*   SOMLINK somTP_ACBL0024_localConnection(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_localConnection *somTD_ACBL0024_localConnection;
typedef void   SOMLINK somTP_ACBL0024_setAutoRestart(ACBL0024 *somSelf, Environment *ev,
		boolean flag);
typedef somTP_ACBL0024_setAutoRestart *somTD_ACBL0024_setAutoRestart;
typedef boolean   SOMLINK somTP_ACBL0024_isAutoRestart(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_isAutoRestart *somTD_ACBL0024_isAutoRestart;
typedef void   SOMLINK somTP_ACBL0024_reset(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_reset *somTD_ACBL0024_reset;
typedef boolean   SOMLINK somTP_ACBL0024_validateInput(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_validateInput *somTD_ACBL0024_validateInput;
typedef void   SOMLINK somTP_ACBL0024_setPersistent(ACBL0024 *somSelf, Environment *ev,
		boolean flag);
typedef somTP_ACBL0024_setPersistent *somTD_ACBL0024_setPersistent;
typedef boolean   SOMLINK somTP_ACBL0024_isPersistent(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_isPersistent *somTD_ACBL0024_isPersistent;
typedef void   SOMLINK somTP_ACBL0024_setInProcess(ACBL0024 *somSelf, Environment *ev,
		boolean flag);
typedef somTP_ACBL0024_setInProcess *somTD_ACBL0024_setInProcess;
typedef boolean   SOMLINK somTP_ACBL0024_isInProcess(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_isInProcess *somTD_ACBL0024_isInProcess;
typedef void   SOMLINK somTP_ACBL0024_setPrimaryRc(ACBL0024 *somSelf, Environment *ev,
		unsigned long rc);
typedef somTP_ACBL0024_setPrimaryRc *somTD_ACBL0024_setPrimaryRc;
typedef unsigned long   SOMLINK somTP_ACBL0024_primaryRc(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_primaryRc *somTD_ACBL0024_primaryRc;
typedef void   SOMLINK somTP_ACBL0024_setSecondaryRc(ACBL0024 *somSelf, Environment *ev,
		unsigned long rc);
typedef somTP_ACBL0024_setSecondaryRc *somTD_ACBL0024_setSecondaryRc;
typedef unsigned long   SOMLINK somTP_ACBL0024_secondaryRc(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_secondaryRc *somTD_ACBL0024_secondaryRc;
typedef void   SOMLINK somTP_ACBL0024_somDefaultInit(ACBL0024 *somSelf,
		somInitCtrl* ctrl);
typedef somTP_ACBL0024_somDefaultInit *somTD_ACBL0024_somDefaultInit;
typedef void   SOMLINK somTP_ACBL0024_somDestruct(ACBL0024 *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_ACBL0024_somDestruct *somTD_ACBL0024_somDestruct;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0024_somfMLinkableInit(ACBL0024 *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_ACBL0024_somfMLinkableInit *somTD_ACBL0024_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0024_somfGetNext(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_somfGetNext *somTD_ACBL0024_somfGetNext;
typedef void   SOMLINK somTP_ACBL0024_somfSetNext(ACBL0024 *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0024_somfSetNext *somTD_ACBL0024_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0024_somfGetPrevious(ACBL0024 *somSelf, Environment *ev);
typedef somTP_ACBL0024_somfGetPrevious *somTD_ACBL0024_somfGetPrevious;
typedef void   SOMLINK somTP_ACBL0024_somfSetPrevious(ACBL0024 *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0024_somfSetPrevious *somTD_ACBL0024_somfSetPrevious;
typedef void   SOMLINK somTP_ACBL0024_somInit(ACBL0024 *somSelf);
typedef somTP_ACBL0024_somInit *somTD_ACBL0024_somInit;
typedef void   SOMLINK somTP_ACBL0024_somDefaultCopyInit(ACBL0024 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024_somDefaultCopyInit *somTD_ACBL0024_somDefaultCopyInit;
typedef ACBL0024*   SOMLINK somTP_ACBL0024_somDefaultAssign(ACBL0024 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024_somDefaultAssign *somTD_ACBL0024_somDefaultAssign;
typedef void   SOMLINK somTP_ACBL0024_somDefaultConstCopyInit(ACBL0024 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024_somDefaultConstCopyInit *somTD_ACBL0024_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ACBL0024_somDefaultVCopyInit(ACBL0024 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024_somDefaultVCopyInit *somTD_ACBL0024_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ACBL0024_somDefaultConstVCopyInit(ACBL0024 *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024_somDefaultConstVCopyInit *somTD_ACBL0024_somDefaultConstVCopyInit;
typedef ACBL0024*   SOMLINK somTP_ACBL0024_somDefaultConstAssign(ACBL0024 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024_somDefaultConstAssign *somTD_ACBL0024_somDefaultConstAssign;
typedef ACBL0024*   SOMLINK somTP_ACBL0024_somDefaultVAssign(ACBL0024 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024_somDefaultVAssign *somTD_ACBL0024_somDefaultVAssign;
typedef ACBL0024*   SOMLINK somTP_ACBL0024_somDefaultConstVAssign(ACBL0024 *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024_somDefaultConstVAssign *somTD_ACBL0024_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ACBL0024_somFree(ACBL0024 *somSelf);
typedef somTP_ACBL0024_somFree *somTD_ACBL0024_somFree;
typedef void   SOMLINK somTP_ACBL0024_somUninit(ACBL0024 *somSelf);
typedef somTP_ACBL0024_somUninit *somTD_ACBL0024_somUninit;
typedef SOMClass*   SOMLINK somTP_ACBL0024_somGetClass(ACBL0024 *somSelf);
typedef somTP_ACBL0024_somGetClass *somTD_ACBL0024_somGetClass;
typedef string   SOMLINK somTP_ACBL0024_somGetClassName(ACBL0024 *somSelf);
typedef somTP_ACBL0024_somGetClassName *somTD_ACBL0024_somGetClassName;
typedef long   SOMLINK somTP_ACBL0024_somGetSize(ACBL0024 *somSelf);
typedef somTP_ACBL0024_somGetSize *somTD_ACBL0024_somGetSize;
typedef boolean   SOMLINK somTP_ACBL0024_somIsA(ACBL0024 *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0024_somIsA *somTD_ACBL0024_somIsA;
typedef boolean   SOMLINK somTP_ACBL0024_somIsInstanceOf(ACBL0024 *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0024_somIsInstanceOf *somTD_ACBL0024_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ACBL0024_somRespondsTo(ACBL0024 *somSelf,
		somId mId);
typedef somTP_ACBL0024_somRespondsTo *somTD_ACBL0024_somRespondsTo;
typedef boolean   SOMLINK somTP_ACBL0024_somDispatch(ACBL0024 *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0024_somDispatch *somTD_ACBL0024_somDispatch;
typedef boolean   SOMLINK somTP_ACBL0024_somClassDispatch(ACBL0024 *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0024_somClassDispatch *somTD_ACBL0024_somClassDispatch;
typedef boolean   SOMLINK somTP_ACBL0024_somCastObj(ACBL0024 *somSelf,
		SOMClass* cls);
typedef somTP_ACBL0024_somCastObj *somTD_ACBL0024_somCastObj;
typedef boolean   SOMLINK somTP_ACBL0024_somResetObj(ACBL0024 *somSelf);
typedef somTP_ACBL0024_somResetObj *somTD_ACBL0024_somResetObj;
typedef SOMObject*   SOMLINK somTP_ACBL0024_somPrintSelf(ACBL0024 *somSelf);
typedef somTP_ACBL0024_somPrintSelf *somTD_ACBL0024_somPrintSelf;
typedef void   SOMLINK somTP_ACBL0024_somDumpSelf(ACBL0024 *somSelf,
		long level);
typedef somTP_ACBL0024_somDumpSelf *somTD_ACBL0024_somDumpSelf;
typedef void   SOMLINK somTP_ACBL0024_somDumpSelfInt(ACBL0024 *somSelf,
		long level);
typedef somTP_ACBL0024_somDumpSelfInt *somTD_ACBL0024_somDumpSelfInt;
}

#endif /* ACBL0024_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for ACBL0024
 */
class ACBL0024 : public AWDView
{
public:

// ACBL0024::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ACBL0024) ACBL0024NewClass(ACBL0024_MajorVersion,ACBL0024_MinorVersion);
   return (void*)
      SOM_Resolve(_ACBL0024,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ACBL0024));
}

// ACBL0024::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ACBL0024()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0024CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ACBL0024(ACBL0024* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0024CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ACBL0024(const ACBL0024* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0024CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: setAccessType */
void   setAccessType(Environment *ev,
		ACBL0024_ACCESSTYPE eAccessType)
{
   SOM_ResolveD(this,ACBL0024,ACBL0024,setAccessType)
	(this, ev,eAccessType);
}


/* method: setBypassGovernorFlag */
void   setBypassGovernorFlag(Environment *ev,
		char BypassGovernorFlag)
{
   SOM_ResolveD(this,ACBL0024,ACBL0024,setBypassGovernorFlag)
	(this, ev,BypassGovernorFlag);
}


/* method: setContinuationFlag */
void   setContinuationFlag(Environment *ev,
		char ContinuationFlag)
{
   SOM_ResolveD(this,ACBL0024,ACBL0024,setContinuationFlag)
	(this, ev,ContinuationFlag);
}


/* method: setContinuationKey */
void   setContinuationKey(Environment *ev,
		string ContinuationKey)
{
   SOM_ResolveD(this,ACBL0024,ACBL0024,setContinuationKey)
	(this, ev,ContinuationKey);
}


/* method: setCriteriaArray */
void   setCriteriaArray(Environment *ev,
		ACBL0024_PCRITERIA CriteriaArray)
{
   SOM_ResolveD(this,ACBL0024,ACBL0024,setCriteriaArray)
	(this, ev,CriteriaArray);
}


/* method: setObjectType */
void   setObjectType(Environment *ev,
		ACBL0024_OBJECTTYPE ObjectType)
{
   SOM_ResolveD(this,ACBL0024,ACBL0024,setObjectType)
	(this, ev,ObjectType);
}


/* method: setSqlStatement */
void   setSqlStatement(Environment *ev,
		string SqlStatement)
{
   SOM_ResolveD(this,ACBL0024,ACBL0024,setSqlStatement)
	(this, ev,SqlStatement);
}


/* method: continuationKey */
string   continuationKey(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,ACBL0024,ACBL0024,continuationKey)
	(this, ev,str);
}


/*
 * Reintroduce inherited methods
 */

/* method: app */
string   app(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,app)
	(this, ev);
}


/* method: setApp */
void   setApp(Environment *ev,
		string app)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setApp)
	(this, ev,app);
}


/* method: targetApp */
string   targetApp(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,targetApp)
	(this, ev);
}


/* method: setTargetApp */
void   setTargetApp(Environment *ev,
		string target)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setTargetApp)
	(this, ev,target);
}


/* method: name */
string   name(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,name)
	(this, ev);
}


/* method: setName */
void   setName(Environment *ev,
		string aName)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setName)
	(this, ev,aName);
}


/* method: size */
unsigned long   size(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,size)
	(this, ev);
}


/* method: setSize */
void   setSize(Environment *ev,
		unsigned long size)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setSize)
	(this, ev,size);
}


/* method: sendData */
void*   sendData(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,sendData)
	(this, ev);
}


/* method: setSendData */
void   setSendData(Environment *ev,
		void* data)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setSendData)
	(this, ev,data);
}


/* method: mode */
AWDView_view_type   mode(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,mode)
	(this, ev);
}


/* method: setMode */
void   setMode(Environment *ev,
		AWDView_view_type viewtype)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setMode)
	(this, ev,viewtype);
}


/* method: hwndNotify */
unsigned long   hwndNotify(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,hwndNotify)
	(this, ev);
}


/* method: sethwndNotify */
void   sethwndNotify(Environment *ev,
		unsigned long hwndNotify)
{
   SOM_ResolveD(this,ACBL0024,AWDView,sethwndNotify)
	(this, ev,hwndNotify);
}


/* method: returnMsg */
unsigned long   returnMsg(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,returnMsg)
	(this, ev);
}


/* method: setReturnMsg */
void   setReturnMsg(Environment *ev,
		unsigned long msg)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setReturnMsg)
	(this, ev,msg);
}


/* method: pfnCallBack */
void*   pfnCallBack(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,pfnCallBack)
	(this, ev);
}


/* method: setpfnCallBack */
void   setpfnCallBack(Environment *ev,
		void* pfnCallback)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setpfnCallBack)
	(this, ev,pfnCallback);
}


/* method: timeOut */
unsigned long   timeOut(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,timeOut)
	(this, ev);
}


/* method: setTimeOut */
void   setTimeOut(Environment *ev,
		unsigned long timeout)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setTimeOut)
	(this, ev,timeout);
}


/* method: host */
string   host(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,host)
	(this, ev);
}


/* method: setHost */
void   setHost(Environment *ev,
		string host)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setHost)
	(this, ev,host);
}


/* method: queue */
long   queue(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,queue)
	(this, ev);
}


/* method: setMessageQueue */
void   setMessageQueue(Environment *ev,
		long que)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setMessageQueue)
	(this, ev,que);
}


/* method: receiveData */
void*   receiveData(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,receiveData)
	(this, ev);
}


/* method: setReceiveData */
void   setReceiveData(Environment *ev,
		void* pRData)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setReceiveData)
	(this, ev,pRData);
}


/* method: numRepeats */
unsigned long   numRepeats(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,numRepeats)
	(this, ev);
}


/* method: setNumRepeats */
void   setNumRepeats(Environment *ev,
		unsigned long repeats)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setNumRepeats)
	(this, ev,repeats);
}


/* method: fixedLength */
unsigned long   fixedLength(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,fixedLength)
	(this, ev);
}


/* method: setFixedLength */
void   setFixedLength(Environment *ev,
		unsigned long length)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setFixedLength)
	(this, ev,length);
}


/* method: repeatLength */
unsigned long   repeatLength(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,repeatLength)
	(this, ev);
}


/* method: setRepeatLength */
void   setRepeatLength(Environment *ev,
		unsigned long length)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setRepeatLength)
	(this, ev,length);
}


/* method: currentIndex */
unsigned long   currentIndex(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,currentIndex)
	(this, ev);
}


/* method: setCurrentIndex */
void   setCurrentIndex(Environment *ev,
		unsigned long index)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setCurrentIndex)
	(this, ev,index);
}


/* method: lastView */
void*   lastView(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,lastView)
	(this, ev);
}


/* method: setLastView */
void   setLastView(Environment *ev,
		void* pRData)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setLastView)
	(this, ev,pRData);
}


/* method: startData */
void*   startData(Environment *ev,
		string app,
		string targetapp,
		string viewname,
		void* senddata,
		unsigned long size,
		AWDView_view_type mode,
		void* pfn,
		unsigned long timeout,
		unsigned long hwndnotify,
		unsigned long returnmsg,
		long queue,
		string host)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,startData)
	(this, ev,app,targetapp,viewname,senddata,size,mode,pfn,timeout,hwndnotify,returnmsg,queue,host);
}


/* method: start */
void*   start(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,start)
	(this, ev);
}


/* method: getRecord */
void*   getRecord(Environment *ev,
		void* pv,
		unsigned long userIndex,
		AWDView_index_type indexvalue)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,getRecord)
	(this, ev,pv,userIndex,indexvalue);
}


/* method: check */
boolean   check(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,check)
	(this, ev);
}


/* method: checkForException */
void   checkForException(Environment *ev)
{
   SOM_ResolveD(this,ACBL0024,AWDView,checkForException)
	(this, ev);
}


/* method: setException */
void   setException(Environment *ev,
		unsigned short excType,
		string pszFile,
		unsigned short usLine,
		string pszMessage,
		unsigned short usReturnCd)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setException)
	(this, ev,excType,pszFile,usLine,pszMessage,usReturnCd);
}


/* method: setViewMessage */
void   setViewMessage(Environment *ev,
		string pszMessage)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setViewMessage)
	(this, ev,pszMessage);
}


/* method: viewMessage */
string   viewMessage(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,viewMessage)
	(this, ev);
}


/* method: startString */
void*   startString(Environment *ev,
		string pszSetupString)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,startString)
	(this, ev,pszSetupString);
}


/* method: scanArgString */
boolean   scanArgString(Environment *ev,
		string pszSetupString,
		string pszKey,
		string pszValue,
		unsigned long* pcbValue)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,scanArgString)
	(this, ev,pszSetupString,pszKey,pszValue,pcbValue);
}


/* method: isComplete */
boolean   isComplete(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,isComplete)
	(this, ev);
}


/* method: restart */
void*   restart(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,restart)
	(this, ev);
}


/* method: resolveIndex */
void*   resolveIndex(Environment *ev,
		unsigned long* ulIndex)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,resolveIndex)
	(this, ev,ulIndex);
}


/* method: addData */
boolean   addData(Environment *ev,
		void* pRcvData,
		unsigned long ulNumberofRepeats)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,addData)
	(this, ev,pRcvData,ulNumberofRepeats);
}


/* method: buffer */
void*   buffer(Environment *ev,
		AWDView_index_type index,
		unsigned long theindex,
		unsigned long* pulRepeats)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,buffer)
	(this, ev,index,theindex,pulRepeats);
}


/* method: errCode */
unsigned long   errCode(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,errCode)
	(this, ev);
}


/* method: errMsg */
string   errMsg(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,errMsg)
	(this, ev);
}


/* method: setConnection */
AWDConnection*   setConnection(Environment *ev,
		AWDConnection* con)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,setConnection)
	(this, ev,con);
}


/* method: localConnection */
AWDConnection*   localConnection(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,localConnection)
	(this, ev);
}


/* method: setAutoRestart */
void   setAutoRestart(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setAutoRestart)
	(this, ev,flag);
}


/* method: isAutoRestart */
boolean   isAutoRestart(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,isAutoRestart)
	(this, ev);
}


/* method: reset */
void   reset(Environment *ev)
{
   SOM_ResolveD(this,ACBL0024,AWDView,reset)
	(this, ev);
}


/* method: validateInput */
boolean   validateInput(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,validateInput)
	(this, ev);
}


/* method: setPersistent */
void   setPersistent(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setPersistent)
	(this, ev,flag);
}


/* method: isPersistent */
boolean   isPersistent(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,isPersistent)
	(this, ev);
}


/* method: setInProcess */
void   setInProcess(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setInProcess)
	(this, ev,flag);
}


/* method: isInProcess */
boolean   isInProcess(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,isInProcess)
	(this, ev);
}


/* method: setPrimaryRc */
void   setPrimaryRc(Environment *ev,
		unsigned long rc)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setPrimaryRc)
	(this, ev,rc);
}


/* method: primaryRc */
unsigned long   primaryRc(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,primaryRc)
	(this, ev);
}


/* method: setSecondaryRc */
void   setSecondaryRc(Environment *ev,
		unsigned long rc)
{
   SOM_ResolveD(this,ACBL0024,AWDView,setSecondaryRc)
	(this, ev,rc);
}


/* method: secondaryRc */
unsigned long   secondaryRc(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,AWDView,secondaryRc)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0024,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0024,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,ACBL0024,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0024,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0024,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,ACBL0024,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0024,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ACBL0024*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0024,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0024,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0024,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0024,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ACBL0024*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0024,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ACBL0024*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0024,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ACBL0024*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0024,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ACBL0024,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ACBL0024,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,ACBL0024,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,ACBL0024,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,ACBL0024,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0024,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0024,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,ACBL0024,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   ACBL0024_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0024,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0024,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   ACBL0024_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0024,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0024,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,ACBL0024,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,ACBL0024,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,ACBL0024,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ACBL0024,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ACBL0024,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ACBL0024 */



#endif       /* SOM_ACBL0024_xh */

#ifndef SOM_ACBL0024Record_xh
#define SOM_ACBL0024Record_xh

class ACBL0024Record;

#define ACBL0024Record_MajorVersion 0
#define ACBL0024Record_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_RECORD_xh
#include <view.xh>
#endif

#ifndef ACBL0024Record_API
#define ACBL0024Record_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
typedef
struct ACBL0024Record_ACBL0024Buffer {
struct AWD_AWDOBJECTSTRCT awdObject;
} ACBL0024Record_ACBL0024Buffer;
typedef
struct ACBL0024Record_ACBL0024Buffer* ACBL0024Record_PACBL0024Buffer;

/*
 *   access methods
 */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ACBL0024Buffer
    #ifdef ACBL0024Buffer
        #undef ACBL0024Buffer
        #define SOMTGD_ACBL0024Buffer 1
    #else
        #define ACBL0024Buffer ACBL0024Record_ACBL0024Buffer
    #endif /* ACBL0024Buffer */
#endif /* SOMTGD_ACBL0024Buffer */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PACBL0024Buffer
    #ifdef PACBL0024Buffer
        #undef PACBL0024Buffer
        #define SOMTGD_PACBL0024Buffer 1
    #else
        #define PACBL0024Buffer ACBL0024Record_PACBL0024Buffer
    #endif /* PACBL0024Buffer */
#endif /* SOMTGD_PACBL0024Buffer */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the ACBL0024Record Class */
SOMEXTERN
#if (defined(SOM_Module_acbl0024_Source) || defined(ACBL0024Record_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0024Record))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK ACBL0024RecordNewClass(
		integer4,
		integer4 );

/* The API to the ACBL0024Record class object, and the methods it introduces. */
SOMEXTERN struct ACBL0024RecordClassDataStructure {
	SOMClass *classObject;
	somMToken awdObject;
	somMToken setInfo;
	somMToken withNonFormattedBuffer;
}
#if !(defined(SOM_Module_acbl0024_Source) || defined(ACBL0024Record_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0024Record))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0024RecordClassData;
#define _ACBL0024Record ACBL0024RecordClassData.classObject

/* The API to parentMtabs for ACBL0024Record, and the instance data it introduces. */
SOMEXTERN struct ACBL0024RecordCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_acbl0024_Source) || defined(ACBL0024Record_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_ACBL0024Record))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK ACBL0024RecordCClassData;

/*
 * -- Typedefs for ACBL0024Record Method Procedures
 */
extern "C" {
typedef AWD_AWDOBJECTSTRCT*   SOMLINK somTP_ACBL0024Record_awdObject(ACBL0024Record *somSelf, Environment *ev,
		AWD_AWDOBJECTSTRCT* pIn);
typedef somTP_ACBL0024Record_awdObject *somTD_ACBL0024Record_awdObject;
typedef void   SOMLINK somTP_ACBL0024Record_setInfo(ACBL0024Record *somSelf, Environment *ev,
		AWD_AWDOBJECTSTRCT* pBuffer);
typedef somTP_ACBL0024Record_setInfo *somTD_ACBL0024Record_setInfo;
typedef void   SOMLINK somTP_ACBL0024Record_withNonFormattedBuffer(ACBL0024Record *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_AWDOBJECTSTRCT* pBuffer);
typedef somTP_ACBL0024Record_withNonFormattedBuffer *somTD_ACBL0024Record_withNonFormattedBuffer;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void*   SOMLINK somTP_ACBL0024Record_buffer(ACBL0024Record *somSelf, Environment *ev);
typedef somTP_ACBL0024Record_buffer *somTD_ACBL0024Record_buffer;
typedef void   SOMLINK somTP_ACBL0024Record_setBuffer(ACBL0024Record *somSelf, Environment *ev,
		void* pv);
typedef somTP_ACBL0024Record_setBuffer *somTD_ACBL0024Record_setBuffer;
typedef void   SOMLINK somTP_ACBL0024Record_somDefaultInit(ACBL0024Record *somSelf,
		somInitCtrl* ctrl);
typedef somTP_ACBL0024Record_somDefaultInit *somTD_ACBL0024Record_somDefaultInit;
typedef void   SOMLINK somTP_ACBL0024Record_somDestruct(ACBL0024Record *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_ACBL0024Record_somDestruct *somTD_ACBL0024Record_somDestruct;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0024Record_somfMLinkableInit(ACBL0024Record *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_ACBL0024Record_somfMLinkableInit *somTD_ACBL0024Record_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0024Record_somfGetNext(ACBL0024Record *somSelf, Environment *ev);
typedef somTP_ACBL0024Record_somfGetNext *somTD_ACBL0024Record_somfGetNext;
typedef void   SOMLINK somTP_ACBL0024Record_somfSetNext(ACBL0024Record *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0024Record_somfSetNext *somTD_ACBL0024Record_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_ACBL0024Record_somfGetPrevious(ACBL0024Record *somSelf, Environment *ev);
typedef somTP_ACBL0024Record_somfGetPrevious *somTD_ACBL0024Record_somfGetPrevious;
typedef void   SOMLINK somTP_ACBL0024Record_somfSetPrevious(ACBL0024Record *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_ACBL0024Record_somfSetPrevious *somTD_ACBL0024Record_somfSetPrevious;
typedef void   SOMLINK somTP_ACBL0024Record_somInit(ACBL0024Record *somSelf);
typedef somTP_ACBL0024Record_somInit *somTD_ACBL0024Record_somInit;
typedef void   SOMLINK somTP_ACBL0024Record_somDefaultCopyInit(ACBL0024Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024Record_somDefaultCopyInit *somTD_ACBL0024Record_somDefaultCopyInit;
typedef ACBL0024Record*   SOMLINK somTP_ACBL0024Record_somDefaultAssign(ACBL0024Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024Record_somDefaultAssign *somTD_ACBL0024Record_somDefaultAssign;
typedef void   SOMLINK somTP_ACBL0024Record_somDefaultConstCopyInit(ACBL0024Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024Record_somDefaultConstCopyInit *somTD_ACBL0024Record_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ACBL0024Record_somDefaultVCopyInit(ACBL0024Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024Record_somDefaultVCopyInit *somTD_ACBL0024Record_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ACBL0024Record_somDefaultConstVCopyInit(ACBL0024Record *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024Record_somDefaultConstVCopyInit *somTD_ACBL0024Record_somDefaultConstVCopyInit;
typedef ACBL0024Record*   SOMLINK somTP_ACBL0024Record_somDefaultConstAssign(ACBL0024Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024Record_somDefaultConstAssign *somTD_ACBL0024Record_somDefaultConstAssign;
typedef ACBL0024Record*   SOMLINK somTP_ACBL0024Record_somDefaultVAssign(ACBL0024Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024Record_somDefaultVAssign *somTD_ACBL0024Record_somDefaultVAssign;
typedef ACBL0024Record*   SOMLINK somTP_ACBL0024Record_somDefaultConstVAssign(ACBL0024Record *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ACBL0024Record_somDefaultConstVAssign *somTD_ACBL0024Record_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ACBL0024Record_somFree(ACBL0024Record *somSelf);
typedef somTP_ACBL0024Record_somFree *somTD_ACBL0024Record_somFree;
typedef void   SOMLINK somTP_ACBL0024Record_somUninit(ACBL0024Record *somSelf);
typedef somTP_ACBL0024Record_somUninit *somTD_ACBL0024Record_somUninit;
typedef SOMClass*   SOMLINK somTP_ACBL0024Record_somGetClass(ACBL0024Record *somSelf);
typedef somTP_ACBL0024Record_somGetClass *somTD_ACBL0024Record_somGetClass;
typedef string   SOMLINK somTP_ACBL0024Record_somGetClassName(ACBL0024Record *somSelf);
typedef somTP_ACBL0024Record_somGetClassName *somTD_ACBL0024Record_somGetClassName;
typedef long   SOMLINK somTP_ACBL0024Record_somGetSize(ACBL0024Record *somSelf);
typedef somTP_ACBL0024Record_somGetSize *somTD_ACBL0024Record_somGetSize;
typedef boolean   SOMLINK somTP_ACBL0024Record_somIsA(ACBL0024Record *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0024Record_somIsA *somTD_ACBL0024Record_somIsA;
typedef boolean   SOMLINK somTP_ACBL0024Record_somIsInstanceOf(ACBL0024Record *somSelf,
		SOMClass* aClassObj);
typedef somTP_ACBL0024Record_somIsInstanceOf *somTD_ACBL0024Record_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ACBL0024Record_somRespondsTo(ACBL0024Record *somSelf,
		somId mId);
typedef somTP_ACBL0024Record_somRespondsTo *somTD_ACBL0024Record_somRespondsTo;
typedef boolean   SOMLINK somTP_ACBL0024Record_somDispatch(ACBL0024Record *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0024Record_somDispatch *somTD_ACBL0024Record_somDispatch;
typedef boolean   SOMLINK somTP_ACBL0024Record_somClassDispatch(ACBL0024Record *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ACBL0024Record_somClassDispatch *somTD_ACBL0024Record_somClassDispatch;
typedef boolean   SOMLINK somTP_ACBL0024Record_somCastObj(ACBL0024Record *somSelf,
		SOMClass* cls);
typedef somTP_ACBL0024Record_somCastObj *somTD_ACBL0024Record_somCastObj;
typedef boolean   SOMLINK somTP_ACBL0024Record_somResetObj(ACBL0024Record *somSelf);
typedef somTP_ACBL0024Record_somResetObj *somTD_ACBL0024Record_somResetObj;
typedef SOMObject*   SOMLINK somTP_ACBL0024Record_somPrintSelf(ACBL0024Record *somSelf);
typedef somTP_ACBL0024Record_somPrintSelf *somTD_ACBL0024Record_somPrintSelf;
typedef void   SOMLINK somTP_ACBL0024Record_somDumpSelf(ACBL0024Record *somSelf,
		long level);
typedef somTP_ACBL0024Record_somDumpSelf *somTD_ACBL0024Record_somDumpSelf;
typedef void   SOMLINK somTP_ACBL0024Record_somDumpSelfInt(ACBL0024Record *somSelf,
		long level);
typedef somTP_ACBL0024Record_somDumpSelfInt *somTD_ACBL0024Record_somDumpSelfInt;
}

#endif /* ACBL0024Record_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for ACBL0024Record
 */
class ACBL0024Record : public RECORD
{
public:

// ACBL0024Record::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ACBL0024Record) ACBL0024RecordNewClass(ACBL0024Record_MajorVersion,ACBL0024Record_MinorVersion);
   return (void*)
      SOM_Resolve(_ACBL0024Record,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ACBL0024Record));
}

// ACBL0024Record::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ACBL0024Record()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0024RecordCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ACBL0024Record(ACBL0024Record* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0024RecordCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ACBL0024Record(const ACBL0024Record* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ACBL0024RecordCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ACBL0024Record(Environment *ev,AWD_AWDOBJECTSTRCT* pBuffer) 
{
   withNonFormattedBuffer(ev,0,pBuffer);
}


/* method: awdObject */
AWD_AWDOBJECTSTRCT*   awdObject(Environment *ev,
		AWD_AWDOBJECTSTRCT* pIn)
{
   return SOM_ResolveD(this,ACBL0024Record,ACBL0024Record,awdObject)
	(this, ev,pIn);
}


/* method: setInfo */
void   setInfo(Environment *ev,
		AWD_AWDOBJECTSTRCT* pBuffer)
{
   SOM_ResolveD(this,ACBL0024Record,ACBL0024Record,setInfo)
	(this, ev,pBuffer);
}


/* initializer method: withNonFormattedBuffer */
void   withNonFormattedBuffer(Environment *ev,
		somInitCtrl* ctrl,
		AWD_AWDOBJECTSTRCT* pBuffer)
{
   SOM_ResolveD(this,ACBL0024Record,ACBL0024Record,withNonFormattedBuffer)
	(this, ev,ctrl,pBuffer);
}


/*
 * Reintroduce inherited methods
 */

/* method: buffer */
void*   buffer(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024Record,RECORD,buffer)
	(this, ev);
}


/* method: setBuffer */
void   setBuffer(Environment *ev,
		void* pv)
{
   SOM_ResolveD(this,ACBL0024Record,RECORD,setBuffer)
	(this, ev,pv);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0024Record,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,ACBL0024Record,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,ACBL0024Record,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024Record,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0024Record,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,ACBL0024Record,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,ACBL0024Record,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,ACBL0024Record,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0024Record,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ACBL0024Record*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0024Record,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0024Record,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0024Record,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ACBL0024Record,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ACBL0024Record*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0024Record,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ACBL0024Record*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0024Record,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ACBL0024Record*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ACBL0024Record,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ACBL0024Record,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ACBL0024Record,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,ACBL0024Record,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,ACBL0024Record,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,ACBL0024Record,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0024Record,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ACBL0024Record,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,ACBL0024Record,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   ACBL0024Record_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0024Record,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0024Record,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   ACBL0024Record_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ACBL0024Record,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ACBL0024Record,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,ACBL0024Record,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,ACBL0024Record,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,ACBL0024Record,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ACBL0024Record,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ACBL0024Record,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ACBL0024Record */



#endif       /* SOM_ACBL0024Record_xh */
