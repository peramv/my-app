
#ifndef SOM_AWDWork_xh
#define SOM_AWDWork_xh

class AWDWork;

#define AWDWork_MajorVersion 0
#define AWDWork_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDBase_xh
#include <awdobj.xh>
#endif

#ifndef AWDWork_API
#define AWDWork_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class AWDPersist;
class AWDBase;
class iostream;
class AWDVisitor;
class AWDServiceManager;
class AWDCommentAid;
class AWDString;
class AWDAlphaField;
class AWDDateTime;
class AWDBaseField;
class AWDDictionary;
class AWDDateTimeField;
class AWDGroupField;
class AWDApplication;
class AWDFieldFactory;
class AWDEntityKey;
class AWDMenu;
class CCriticalSection;
class FieldList;
class AWDRelationship;
class AWDTextField;
class AWDSuspendAid;
#define AWDWork_LOB_CANCEL 0 /* 0 */
#define AWDWork_LOB_FUNCTION_COMPLETE 1 /* 1 */
#define AWDWork_LOB_UPDATE 2 /* 2 */
#define AWDWork_LOB_PASS 3 /* 3 */
#define AWDWork_LOB_FAIL 4 /* 4 */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_LOB_CANCEL
    #ifdef LOB_CANCEL
        #undef LOB_CANCEL
        #define SOMTGD_LOB_CANCEL 1
    #else
        #define LOB_CANCEL AWDWork_LOB_CANCEL
    #endif /* LOB_CANCEL */
#endif /* SOMTGD_LOB_CANCEL */
#ifndef SOMTGD_LOB_FUNCTION_COMPLETE
    #ifdef LOB_FUNCTION_COMPLETE
        #undef LOB_FUNCTION_COMPLETE
        #define SOMTGD_LOB_FUNCTION_COMPLETE 1
    #else
        #define LOB_FUNCTION_COMPLETE AWDWork_LOB_FUNCTION_COMPLETE
    #endif /* LOB_FUNCTION_COMPLETE */
#endif /* SOMTGD_LOB_FUNCTION_COMPLETE */
#ifndef SOMTGD_LOB_UPDATE
    #ifdef LOB_UPDATE
        #undef LOB_UPDATE
        #define SOMTGD_LOB_UPDATE 1
    #else
        #define LOB_UPDATE AWDWork_LOB_UPDATE
    #endif /* LOB_UPDATE */
#endif /* SOMTGD_LOB_UPDATE */
#ifndef SOMTGD_LOB_PASS
    #ifdef LOB_PASS
        #undef LOB_PASS
        #define SOMTGD_LOB_PASS 1
    #else
        #define LOB_PASS AWDWork_LOB_PASS
    #endif /* LOB_PASS */
#endif /* SOMTGD_LOB_PASS */
#ifndef SOMTGD_LOB_FAIL
    #ifdef LOB_FAIL
        #undef LOB_FAIL
        #define SOMTGD_LOB_FAIL 1
    #else
        #define LOB_FAIL AWDWork_LOB_FAIL
    #endif /* LOB_FAIL */
#endif /* SOMTGD_LOB_FAIL */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDWork Class */
SOMEXTERN
#if (defined(SOM_Module_wrkobj_Source) || defined(AWDWork_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDWork))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDWorkNewClass(
		integer4,
		integer4 );

/* The API to the AWDWork class object, and the methods it introduces. */
SOMEXTERN struct AWDWorkClassDataStructure {
	SOMClass *classObject;
	somMToken activate;
	somMToken amount;
	somMToken amountType;
	somMToken changeQueue;
	somMToken displayChangeQueue;
	somMToken displayClone;
	somMToken displayQuality;
	somMToken displaySuspend;
	somMToken displayTaskManager;
	somMToken fail;
	somMToken initialize;
	somMToken isAutoQuality;
	somMToken isAutoSuspend;
	somMToken isFieldValid;
	somMToken isSuspended;
	somMToken pass;
	somMToken priority;
	somMToken process;
	somMToken queue;
	somMToken setAmount;
	somMToken setPriorityIncrease;
	somMToken setQueue;
	somMToken setStatus;
	somMToken setVIFlag;
	somMToken setWorkType;
	somMToken startExternalSystem;
	somMToken status;
	somMToken stopChangeQueue;
	somMToken stopClone;
	somMToken stopExternalSystem;
	somMToken stopQuality;
	somMToken stopSuspend;
	somMToken stopTaskManager;
	somMToken suspend;
	somMToken unsuspend;
	somMToken viFlag;
	somMToken AWDWork_withArray;
	somMToken AWDWork_withKey;
	somMToken AWDWork_withStructure;
	somMToken AWDWork_withStructureandArray;
	somMToken workType;
	somMToken updateWork;
	somMToken AWDWork_withEntityKey;
	somMToken AWDWork_withPersist;
	somMToken AWDWork_withObject;
	somMToken functionComplete;
	somMToken setDefaultNextStatus;
	somMToken AWDWork_withHandle;
	somMToken blankQueueIfKeyFieldsHaveChanged;
	somMToken priorityIncrease;
}
#if !(defined(SOM_Module_wrkobj_Source) || defined(AWDWork_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDWork))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDWorkClassData;
#define _AWDWork AWDWorkClassData.classObject

/* The API to parentMtabs for AWDWork, and the instance data it introduces. */
SOMEXTERN struct AWDWorkCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_wrkobj_Source) || defined(AWDWork_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDWork))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDWorkCClassData;

/*
 * -- Typedefs for AWDWork Method Procedures
 */
extern "C" {
typedef boolean   SOMLINK somTP_AWDWork_activate(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_activate *somTD_AWDWork_activate;
typedef char*   SOMLINK somTP_AWDWork_amount(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_amount *somTD_AWDWork_amount;
typedef char*   SOMLINK somTP_AWDWork_amountType(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_amountType *somTD_AWDWork_amountType;
typedef boolean   SOMLINK somTP_AWDWork_blankQueueIfKeyFieldsHaveChanged(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_blankQueueIfKeyFieldsHaveChanged *somTD_AWDWork_blankQueueIfKeyFieldsHaveChanged;
typedef boolean   SOMLINK somTP_AWDWork_changeQueue(AWDWork *somSelf, Environment *ev,
		string pszNewQueue);
typedef somTP_AWDWork_changeQueue *somTD_AWDWork_changeQueue;
typedef boolean   SOMLINK somTP_AWDWork_displayChangeQueue(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_displayChangeQueue *somTD_AWDWork_displayChangeQueue;
typedef boolean   SOMLINK somTP_AWDWork_displayClone(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_displayClone *somTD_AWDWork_displayClone;
typedef boolean   SOMLINK somTP_AWDWork_displayQuality(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_displayQuality *somTD_AWDWork_displayQuality;
typedef boolean   SOMLINK somTP_AWDWork_displaySuspend(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_displaySuspend *somTD_AWDWork_displaySuspend;
typedef boolean   SOMLINK somTP_AWDWork_displayTaskManager(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_displayTaskManager *somTD_AWDWork_displayTaskManager;
typedef boolean   SOMLINK somTP_AWDWork_fail(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_fail *somTD_AWDWork_fail;
typedef boolean   SOMLINK somTP_AWDWork_isAutoQuality(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isAutoQuality *somTD_AWDWork_isAutoQuality;
typedef boolean   SOMLINK somTP_AWDWork_isAutoSuspend(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isAutoSuspend *somTD_AWDWork_isAutoSuspend;
typedef boolean   SOMLINK somTP_AWDWork_isSuspended(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isSuspended *somTD_AWDWork_isSuspended;
typedef boolean   SOMLINK somTP_AWDWork_pass(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_pass *somTD_AWDWork_pass;
typedef boolean   SOMLINK somTP_AWDWork_process(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_process *somTD_AWDWork_process;
typedef unsigned short   SOMLINK somTP_AWDWork_priority(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_priority *somTD_AWDWork_priority;
typedef unsigned short   SOMLINK somTP_AWDWork_priorityIncrease(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_priorityIncrease *somTD_AWDWork_priorityIncrease;
typedef char*   SOMLINK somTP_AWDWork_queue(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_queue *somTD_AWDWork_queue;
typedef boolean   SOMLINK somTP_AWDWork_setAmount(AWDWork *somSelf, Environment *ev,
		unsigned long ulAmount);
typedef somTP_AWDWork_setAmount *somTD_AWDWork_setAmount;
typedef boolean   SOMLINK somTP_AWDWork_setPriorityIncrease(AWDWork *somSelf, Environment *ev,
		unsigned short usPriority);
typedef somTP_AWDWork_setPriorityIncrease *somTD_AWDWork_setPriorityIncrease;
typedef boolean   SOMLINK somTP_AWDWork_setQueue(AWDWork *somSelf, Environment *ev,
		string pszQueue);
typedef somTP_AWDWork_setQueue *somTD_AWDWork_setQueue;
typedef boolean   SOMLINK somTP_AWDWork_setStatus(AWDWork *somSelf, Environment *ev,
		string pszStatus);
typedef somTP_AWDWork_setStatus *somTD_AWDWork_setStatus;
typedef boolean   SOMLINK somTP_AWDWork_setVIFlag(AWDWork *somSelf, Environment *ev,
		boolean fVI);
typedef somTP_AWDWork_setVIFlag *somTD_AWDWork_setVIFlag;
typedef boolean   SOMLINK somTP_AWDWork_setWorkType(AWDWork *somSelf, Environment *ev,
		string pszType);
typedef somTP_AWDWork_setWorkType *somTD_AWDWork_setWorkType;
typedef boolean   SOMLINK somTP_AWDWork_startExternalSystem(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_startExternalSystem *somTD_AWDWork_startExternalSystem;
typedef char*   SOMLINK somTP_AWDWork_status(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_status *somTD_AWDWork_status;
typedef boolean   SOMLINK somTP_AWDWork_stopChangeQueue(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_stopChangeQueue *somTD_AWDWork_stopChangeQueue;
typedef boolean   SOMLINK somTP_AWDWork_stopClone(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_stopClone *somTD_AWDWork_stopClone;
typedef boolean   SOMLINK somTP_AWDWork_stopExternalSystem(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_stopExternalSystem *somTD_AWDWork_stopExternalSystem;
typedef boolean   SOMLINK somTP_AWDWork_stopQuality(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_stopQuality *somTD_AWDWork_stopQuality;
typedef boolean   SOMLINK somTP_AWDWork_stopSuspend(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_stopSuspend *somTD_AWDWork_stopSuspend;
typedef boolean   SOMLINK somTP_AWDWork_stopTaskManager(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_stopTaskManager *somTD_AWDWork_stopTaskManager;
typedef boolean   SOMLINK somTP_AWDWork_suspend(AWDWork *somSelf, Environment *ev,
		string activateDate,
		string activateStatus,
		string suspendCode);
typedef somTP_AWDWork_suspend *somTD_AWDWork_suspend;
typedef boolean   SOMLINK somTP_AWDWork_unsuspend(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_unsuspend *somTD_AWDWork_unsuspend;
typedef boolean   SOMLINK somTP_AWDWork_viFlag(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_viFlag *somTD_AWDWork_viFlag;
typedef char*   SOMLINK somTP_AWDWork_workType(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_workType *somTD_AWDWork_workType;
typedef void   SOMLINK somTP_AWDWork_AWDWork_withEntityKey(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey);
typedef somTP_AWDWork_AWDWork_withEntityKey *somTD_AWDWork_AWDWork_withEntityKey;
typedef void   SOMLINK somTP_AWDWork_AWDWork_withKey(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct);
typedef somTP_AWDWork_AWDWork_withKey *somTD_AWDWork_AWDWork_withKey;
typedef void   SOMLINK somTP_AWDWork_AWDWork_withStructure(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj);
typedef somTP_AWDWork_AWDWork_withStructure *somTD_AWDWork_AWDWork_withStructure;
typedef void   SOMLINK somTP_AWDWork_AWDWork_withArray(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDWork_AWDWork_withArray *somTD_AWDWork_AWDWork_withArray;
typedef void   SOMLINK somTP_AWDWork_AWDWork_withStructureandArray(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDWork_AWDWork_withStructureandArray *somTD_AWDWork_AWDWork_withStructureandArray;
typedef void   SOMLINK somTP_AWDWork_AWDWork_withPersist(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDWork_AWDWork_withPersist *somTD_AWDWork_AWDWork_withPersist;
typedef void   SOMLINK somTP_AWDWork_AWDWork_withObject(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDWork* obj);
typedef somTP_AWDWork_AWDWork_withObject *somTD_AWDWork_AWDWork_withObject;
typedef void   SOMLINK somTP_AWDWork_AWDWork_withHandle(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject);
typedef somTP_AWDWork_AWDWork_withHandle *somTD_AWDWork_AWDWork_withHandle;
typedef boolean   SOMLINK somTP_AWDWork_functionComplete(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_functionComplete *somTD_AWDWork_functionComplete;
typedef boolean   SOMLINK somTP_AWDWork_setDefaultNextStatus(AWDWork *somSelf, Environment *ev,
		unsigned long lobAction);
typedef somTP_AWDWork_setDefaultNextStatus *somTD_AWDWork_setDefaultNextStatus;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_AWDWork_iOwn(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_iOwn *somTD_AWDWork_iOwn;
typedef boolean   SOMLINK somTP_AWDWork_iLocked(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_iLocked *somTD_AWDWork_iLocked;
typedef boolean   SOMLINK somTP_AWDWork_addComments(AWDWork *somSelf, Environment *ev,
		char* pCommentBuffer,
		AWDBase_COMMENTS dType);
typedef somTP_AWDWork_addComments *somTD_AWDWork_addComments;
typedef unsigned long   SOMLINK somTP_AWDWork_autoFlags(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_autoFlags *somTD_AWDWork_autoFlags;
typedef unsigned short   SOMLINK somTP_AWDWork_autoFlagFocus(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_autoFlagFocus *somTD_AWDWork_autoFlagFocus;
typedef char*   SOMLINK somTP_AWDWork_businessArea(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_businessArea *somTD_AWDWork_businessArea;
typedef boolean   SOMLINK somTP_AWDWork_canContain(AWDWork *somSelf, Environment *ev,
		AWDBase* awdObj);
typedef somTP_AWDWork_canContain *somTD_AWDWork_canContain;
typedef boolean   SOMLINK somTP_AWDWork_copyFrom(AWDWork *somSelf, Environment *ev,
		AWDBase* awdObj);
typedef somTP_AWDWork_copyFrom *somTD_AWDWork_copyFrom;
typedef void   SOMLINK somTP_AWDWork_clone(AWDWork *somSelf, Environment *ev,
		unsigned short usCount,
		boolean fCreateRelationship,
		boolean fLock,
		AWDBase** ppClonedObjs,
		string shareMemName);
typedef somTP_AWDWork_clone *somTD_AWDWork_clone;
typedef void   SOMLINK somTP_AWDWork_create(AWDWork *somSelf, Environment *ev,
		AWDBase_CREATE_MODE mode,
		unsigned long ulBatch);
typedef somTP_AWDWork_create *somTD_AWDWork_create;
typedef char*   SOMLINK somTP_AWDWork_createNode(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_createNode *somTD_AWDWork_createNode;
typedef char*   SOMLINK somTP_AWDWork_creationDateTime(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_creationDateTime *somTD_AWDWork_creationDateTime;
typedef char*   SOMLINK somTP_AWDWork_csdName(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_csdName *somTD_AWDWork_csdName;
typedef boolean   SOMLINK somTP_AWDWork_displayComments(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_displayComments *somTD_AWDWork_displayComments;
typedef boolean   SOMLINK somTP_AWDWork_displayCsd(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_displayCsd *somTD_AWDWork_displayCsd;
typedef boolean   SOMLINK somTP_AWDWork_displayHistory(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_displayHistory *somTD_AWDWork_displayHistory;
typedef AWDBaseField*   SOMLINK somTP_AWDWork_field(AWDWork *somSelf, Environment *ev,
		string aname,
		unsigned short seqnum);
typedef somTP_AWDWork_field *somTD_AWDWork_field;
typedef unsigned long   SOMLINK somTP_AWDWork_fieldAsLong(AWDWork *somSelf, Environment *ev,
		string aname,
		unsigned short seqnum);
typedef somTP_AWDWork_fieldAsLong *somTD_AWDWork_fieldAsLong;
typedef char*   SOMLINK somTP_AWDWork_fieldAsString(AWDWork *somSelf, Environment *ev,
		string aname,
		unsigned short seqnum,
		AWDString* str);
typedef somTP_AWDWork_fieldAsString *somTD_AWDWork_fieldAsString;
typedef unsigned short   SOMLINK somTP_AWDWork_fieldCount(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_fieldCount *somTD_AWDWork_fieldCount;
typedef char*   SOMLINK somTP_AWDWork_getBeginTime(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_getBeginTime *somTD_AWDWork_getBeginTime;
typedef boolean   SOMLINK somTP_AWDWork_getCreateArray(AWDWork *somSelf, Environment *ev,
		AWD_PAWDCREATELOBARRAY pAwdLobArray);
typedef somTP_AWDWork_getCreateArray *somTD_AWDWork_getCreateArray;
typedef FieldList*   SOMLINK somTP_AWDWork_getFieldList(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_getFieldList *somTD_AWDWork_getFieldList;
typedef char*   SOMLINK somTP_AWDWork_getEndTime(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_getEndTime *somTD_AWDWork_getEndTime;
typedef boolean   SOMLINK somTP_AWDWork_getKeyStrct(AWDWork *somSelf, Environment *ev,
		AWD_PAWDOBJECTKEYSTRCT pKey);
typedef somTP_AWDWork_getKeyStrct *somTD_AWDWork_getKeyStrct;
typedef boolean   SOMLINK somTP_AWDWork_getFieldArray(AWDWork *somSelf, Environment *ev,
		AWD_AWDLOBARRAYSTRCT* pAwdLobArray);
typedef somTP_AWDWork_getFieldArray *somTD_AWDWork_getFieldArray;
typedef AWDBase_STATE   SOMLINK somTP_AWDWork_getState(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_getState *somTD_AWDWork_getState;
typedef boolean   SOMLINK somTP_AWDWork_getStructure(AWDWork *somSelf, Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct);
typedef somTP_AWDWork_getStructure *somTD_AWDWork_getStructure;
typedef boolean   SOMLINK somTP_AWDWork_hasChanged(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_hasChanged *somTD_AWDWork_hasChanged;
typedef boolean   SOMLINK somTP_AWDWork_hasComments(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_hasComments *somTD_AWDWork_hasComments;
typedef char*   SOMLINK somTP_AWDWork_iconName(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_iconName *somTD_AWDWork_iconName;
typedef char*   SOMLINK somTP_AWDWork_iconText(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_iconText *somTD_AWDWork_iconText;
typedef AWDBaseField*   SOMLINK somTP_AWDWork_indexField(AWDWork *somSelf, Environment *ev,
		unsigned short indexnumber);
typedef somTP_AWDWork_indexField *somTD_AWDWork_indexField;
typedef void   SOMLINK somTP_AWDWork_initialize(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_initialize *somTD_AWDWork_initialize;
typedef boolean   SOMLINK somTP_AWDWork_isAutoChildSource(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isAutoChildSource *somTD_AWDWork_isAutoChildSource;
typedef boolean   SOMLINK somTP_AWDWork_isAutoComments(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isAutoComments *somTD_AWDWork_isAutoComments;
typedef boolean   SOMLINK somTP_AWDWork_isAutoCsd(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isAutoCsd *somTD_AWDWork_isAutoCsd;
typedef boolean   SOMLINK somTP_AWDWork_isAutoHistory(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isAutoHistory *somTD_AWDWork_isAutoHistory;
typedef boolean   SOMLINK somTP_AWDWork_isAutoLob(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isAutoLob *somTD_AWDWork_isAutoLob;
typedef boolean   SOMLINK somTP_AWDWork_isAutoSiblingSource(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isAutoSiblingSource *somTD_AWDWork_isAutoSiblingSource;
typedef boolean   SOMLINK somTP_AWDWork_isAutoViewSource(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isAutoViewSource *somTD_AWDWork_isAutoViewSource;
typedef boolean   SOMLINK somTP_AWDWork_isFieldValid(AWDWork *somSelf, Environment *ev,
		string pszField);
typedef somTP_AWDWork_isFieldValid *somTD_AWDWork_isFieldValid;
typedef boolean   SOMLINK somTP_AWDWork_isInUse(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isInUse *somTD_AWDWork_isInUse;
typedef boolean   SOMLINK somTP_AWDWork_isLocked(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isLocked *somTD_AWDWork_isLocked;
typedef boolean   SOMLINK somTP_AWDWork_isSelected(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isSelected *somTD_AWDWork_isSelected;
typedef boolean   SOMLINK somTP_AWDWork_isShowable(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isShowable *somTD_AWDWork_isShowable;
typedef boolean   SOMLINK somTP_AWDWork_isType(AWDWork *somSelf, Environment *ev,
		unsigned long ulType);
typedef somTP_AWDWork_isType *somTD_AWDWork_isType;
typedef boolean   SOMLINK somTP_AWDWork_isUpdateable(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isUpdateable *somTD_AWDWork_isUpdateable;
typedef boolean   SOMLINK somTP_AWDWork_isViewable(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isViewable *somTD_AWDWork_isViewable;
typedef boolean   SOMLINK somTP_AWDWork_isSourceObject(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isSourceObject *somTD_AWDWork_isSourceObject;
typedef boolean   SOMLINK somTP_AWDWork_isFolderObject(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isFolderObject *somTD_AWDWork_isFolderObject;
typedef boolean   SOMLINK somTP_AWDWork_isTransactionObject(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isTransactionObject *somTD_AWDWork_isTransactionObject;
typedef boolean   SOMLINK somTP_AWDWork_isCaseObject(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_isCaseObject *somTD_AWDWork_isCaseObject;
typedef char*   SOMLINK somTP_AWDWork_key(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_key *somTD_AWDWork_key;
typedef AWDBase_LOCKRESULT   SOMLINK somTP_AWDWork_lock(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_lock *somTD_AWDWork_lock;
typedef boolean   SOMLINK somTP_AWDWork_unlock(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_unlock *somTD_AWDWork_unlock;
typedef boolean   SOMLINK somTP_AWDWork_unlockRegardless(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_unlockRegardless *somTD_AWDWork_unlockRegardless;
typedef char*   SOMLINK somTP_AWDWork_lockedBy(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_lockedBy *somTD_AWDWork_lockedBy;
typedef char*   SOMLINK somTP_AWDWork_ownerNode(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_ownerNode *somTD_AWDWork_ownerNode;
typedef char*   SOMLINK somTP_AWDWork_recordCode(AWDWork *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDWork_recordCode *somTD_AWDWork_recordCode;
typedef boolean   SOMLINK somTP_AWDWork_removeWorkselect(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_removeWorkselect *somTD_AWDWork_removeWorkselect;
typedef boolean   SOMLINK somTP_AWDWork_retrieve(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_retrieve *somTD_AWDWork_retrieve;
typedef boolean   SOMLINK somTP_AWDWork_retrieveSecondaryFields(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_retrieveSecondaryFields *somTD_AWDWork_retrieveSecondaryFields;
typedef void   SOMLINK somTP_AWDWork_setBeginTime(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_setBeginTime *somTD_AWDWork_setBeginTime;
typedef void   SOMLINK somTP_AWDWork_setBeginTimeFromTimestamp(AWDWork *somSelf, Environment *ev,
		string pszTimestamp);
typedef somTP_AWDWork_setBeginTimeFromTimestamp *somTD_AWDWork_setBeginTimeFromTimestamp;
typedef boolean   SOMLINK somTP_AWDWork_setBusinessArea(AWDWork *somSelf, Environment *ev,
		string pszba);
typedef somTP_AWDWork_setBusinessArea *somTD_AWDWork_setBusinessArea;
typedef void   SOMLINK somTP_AWDWork_setCsdName(AWDWork *somSelf, Environment *ev,
		char* pszCsd);
typedef somTP_AWDWork_setCsdName *somTD_AWDWork_setCsdName;
typedef void   SOMLINK somTP_AWDWork_setEndTime(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_setEndTime *somTD_AWDWork_setEndTime;
typedef void   SOMLINK somTP_AWDWork_setEndTimeFromTimestamp(AWDWork *somSelf, Environment *ev,
		string pszTimestamp);
typedef somTP_AWDWork_setEndTimeFromTimestamp *somTD_AWDWork_setEndTimeFromTimestamp;
typedef void   SOMLINK somTP_AWDWork_setElapsedTime(AWDWork *somSelf, Environment *ev,
		unsigned long ulElapsedTime);
typedef somTP_AWDWork_setElapsedTime *somTD_AWDWork_setElapsedTime;
typedef boolean   SOMLINK somTP_AWDWork_setField(AWDWork *somSelf, Environment *ev,
		AWDBaseField* fld);
typedef somTP_AWDWork_setField *somTD_AWDWork_setField;
typedef boolean   SOMLINK somTP_AWDWork_setFieldFromLong(AWDWork *somSelf, Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		unsigned long ulvalue);
typedef somTP_AWDWork_setFieldFromLong *somTD_AWDWork_setFieldFromLong;
typedef boolean   SOMLINK somTP_AWDWork_setFieldFromString(AWDWork *somSelf, Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		string pszvalue);
typedef somTP_AWDWork_setFieldFromString *somTD_AWDWork_setFieldFromString;
typedef boolean   SOMLINK somTP_AWDWork_setIndexField(AWDWork *somSelf, Environment *ev,
		unsigned short usindex,
		AWDBaseField* fld);
typedef somTP_AWDWork_setIndexField *somTD_AWDWork_setIndexField;
typedef boolean   SOMLINK somTP_AWDWork_setIndexFieldFromString(AWDWork *somSelf, Environment *ev,
		unsigned short usindex,
		string pszField);
typedef somTP_AWDWork_setIndexFieldFromString *somTD_AWDWork_setIndexFieldFromString;
typedef void   SOMLINK somTP_AWDWork_setInUse(AWDWork *somSelf, Environment *ev,
		boolean fUse);
typedef somTP_AWDWork_setInUse *somTD_AWDWork_setInUse;
typedef boolean   SOMLINK somTP_AWDWork_setILockedFlag(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_setILockedFlag *somTD_AWDWork_setILockedFlag;
typedef boolean   SOMLINK somTP_AWDWork_startService(AWDWork *somSelf, Environment *ev,
		string pszServiceClass);
typedef somTP_AWDWork_startService *somTD_AWDWork_startService;
typedef boolean   SOMLINK somTP_AWDWork_startServiceByIndex(AWDWork *somSelf, Environment *ev,
		unsigned long ulCategory);
typedef somTP_AWDWork_startServiceByIndex *somTD_AWDWork_startServiceByIndex;
typedef boolean   SOMLINK somTP_AWDWork_stopCsd(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_stopCsd *somTD_AWDWork_stopCsd;
typedef boolean   SOMLINK somTP_AWDWork_stopHistory(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_stopHistory *somTD_AWDWork_stopHistory;
typedef boolean   SOMLINK somTP_AWDWork_stopComments(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_stopComments *somTD_AWDWork_stopComments;
typedef boolean   SOMLINK somTP_AWDWork_stopService(AWDWork *somSelf, Environment *ev,
		string pszServiceClass);
typedef somTP_AWDWork_stopService *somTD_AWDWork_stopService;
typedef unsigned long   SOMLINK somTP_AWDWork_type(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_type *somTD_AWDWork_type;
typedef boolean   SOMLINK somTP_AWDWork_update(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_update *somTD_AWDWork_update;
typedef boolean   SOMLINK somTP_AWDWork_updateFromArray(AWDWork *somSelf, Environment *ev,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDWork_updateFromArray *somTD_AWDWork_updateFromArray;
typedef void   SOMLINK somTP_AWDWork_updateFromKey(AWDWork *somSelf, Environment *ev,
		AWDEntityKey* pKey);
typedef somTP_AWDWork_updateFromKey *somTD_AWDWork_updateFromKey;
typedef boolean   SOMLINK somTP_AWDWork_updateFromStructure(AWDWork *somSelf, Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct);
typedef somTP_AWDWork_updateFromStructure *somTD_AWDWork_updateFromStructure;
typedef boolean   SOMLINK somTP_AWDWork_validate(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_validate *somTD_AWDWork_validate;
typedef void   SOMLINK somTP_AWDWork_withEntityKey(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey);
typedef somTP_AWDWork_withEntityKey *somTD_AWDWork_withEntityKey;
typedef void   SOMLINK somTP_AWDWork_withKey(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct);
typedef somTP_AWDWork_withKey *somTD_AWDWork_withKey;
typedef void   SOMLINK somTP_AWDWork_withStructure(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj);
typedef somTP_AWDWork_withStructure *somTD_AWDWork_withStructure;
typedef void   SOMLINK somTP_AWDWork_withArray(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDWork_withArray *somTD_AWDWork_withArray;
typedef void   SOMLINK somTP_AWDWork_withStructureandArray(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDWork_withStructureandArray *somTD_AWDWork_withStructureandArray;
typedef void   SOMLINK somTP_AWDWork_withPersist(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDWork_withPersist *somTD_AWDWork_withPersist;
typedef void   SOMLINK somTP_AWDWork_withObject(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDBase* obj);
typedef somTP_AWDWork_withObject *somTD_AWDWork_withObject;
typedef void   SOMLINK somTP_AWDWork_withHandle(AWDWork *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject);
typedef somTP_AWDWork_withHandle *somTD_AWDWork_withHandle;
typedef AWDBase*   SOMLINK somTP_AWDWork_next(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_next *somTD_AWDWork_next;
typedef AWDBase*   SOMLINK somTP_AWDWork_previous(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_previous *somTD_AWDWork_previous;
typedef AWDBase*   SOMLINK somTP_AWDWork_child(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_child *somTD_AWDWork_child;
typedef AWDBase*   SOMLINK somTP_AWDWork_parent(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_parent *somTD_AWDWork_parent;
typedef AWDRelationship*   SOMLINK somTP_AWDWork_relationship(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_relationship *somTD_AWDWork_relationship;
typedef void   SOMLINK somTP_AWDWork_setNext(AWDWork *somSelf, Environment *ev,
		AWDBase* next);
typedef somTP_AWDWork_setNext *somTD_AWDWork_setNext;
typedef void   SOMLINK somTP_AWDWork_setPrevious(AWDWork *somSelf, Environment *ev,
		AWDBase* previous);
typedef somTP_AWDWork_setPrevious *somTD_AWDWork_setPrevious;
typedef void   SOMLINK somTP_AWDWork_setChild(AWDWork *somSelf, Environment *ev,
		AWDBase* child);
typedef somTP_AWDWork_setChild *somTD_AWDWork_setChild;
typedef void   SOMLINK somTP_AWDWork_setParent(AWDWork *somSelf, Environment *ev,
		AWDBase* parent);
typedef somTP_AWDWork_setParent *somTD_AWDWork_setParent;
typedef void*   SOMLINK somTP_AWDWork_usageToken(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_usageToken *somTD_AWDWork_usageToken;
typedef void   SOMLINK somTP_AWDWork_setUsageToken(AWDWork *somSelf, Environment *ev,
		void* pv);
typedef somTP_AWDWork_setUsageToken *somTD_AWDWork_setUsageToken;
typedef unsigned long   SOMLINK somTP_AWDWork_getTag(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_getTag *somTD_AWDWork_getTag;
typedef void   SOMLINK somTP_AWDWork_setTag(AWDWork *somSelf, Environment *ev,
		unsigned long ulTag);
typedef somTP_AWDWork_setTag *somTD_AWDWork_setTag;
typedef boolean   SOMLINK somTP_AWDWork_createRelationship(AWDWork *somSelf, Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation);
typedef somTP_AWDWork_createRelationship *somTD_AWDWork_createRelationship;
typedef boolean   SOMLINK somTP_AWDWork_createRelationshipWithNotify(AWDWork *somSelf, Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation);
typedef somTP_AWDWork_createRelationshipWithNotify *somTD_AWDWork_createRelationshipWithNotify;
typedef boolean   SOMLINK somTP_AWDWork_makeChild(AWDWork *somSelf, Environment *ev,
		AWDBase* pChild);
typedef somTP_AWDWork_makeChild *somTD_AWDWork_makeChild;
typedef boolean   SOMLINK somTP_AWDWork_makeParent(AWDWork *somSelf, Environment *ev,
		AWDBase* pParent);
typedef somTP_AWDWork_makeParent *somTD_AWDWork_makeParent;
typedef void   SOMLINK somTP_AWDWork_somDefaultInit(AWDWork *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDWork_somDefaultInit *somTD_AWDWork_somDefaultInit;
typedef void   SOMLINK somTP_AWDWork_somDestruct(AWDWork *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDWork_somDestruct *somTD_AWDWork_somDestruct;
typedef void   SOMLINK somTP_AWDWork_store(AWDWork *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDWork_store *somTD_AWDWork_store;
typedef void   SOMLINK somTP_AWDWork_restore(AWDWork *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDWork_restore *somTD_AWDWork_restore;
typedef somf_MLinkable*   SOMLINK somTP_AWDWork_somfMLinkableInit(AWDWork *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_AWDWork_somfMLinkableInit *somTD_AWDWork_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_AWDWork_somfGetNext(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_somfGetNext *somTD_AWDWork_somfGetNext;
typedef void   SOMLINK somTP_AWDWork_somfSetNext(AWDWork *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDWork_somfSetNext *somTD_AWDWork_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_AWDWork_somfGetPrevious(AWDWork *somSelf, Environment *ev);
typedef somTP_AWDWork_somfGetPrevious *somTD_AWDWork_somfGetPrevious;
typedef void   SOMLINK somTP_AWDWork_somfSetPrevious(AWDWork *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDWork_somfSetPrevious *somTD_AWDWork_somfSetPrevious;
typedef void   SOMLINK somTP_AWDWork_somInit(AWDWork *somSelf);
typedef somTP_AWDWork_somInit *somTD_AWDWork_somInit;
typedef void   SOMLINK somTP_AWDWork_somDefaultCopyInit(AWDWork *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDWork_somDefaultCopyInit *somTD_AWDWork_somDefaultCopyInit;
typedef AWDWork*   SOMLINK somTP_AWDWork_somDefaultAssign(AWDWork *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDWork_somDefaultAssign *somTD_AWDWork_somDefaultAssign;
typedef void   SOMLINK somTP_AWDWork_somDefaultConstCopyInit(AWDWork *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDWork_somDefaultConstCopyInit *somTD_AWDWork_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDWork_somDefaultVCopyInit(AWDWork *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDWork_somDefaultVCopyInit *somTD_AWDWork_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDWork_somDefaultConstVCopyInit(AWDWork *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDWork_somDefaultConstVCopyInit *somTD_AWDWork_somDefaultConstVCopyInit;
typedef AWDWork*   SOMLINK somTP_AWDWork_somDefaultConstAssign(AWDWork *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDWork_somDefaultConstAssign *somTD_AWDWork_somDefaultConstAssign;
typedef AWDWork*   SOMLINK somTP_AWDWork_somDefaultVAssign(AWDWork *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDWork_somDefaultVAssign *somTD_AWDWork_somDefaultVAssign;
typedef AWDWork*   SOMLINK somTP_AWDWork_somDefaultConstVAssign(AWDWork *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDWork_somDefaultConstVAssign *somTD_AWDWork_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDWork_somFree(AWDWork *somSelf);
typedef somTP_AWDWork_somFree *somTD_AWDWork_somFree;
typedef void   SOMLINK somTP_AWDWork_somUninit(AWDWork *somSelf);
typedef somTP_AWDWork_somUninit *somTD_AWDWork_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDWork_somGetClass(AWDWork *somSelf);
typedef somTP_AWDWork_somGetClass *somTD_AWDWork_somGetClass;
typedef string   SOMLINK somTP_AWDWork_somGetClassName(AWDWork *somSelf);
typedef somTP_AWDWork_somGetClassName *somTD_AWDWork_somGetClassName;
typedef long   SOMLINK somTP_AWDWork_somGetSize(AWDWork *somSelf);
typedef somTP_AWDWork_somGetSize *somTD_AWDWork_somGetSize;
typedef boolean   SOMLINK somTP_AWDWork_somIsA(AWDWork *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDWork_somIsA *somTD_AWDWork_somIsA;
typedef boolean   SOMLINK somTP_AWDWork_somIsInstanceOf(AWDWork *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDWork_somIsInstanceOf *somTD_AWDWork_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDWork_somRespondsTo(AWDWork *somSelf,
		somId mId);
typedef somTP_AWDWork_somRespondsTo *somTD_AWDWork_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDWork_somDispatch(AWDWork *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDWork_somDispatch *somTD_AWDWork_somDispatch;
typedef boolean   SOMLINK somTP_AWDWork_somClassDispatch(AWDWork *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDWork_somClassDispatch *somTD_AWDWork_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDWork_somCastObj(AWDWork *somSelf,
		SOMClass* cls);
typedef somTP_AWDWork_somCastObj *somTD_AWDWork_somCastObj;
typedef boolean   SOMLINK somTP_AWDWork_somResetObj(AWDWork *somSelf);
typedef somTP_AWDWork_somResetObj *somTD_AWDWork_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDWork_somPrintSelf(AWDWork *somSelf);
typedef somTP_AWDWork_somPrintSelf *somTD_AWDWork_somPrintSelf;
typedef void   SOMLINK somTP_AWDWork_somDumpSelf(AWDWork *somSelf,
		long level);
typedef somTP_AWDWork_somDumpSelf *somTD_AWDWork_somDumpSelf;
typedef void   SOMLINK somTP_AWDWork_somDumpSelfInt(AWDWork *somSelf,
		long level);
typedef somTP_AWDWork_somDumpSelfInt *somTD_AWDWork_somDumpSelfInt;
}

#endif /* AWDWork_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDWork
 */
class AWDWork : public AWDBase
{
public:

// AWDWork::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDWork) AWDWorkNewClass(AWDWork_MajorVersion,AWDWork_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDWork,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDWork));
}

// AWDWork::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDWork()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDWorkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDWork(AWDWork* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDWorkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDWork(const AWDWork* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDWorkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDWork(Environment *ev,AWDEntityKey* pKey) 
{
   AWDWork_withEntityKey(ev,0,pKey);
}

AWDWork(Environment *ev,AWD_PAWDOBJECTKEYSTRCT pKeyStrct) 
{
   AWDWork_withKey(ev,0,pKeyStrct);
}

AWDWork(Environment *ev,AWD_PAWDOBJECTSTRCT pAwdObj) 
{
   AWDWork_withStructure(ev,0,pAwdObj);
}

AWDWork(Environment *ev,AWD_PAWDLOBARRAYSTRCT pAwdLobArray) 
{
   AWDWork_withArray(ev,0,pAwdLobArray);
}

AWDWork(Environment *ev,AWD_PAWDOBJECTSTRCT pAwdObj,AWD_PAWDLOBARRAYSTRCT pAwdLobArray) 
{
   AWDWork_withStructureandArray(ev,0,pAwdObj,pAwdLobArray);
}

AWDWork(Environment *ev,AWDPersist* pPersist) 
{
   AWDWork_withPersist(ev,0,pPersist);
}

AWDWork(Environment *ev,AWDWork* obj) 
{
   AWDWork_withObject(ev,0,obj);
}

AWDWork(Environment *ev,unsigned long hObject) 
{
   AWDWork_withHandle(ev,0,hObject);
}


/* method: activate */
boolean   activate(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,activate)
	(this, ev);
}


/* method: amount */
char*   amount(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,amount)
	(this, ev,str);
}


/* method: amountType */
char*   amountType(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,amountType)
	(this, ev,str);
}


/* method: blankQueueIfKeyFieldsHaveChanged */
boolean   blankQueueIfKeyFieldsHaveChanged(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,blankQueueIfKeyFieldsHaveChanged)
	(this, ev);
}


/* method: changeQueue */
boolean   changeQueue(Environment *ev,
		string pszNewQueue)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,changeQueue)
	(this, ev,pszNewQueue);
}


/* method: displayChangeQueue */
boolean   displayChangeQueue(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,displayChangeQueue)
	(this, ev);
}


/* method: displayClone */
boolean   displayClone(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,displayClone)
	(this, ev);
}


/* method: displayQuality */
boolean   displayQuality(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,displayQuality)
	(this, ev);
}


/* method: displaySuspend */
boolean   displaySuspend(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,displaySuspend)
	(this, ev);
}


/* method: displayTaskManager */
boolean   displayTaskManager(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,displayTaskManager)
	(this, ev);
}


/* method: fail */
boolean   fail(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,fail)
	(this, ev);
}


/* method: isAutoQuality */
boolean   isAutoQuality(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,isAutoQuality)
	(this, ev);
}


/* method: isAutoSuspend */
boolean   isAutoSuspend(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,isAutoSuspend)
	(this, ev);
}


/* method: isSuspended */
boolean   isSuspended(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,isSuspended)
	(this, ev);
}


/* method: pass */
boolean   pass(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,pass)
	(this, ev);
}


/* method: process */
boolean   process(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,process)
	(this, ev);
}


/* method: priority */
unsigned short   priority(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,priority)
	(this, ev);
}


/* method: priorityIncrease */
unsigned short   priorityIncrease(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,priorityIncrease)
	(this, ev);
}


/* method: queue */
char*   queue(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,queue)
	(this, ev,str);
}


/* method: setAmount */
boolean   setAmount(Environment *ev,
		unsigned long ulAmount)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,setAmount)
	(this, ev,ulAmount);
}


/* method: setPriorityIncrease */
boolean   setPriorityIncrease(Environment *ev,
		unsigned short usPriority)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,setPriorityIncrease)
	(this, ev,usPriority);
}


/* method: setQueue */
boolean   setQueue(Environment *ev,
		string pszQueue)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,setQueue)
	(this, ev,pszQueue);
}


/* method: setStatus */
boolean   setStatus(Environment *ev,
		string pszStatus)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,setStatus)
	(this, ev,pszStatus);
}


/* method: setVIFlag */
boolean   setVIFlag(Environment *ev,
		boolean fVI)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,setVIFlag)
	(this, ev,fVI);
}


/* method: setWorkType */
boolean   setWorkType(Environment *ev,
		string pszType)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,setWorkType)
	(this, ev,pszType);
}


/* method: startExternalSystem */
boolean   startExternalSystem(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,startExternalSystem)
	(this, ev);
}


/* method: status */
char*   status(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,status)
	(this, ev,str);
}


/* method: stopChangeQueue */
boolean   stopChangeQueue(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,stopChangeQueue)
	(this, ev);
}


/* method: stopClone */
boolean   stopClone(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,stopClone)
	(this, ev);
}


/* method: stopExternalSystem */
boolean   stopExternalSystem(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,stopExternalSystem)
	(this, ev);
}


/* method: stopQuality */
boolean   stopQuality(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,stopQuality)
	(this, ev);
}


/* method: stopSuspend */
boolean   stopSuspend(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,stopSuspend)
	(this, ev);
}


/* method: stopTaskManager */
boolean   stopTaskManager(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,stopTaskManager)
	(this, ev);
}


/* method: suspend */
boolean   suspend(Environment *ev,
		string activateDate,
		string activateStatus,
		string suspendCode)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,suspend)
	(this, ev,activateDate,activateStatus,suspendCode);
}


/* method: unsuspend */
boolean   unsuspend(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,unsuspend)
	(this, ev);
}


/* method: viFlag */
boolean   viFlag(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,viFlag)
	(this, ev);
}


/* method: workType */
char*   workType(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,workType)
	(this, ev,str);
}


/* initializer method: AWDWork_withEntityKey */
void   AWDWork_withEntityKey(Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey)
{
   SOM_ResolveD(this,AWDWork,AWDWork,AWDWork_withEntityKey)
	(this, ev,ctrl,pKey);
}


/* initializer method: AWDWork_withKey */
void   AWDWork_withKey(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct)
{
   SOM_ResolveD(this,AWDWork,AWDWork,AWDWork_withKey)
	(this, ev,ctrl,pKeyStrct);
}


/* initializer method: AWDWork_withStructure */
void   AWDWork_withStructure(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj)
{
   SOM_ResolveD(this,AWDWork,AWDWork,AWDWork_withStructure)
	(this, ev,ctrl,pAwdObj);
}


/* initializer method: AWDWork_withArray */
void   AWDWork_withArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDWork,AWDWork,AWDWork_withArray)
	(this, ev,ctrl,pAwdLobArray);
}


/* initializer method: AWDWork_withStructureandArray */
void   AWDWork_withStructureandArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDWork,AWDWork,AWDWork_withStructureandArray)
	(this, ev,ctrl,pAwdObj,pAwdLobArray);
}


/* initializer method: AWDWork_withPersist */
void   AWDWork_withPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDWork,AWDWork,AWDWork_withPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: AWDWork_withObject */
void   AWDWork_withObject(Environment *ev,
		somInitCtrl* ctrl,
		AWDWork* obj)
{
   SOM_ResolveD(this,AWDWork,AWDWork,AWDWork_withObject)
	(this, ev,ctrl,obj);
}


/* initializer method: AWDWork_withHandle */
void   AWDWork_withHandle(Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject)
{
   SOM_ResolveD(this,AWDWork,AWDWork,AWDWork_withHandle)
	(this, ev,ctrl,hObject);
}


/* method: functionComplete */
boolean   functionComplete(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,functionComplete)
	(this, ev);
}


/* method: setDefaultNextStatus */
boolean   setDefaultNextStatus(Environment *ev,
		unsigned long lobAction)
{
   return SOM_ResolveD(this,AWDWork,AWDWork,setDefaultNextStatus)
	(this, ev,lobAction);
}


/*
 * Reintroduce inherited methods
 */

/* method: iOwn */
boolean   iOwn(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,iOwn)
	(this, ev);
}


/* method: iLocked */
boolean   iLocked(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,iLocked)
	(this, ev);
}


/* method: addComments */
boolean   addComments(Environment *ev,
		char* pCommentBuffer,
		AWDBase_COMMENTS dType)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,addComments)
	(this, ev,pCommentBuffer,dType);
}


/* method: autoFlags */
unsigned long   autoFlags(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,autoFlags)
	(this, ev);
}


/* method: autoFlagFocus */
unsigned short   autoFlagFocus(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,autoFlagFocus)
	(this, ev);
}


/* method: businessArea */
char*   businessArea(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,businessArea)
	(this, ev,str);
}


/* method: canContain */
boolean   canContain(Environment *ev,
		AWDBase* awdObj)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,canContain)
	(this, ev,awdObj);
}


/* method: copyFrom */
boolean   copyFrom(Environment *ev,
		AWDBase* awdObj)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,copyFrom)
	(this, ev,awdObj);
}


/* method: clone */
void   clone(Environment *ev,
		unsigned short usCount,
		boolean fCreateRelationship,
		boolean fLock,
		AWDBase** ppClonedObjs,
		string shareMemName)
{
   SOM_ResolveD(this,AWDWork,AWDBase,clone)
	(this, ev,usCount,fCreateRelationship,fLock,ppClonedObjs,shareMemName);
}


/* method: create */
void   create(Environment *ev,
		AWDBase_CREATE_MODE mode,
		unsigned long ulBatch)
{
   SOM_ResolveD(this,AWDWork,AWDBase,create)
	(this, ev,mode,ulBatch);
}


/* method: createNode */
char*   createNode(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,createNode)
	(this, ev,str);
}


/* method: creationDateTime */
char*   creationDateTime(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,creationDateTime)
	(this, ev,str);
}


/* method: csdName */
char*   csdName(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,csdName)
	(this, ev,str);
}


/* method: displayComments */
boolean   displayComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,displayComments)
	(this, ev);
}


/* method: displayCsd */
boolean   displayCsd(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,displayCsd)
	(this, ev);
}


/* method: displayHistory */
boolean   displayHistory(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,displayHistory)
	(this, ev);
}


/* method: field */
AWDBaseField*   field(Environment *ev,
		string aname,
		unsigned short seqnum)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,field)
	(this, ev,aname,seqnum);
}


/* method: fieldAsLong */
unsigned long   fieldAsLong(Environment *ev,
		string aname,
		unsigned short seqnum)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,fieldAsLong)
	(this, ev,aname,seqnum);
}


/* method: fieldAsString */
char*   fieldAsString(Environment *ev,
		string aname,
		unsigned short seqnum,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,fieldAsString)
	(this, ev,aname,seqnum,str);
}


/* method: fieldCount */
unsigned short   fieldCount(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,fieldCount)
	(this, ev);
}


/* method: getBeginTime */
char*   getBeginTime(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,getBeginTime)
	(this, ev);
}


/* method: getCreateArray */
boolean   getCreateArray(Environment *ev,
		AWD_PAWDCREATELOBARRAY pAwdLobArray)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,getCreateArray)
	(this, ev,pAwdLobArray);
}


/* method: getFieldList */
FieldList*   getFieldList(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,getFieldList)
	(this, ev);
}


/* method: getEndTime */
char*   getEndTime(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,getEndTime)
	(this, ev);
}


/* method: getKeyStrct */
boolean   getKeyStrct(Environment *ev,
		AWD_PAWDOBJECTKEYSTRCT pKey)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,getKeyStrct)
	(this, ev,pKey);
}


/* method: getFieldArray */
boolean   getFieldArray(Environment *ev,
		AWD_AWDLOBARRAYSTRCT* pAwdLobArray)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,getFieldArray)
	(this, ev,pAwdLobArray);
}


/* method: getState */
AWDBase_STATE   getState(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,getState)
	(this, ev);
}


/* method: getStructure */
boolean   getStructure(Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,getStructure)
	(this, ev,pAwdObjStrct);
}


/* method: hasChanged */
boolean   hasChanged(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,hasChanged)
	(this, ev);
}


/* method: hasComments */
boolean   hasComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,hasComments)
	(this, ev);
}


/* method: iconName */
char*   iconName(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,iconName)
	(this, ev,str);
}


/* method: iconText */
char*   iconText(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,iconText)
	(this, ev,str);
}


/* method: indexField */
AWDBaseField*   indexField(Environment *ev,
		unsigned short indexnumber)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,indexField)
	(this, ev,indexnumber);
}


/* method: initialize */
void   initialize(Environment *ev)
{
   SOM_ResolveD(this,AWDWork,AWDBase,initialize)
	(this, ev);
}


/* method: isAutoChildSource */
boolean   isAutoChildSource(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isAutoChildSource)
	(this, ev);
}


/* method: isAutoComments */
boolean   isAutoComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isAutoComments)
	(this, ev);
}


/* method: isAutoCsd */
boolean   isAutoCsd(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isAutoCsd)
	(this, ev);
}


/* method: isAutoHistory */
boolean   isAutoHistory(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isAutoHistory)
	(this, ev);
}


/* method: isAutoLob */
boolean   isAutoLob(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isAutoLob)
	(this, ev);
}


/* method: isAutoSiblingSource */
boolean   isAutoSiblingSource(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isAutoSiblingSource)
	(this, ev);
}


/* method: isAutoViewSource */
boolean   isAutoViewSource(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isAutoViewSource)
	(this, ev);
}


/* method: isFieldValid */
boolean   isFieldValid(Environment *ev,
		string pszField)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isFieldValid)
	(this, ev,pszField);
}


/* method: isInUse */
boolean   isInUse(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isInUse)
	(this, ev);
}


/* method: isLocked */
boolean   isLocked(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isLocked)
	(this, ev);
}


/* method: isSelected */
boolean   isSelected(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isSelected)
	(this, ev);
}


/* method: isShowable */
boolean   isShowable(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isShowable)
	(this, ev);
}


/* method: isType */
boolean   isType(Environment *ev,
		unsigned long ulType)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isType)
	(this, ev,ulType);
}


/* method: isUpdateable */
boolean   isUpdateable(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isUpdateable)
	(this, ev);
}


/* method: isViewable */
boolean   isViewable(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isViewable)
	(this, ev);
}


/* method: isSourceObject */
boolean   isSourceObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isSourceObject)
	(this, ev);
}


/* method: isFolderObject */
boolean   isFolderObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isFolderObject)
	(this, ev);
}


/* method: isTransactionObject */
boolean   isTransactionObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isTransactionObject)
	(this, ev);
}


/* method: isCaseObject */
boolean   isCaseObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,isCaseObject)
	(this, ev);
}


/* method: key */
char*   key(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,key)
	(this, ev,str);
}


/* method: lock */
AWDBase_LOCKRESULT   lock(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,lock)
	(this, ev);
}


/* method: unlock */
boolean   unlock(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,unlock)
	(this, ev);
}


/* method: unlockRegardless */
boolean   unlockRegardless(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,unlockRegardless)
	(this, ev);
}


/* method: lockedBy */
char*   lockedBy(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,lockedBy)
	(this, ev,str);
}


/* method: ownerNode */
char*   ownerNode(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,ownerNode)
	(this, ev,str);
}


/* method: recordCode */
char*   recordCode(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,recordCode)
	(this, ev,str);
}


/* method: removeWorkselect */
boolean   removeWorkselect(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,removeWorkselect)
	(this, ev);
}


/* method: retrieve */
boolean   retrieve(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,retrieve)
	(this, ev);
}


/* method: retrieveSecondaryFields */
boolean   retrieveSecondaryFields(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,retrieveSecondaryFields)
	(this, ev);
}


/* method: setBeginTime */
void   setBeginTime(Environment *ev)
{
   SOM_ResolveD(this,AWDWork,AWDBase,setBeginTime)
	(this, ev);
}


/* method: setBeginTimeFromTimestamp */
void   setBeginTimeFromTimestamp(Environment *ev,
		string pszTimestamp)
{
   SOM_ResolveD(this,AWDWork,AWDBase,setBeginTimeFromTimestamp)
	(this, ev,pszTimestamp);
}


/* method: setBusinessArea */
boolean   setBusinessArea(Environment *ev,
		string pszba)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,setBusinessArea)
	(this, ev,pszba);
}


/* method: setCsdName */
void   setCsdName(Environment *ev,
		char* pszCsd)
{
   SOM_ResolveD(this,AWDWork,AWDBase,setCsdName)
	(this, ev,pszCsd);
}


/* method: setEndTime */
void   setEndTime(Environment *ev)
{
   SOM_ResolveD(this,AWDWork,AWDBase,setEndTime)
	(this, ev);
}


/* method: setEndTimeFromTimestamp */
void   setEndTimeFromTimestamp(Environment *ev,
		string pszTimestamp)
{
   SOM_ResolveD(this,AWDWork,AWDBase,setEndTimeFromTimestamp)
	(this, ev,pszTimestamp);
}


/* method: setElapsedTime */
void   setElapsedTime(Environment *ev,
		unsigned long ulElapsedTime)
{
   SOM_ResolveD(this,AWDWork,AWDBase,setElapsedTime)
	(this, ev,ulElapsedTime);
}


/* method: setField */
boolean   setField(Environment *ev,
		AWDBaseField* fld)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,setField)
	(this, ev,fld);
}


/* method: setFieldFromLong */
boolean   setFieldFromLong(Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		unsigned long ulvalue)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,setFieldFromLong)
	(this, ev,pszdataname,seqnum,ulvalue);
}


/* method: setFieldFromString */
boolean   setFieldFromString(Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		string pszvalue)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,setFieldFromString)
	(this, ev,pszdataname,seqnum,pszvalue);
}


/* method: setIndexField */
boolean   setIndexField(Environment *ev,
		unsigned short usindex,
		AWDBaseField* fld)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,setIndexField)
	(this, ev,usindex,fld);
}


/* method: setIndexFieldFromString */
boolean   setIndexFieldFromString(Environment *ev,
		unsigned short usindex,
		string pszField)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,setIndexFieldFromString)
	(this, ev,usindex,pszField);
}


/* method: setInUse */
void   setInUse(Environment *ev,
		boolean fUse)
{
   SOM_ResolveD(this,AWDWork,AWDBase,setInUse)
	(this, ev,fUse);
}


/* method: setILockedFlag */
boolean   setILockedFlag(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,setILockedFlag)
	(this, ev);
}


/* method: startService */
boolean   startService(Environment *ev,
		string pszServiceClass)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,startService)
	(this, ev,pszServiceClass);
}


/* method: startServiceByIndex */
boolean   startServiceByIndex(Environment *ev,
		unsigned long ulCategory)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,startServiceByIndex)
	(this, ev,ulCategory);
}


/* method: stopCsd */
boolean   stopCsd(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,stopCsd)
	(this, ev);
}


/* method: stopHistory */
boolean   stopHistory(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,stopHistory)
	(this, ev);
}


/* method: stopComments */
boolean   stopComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,stopComments)
	(this, ev);
}


/* method: stopService */
boolean   stopService(Environment *ev,
		string pszServiceClass)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,stopService)
	(this, ev,pszServiceClass);
}


/* method: type */
unsigned long   type(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,type)
	(this, ev);
}


/* method: update */
boolean   update(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,update)
	(this, ev);
}


/* method: updateFromArray */
boolean   updateFromArray(Environment *ev,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,updateFromArray)
	(this, ev,pAwdLobArray);
}


/* method: updateFromKey */
void   updateFromKey(Environment *ev,
		AWDEntityKey* pKey)
{
   SOM_ResolveD(this,AWDWork,AWDBase,updateFromKey)
	(this, ev,pKey);
}


/* method: updateFromStructure */
boolean   updateFromStructure(Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,updateFromStructure)
	(this, ev,pAwdObjStrct);
}


/* method: validate */
boolean   validate(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,validate)
	(this, ev);
}


/* initializer method: withEntityKey */
void   withEntityKey(Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey)
{
   SOM_ResolveD(this,AWDWork,AWDBase,withEntityKey)
	(this, ev,ctrl,pKey);
}


/* initializer method: withKey */
void   withKey(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct)
{
   SOM_ResolveD(this,AWDWork,AWDBase,withKey)
	(this, ev,ctrl,pKeyStrct);
}


/* initializer method: withStructure */
void   withStructure(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj)
{
   SOM_ResolveD(this,AWDWork,AWDBase,withStructure)
	(this, ev,ctrl,pAwdObj);
}


/* initializer method: withArray */
void   withArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDWork,AWDBase,withArray)
	(this, ev,ctrl,pAwdLobArray);
}


/* initializer method: withStructureandArray */
void   withStructureandArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDWork,AWDBase,withStructureandArray)
	(this, ev,ctrl,pAwdObj,pAwdLobArray);
}


/* initializer method: withPersist */
void   withPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDWork,AWDBase,withPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: withObject */
void   withObject(Environment *ev,
		somInitCtrl* ctrl,
		AWDBase* obj)
{
   SOM_ResolveD(this,AWDWork,AWDBase,withObject)
	(this, ev,ctrl,obj);
}


/* initializer method: withHandle */
void   withHandle(Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject)
{
   SOM_ResolveD(this,AWDWork,AWDBase,withHandle)
	(this, ev,ctrl,hObject);
}


/* method: next */
AWDBase*   next(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,next)
	(this, ev);
}


/* method: previous */
AWDBase*   previous(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,previous)
	(this, ev);
}


/* method: child */
AWDBase*   child(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,child)
	(this, ev);
}


/* method: parent */
AWDBase*   parent(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,parent)
	(this, ev);
}


/* method: relationship */
AWDRelationship*   relationship(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,relationship)
	(this, ev);
}


/* method: setNext */
void   setNext(Environment *ev,
		AWDBase* next)
{
   SOM_ResolveD(this,AWDWork,AWDBase,setNext)
	(this, ev,next);
}


/* method: setPrevious */
void   setPrevious(Environment *ev,
		AWDBase* previous)
{
   SOM_ResolveD(this,AWDWork,AWDBase,setPrevious)
	(this, ev,previous);
}


/* method: setChild */
void   setChild(Environment *ev,
		AWDBase* child)
{
   SOM_ResolveD(this,AWDWork,AWDBase,setChild)
	(this, ev,child);
}


/* method: setParent */
void   setParent(Environment *ev,
		AWDBase* parent)
{
   SOM_ResolveD(this,AWDWork,AWDBase,setParent)
	(this, ev,parent);
}


/* method: usageToken */
void*   usageToken(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,usageToken)
	(this, ev);
}


/* method: setUsageToken */
void   setUsageToken(Environment *ev,
		void* pv)
{
   SOM_ResolveD(this,AWDWork,AWDBase,setUsageToken)
	(this, ev,pv);
}


/* method: getTag */
unsigned long   getTag(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,getTag)
	(this, ev);
}


/* method: setTag */
void   setTag(Environment *ev,
		unsigned long ulTag)
{
   SOM_ResolveD(this,AWDWork,AWDBase,setTag)
	(this, ev,ulTag);
}


/* method: createRelationship */
boolean   createRelationship(Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,createRelationship)
	(this, ev,pRelationObj,relation);
}


/* method: createRelationshipWithNotify */
boolean   createRelationshipWithNotify(Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,createRelationshipWithNotify)
	(this, ev,pRelationObj,relation);
}


/* method: makeChild */
boolean   makeChild(Environment *ev,
		AWDBase* pChild)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,makeChild)
	(this, ev,pChild);
}


/* method: makeParent */
boolean   makeParent(Environment *ev,
		AWDBase* pParent)
{
   return SOM_ResolveD(this,AWDWork,AWDBase,makeParent)
	(this, ev,pParent);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDWork,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDWork,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: store */
void   store(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDWork,AWDCommon,store)
	(this, ev,pPersist);
}


/* method: restore */
void   restore(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDWork,AWDCommon,restore)
	(this, ev,pPersist);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,AWDWork,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDWork,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,AWDWork,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDWork,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDWork,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDWork,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDWork*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDWork,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDWork,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDWork,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDWork,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDWork*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDWork,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDWork*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDWork,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDWork*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDWork,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDWork,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDWork,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDWork,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDWork,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDWork,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDWork,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDWork,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDWork,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDWork_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDWork,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDWork,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDWork_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDWork,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDWork,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDWork,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDWork,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDWork,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDWork,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDWork,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDWork */



#endif       /* SOM_AWDWork_xh */

#ifndef SOM_AWDTransaction_xh
#define SOM_AWDTransaction_xh

class AWDTransaction;

#define AWDTransaction_MajorVersion 2
#define AWDTransaction_MinorVersion 3

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDWork_xh
#include <wrkobj.xh>
#endif

#ifndef AWDTransaction_API
#define AWDTransaction_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDTransaction Class */
SOMEXTERN
#if (defined(SOM_Module_wrkobj_Source) || defined(AWDTransaction_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTransaction))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDTransactionNewClass(
		integer4,
		integer4 );

/* The API to the AWDTransaction class object, and the methods it introduces. */
SOMEXTERN struct AWDTransactionClassDataStructure {
	SOMClass *classObject;
	somMToken AWDTransaction_withArray;
	somMToken AWDTransaction_withKey;
	somMToken AWDTransaction_withStructure;
	somMToken AWDTransaction_withStructureandArray;
	somMToken AWDTransaction_withEntityKey;
	somMToken AWDTransaction_withPersist;
	somMToken AWDTransaction_withObject;
	somMToken AWDTransaction_withHandle;
}
#if !(defined(SOM_Module_wrkobj_Source) || defined(AWDTransaction_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTransaction))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDTransactionClassData;
#define _AWDTransaction AWDTransactionClassData.classObject

/* The API to parentMtabs for AWDTransaction, and the instance data it introduces. */
SOMEXTERN struct AWDTransactionCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_wrkobj_Source) || defined(AWDTransaction_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDTransaction))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDTransactionCClassData;

/*
 * -- Typedefs for AWDTransaction Method Procedures
 */
extern "C" {
typedef void   SOMLINK somTP_AWDTransaction_AWDTransaction_withEntityKey(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey);
typedef somTP_AWDTransaction_AWDTransaction_withEntityKey *somTD_AWDTransaction_AWDTransaction_withEntityKey;
typedef void   SOMLINK somTP_AWDTransaction_AWDTransaction_withKey(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct);
typedef somTP_AWDTransaction_AWDTransaction_withKey *somTD_AWDTransaction_AWDTransaction_withKey;
typedef void   SOMLINK somTP_AWDTransaction_AWDTransaction_withStructure(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj);
typedef somTP_AWDTransaction_AWDTransaction_withStructure *somTD_AWDTransaction_AWDTransaction_withStructure;
typedef void   SOMLINK somTP_AWDTransaction_AWDTransaction_withArray(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDTransaction_AWDTransaction_withArray *somTD_AWDTransaction_AWDTransaction_withArray;
typedef void   SOMLINK somTP_AWDTransaction_AWDTransaction_withStructureandArray(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDTransaction_AWDTransaction_withStructureandArray *somTD_AWDTransaction_AWDTransaction_withStructureandArray;
typedef void   SOMLINK somTP_AWDTransaction_AWDTransaction_withPersist(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDTransaction_AWDTransaction_withPersist *somTD_AWDTransaction_AWDTransaction_withPersist;
typedef void   SOMLINK somTP_AWDTransaction_AWDTransaction_withObject(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDTransaction* obj);
typedef somTP_AWDTransaction_AWDTransaction_withObject *somTD_AWDTransaction_AWDTransaction_withObject;
typedef void   SOMLINK somTP_AWDTransaction_AWDTransaction_withHandle(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject);
typedef somTP_AWDTransaction_AWDTransaction_withHandle *somTD_AWDTransaction_AWDTransaction_withHandle;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_AWDTransaction_activate(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_activate *somTD_AWDTransaction_activate;
typedef char*   SOMLINK somTP_AWDTransaction_amount(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_amount *somTD_AWDTransaction_amount;
typedef char*   SOMLINK somTP_AWDTransaction_amountType(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_amountType *somTD_AWDTransaction_amountType;
typedef boolean   SOMLINK somTP_AWDTransaction_blankQueueIfKeyFieldsHaveChanged(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_blankQueueIfKeyFieldsHaveChanged *somTD_AWDTransaction_blankQueueIfKeyFieldsHaveChanged;
typedef boolean   SOMLINK somTP_AWDTransaction_changeQueue(AWDTransaction *somSelf, Environment *ev,
		string pszNewQueue);
typedef somTP_AWDTransaction_changeQueue *somTD_AWDTransaction_changeQueue;
typedef boolean   SOMLINK somTP_AWDTransaction_displayChangeQueue(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_displayChangeQueue *somTD_AWDTransaction_displayChangeQueue;
typedef boolean   SOMLINK somTP_AWDTransaction_displayClone(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_displayClone *somTD_AWDTransaction_displayClone;
typedef boolean   SOMLINK somTP_AWDTransaction_displayQuality(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_displayQuality *somTD_AWDTransaction_displayQuality;
typedef boolean   SOMLINK somTP_AWDTransaction_displaySuspend(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_displaySuspend *somTD_AWDTransaction_displaySuspend;
typedef boolean   SOMLINK somTP_AWDTransaction_displayTaskManager(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_displayTaskManager *somTD_AWDTransaction_displayTaskManager;
typedef boolean   SOMLINK somTP_AWDTransaction_fail(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_fail *somTD_AWDTransaction_fail;
typedef boolean   SOMLINK somTP_AWDTransaction_isAutoQuality(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isAutoQuality *somTD_AWDTransaction_isAutoQuality;
typedef boolean   SOMLINK somTP_AWDTransaction_isAutoSuspend(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isAutoSuspend *somTD_AWDTransaction_isAutoSuspend;
typedef boolean   SOMLINK somTP_AWDTransaction_isSuspended(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isSuspended *somTD_AWDTransaction_isSuspended;
typedef boolean   SOMLINK somTP_AWDTransaction_pass(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_pass *somTD_AWDTransaction_pass;
typedef boolean   SOMLINK somTP_AWDTransaction_process(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_process *somTD_AWDTransaction_process;
typedef unsigned short   SOMLINK somTP_AWDTransaction_priority(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_priority *somTD_AWDTransaction_priority;
typedef unsigned short   SOMLINK somTP_AWDTransaction_priorityIncrease(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_priorityIncrease *somTD_AWDTransaction_priorityIncrease;
typedef char*   SOMLINK somTP_AWDTransaction_queue(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_queue *somTD_AWDTransaction_queue;
typedef boolean   SOMLINK somTP_AWDTransaction_setAmount(AWDTransaction *somSelf, Environment *ev,
		unsigned long ulAmount);
typedef somTP_AWDTransaction_setAmount *somTD_AWDTransaction_setAmount;
typedef boolean   SOMLINK somTP_AWDTransaction_setPriorityIncrease(AWDTransaction *somSelf, Environment *ev,
		unsigned short usPriority);
typedef somTP_AWDTransaction_setPriorityIncrease *somTD_AWDTransaction_setPriorityIncrease;
typedef boolean   SOMLINK somTP_AWDTransaction_setQueue(AWDTransaction *somSelf, Environment *ev,
		string pszQueue);
typedef somTP_AWDTransaction_setQueue *somTD_AWDTransaction_setQueue;
typedef boolean   SOMLINK somTP_AWDTransaction_setStatus(AWDTransaction *somSelf, Environment *ev,
		string pszStatus);
typedef somTP_AWDTransaction_setStatus *somTD_AWDTransaction_setStatus;
typedef boolean   SOMLINK somTP_AWDTransaction_setVIFlag(AWDTransaction *somSelf, Environment *ev,
		boolean fVI);
typedef somTP_AWDTransaction_setVIFlag *somTD_AWDTransaction_setVIFlag;
typedef boolean   SOMLINK somTP_AWDTransaction_setWorkType(AWDTransaction *somSelf, Environment *ev,
		string pszType);
typedef somTP_AWDTransaction_setWorkType *somTD_AWDTransaction_setWorkType;
typedef boolean   SOMLINK somTP_AWDTransaction_startExternalSystem(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_startExternalSystem *somTD_AWDTransaction_startExternalSystem;
typedef char*   SOMLINK somTP_AWDTransaction_status(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_status *somTD_AWDTransaction_status;
typedef boolean   SOMLINK somTP_AWDTransaction_stopChangeQueue(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_stopChangeQueue *somTD_AWDTransaction_stopChangeQueue;
typedef boolean   SOMLINK somTP_AWDTransaction_stopClone(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_stopClone *somTD_AWDTransaction_stopClone;
typedef boolean   SOMLINK somTP_AWDTransaction_stopExternalSystem(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_stopExternalSystem *somTD_AWDTransaction_stopExternalSystem;
typedef boolean   SOMLINK somTP_AWDTransaction_stopQuality(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_stopQuality *somTD_AWDTransaction_stopQuality;
typedef boolean   SOMLINK somTP_AWDTransaction_stopSuspend(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_stopSuspend *somTD_AWDTransaction_stopSuspend;
typedef boolean   SOMLINK somTP_AWDTransaction_stopTaskManager(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_stopTaskManager *somTD_AWDTransaction_stopTaskManager;
typedef boolean   SOMLINK somTP_AWDTransaction_suspend(AWDTransaction *somSelf, Environment *ev,
		string activateDate,
		string activateStatus,
		string suspendCode);
typedef somTP_AWDTransaction_suspend *somTD_AWDTransaction_suspend;
typedef boolean   SOMLINK somTP_AWDTransaction_unsuspend(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_unsuspend *somTD_AWDTransaction_unsuspend;
typedef boolean   SOMLINK somTP_AWDTransaction_viFlag(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_viFlag *somTD_AWDTransaction_viFlag;
typedef char*   SOMLINK somTP_AWDTransaction_workType(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_workType *somTD_AWDTransaction_workType;
typedef void   SOMLINK somTP_AWDTransaction_AWDWork_withEntityKey(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey);
typedef somTP_AWDTransaction_AWDWork_withEntityKey *somTD_AWDTransaction_AWDWork_withEntityKey;
typedef void   SOMLINK somTP_AWDTransaction_AWDWork_withKey(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct);
typedef somTP_AWDTransaction_AWDWork_withKey *somTD_AWDTransaction_AWDWork_withKey;
typedef void   SOMLINK somTP_AWDTransaction_AWDWork_withStructure(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj);
typedef somTP_AWDTransaction_AWDWork_withStructure *somTD_AWDTransaction_AWDWork_withStructure;
typedef void   SOMLINK somTP_AWDTransaction_AWDWork_withArray(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDTransaction_AWDWork_withArray *somTD_AWDTransaction_AWDWork_withArray;
typedef void   SOMLINK somTP_AWDTransaction_AWDWork_withStructureandArray(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDTransaction_AWDWork_withStructureandArray *somTD_AWDTransaction_AWDWork_withStructureandArray;
typedef void   SOMLINK somTP_AWDTransaction_AWDWork_withPersist(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDTransaction_AWDWork_withPersist *somTD_AWDTransaction_AWDWork_withPersist;
typedef void   SOMLINK somTP_AWDTransaction_AWDWork_withObject(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDWork* obj);
typedef somTP_AWDTransaction_AWDWork_withObject *somTD_AWDTransaction_AWDWork_withObject;
typedef void   SOMLINK somTP_AWDTransaction_AWDWork_withHandle(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject);
typedef somTP_AWDTransaction_AWDWork_withHandle *somTD_AWDTransaction_AWDWork_withHandle;
typedef boolean   SOMLINK somTP_AWDTransaction_functionComplete(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_functionComplete *somTD_AWDTransaction_functionComplete;
typedef boolean   SOMLINK somTP_AWDTransaction_setDefaultNextStatus(AWDTransaction *somSelf, Environment *ev,
		unsigned long lobAction);
typedef somTP_AWDTransaction_setDefaultNextStatus *somTD_AWDTransaction_setDefaultNextStatus;
typedef void   SOMLINK somTP_AWDTransaction_somDefaultInit(AWDTransaction *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDTransaction_somDefaultInit *somTD_AWDTransaction_somDefaultInit;
typedef void   SOMLINK somTP_AWDTransaction_somDestruct(AWDTransaction *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDTransaction_somDestruct *somTD_AWDTransaction_somDestruct;
typedef boolean   SOMLINK somTP_AWDTransaction_copyFrom(AWDTransaction *somSelf, Environment *ev,
		AWDBase* awdObj);
typedef somTP_AWDTransaction_copyFrom *somTD_AWDTransaction_copyFrom;
typedef void   SOMLINK somTP_AWDTransaction_create(AWDTransaction *somSelf, Environment *ev,
		AWDBase_CREATE_MODE mode,
		unsigned long ulBatch);
typedef somTP_AWDTransaction_create *somTD_AWDTransaction_create;
typedef boolean   SOMLINK somTP_AWDTransaction_getStructure(AWDTransaction *somSelf, Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct);
typedef somTP_AWDTransaction_getStructure *somTD_AWDTransaction_getStructure;
typedef char*   SOMLINK somTP_AWDTransaction_iconText(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_iconText *somTD_AWDTransaction_iconText;
typedef void   SOMLINK somTP_AWDTransaction_initialize(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_initialize *somTD_AWDTransaction_initialize;
typedef boolean   SOMLINK somTP_AWDTransaction_isFieldValid(AWDTransaction *somSelf, Environment *ev,
		string pszField);
typedef somTP_AWDTransaction_isFieldValid *somTD_AWDTransaction_isFieldValid;
typedef boolean   SOMLINK somTP_AWDTransaction_isLocked(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isLocked *somTD_AWDTransaction_isLocked;
typedef AWDBase_LOCKRESULT   SOMLINK somTP_AWDTransaction_lock(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_lock *somTD_AWDTransaction_lock;
typedef char*   SOMLINK somTP_AWDTransaction_lockedBy(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_lockedBy *somTD_AWDTransaction_lockedBy;
typedef boolean   SOMLINK somTP_AWDTransaction_retrieve(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_retrieve *somTD_AWDTransaction_retrieve;
typedef boolean   SOMLINK somTP_AWDTransaction_retrieveSecondaryFields(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_retrieveSecondaryFields *somTD_AWDTransaction_retrieveSecondaryFields;
typedef boolean   SOMLINK somTP_AWDTransaction_update(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_update *somTD_AWDTransaction_update;
typedef boolean   SOMLINK somTP_AWDTransaction_updateFromStructure(AWDTransaction *somSelf, Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct);
typedef somTP_AWDTransaction_updateFromStructure *somTD_AWDTransaction_updateFromStructure;
typedef boolean   SOMLINK somTP_AWDTransaction_unlock(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_unlock *somTD_AWDTransaction_unlock;
typedef void   SOMLINK somTP_AWDTransaction_store(AWDTransaction *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDTransaction_store *somTD_AWDTransaction_store;
typedef void   SOMLINK somTP_AWDTransaction_restore(AWDTransaction *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDTransaction_restore *somTD_AWDTransaction_restore;
typedef char*   SOMLINK somTP_AWDTransaction_csdName(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_csdName *somTD_AWDTransaction_csdName;
typedef boolean   SOMLINK somTP_AWDTransaction_iOwn(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_iOwn *somTD_AWDTransaction_iOwn;
typedef boolean   SOMLINK somTP_AWDTransaction_iLocked(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_iLocked *somTD_AWDTransaction_iLocked;
typedef boolean   SOMLINK somTP_AWDTransaction_addComments(AWDTransaction *somSelf, Environment *ev,
		char* pCommentBuffer,
		AWDBase_COMMENTS dType);
typedef somTP_AWDTransaction_addComments *somTD_AWDTransaction_addComments;
typedef unsigned long   SOMLINK somTP_AWDTransaction_autoFlags(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_autoFlags *somTD_AWDTransaction_autoFlags;
typedef unsigned short   SOMLINK somTP_AWDTransaction_autoFlagFocus(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_autoFlagFocus *somTD_AWDTransaction_autoFlagFocus;
typedef char*   SOMLINK somTP_AWDTransaction_businessArea(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_businessArea *somTD_AWDTransaction_businessArea;
typedef boolean   SOMLINK somTP_AWDTransaction_canContain(AWDTransaction *somSelf, Environment *ev,
		AWDBase* awdObj);
typedef somTP_AWDTransaction_canContain *somTD_AWDTransaction_canContain;
typedef void   SOMLINK somTP_AWDTransaction_clone(AWDTransaction *somSelf, Environment *ev,
		unsigned short usCount,
		boolean fCreateRelationship,
		boolean fLock,
		AWDBase** ppClonedObjs,
		string shareMemName);
typedef somTP_AWDTransaction_clone *somTD_AWDTransaction_clone;
typedef char*   SOMLINK somTP_AWDTransaction_createNode(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_createNode *somTD_AWDTransaction_createNode;
typedef char*   SOMLINK somTP_AWDTransaction_creationDateTime(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_creationDateTime *somTD_AWDTransaction_creationDateTime;
typedef boolean   SOMLINK somTP_AWDTransaction_displayComments(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_displayComments *somTD_AWDTransaction_displayComments;
typedef boolean   SOMLINK somTP_AWDTransaction_displayCsd(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_displayCsd *somTD_AWDTransaction_displayCsd;
typedef boolean   SOMLINK somTP_AWDTransaction_displayHistory(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_displayHistory *somTD_AWDTransaction_displayHistory;
typedef AWDBaseField*   SOMLINK somTP_AWDTransaction_field(AWDTransaction *somSelf, Environment *ev,
		string aname,
		unsigned short seqnum);
typedef somTP_AWDTransaction_field *somTD_AWDTransaction_field;
typedef unsigned long   SOMLINK somTP_AWDTransaction_fieldAsLong(AWDTransaction *somSelf, Environment *ev,
		string aname,
		unsigned short seqnum);
typedef somTP_AWDTransaction_fieldAsLong *somTD_AWDTransaction_fieldAsLong;
typedef char*   SOMLINK somTP_AWDTransaction_fieldAsString(AWDTransaction *somSelf, Environment *ev,
		string aname,
		unsigned short seqnum,
		AWDString* str);
typedef somTP_AWDTransaction_fieldAsString *somTD_AWDTransaction_fieldAsString;
typedef unsigned short   SOMLINK somTP_AWDTransaction_fieldCount(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_fieldCount *somTD_AWDTransaction_fieldCount;
typedef char*   SOMLINK somTP_AWDTransaction_getBeginTime(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_getBeginTime *somTD_AWDTransaction_getBeginTime;
typedef boolean   SOMLINK somTP_AWDTransaction_getCreateArray(AWDTransaction *somSelf, Environment *ev,
		AWD_PAWDCREATELOBARRAY pAwdLobArray);
typedef somTP_AWDTransaction_getCreateArray *somTD_AWDTransaction_getCreateArray;
typedef FieldList*   SOMLINK somTP_AWDTransaction_getFieldList(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_getFieldList *somTD_AWDTransaction_getFieldList;
typedef char*   SOMLINK somTP_AWDTransaction_getEndTime(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_getEndTime *somTD_AWDTransaction_getEndTime;
typedef boolean   SOMLINK somTP_AWDTransaction_getKeyStrct(AWDTransaction *somSelf, Environment *ev,
		AWD_PAWDOBJECTKEYSTRCT pKey);
typedef somTP_AWDTransaction_getKeyStrct *somTD_AWDTransaction_getKeyStrct;
typedef boolean   SOMLINK somTP_AWDTransaction_getFieldArray(AWDTransaction *somSelf, Environment *ev,
		AWD_AWDLOBARRAYSTRCT* pAwdLobArray);
typedef somTP_AWDTransaction_getFieldArray *somTD_AWDTransaction_getFieldArray;
typedef AWDBase_STATE   SOMLINK somTP_AWDTransaction_getState(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_getState *somTD_AWDTransaction_getState;
typedef boolean   SOMLINK somTP_AWDTransaction_hasChanged(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_hasChanged *somTD_AWDTransaction_hasChanged;
typedef boolean   SOMLINK somTP_AWDTransaction_hasComments(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_hasComments *somTD_AWDTransaction_hasComments;
typedef char*   SOMLINK somTP_AWDTransaction_iconName(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_iconName *somTD_AWDTransaction_iconName;
typedef AWDBaseField*   SOMLINK somTP_AWDTransaction_indexField(AWDTransaction *somSelf, Environment *ev,
		unsigned short indexnumber);
typedef somTP_AWDTransaction_indexField *somTD_AWDTransaction_indexField;
typedef boolean   SOMLINK somTP_AWDTransaction_isAutoChildSource(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isAutoChildSource *somTD_AWDTransaction_isAutoChildSource;
typedef boolean   SOMLINK somTP_AWDTransaction_isAutoComments(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isAutoComments *somTD_AWDTransaction_isAutoComments;
typedef boolean   SOMLINK somTP_AWDTransaction_isAutoCsd(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isAutoCsd *somTD_AWDTransaction_isAutoCsd;
typedef boolean   SOMLINK somTP_AWDTransaction_isAutoHistory(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isAutoHistory *somTD_AWDTransaction_isAutoHistory;
typedef boolean   SOMLINK somTP_AWDTransaction_isAutoLob(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isAutoLob *somTD_AWDTransaction_isAutoLob;
typedef boolean   SOMLINK somTP_AWDTransaction_isAutoSiblingSource(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isAutoSiblingSource *somTD_AWDTransaction_isAutoSiblingSource;
typedef boolean   SOMLINK somTP_AWDTransaction_isAutoViewSource(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isAutoViewSource *somTD_AWDTransaction_isAutoViewSource;
typedef boolean   SOMLINK somTP_AWDTransaction_isInUse(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isInUse *somTD_AWDTransaction_isInUse;
typedef boolean   SOMLINK somTP_AWDTransaction_isSelected(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isSelected *somTD_AWDTransaction_isSelected;
typedef boolean   SOMLINK somTP_AWDTransaction_isShowable(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isShowable *somTD_AWDTransaction_isShowable;
typedef boolean   SOMLINK somTP_AWDTransaction_isType(AWDTransaction *somSelf, Environment *ev,
		unsigned long ulType);
typedef somTP_AWDTransaction_isType *somTD_AWDTransaction_isType;
typedef boolean   SOMLINK somTP_AWDTransaction_isUpdateable(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isUpdateable *somTD_AWDTransaction_isUpdateable;
typedef boolean   SOMLINK somTP_AWDTransaction_isViewable(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isViewable *somTD_AWDTransaction_isViewable;
typedef boolean   SOMLINK somTP_AWDTransaction_isSourceObject(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isSourceObject *somTD_AWDTransaction_isSourceObject;
typedef boolean   SOMLINK somTP_AWDTransaction_isFolderObject(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isFolderObject *somTD_AWDTransaction_isFolderObject;
typedef boolean   SOMLINK somTP_AWDTransaction_isTransactionObject(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isTransactionObject *somTD_AWDTransaction_isTransactionObject;
typedef boolean   SOMLINK somTP_AWDTransaction_isCaseObject(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_isCaseObject *somTD_AWDTransaction_isCaseObject;
typedef char*   SOMLINK somTP_AWDTransaction_key(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_key *somTD_AWDTransaction_key;
typedef boolean   SOMLINK somTP_AWDTransaction_unlockRegardless(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_unlockRegardless *somTD_AWDTransaction_unlockRegardless;
typedef char*   SOMLINK somTP_AWDTransaction_ownerNode(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_ownerNode *somTD_AWDTransaction_ownerNode;
typedef char*   SOMLINK somTP_AWDTransaction_recordCode(AWDTransaction *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDTransaction_recordCode *somTD_AWDTransaction_recordCode;
typedef boolean   SOMLINK somTP_AWDTransaction_removeWorkselect(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_removeWorkselect *somTD_AWDTransaction_removeWorkselect;
typedef void   SOMLINK somTP_AWDTransaction_setBeginTime(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_setBeginTime *somTD_AWDTransaction_setBeginTime;
typedef void   SOMLINK somTP_AWDTransaction_setBeginTimeFromTimestamp(AWDTransaction *somSelf, Environment *ev,
		string pszTimestamp);
typedef somTP_AWDTransaction_setBeginTimeFromTimestamp *somTD_AWDTransaction_setBeginTimeFromTimestamp;
typedef boolean   SOMLINK somTP_AWDTransaction_setBusinessArea(AWDTransaction *somSelf, Environment *ev,
		string pszba);
typedef somTP_AWDTransaction_setBusinessArea *somTD_AWDTransaction_setBusinessArea;
typedef void   SOMLINK somTP_AWDTransaction_setCsdName(AWDTransaction *somSelf, Environment *ev,
		char* pszCsd);
typedef somTP_AWDTransaction_setCsdName *somTD_AWDTransaction_setCsdName;
typedef void   SOMLINK somTP_AWDTransaction_setEndTime(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_setEndTime *somTD_AWDTransaction_setEndTime;
typedef void   SOMLINK somTP_AWDTransaction_setEndTimeFromTimestamp(AWDTransaction *somSelf, Environment *ev,
		string pszTimestamp);
typedef somTP_AWDTransaction_setEndTimeFromTimestamp *somTD_AWDTransaction_setEndTimeFromTimestamp;
typedef void   SOMLINK somTP_AWDTransaction_setElapsedTime(AWDTransaction *somSelf, Environment *ev,
		unsigned long ulElapsedTime);
typedef somTP_AWDTransaction_setElapsedTime *somTD_AWDTransaction_setElapsedTime;
typedef boolean   SOMLINK somTP_AWDTransaction_setField(AWDTransaction *somSelf, Environment *ev,
		AWDBaseField* fld);
typedef somTP_AWDTransaction_setField *somTD_AWDTransaction_setField;
typedef boolean   SOMLINK somTP_AWDTransaction_setFieldFromLong(AWDTransaction *somSelf, Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		unsigned long ulvalue);
typedef somTP_AWDTransaction_setFieldFromLong *somTD_AWDTransaction_setFieldFromLong;
typedef boolean   SOMLINK somTP_AWDTransaction_setFieldFromString(AWDTransaction *somSelf, Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		string pszvalue);
typedef somTP_AWDTransaction_setFieldFromString *somTD_AWDTransaction_setFieldFromString;
typedef boolean   SOMLINK somTP_AWDTransaction_setIndexField(AWDTransaction *somSelf, Environment *ev,
		unsigned short usindex,
		AWDBaseField* fld);
typedef somTP_AWDTransaction_setIndexField *somTD_AWDTransaction_setIndexField;
typedef boolean   SOMLINK somTP_AWDTransaction_setIndexFieldFromString(AWDTransaction *somSelf, Environment *ev,
		unsigned short usindex,
		string pszField);
typedef somTP_AWDTransaction_setIndexFieldFromString *somTD_AWDTransaction_setIndexFieldFromString;
typedef void   SOMLINK somTP_AWDTransaction_setInUse(AWDTransaction *somSelf, Environment *ev,
		boolean fUse);
typedef somTP_AWDTransaction_setInUse *somTD_AWDTransaction_setInUse;
typedef boolean   SOMLINK somTP_AWDTransaction_setILockedFlag(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_setILockedFlag *somTD_AWDTransaction_setILockedFlag;
typedef boolean   SOMLINK somTP_AWDTransaction_startService(AWDTransaction *somSelf, Environment *ev,
		string pszServiceClass);
typedef somTP_AWDTransaction_startService *somTD_AWDTransaction_startService;
typedef boolean   SOMLINK somTP_AWDTransaction_startServiceByIndex(AWDTransaction *somSelf, Environment *ev,
		unsigned long ulCategory);
typedef somTP_AWDTransaction_startServiceByIndex *somTD_AWDTransaction_startServiceByIndex;
typedef boolean   SOMLINK somTP_AWDTransaction_stopCsd(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_stopCsd *somTD_AWDTransaction_stopCsd;
typedef boolean   SOMLINK somTP_AWDTransaction_stopHistory(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_stopHistory *somTD_AWDTransaction_stopHistory;
typedef boolean   SOMLINK somTP_AWDTransaction_stopComments(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_stopComments *somTD_AWDTransaction_stopComments;
typedef boolean   SOMLINK somTP_AWDTransaction_stopService(AWDTransaction *somSelf, Environment *ev,
		string pszServiceClass);
typedef somTP_AWDTransaction_stopService *somTD_AWDTransaction_stopService;
typedef unsigned long   SOMLINK somTP_AWDTransaction_type(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_type *somTD_AWDTransaction_type;
typedef boolean   SOMLINK somTP_AWDTransaction_updateFromArray(AWDTransaction *somSelf, Environment *ev,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDTransaction_updateFromArray *somTD_AWDTransaction_updateFromArray;
typedef void   SOMLINK somTP_AWDTransaction_updateFromKey(AWDTransaction *somSelf, Environment *ev,
		AWDEntityKey* pKey);
typedef somTP_AWDTransaction_updateFromKey *somTD_AWDTransaction_updateFromKey;
typedef boolean   SOMLINK somTP_AWDTransaction_validate(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_validate *somTD_AWDTransaction_validate;
typedef void   SOMLINK somTP_AWDTransaction_withEntityKey(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey);
typedef somTP_AWDTransaction_withEntityKey *somTD_AWDTransaction_withEntityKey;
typedef void   SOMLINK somTP_AWDTransaction_withKey(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct);
typedef somTP_AWDTransaction_withKey *somTD_AWDTransaction_withKey;
typedef void   SOMLINK somTP_AWDTransaction_withStructure(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj);
typedef somTP_AWDTransaction_withStructure *somTD_AWDTransaction_withStructure;
typedef void   SOMLINK somTP_AWDTransaction_withArray(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDTransaction_withArray *somTD_AWDTransaction_withArray;
typedef void   SOMLINK somTP_AWDTransaction_withStructureandArray(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDTransaction_withStructureandArray *somTD_AWDTransaction_withStructureandArray;
typedef void   SOMLINK somTP_AWDTransaction_withPersist(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDTransaction_withPersist *somTD_AWDTransaction_withPersist;
typedef void   SOMLINK somTP_AWDTransaction_withObject(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDBase* obj);
typedef somTP_AWDTransaction_withObject *somTD_AWDTransaction_withObject;
typedef void   SOMLINK somTP_AWDTransaction_withHandle(AWDTransaction *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject);
typedef somTP_AWDTransaction_withHandle *somTD_AWDTransaction_withHandle;
typedef AWDBase*   SOMLINK somTP_AWDTransaction_next(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_next *somTD_AWDTransaction_next;
typedef AWDBase*   SOMLINK somTP_AWDTransaction_previous(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_previous *somTD_AWDTransaction_previous;
typedef AWDBase*   SOMLINK somTP_AWDTransaction_child(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_child *somTD_AWDTransaction_child;
typedef AWDBase*   SOMLINK somTP_AWDTransaction_parent(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_parent *somTD_AWDTransaction_parent;
typedef AWDRelationship*   SOMLINK somTP_AWDTransaction_relationship(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_relationship *somTD_AWDTransaction_relationship;
typedef void   SOMLINK somTP_AWDTransaction_setNext(AWDTransaction *somSelf, Environment *ev,
		AWDBase* next);
typedef somTP_AWDTransaction_setNext *somTD_AWDTransaction_setNext;
typedef void   SOMLINK somTP_AWDTransaction_setPrevious(AWDTransaction *somSelf, Environment *ev,
		AWDBase* previous);
typedef somTP_AWDTransaction_setPrevious *somTD_AWDTransaction_setPrevious;
typedef void   SOMLINK somTP_AWDTransaction_setChild(AWDTransaction *somSelf, Environment *ev,
		AWDBase* child);
typedef somTP_AWDTransaction_setChild *somTD_AWDTransaction_setChild;
typedef void   SOMLINK somTP_AWDTransaction_setParent(AWDTransaction *somSelf, Environment *ev,
		AWDBase* parent);
typedef somTP_AWDTransaction_setParent *somTD_AWDTransaction_setParent;
typedef void*   SOMLINK somTP_AWDTransaction_usageToken(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_usageToken *somTD_AWDTransaction_usageToken;
typedef void   SOMLINK somTP_AWDTransaction_setUsageToken(AWDTransaction *somSelf, Environment *ev,
		void* pv);
typedef somTP_AWDTransaction_setUsageToken *somTD_AWDTransaction_setUsageToken;
typedef unsigned long   SOMLINK somTP_AWDTransaction_getTag(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_getTag *somTD_AWDTransaction_getTag;
typedef void   SOMLINK somTP_AWDTransaction_setTag(AWDTransaction *somSelf, Environment *ev,
		unsigned long ulTag);
typedef somTP_AWDTransaction_setTag *somTD_AWDTransaction_setTag;
typedef boolean   SOMLINK somTP_AWDTransaction_createRelationship(AWDTransaction *somSelf, Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation);
typedef somTP_AWDTransaction_createRelationship *somTD_AWDTransaction_createRelationship;
typedef boolean   SOMLINK somTP_AWDTransaction_createRelationshipWithNotify(AWDTransaction *somSelf, Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation);
typedef somTP_AWDTransaction_createRelationshipWithNotify *somTD_AWDTransaction_createRelationshipWithNotify;
typedef boolean   SOMLINK somTP_AWDTransaction_makeChild(AWDTransaction *somSelf, Environment *ev,
		AWDBase* pChild);
typedef somTP_AWDTransaction_makeChild *somTD_AWDTransaction_makeChild;
typedef boolean   SOMLINK somTP_AWDTransaction_makeParent(AWDTransaction *somSelf, Environment *ev,
		AWDBase* pParent);
typedef somTP_AWDTransaction_makeParent *somTD_AWDTransaction_makeParent;
typedef somf_MLinkable*   SOMLINK somTP_AWDTransaction_somfMLinkableInit(AWDTransaction *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_AWDTransaction_somfMLinkableInit *somTD_AWDTransaction_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_AWDTransaction_somfGetNext(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_somfGetNext *somTD_AWDTransaction_somfGetNext;
typedef void   SOMLINK somTP_AWDTransaction_somfSetNext(AWDTransaction *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDTransaction_somfSetNext *somTD_AWDTransaction_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_AWDTransaction_somfGetPrevious(AWDTransaction *somSelf, Environment *ev);
typedef somTP_AWDTransaction_somfGetPrevious *somTD_AWDTransaction_somfGetPrevious;
typedef void   SOMLINK somTP_AWDTransaction_somfSetPrevious(AWDTransaction *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDTransaction_somfSetPrevious *somTD_AWDTransaction_somfSetPrevious;
typedef void   SOMLINK somTP_AWDTransaction_somInit(AWDTransaction *somSelf);
typedef somTP_AWDTransaction_somInit *somTD_AWDTransaction_somInit;
typedef void   SOMLINK somTP_AWDTransaction_somDefaultCopyInit(AWDTransaction *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTransaction_somDefaultCopyInit *somTD_AWDTransaction_somDefaultCopyInit;
typedef AWDTransaction*   SOMLINK somTP_AWDTransaction_somDefaultAssign(AWDTransaction *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTransaction_somDefaultAssign *somTD_AWDTransaction_somDefaultAssign;
typedef void   SOMLINK somTP_AWDTransaction_somDefaultConstCopyInit(AWDTransaction *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTransaction_somDefaultConstCopyInit *somTD_AWDTransaction_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDTransaction_somDefaultVCopyInit(AWDTransaction *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTransaction_somDefaultVCopyInit *somTD_AWDTransaction_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDTransaction_somDefaultConstVCopyInit(AWDTransaction *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTransaction_somDefaultConstVCopyInit *somTD_AWDTransaction_somDefaultConstVCopyInit;
typedef AWDTransaction*   SOMLINK somTP_AWDTransaction_somDefaultConstAssign(AWDTransaction *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTransaction_somDefaultConstAssign *somTD_AWDTransaction_somDefaultConstAssign;
typedef AWDTransaction*   SOMLINK somTP_AWDTransaction_somDefaultVAssign(AWDTransaction *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTransaction_somDefaultVAssign *somTD_AWDTransaction_somDefaultVAssign;
typedef AWDTransaction*   SOMLINK somTP_AWDTransaction_somDefaultConstVAssign(AWDTransaction *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDTransaction_somDefaultConstVAssign *somTD_AWDTransaction_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDTransaction_somFree(AWDTransaction *somSelf);
typedef somTP_AWDTransaction_somFree *somTD_AWDTransaction_somFree;
typedef void   SOMLINK somTP_AWDTransaction_somUninit(AWDTransaction *somSelf);
typedef somTP_AWDTransaction_somUninit *somTD_AWDTransaction_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDTransaction_somGetClass(AWDTransaction *somSelf);
typedef somTP_AWDTransaction_somGetClass *somTD_AWDTransaction_somGetClass;
typedef string   SOMLINK somTP_AWDTransaction_somGetClassName(AWDTransaction *somSelf);
typedef somTP_AWDTransaction_somGetClassName *somTD_AWDTransaction_somGetClassName;
typedef long   SOMLINK somTP_AWDTransaction_somGetSize(AWDTransaction *somSelf);
typedef somTP_AWDTransaction_somGetSize *somTD_AWDTransaction_somGetSize;
typedef boolean   SOMLINK somTP_AWDTransaction_somIsA(AWDTransaction *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDTransaction_somIsA *somTD_AWDTransaction_somIsA;
typedef boolean   SOMLINK somTP_AWDTransaction_somIsInstanceOf(AWDTransaction *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDTransaction_somIsInstanceOf *somTD_AWDTransaction_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDTransaction_somRespondsTo(AWDTransaction *somSelf,
		somId mId);
typedef somTP_AWDTransaction_somRespondsTo *somTD_AWDTransaction_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDTransaction_somDispatch(AWDTransaction *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDTransaction_somDispatch *somTD_AWDTransaction_somDispatch;
typedef boolean   SOMLINK somTP_AWDTransaction_somClassDispatch(AWDTransaction *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDTransaction_somClassDispatch *somTD_AWDTransaction_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDTransaction_somCastObj(AWDTransaction *somSelf,
		SOMClass* cls);
typedef somTP_AWDTransaction_somCastObj *somTD_AWDTransaction_somCastObj;
typedef boolean   SOMLINK somTP_AWDTransaction_somResetObj(AWDTransaction *somSelf);
typedef somTP_AWDTransaction_somResetObj *somTD_AWDTransaction_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDTransaction_somPrintSelf(AWDTransaction *somSelf);
typedef somTP_AWDTransaction_somPrintSelf *somTD_AWDTransaction_somPrintSelf;
typedef void   SOMLINK somTP_AWDTransaction_somDumpSelf(AWDTransaction *somSelf,
		long level);
typedef somTP_AWDTransaction_somDumpSelf *somTD_AWDTransaction_somDumpSelf;
typedef void   SOMLINK somTP_AWDTransaction_somDumpSelfInt(AWDTransaction *somSelf,
		long level);
typedef somTP_AWDTransaction_somDumpSelfInt *somTD_AWDTransaction_somDumpSelfInt;
}

#endif /* AWDTransaction_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDTransaction
 */
class AWDTransaction : public AWDWork
{
public:

// AWDTransaction::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDTransaction) AWDTransactionNewClass(AWDTransaction_MajorVersion,AWDTransaction_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDTransaction,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDTransaction));
}

// AWDTransaction::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDTransaction()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTransactionCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDTransaction(AWDTransaction* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTransactionCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDTransaction(const AWDTransaction* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDTransactionCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDTransaction(Environment *ev,AWDEntityKey* pKey) 
{
   AWDTransaction_withEntityKey(ev,0,pKey);
}

AWDTransaction(Environment *ev,AWD_PAWDOBJECTKEYSTRCT pKeyStrct) 
{
   AWDTransaction_withKey(ev,0,pKeyStrct);
}

AWDTransaction(Environment *ev,AWD_PAWDOBJECTSTRCT pAwdObj) 
{
   AWDTransaction_withStructure(ev,0,pAwdObj);
}

AWDTransaction(Environment *ev,AWD_PAWDLOBARRAYSTRCT pAwdLobArray) 
{
   AWDTransaction_withArray(ev,0,pAwdLobArray);
}

AWDTransaction(Environment *ev,AWD_PAWDOBJECTSTRCT pAwdObj,AWD_PAWDLOBARRAYSTRCT pAwdLobArray) 
{
   AWDTransaction_withStructureandArray(ev,0,pAwdObj,pAwdLobArray);
}

AWDTransaction(Environment *ev,AWDPersist* pPersist) 
{
   AWDTransaction_withPersist(ev,0,pPersist);
}

AWDTransaction(Environment *ev,AWDTransaction* obj) 
{
   AWDTransaction_withObject(ev,0,obj);
}

AWDTransaction(Environment *ev,unsigned long hObject) 
{
   AWDTransaction_withHandle(ev,0,hObject);
}


/* initializer method: AWDTransaction_withEntityKey */
void   AWDTransaction_withEntityKey(Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey)
{
   SOM_ResolveD(this,AWDTransaction,AWDTransaction,AWDTransaction_withEntityKey)
	(this, ev,ctrl,pKey);
}


/* initializer method: AWDTransaction_withKey */
void   AWDTransaction_withKey(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct)
{
   SOM_ResolveD(this,AWDTransaction,AWDTransaction,AWDTransaction_withKey)
	(this, ev,ctrl,pKeyStrct);
}


/* initializer method: AWDTransaction_withStructure */
void   AWDTransaction_withStructure(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj)
{
   SOM_ResolveD(this,AWDTransaction,AWDTransaction,AWDTransaction_withStructure)
	(this, ev,ctrl,pAwdObj);
}


/* initializer method: AWDTransaction_withArray */
void   AWDTransaction_withArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDTransaction,AWDTransaction,AWDTransaction_withArray)
	(this, ev,ctrl,pAwdLobArray);
}


/* initializer method: AWDTransaction_withStructureandArray */
void   AWDTransaction_withStructureandArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDTransaction,AWDTransaction,AWDTransaction_withStructureandArray)
	(this, ev,ctrl,pAwdObj,pAwdLobArray);
}


/* initializer method: AWDTransaction_withPersist */
void   AWDTransaction_withPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDTransaction,AWDTransaction,AWDTransaction_withPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: AWDTransaction_withObject */
void   AWDTransaction_withObject(Environment *ev,
		somInitCtrl* ctrl,
		AWDTransaction* obj)
{
   SOM_ResolveD(this,AWDTransaction,AWDTransaction,AWDTransaction_withObject)
	(this, ev,ctrl,obj);
}


/* initializer method: AWDTransaction_withHandle */
void   AWDTransaction_withHandle(Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject)
{
   SOM_ResolveD(this,AWDTransaction,AWDTransaction,AWDTransaction_withHandle)
	(this, ev,ctrl,hObject);
}


/*
 * Reintroduce inherited methods
 */

/* method: activate */
boolean   activate(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,activate)
	(this, ev);
}


/* method: amount */
char*   amount(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,amount)
	(this, ev,str);
}


/* method: amountType */
char*   amountType(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,amountType)
	(this, ev,str);
}


/* method: blankQueueIfKeyFieldsHaveChanged */
boolean   blankQueueIfKeyFieldsHaveChanged(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,blankQueueIfKeyFieldsHaveChanged)
	(this, ev);
}


/* method: changeQueue */
boolean   changeQueue(Environment *ev,
		string pszNewQueue)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,changeQueue)
	(this, ev,pszNewQueue);
}


/* method: displayChangeQueue */
boolean   displayChangeQueue(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,displayChangeQueue)
	(this, ev);
}


/* method: displayClone */
boolean   displayClone(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,displayClone)
	(this, ev);
}


/* method: displayQuality */
boolean   displayQuality(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,displayQuality)
	(this, ev);
}


/* method: displaySuspend */
boolean   displaySuspend(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,displaySuspend)
	(this, ev);
}


/* method: displayTaskManager */
boolean   displayTaskManager(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,displayTaskManager)
	(this, ev);
}


/* method: fail */
boolean   fail(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,fail)
	(this, ev);
}


/* method: isAutoQuality */
boolean   isAutoQuality(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,isAutoQuality)
	(this, ev);
}


/* method: isAutoSuspend */
boolean   isAutoSuspend(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,isAutoSuspend)
	(this, ev);
}


/* method: isSuspended */
boolean   isSuspended(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,isSuspended)
	(this, ev);
}


/* method: pass */
boolean   pass(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,pass)
	(this, ev);
}


/* method: process */
boolean   process(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,process)
	(this, ev);
}


/* method: priority */
unsigned short   priority(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,priority)
	(this, ev);
}


/* method: priorityIncrease */
unsigned short   priorityIncrease(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,priorityIncrease)
	(this, ev);
}


/* method: queue */
char*   queue(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,queue)
	(this, ev,str);
}


/* method: setAmount */
boolean   setAmount(Environment *ev,
		unsigned long ulAmount)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,setAmount)
	(this, ev,ulAmount);
}


/* method: setPriorityIncrease */
boolean   setPriorityIncrease(Environment *ev,
		unsigned short usPriority)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,setPriorityIncrease)
	(this, ev,usPriority);
}


/* method: setQueue */
boolean   setQueue(Environment *ev,
		string pszQueue)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,setQueue)
	(this, ev,pszQueue);
}


/* method: setStatus */
boolean   setStatus(Environment *ev,
		string pszStatus)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,setStatus)
	(this, ev,pszStatus);
}


/* method: setVIFlag */
boolean   setVIFlag(Environment *ev,
		boolean fVI)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,setVIFlag)
	(this, ev,fVI);
}


/* method: setWorkType */
boolean   setWorkType(Environment *ev,
		string pszType)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,setWorkType)
	(this, ev,pszType);
}


/* method: startExternalSystem */
boolean   startExternalSystem(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,startExternalSystem)
	(this, ev);
}


/* method: status */
char*   status(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,status)
	(this, ev,str);
}


/* method: stopChangeQueue */
boolean   stopChangeQueue(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,stopChangeQueue)
	(this, ev);
}


/* method: stopClone */
boolean   stopClone(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,stopClone)
	(this, ev);
}


/* method: stopExternalSystem */
boolean   stopExternalSystem(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,stopExternalSystem)
	(this, ev);
}


/* method: stopQuality */
boolean   stopQuality(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,stopQuality)
	(this, ev);
}


/* method: stopSuspend */
boolean   stopSuspend(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,stopSuspend)
	(this, ev);
}


/* method: stopTaskManager */
boolean   stopTaskManager(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,stopTaskManager)
	(this, ev);
}


/* method: suspend */
boolean   suspend(Environment *ev,
		string activateDate,
		string activateStatus,
		string suspendCode)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,suspend)
	(this, ev,activateDate,activateStatus,suspendCode);
}


/* method: unsuspend */
boolean   unsuspend(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,unsuspend)
	(this, ev);
}


/* method: viFlag */
boolean   viFlag(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,viFlag)
	(this, ev);
}


/* method: workType */
char*   workType(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,workType)
	(this, ev,str);
}


/* initializer method: AWDWork_withEntityKey */
void   AWDWork_withEntityKey(Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey)
{
   SOM_ResolveD(this,AWDTransaction,AWDWork,AWDWork_withEntityKey)
	(this, ev,ctrl,pKey);
}


/* initializer method: AWDWork_withKey */
void   AWDWork_withKey(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct)
{
   SOM_ResolveD(this,AWDTransaction,AWDWork,AWDWork_withKey)
	(this, ev,ctrl,pKeyStrct);
}


/* initializer method: AWDWork_withStructure */
void   AWDWork_withStructure(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj)
{
   SOM_ResolveD(this,AWDTransaction,AWDWork,AWDWork_withStructure)
	(this, ev,ctrl,pAwdObj);
}


/* initializer method: AWDWork_withArray */
void   AWDWork_withArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDTransaction,AWDWork,AWDWork_withArray)
	(this, ev,ctrl,pAwdLobArray);
}


/* initializer method: AWDWork_withStructureandArray */
void   AWDWork_withStructureandArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDTransaction,AWDWork,AWDWork_withStructureandArray)
	(this, ev,ctrl,pAwdObj,pAwdLobArray);
}


/* initializer method: AWDWork_withPersist */
void   AWDWork_withPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDTransaction,AWDWork,AWDWork_withPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: AWDWork_withObject */
void   AWDWork_withObject(Environment *ev,
		somInitCtrl* ctrl,
		AWDWork* obj)
{
   SOM_ResolveD(this,AWDTransaction,AWDWork,AWDWork_withObject)
	(this, ev,ctrl,obj);
}


/* initializer method: AWDWork_withHandle */
void   AWDWork_withHandle(Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject)
{
   SOM_ResolveD(this,AWDTransaction,AWDWork,AWDWork_withHandle)
	(this, ev,ctrl,hObject);
}


/* method: functionComplete */
boolean   functionComplete(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,functionComplete)
	(this, ev);
}


/* method: setDefaultNextStatus */
boolean   setDefaultNextStatus(Environment *ev,
		unsigned long lobAction)
{
   return SOM_ResolveD(this,AWDTransaction,AWDWork,setDefaultNextStatus)
	(this, ev,lobAction);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDTransaction,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDTransaction,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: copyFrom */
boolean   copyFrom(Environment *ev,
		AWDBase* awdObj)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,copyFrom)
	(this, ev,awdObj);
}


/* method: create */
void   create(Environment *ev,
		AWDBase_CREATE_MODE mode,
		unsigned long ulBatch)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,create)
	(this, ev,mode,ulBatch);
}


/* method: getStructure */
boolean   getStructure(Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,getStructure)
	(this, ev,pAwdObjStrct);
}


/* method: iconText */
char*   iconText(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,iconText)
	(this, ev,str);
}


/* method: initialize */
void   initialize(Environment *ev)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,initialize)
	(this, ev);
}


/* method: isFieldValid */
boolean   isFieldValid(Environment *ev,
		string pszField)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isFieldValid)
	(this, ev,pszField);
}


/* method: isLocked */
boolean   isLocked(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isLocked)
	(this, ev);
}


/* method: lock */
AWDBase_LOCKRESULT   lock(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,lock)
	(this, ev);
}


/* method: lockedBy */
char*   lockedBy(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,lockedBy)
	(this, ev,str);
}


/* method: retrieve */
boolean   retrieve(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,retrieve)
	(this, ev);
}


/* method: retrieveSecondaryFields */
boolean   retrieveSecondaryFields(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,retrieveSecondaryFields)
	(this, ev);
}


/* method: update */
boolean   update(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,update)
	(this, ev);
}


/* method: updateFromStructure */
boolean   updateFromStructure(Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,updateFromStructure)
	(this, ev,pAwdObjStrct);
}


/* method: unlock */
boolean   unlock(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,unlock)
	(this, ev);
}


/* method: store */
void   store(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDTransaction,AWDCommon,store)
	(this, ev,pPersist);
}


/* method: restore */
void   restore(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDTransaction,AWDCommon,restore)
	(this, ev,pPersist);
}


/* method: csdName */
char*   csdName(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,csdName)
	(this, ev,str);
}


/* method: iOwn */
boolean   iOwn(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,iOwn)
	(this, ev);
}


/* method: iLocked */
boolean   iLocked(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,iLocked)
	(this, ev);
}


/* method: addComments */
boolean   addComments(Environment *ev,
		char* pCommentBuffer,
		AWDBase_COMMENTS dType)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,addComments)
	(this, ev,pCommentBuffer,dType);
}


/* method: autoFlags */
unsigned long   autoFlags(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,autoFlags)
	(this, ev);
}


/* method: autoFlagFocus */
unsigned short   autoFlagFocus(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,autoFlagFocus)
	(this, ev);
}


/* method: businessArea */
char*   businessArea(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,businessArea)
	(this, ev,str);
}


/* method: canContain */
boolean   canContain(Environment *ev,
		AWDBase* awdObj)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,canContain)
	(this, ev,awdObj);
}


/* method: clone */
void   clone(Environment *ev,
		unsigned short usCount,
		boolean fCreateRelationship,
		boolean fLock,
		AWDBase** ppClonedObjs,
		string shareMemName)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,clone)
	(this, ev,usCount,fCreateRelationship,fLock,ppClonedObjs,shareMemName);
}


/* method: createNode */
char*   createNode(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,createNode)
	(this, ev,str);
}


/* method: creationDateTime */
char*   creationDateTime(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,creationDateTime)
	(this, ev,str);
}


/* method: displayComments */
boolean   displayComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,displayComments)
	(this, ev);
}


/* method: displayCsd */
boolean   displayCsd(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,displayCsd)
	(this, ev);
}


/* method: displayHistory */
boolean   displayHistory(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,displayHistory)
	(this, ev);
}


/* method: field */
AWDBaseField*   field(Environment *ev,
		string aname,
		unsigned short seqnum)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,field)
	(this, ev,aname,seqnum);
}


/* method: fieldAsLong */
unsigned long   fieldAsLong(Environment *ev,
		string aname,
		unsigned short seqnum)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,fieldAsLong)
	(this, ev,aname,seqnum);
}


/* method: fieldAsString */
char*   fieldAsString(Environment *ev,
		string aname,
		unsigned short seqnum,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,fieldAsString)
	(this, ev,aname,seqnum,str);
}


/* method: fieldCount */
unsigned short   fieldCount(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,fieldCount)
	(this, ev);
}


/* method: getBeginTime */
char*   getBeginTime(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,getBeginTime)
	(this, ev);
}


/* method: getCreateArray */
boolean   getCreateArray(Environment *ev,
		AWD_PAWDCREATELOBARRAY pAwdLobArray)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,getCreateArray)
	(this, ev,pAwdLobArray);
}


/* method: getFieldList */
FieldList*   getFieldList(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,getFieldList)
	(this, ev);
}


/* method: getEndTime */
char*   getEndTime(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,getEndTime)
	(this, ev);
}


/* method: getKeyStrct */
boolean   getKeyStrct(Environment *ev,
		AWD_PAWDOBJECTKEYSTRCT pKey)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,getKeyStrct)
	(this, ev,pKey);
}


/* method: getFieldArray */
boolean   getFieldArray(Environment *ev,
		AWD_AWDLOBARRAYSTRCT* pAwdLobArray)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,getFieldArray)
	(this, ev,pAwdLobArray);
}


/* method: getState */
AWDBase_STATE   getState(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,getState)
	(this, ev);
}


/* method: hasChanged */
boolean   hasChanged(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,hasChanged)
	(this, ev);
}


/* method: hasComments */
boolean   hasComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,hasComments)
	(this, ev);
}


/* method: iconName */
char*   iconName(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,iconName)
	(this, ev,str);
}


/* method: indexField */
AWDBaseField*   indexField(Environment *ev,
		unsigned short indexnumber)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,indexField)
	(this, ev,indexnumber);
}


/* method: isAutoChildSource */
boolean   isAutoChildSource(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isAutoChildSource)
	(this, ev);
}


/* method: isAutoComments */
boolean   isAutoComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isAutoComments)
	(this, ev);
}


/* method: isAutoCsd */
boolean   isAutoCsd(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isAutoCsd)
	(this, ev);
}


/* method: isAutoHistory */
boolean   isAutoHistory(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isAutoHistory)
	(this, ev);
}


/* method: isAutoLob */
boolean   isAutoLob(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isAutoLob)
	(this, ev);
}


/* method: isAutoSiblingSource */
boolean   isAutoSiblingSource(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isAutoSiblingSource)
	(this, ev);
}


/* method: isAutoViewSource */
boolean   isAutoViewSource(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isAutoViewSource)
	(this, ev);
}


/* method: isInUse */
boolean   isInUse(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isInUse)
	(this, ev);
}


/* method: isSelected */
boolean   isSelected(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isSelected)
	(this, ev);
}


/* method: isShowable */
boolean   isShowable(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isShowable)
	(this, ev);
}


/* method: isType */
boolean   isType(Environment *ev,
		unsigned long ulType)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isType)
	(this, ev,ulType);
}


/* method: isUpdateable */
boolean   isUpdateable(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isUpdateable)
	(this, ev);
}


/* method: isViewable */
boolean   isViewable(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isViewable)
	(this, ev);
}


/* method: isSourceObject */
boolean   isSourceObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isSourceObject)
	(this, ev);
}


/* method: isFolderObject */
boolean   isFolderObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isFolderObject)
	(this, ev);
}


/* method: isTransactionObject */
boolean   isTransactionObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isTransactionObject)
	(this, ev);
}


/* method: isCaseObject */
boolean   isCaseObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,isCaseObject)
	(this, ev);
}


/* method: key */
char*   key(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,key)
	(this, ev,str);
}


/* method: unlockRegardless */
boolean   unlockRegardless(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,unlockRegardless)
	(this, ev);
}


/* method: ownerNode */
char*   ownerNode(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,ownerNode)
	(this, ev,str);
}


/* method: recordCode */
char*   recordCode(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,recordCode)
	(this, ev,str);
}


/* method: removeWorkselect */
boolean   removeWorkselect(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,removeWorkselect)
	(this, ev);
}


/* method: setBeginTime */
void   setBeginTime(Environment *ev)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,setBeginTime)
	(this, ev);
}


/* method: setBeginTimeFromTimestamp */
void   setBeginTimeFromTimestamp(Environment *ev,
		string pszTimestamp)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,setBeginTimeFromTimestamp)
	(this, ev,pszTimestamp);
}


/* method: setBusinessArea */
boolean   setBusinessArea(Environment *ev,
		string pszba)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,setBusinessArea)
	(this, ev,pszba);
}


/* method: setCsdName */
void   setCsdName(Environment *ev,
		char* pszCsd)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,setCsdName)
	(this, ev,pszCsd);
}


/* method: setEndTime */
void   setEndTime(Environment *ev)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,setEndTime)
	(this, ev);
}


/* method: setEndTimeFromTimestamp */
void   setEndTimeFromTimestamp(Environment *ev,
		string pszTimestamp)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,setEndTimeFromTimestamp)
	(this, ev,pszTimestamp);
}


/* method: setElapsedTime */
void   setElapsedTime(Environment *ev,
		unsigned long ulElapsedTime)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,setElapsedTime)
	(this, ev,ulElapsedTime);
}


/* method: setField */
boolean   setField(Environment *ev,
		AWDBaseField* fld)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,setField)
	(this, ev,fld);
}


/* method: setFieldFromLong */
boolean   setFieldFromLong(Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		unsigned long ulvalue)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,setFieldFromLong)
	(this, ev,pszdataname,seqnum,ulvalue);
}


/* method: setFieldFromString */
boolean   setFieldFromString(Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		string pszvalue)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,setFieldFromString)
	(this, ev,pszdataname,seqnum,pszvalue);
}


/* method: setIndexField */
boolean   setIndexField(Environment *ev,
		unsigned short usindex,
		AWDBaseField* fld)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,setIndexField)
	(this, ev,usindex,fld);
}


/* method: setIndexFieldFromString */
boolean   setIndexFieldFromString(Environment *ev,
		unsigned short usindex,
		string pszField)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,setIndexFieldFromString)
	(this, ev,usindex,pszField);
}


/* method: setInUse */
void   setInUse(Environment *ev,
		boolean fUse)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,setInUse)
	(this, ev,fUse);
}


/* method: setILockedFlag */
boolean   setILockedFlag(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,setILockedFlag)
	(this, ev);
}


/* method: startService */
boolean   startService(Environment *ev,
		string pszServiceClass)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,startService)
	(this, ev,pszServiceClass);
}


/* method: startServiceByIndex */
boolean   startServiceByIndex(Environment *ev,
		unsigned long ulCategory)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,startServiceByIndex)
	(this, ev,ulCategory);
}


/* method: stopCsd */
boolean   stopCsd(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,stopCsd)
	(this, ev);
}


/* method: stopHistory */
boolean   stopHistory(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,stopHistory)
	(this, ev);
}


/* method: stopComments */
boolean   stopComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,stopComments)
	(this, ev);
}


/* method: stopService */
boolean   stopService(Environment *ev,
		string pszServiceClass)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,stopService)
	(this, ev,pszServiceClass);
}


/* method: type */
unsigned long   type(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,type)
	(this, ev);
}


/* method: updateFromArray */
boolean   updateFromArray(Environment *ev,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,updateFromArray)
	(this, ev,pAwdLobArray);
}


/* method: updateFromKey */
void   updateFromKey(Environment *ev,
		AWDEntityKey* pKey)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,updateFromKey)
	(this, ev,pKey);
}


/* method: validate */
boolean   validate(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,validate)
	(this, ev);
}


/* initializer method: withEntityKey */
void   withEntityKey(Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,withEntityKey)
	(this, ev,ctrl,pKey);
}


/* initializer method: withKey */
void   withKey(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,withKey)
	(this, ev,ctrl,pKeyStrct);
}


/* initializer method: withStructure */
void   withStructure(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,withStructure)
	(this, ev,ctrl,pAwdObj);
}


/* initializer method: withArray */
void   withArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,withArray)
	(this, ev,ctrl,pAwdLobArray);
}


/* initializer method: withStructureandArray */
void   withStructureandArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,withStructureandArray)
	(this, ev,ctrl,pAwdObj,pAwdLobArray);
}


/* initializer method: withPersist */
void   withPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,withPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: withObject */
void   withObject(Environment *ev,
		somInitCtrl* ctrl,
		AWDBase* obj)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,withObject)
	(this, ev,ctrl,obj);
}


/* initializer method: withHandle */
void   withHandle(Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,withHandle)
	(this, ev,ctrl,hObject);
}


/* method: next */
AWDBase*   next(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,next)
	(this, ev);
}


/* method: previous */
AWDBase*   previous(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,previous)
	(this, ev);
}


/* method: child */
AWDBase*   child(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,child)
	(this, ev);
}


/* method: parent */
AWDBase*   parent(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,parent)
	(this, ev);
}


/* method: relationship */
AWDRelationship*   relationship(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,relationship)
	(this, ev);
}


/* method: setNext */
void   setNext(Environment *ev,
		AWDBase* next)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,setNext)
	(this, ev,next);
}


/* method: setPrevious */
void   setPrevious(Environment *ev,
		AWDBase* previous)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,setPrevious)
	(this, ev,previous);
}


/* method: setChild */
void   setChild(Environment *ev,
		AWDBase* child)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,setChild)
	(this, ev,child);
}


/* method: setParent */
void   setParent(Environment *ev,
		AWDBase* parent)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,setParent)
	(this, ev,parent);
}


/* method: usageToken */
void*   usageToken(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,usageToken)
	(this, ev);
}


/* method: setUsageToken */
void   setUsageToken(Environment *ev,
		void* pv)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,setUsageToken)
	(this, ev,pv);
}


/* method: getTag */
unsigned long   getTag(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,getTag)
	(this, ev);
}


/* method: setTag */
void   setTag(Environment *ev,
		unsigned long ulTag)
{
   SOM_ResolveD(this,AWDTransaction,AWDBase,setTag)
	(this, ev,ulTag);
}


/* method: createRelationship */
boolean   createRelationship(Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,createRelationship)
	(this, ev,pRelationObj,relation);
}


/* method: createRelationshipWithNotify */
boolean   createRelationshipWithNotify(Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,createRelationshipWithNotify)
	(this, ev,pRelationObj,relation);
}


/* method: makeChild */
boolean   makeChild(Environment *ev,
		AWDBase* pChild)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,makeChild)
	(this, ev,pChild);
}


/* method: makeParent */
boolean   makeParent(Environment *ev,
		AWDBase* pParent)
{
   return SOM_ResolveD(this,AWDTransaction,AWDBase,makeParent)
	(this, ev,pParent);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,AWDTransaction,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDTransaction,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,AWDTransaction,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDTransaction,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDTransaction,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTransaction,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDTransaction*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTransaction,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTransaction,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTransaction,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDTransaction,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDTransaction*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTransaction,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDTransaction*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTransaction,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDTransaction*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDTransaction,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDTransaction,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDTransaction,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDTransaction,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDTransaction,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDTransaction,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDTransaction,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDTransaction,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDTransaction,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDTransaction_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDTransaction,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDTransaction,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDTransaction_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDTransaction,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDTransaction,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDTransaction,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDTransaction,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDTransaction,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDTransaction,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDTransaction,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDTransaction */



#endif       /* SOM_AWDTransaction_xh */

#ifndef SOM_AWDCase_xh
#define SOM_AWDCase_xh

class AWDCase;

#define AWDCase_MajorVersion 2
#define AWDCase_MinorVersion 3

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDWork_xh
#include <wrkobj.xh>
#endif

#ifndef AWDCase_API
#define AWDCase_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDCase Class */
SOMEXTERN
#if (defined(SOM_Module_wrkobj_Source) || defined(AWDCase_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDCase))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDCaseNewClass(
		integer4,
		integer4 );

/* The API to the AWDCase class object, and the methods it introduces. */
SOMEXTERN struct AWDCaseClassDataStructure {
	SOMClass *classObject;
	somMToken AWDCase_withArray;
	somMToken AWDCase_withKey;
	somMToken AWDCase_withStructure;
	somMToken AWDCase_withStructureandArray;
	somMToken AWDCase_withEntityKey;
	somMToken AWDCase_withPersist;
	somMToken AWDCase_withObject;
	somMToken AWDCase_withHandle;
}
#if !(defined(SOM_Module_wrkobj_Source) || defined(AWDCase_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDCase))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDCaseClassData;
#define _AWDCase AWDCaseClassData.classObject

/* The API to parentMtabs for AWDCase, and the instance data it introduces. */
SOMEXTERN struct AWDCaseCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_wrkobj_Source) || defined(AWDCase_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDCase))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDCaseCClassData;

/*
 * -- Typedefs for AWDCase Method Procedures
 */
extern "C" {
typedef void   SOMLINK somTP_AWDCase_AWDCase_withEntityKey(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey);
typedef somTP_AWDCase_AWDCase_withEntityKey *somTD_AWDCase_AWDCase_withEntityKey;
typedef void   SOMLINK somTP_AWDCase_AWDCase_withKey(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct);
typedef somTP_AWDCase_AWDCase_withKey *somTD_AWDCase_AWDCase_withKey;
typedef void   SOMLINK somTP_AWDCase_AWDCase_withStructure(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj);
typedef somTP_AWDCase_AWDCase_withStructure *somTD_AWDCase_AWDCase_withStructure;
typedef void   SOMLINK somTP_AWDCase_AWDCase_withArray(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDCase_AWDCase_withArray *somTD_AWDCase_AWDCase_withArray;
typedef void   SOMLINK somTP_AWDCase_AWDCase_withStructureandArray(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDCase_AWDCase_withStructureandArray *somTD_AWDCase_AWDCase_withStructureandArray;
typedef void   SOMLINK somTP_AWDCase_AWDCase_withPersist(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDCase_AWDCase_withPersist *somTD_AWDCase_AWDCase_withPersist;
typedef void   SOMLINK somTP_AWDCase_AWDCase_withObject(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDCase* obj);
typedef somTP_AWDCase_AWDCase_withObject *somTD_AWDCase_AWDCase_withObject;
typedef void   SOMLINK somTP_AWDCase_AWDCase_withHandle(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject);
typedef somTP_AWDCase_AWDCase_withHandle *somTD_AWDCase_AWDCase_withHandle;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_AWDCase_activate(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_activate *somTD_AWDCase_activate;
typedef char*   SOMLINK somTP_AWDCase_amount(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_amount *somTD_AWDCase_amount;
typedef char*   SOMLINK somTP_AWDCase_amountType(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_amountType *somTD_AWDCase_amountType;
typedef boolean   SOMLINK somTP_AWDCase_blankQueueIfKeyFieldsHaveChanged(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_blankQueueIfKeyFieldsHaveChanged *somTD_AWDCase_blankQueueIfKeyFieldsHaveChanged;
typedef boolean   SOMLINK somTP_AWDCase_changeQueue(AWDCase *somSelf, Environment *ev,
		string pszNewQueue);
typedef somTP_AWDCase_changeQueue *somTD_AWDCase_changeQueue;
typedef boolean   SOMLINK somTP_AWDCase_displayChangeQueue(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_displayChangeQueue *somTD_AWDCase_displayChangeQueue;
typedef boolean   SOMLINK somTP_AWDCase_displayClone(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_displayClone *somTD_AWDCase_displayClone;
typedef boolean   SOMLINK somTP_AWDCase_displayQuality(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_displayQuality *somTD_AWDCase_displayQuality;
typedef boolean   SOMLINK somTP_AWDCase_displaySuspend(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_displaySuspend *somTD_AWDCase_displaySuspend;
typedef boolean   SOMLINK somTP_AWDCase_displayTaskManager(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_displayTaskManager *somTD_AWDCase_displayTaskManager;
typedef boolean   SOMLINK somTP_AWDCase_fail(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_fail *somTD_AWDCase_fail;
typedef boolean   SOMLINK somTP_AWDCase_isAutoQuality(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isAutoQuality *somTD_AWDCase_isAutoQuality;
typedef boolean   SOMLINK somTP_AWDCase_isAutoSuspend(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isAutoSuspend *somTD_AWDCase_isAutoSuspend;
typedef boolean   SOMLINK somTP_AWDCase_isSuspended(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isSuspended *somTD_AWDCase_isSuspended;
typedef boolean   SOMLINK somTP_AWDCase_pass(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_pass *somTD_AWDCase_pass;
typedef boolean   SOMLINK somTP_AWDCase_process(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_process *somTD_AWDCase_process;
typedef unsigned short   SOMLINK somTP_AWDCase_priority(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_priority *somTD_AWDCase_priority;
typedef unsigned short   SOMLINK somTP_AWDCase_priorityIncrease(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_priorityIncrease *somTD_AWDCase_priorityIncrease;
typedef char*   SOMLINK somTP_AWDCase_queue(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_queue *somTD_AWDCase_queue;
typedef boolean   SOMLINK somTP_AWDCase_setAmount(AWDCase *somSelf, Environment *ev,
		unsigned long ulAmount);
typedef somTP_AWDCase_setAmount *somTD_AWDCase_setAmount;
typedef boolean   SOMLINK somTP_AWDCase_setPriorityIncrease(AWDCase *somSelf, Environment *ev,
		unsigned short usPriority);
typedef somTP_AWDCase_setPriorityIncrease *somTD_AWDCase_setPriorityIncrease;
typedef boolean   SOMLINK somTP_AWDCase_setQueue(AWDCase *somSelf, Environment *ev,
		string pszQueue);
typedef somTP_AWDCase_setQueue *somTD_AWDCase_setQueue;
typedef boolean   SOMLINK somTP_AWDCase_setStatus(AWDCase *somSelf, Environment *ev,
		string pszStatus);
typedef somTP_AWDCase_setStatus *somTD_AWDCase_setStatus;
typedef boolean   SOMLINK somTP_AWDCase_setVIFlag(AWDCase *somSelf, Environment *ev,
		boolean fVI);
typedef somTP_AWDCase_setVIFlag *somTD_AWDCase_setVIFlag;
typedef boolean   SOMLINK somTP_AWDCase_setWorkType(AWDCase *somSelf, Environment *ev,
		string pszType);
typedef somTP_AWDCase_setWorkType *somTD_AWDCase_setWorkType;
typedef boolean   SOMLINK somTP_AWDCase_startExternalSystem(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_startExternalSystem *somTD_AWDCase_startExternalSystem;
typedef char*   SOMLINK somTP_AWDCase_status(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_status *somTD_AWDCase_status;
typedef boolean   SOMLINK somTP_AWDCase_stopChangeQueue(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_stopChangeQueue *somTD_AWDCase_stopChangeQueue;
typedef boolean   SOMLINK somTP_AWDCase_stopClone(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_stopClone *somTD_AWDCase_stopClone;
typedef boolean   SOMLINK somTP_AWDCase_stopExternalSystem(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_stopExternalSystem *somTD_AWDCase_stopExternalSystem;
typedef boolean   SOMLINK somTP_AWDCase_stopQuality(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_stopQuality *somTD_AWDCase_stopQuality;
typedef boolean   SOMLINK somTP_AWDCase_stopSuspend(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_stopSuspend *somTD_AWDCase_stopSuspend;
typedef boolean   SOMLINK somTP_AWDCase_stopTaskManager(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_stopTaskManager *somTD_AWDCase_stopTaskManager;
typedef boolean   SOMLINK somTP_AWDCase_suspend(AWDCase *somSelf, Environment *ev,
		string activateDate,
		string activateStatus,
		string suspendCode);
typedef somTP_AWDCase_suspend *somTD_AWDCase_suspend;
typedef boolean   SOMLINK somTP_AWDCase_unsuspend(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_unsuspend *somTD_AWDCase_unsuspend;
typedef boolean   SOMLINK somTP_AWDCase_viFlag(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_viFlag *somTD_AWDCase_viFlag;
typedef char*   SOMLINK somTP_AWDCase_workType(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_workType *somTD_AWDCase_workType;
typedef void   SOMLINK somTP_AWDCase_AWDWork_withEntityKey(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey);
typedef somTP_AWDCase_AWDWork_withEntityKey *somTD_AWDCase_AWDWork_withEntityKey;
typedef void   SOMLINK somTP_AWDCase_AWDWork_withKey(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct);
typedef somTP_AWDCase_AWDWork_withKey *somTD_AWDCase_AWDWork_withKey;
typedef void   SOMLINK somTP_AWDCase_AWDWork_withStructure(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj);
typedef somTP_AWDCase_AWDWork_withStructure *somTD_AWDCase_AWDWork_withStructure;
typedef void   SOMLINK somTP_AWDCase_AWDWork_withArray(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDCase_AWDWork_withArray *somTD_AWDCase_AWDWork_withArray;
typedef void   SOMLINK somTP_AWDCase_AWDWork_withStructureandArray(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDCase_AWDWork_withStructureandArray *somTD_AWDCase_AWDWork_withStructureandArray;
typedef void   SOMLINK somTP_AWDCase_AWDWork_withPersist(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDCase_AWDWork_withPersist *somTD_AWDCase_AWDWork_withPersist;
typedef void   SOMLINK somTP_AWDCase_AWDWork_withObject(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDWork* obj);
typedef somTP_AWDCase_AWDWork_withObject *somTD_AWDCase_AWDWork_withObject;
typedef void   SOMLINK somTP_AWDCase_AWDWork_withHandle(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject);
typedef somTP_AWDCase_AWDWork_withHandle *somTD_AWDCase_AWDWork_withHandle;
typedef boolean   SOMLINK somTP_AWDCase_functionComplete(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_functionComplete *somTD_AWDCase_functionComplete;
typedef boolean   SOMLINK somTP_AWDCase_setDefaultNextStatus(AWDCase *somSelf, Environment *ev,
		unsigned long lobAction);
typedef somTP_AWDCase_setDefaultNextStatus *somTD_AWDCase_setDefaultNextStatus;
typedef void   SOMLINK somTP_AWDCase_somDefaultInit(AWDCase *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDCase_somDefaultInit *somTD_AWDCase_somDefaultInit;
typedef void   SOMLINK somTP_AWDCase_somDestruct(AWDCase *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDCase_somDestruct *somTD_AWDCase_somDestruct;
typedef boolean   SOMLINK somTP_AWDCase_copyFrom(AWDCase *somSelf, Environment *ev,
		AWDBase* awdObj);
typedef somTP_AWDCase_copyFrom *somTD_AWDCase_copyFrom;
typedef void   SOMLINK somTP_AWDCase_create(AWDCase *somSelf, Environment *ev,
		AWDBase_CREATE_MODE mode,
		unsigned long ulBatch);
typedef somTP_AWDCase_create *somTD_AWDCase_create;
typedef boolean   SOMLINK somTP_AWDCase_getStructure(AWDCase *somSelf, Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct);
typedef somTP_AWDCase_getStructure *somTD_AWDCase_getStructure;
typedef char*   SOMLINK somTP_AWDCase_iconText(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_iconText *somTD_AWDCase_iconText;
typedef void   SOMLINK somTP_AWDCase_initialize(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_initialize *somTD_AWDCase_initialize;
typedef boolean   SOMLINK somTP_AWDCase_isFieldValid(AWDCase *somSelf, Environment *ev,
		string pszField);
typedef somTP_AWDCase_isFieldValid *somTD_AWDCase_isFieldValid;
typedef boolean   SOMLINK somTP_AWDCase_isLocked(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isLocked *somTD_AWDCase_isLocked;
typedef AWDBase_LOCKRESULT   SOMLINK somTP_AWDCase_lock(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_lock *somTD_AWDCase_lock;
typedef char*   SOMLINK somTP_AWDCase_lockedBy(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_lockedBy *somTD_AWDCase_lockedBy;
typedef boolean   SOMLINK somTP_AWDCase_retrieve(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_retrieve *somTD_AWDCase_retrieve;
typedef boolean   SOMLINK somTP_AWDCase_retrieveSecondaryFields(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_retrieveSecondaryFields *somTD_AWDCase_retrieveSecondaryFields;
typedef boolean   SOMLINK somTP_AWDCase_update(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_update *somTD_AWDCase_update;
typedef boolean   SOMLINK somTP_AWDCase_updateFromStructure(AWDCase *somSelf, Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct);
typedef somTP_AWDCase_updateFromStructure *somTD_AWDCase_updateFromStructure;
typedef boolean   SOMLINK somTP_AWDCase_unlock(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_unlock *somTD_AWDCase_unlock;
typedef void   SOMLINK somTP_AWDCase_store(AWDCase *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDCase_store *somTD_AWDCase_store;
typedef void   SOMLINK somTP_AWDCase_restore(AWDCase *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDCase_restore *somTD_AWDCase_restore;
typedef char*   SOMLINK somTP_AWDCase_csdName(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_csdName *somTD_AWDCase_csdName;
typedef boolean   SOMLINK somTP_AWDCase_iOwn(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_iOwn *somTD_AWDCase_iOwn;
typedef boolean   SOMLINK somTP_AWDCase_iLocked(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_iLocked *somTD_AWDCase_iLocked;
typedef boolean   SOMLINK somTP_AWDCase_addComments(AWDCase *somSelf, Environment *ev,
		char* pCommentBuffer,
		AWDBase_COMMENTS dType);
typedef somTP_AWDCase_addComments *somTD_AWDCase_addComments;
typedef unsigned long   SOMLINK somTP_AWDCase_autoFlags(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_autoFlags *somTD_AWDCase_autoFlags;
typedef unsigned short   SOMLINK somTP_AWDCase_autoFlagFocus(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_autoFlagFocus *somTD_AWDCase_autoFlagFocus;
typedef char*   SOMLINK somTP_AWDCase_businessArea(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_businessArea *somTD_AWDCase_businessArea;
typedef boolean   SOMLINK somTP_AWDCase_canContain(AWDCase *somSelf, Environment *ev,
		AWDBase* awdObj);
typedef somTP_AWDCase_canContain *somTD_AWDCase_canContain;
typedef void   SOMLINK somTP_AWDCase_clone(AWDCase *somSelf, Environment *ev,
		unsigned short usCount,
		boolean fCreateRelationship,
		boolean fLock,
		AWDBase** ppClonedObjs,
		string shareMemName);
typedef somTP_AWDCase_clone *somTD_AWDCase_clone;
typedef char*   SOMLINK somTP_AWDCase_createNode(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_createNode *somTD_AWDCase_createNode;
typedef char*   SOMLINK somTP_AWDCase_creationDateTime(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_creationDateTime *somTD_AWDCase_creationDateTime;
typedef boolean   SOMLINK somTP_AWDCase_displayComments(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_displayComments *somTD_AWDCase_displayComments;
typedef boolean   SOMLINK somTP_AWDCase_displayCsd(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_displayCsd *somTD_AWDCase_displayCsd;
typedef boolean   SOMLINK somTP_AWDCase_displayHistory(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_displayHistory *somTD_AWDCase_displayHistory;
typedef AWDBaseField*   SOMLINK somTP_AWDCase_field(AWDCase *somSelf, Environment *ev,
		string aname,
		unsigned short seqnum);
typedef somTP_AWDCase_field *somTD_AWDCase_field;
typedef unsigned long   SOMLINK somTP_AWDCase_fieldAsLong(AWDCase *somSelf, Environment *ev,
		string aname,
		unsigned short seqnum);
typedef somTP_AWDCase_fieldAsLong *somTD_AWDCase_fieldAsLong;
typedef char*   SOMLINK somTP_AWDCase_fieldAsString(AWDCase *somSelf, Environment *ev,
		string aname,
		unsigned short seqnum,
		AWDString* str);
typedef somTP_AWDCase_fieldAsString *somTD_AWDCase_fieldAsString;
typedef unsigned short   SOMLINK somTP_AWDCase_fieldCount(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_fieldCount *somTD_AWDCase_fieldCount;
typedef char*   SOMLINK somTP_AWDCase_getBeginTime(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_getBeginTime *somTD_AWDCase_getBeginTime;
typedef boolean   SOMLINK somTP_AWDCase_getCreateArray(AWDCase *somSelf, Environment *ev,
		AWD_PAWDCREATELOBARRAY pAwdLobArray);
typedef somTP_AWDCase_getCreateArray *somTD_AWDCase_getCreateArray;
typedef FieldList*   SOMLINK somTP_AWDCase_getFieldList(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_getFieldList *somTD_AWDCase_getFieldList;
typedef char*   SOMLINK somTP_AWDCase_getEndTime(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_getEndTime *somTD_AWDCase_getEndTime;
typedef boolean   SOMLINK somTP_AWDCase_getKeyStrct(AWDCase *somSelf, Environment *ev,
		AWD_PAWDOBJECTKEYSTRCT pKey);
typedef somTP_AWDCase_getKeyStrct *somTD_AWDCase_getKeyStrct;
typedef boolean   SOMLINK somTP_AWDCase_getFieldArray(AWDCase *somSelf, Environment *ev,
		AWD_AWDLOBARRAYSTRCT* pAwdLobArray);
typedef somTP_AWDCase_getFieldArray *somTD_AWDCase_getFieldArray;
typedef AWDBase_STATE   SOMLINK somTP_AWDCase_getState(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_getState *somTD_AWDCase_getState;
typedef boolean   SOMLINK somTP_AWDCase_hasChanged(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_hasChanged *somTD_AWDCase_hasChanged;
typedef boolean   SOMLINK somTP_AWDCase_hasComments(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_hasComments *somTD_AWDCase_hasComments;
typedef char*   SOMLINK somTP_AWDCase_iconName(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_iconName *somTD_AWDCase_iconName;
typedef AWDBaseField*   SOMLINK somTP_AWDCase_indexField(AWDCase *somSelf, Environment *ev,
		unsigned short indexnumber);
typedef somTP_AWDCase_indexField *somTD_AWDCase_indexField;
typedef boolean   SOMLINK somTP_AWDCase_isAutoChildSource(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isAutoChildSource *somTD_AWDCase_isAutoChildSource;
typedef boolean   SOMLINK somTP_AWDCase_isAutoComments(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isAutoComments *somTD_AWDCase_isAutoComments;
typedef boolean   SOMLINK somTP_AWDCase_isAutoCsd(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isAutoCsd *somTD_AWDCase_isAutoCsd;
typedef boolean   SOMLINK somTP_AWDCase_isAutoHistory(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isAutoHistory *somTD_AWDCase_isAutoHistory;
typedef boolean   SOMLINK somTP_AWDCase_isAutoLob(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isAutoLob *somTD_AWDCase_isAutoLob;
typedef boolean   SOMLINK somTP_AWDCase_isAutoSiblingSource(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isAutoSiblingSource *somTD_AWDCase_isAutoSiblingSource;
typedef boolean   SOMLINK somTP_AWDCase_isAutoViewSource(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isAutoViewSource *somTD_AWDCase_isAutoViewSource;
typedef boolean   SOMLINK somTP_AWDCase_isInUse(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isInUse *somTD_AWDCase_isInUse;
typedef boolean   SOMLINK somTP_AWDCase_isSelected(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isSelected *somTD_AWDCase_isSelected;
typedef boolean   SOMLINK somTP_AWDCase_isShowable(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isShowable *somTD_AWDCase_isShowable;
typedef boolean   SOMLINK somTP_AWDCase_isType(AWDCase *somSelf, Environment *ev,
		unsigned long ulType);
typedef somTP_AWDCase_isType *somTD_AWDCase_isType;
typedef boolean   SOMLINK somTP_AWDCase_isUpdateable(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isUpdateable *somTD_AWDCase_isUpdateable;
typedef boolean   SOMLINK somTP_AWDCase_isViewable(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isViewable *somTD_AWDCase_isViewable;
typedef boolean   SOMLINK somTP_AWDCase_isSourceObject(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isSourceObject *somTD_AWDCase_isSourceObject;
typedef boolean   SOMLINK somTP_AWDCase_isFolderObject(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isFolderObject *somTD_AWDCase_isFolderObject;
typedef boolean   SOMLINK somTP_AWDCase_isTransactionObject(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isTransactionObject *somTD_AWDCase_isTransactionObject;
typedef boolean   SOMLINK somTP_AWDCase_isCaseObject(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_isCaseObject *somTD_AWDCase_isCaseObject;
typedef char*   SOMLINK somTP_AWDCase_key(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_key *somTD_AWDCase_key;
typedef boolean   SOMLINK somTP_AWDCase_unlockRegardless(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_unlockRegardless *somTD_AWDCase_unlockRegardless;
typedef char*   SOMLINK somTP_AWDCase_ownerNode(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_ownerNode *somTD_AWDCase_ownerNode;
typedef char*   SOMLINK somTP_AWDCase_recordCode(AWDCase *somSelf, Environment *ev,
		AWDString* str);
typedef somTP_AWDCase_recordCode *somTD_AWDCase_recordCode;
typedef boolean   SOMLINK somTP_AWDCase_removeWorkselect(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_removeWorkselect *somTD_AWDCase_removeWorkselect;
typedef void   SOMLINK somTP_AWDCase_setBeginTime(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_setBeginTime *somTD_AWDCase_setBeginTime;
typedef void   SOMLINK somTP_AWDCase_setBeginTimeFromTimestamp(AWDCase *somSelf, Environment *ev,
		string pszTimestamp);
typedef somTP_AWDCase_setBeginTimeFromTimestamp *somTD_AWDCase_setBeginTimeFromTimestamp;
typedef boolean   SOMLINK somTP_AWDCase_setBusinessArea(AWDCase *somSelf, Environment *ev,
		string pszba);
typedef somTP_AWDCase_setBusinessArea *somTD_AWDCase_setBusinessArea;
typedef void   SOMLINK somTP_AWDCase_setCsdName(AWDCase *somSelf, Environment *ev,
		char* pszCsd);
typedef somTP_AWDCase_setCsdName *somTD_AWDCase_setCsdName;
typedef void   SOMLINK somTP_AWDCase_setEndTime(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_setEndTime *somTD_AWDCase_setEndTime;
typedef void   SOMLINK somTP_AWDCase_setEndTimeFromTimestamp(AWDCase *somSelf, Environment *ev,
		string pszTimestamp);
typedef somTP_AWDCase_setEndTimeFromTimestamp *somTD_AWDCase_setEndTimeFromTimestamp;
typedef void   SOMLINK somTP_AWDCase_setElapsedTime(AWDCase *somSelf, Environment *ev,
		unsigned long ulElapsedTime);
typedef somTP_AWDCase_setElapsedTime *somTD_AWDCase_setElapsedTime;
typedef boolean   SOMLINK somTP_AWDCase_setField(AWDCase *somSelf, Environment *ev,
		AWDBaseField* fld);
typedef somTP_AWDCase_setField *somTD_AWDCase_setField;
typedef boolean   SOMLINK somTP_AWDCase_setFieldFromLong(AWDCase *somSelf, Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		unsigned long ulvalue);
typedef somTP_AWDCase_setFieldFromLong *somTD_AWDCase_setFieldFromLong;
typedef boolean   SOMLINK somTP_AWDCase_setFieldFromString(AWDCase *somSelf, Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		string pszvalue);
typedef somTP_AWDCase_setFieldFromString *somTD_AWDCase_setFieldFromString;
typedef boolean   SOMLINK somTP_AWDCase_setIndexField(AWDCase *somSelf, Environment *ev,
		unsigned short usindex,
		AWDBaseField* fld);
typedef somTP_AWDCase_setIndexField *somTD_AWDCase_setIndexField;
typedef boolean   SOMLINK somTP_AWDCase_setIndexFieldFromString(AWDCase *somSelf, Environment *ev,
		unsigned short usindex,
		string pszField);
typedef somTP_AWDCase_setIndexFieldFromString *somTD_AWDCase_setIndexFieldFromString;
typedef void   SOMLINK somTP_AWDCase_setInUse(AWDCase *somSelf, Environment *ev,
		boolean fUse);
typedef somTP_AWDCase_setInUse *somTD_AWDCase_setInUse;
typedef boolean   SOMLINK somTP_AWDCase_setILockedFlag(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_setILockedFlag *somTD_AWDCase_setILockedFlag;
typedef boolean   SOMLINK somTP_AWDCase_startService(AWDCase *somSelf, Environment *ev,
		string pszServiceClass);
typedef somTP_AWDCase_startService *somTD_AWDCase_startService;
typedef boolean   SOMLINK somTP_AWDCase_startServiceByIndex(AWDCase *somSelf, Environment *ev,
		unsigned long ulCategory);
typedef somTP_AWDCase_startServiceByIndex *somTD_AWDCase_startServiceByIndex;
typedef boolean   SOMLINK somTP_AWDCase_stopCsd(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_stopCsd *somTD_AWDCase_stopCsd;
typedef boolean   SOMLINK somTP_AWDCase_stopHistory(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_stopHistory *somTD_AWDCase_stopHistory;
typedef boolean   SOMLINK somTP_AWDCase_stopComments(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_stopComments *somTD_AWDCase_stopComments;
typedef boolean   SOMLINK somTP_AWDCase_stopService(AWDCase *somSelf, Environment *ev,
		string pszServiceClass);
typedef somTP_AWDCase_stopService *somTD_AWDCase_stopService;
typedef unsigned long   SOMLINK somTP_AWDCase_type(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_type *somTD_AWDCase_type;
typedef boolean   SOMLINK somTP_AWDCase_updateFromArray(AWDCase *somSelf, Environment *ev,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDCase_updateFromArray *somTD_AWDCase_updateFromArray;
typedef void   SOMLINK somTP_AWDCase_updateFromKey(AWDCase *somSelf, Environment *ev,
		AWDEntityKey* pKey);
typedef somTP_AWDCase_updateFromKey *somTD_AWDCase_updateFromKey;
typedef boolean   SOMLINK somTP_AWDCase_validate(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_validate *somTD_AWDCase_validate;
typedef void   SOMLINK somTP_AWDCase_withEntityKey(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey);
typedef somTP_AWDCase_withEntityKey *somTD_AWDCase_withEntityKey;
typedef void   SOMLINK somTP_AWDCase_withKey(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct);
typedef somTP_AWDCase_withKey *somTD_AWDCase_withKey;
typedef void   SOMLINK somTP_AWDCase_withStructure(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj);
typedef somTP_AWDCase_withStructure *somTD_AWDCase_withStructure;
typedef void   SOMLINK somTP_AWDCase_withArray(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDCase_withArray *somTD_AWDCase_withArray;
typedef void   SOMLINK somTP_AWDCase_withStructureandArray(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray);
typedef somTP_AWDCase_withStructureandArray *somTD_AWDCase_withStructureandArray;
typedef void   SOMLINK somTP_AWDCase_withPersist(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDCase_withPersist *somTD_AWDCase_withPersist;
typedef void   SOMLINK somTP_AWDCase_withObject(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDBase* obj);
typedef somTP_AWDCase_withObject *somTD_AWDCase_withObject;
typedef void   SOMLINK somTP_AWDCase_withHandle(AWDCase *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject);
typedef somTP_AWDCase_withHandle *somTD_AWDCase_withHandle;
typedef AWDBase*   SOMLINK somTP_AWDCase_next(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_next *somTD_AWDCase_next;
typedef AWDBase*   SOMLINK somTP_AWDCase_previous(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_previous *somTD_AWDCase_previous;
typedef AWDBase*   SOMLINK somTP_AWDCase_child(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_child *somTD_AWDCase_child;
typedef AWDBase*   SOMLINK somTP_AWDCase_parent(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_parent *somTD_AWDCase_parent;
typedef AWDRelationship*   SOMLINK somTP_AWDCase_relationship(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_relationship *somTD_AWDCase_relationship;
typedef void   SOMLINK somTP_AWDCase_setNext(AWDCase *somSelf, Environment *ev,
		AWDBase* next);
typedef somTP_AWDCase_setNext *somTD_AWDCase_setNext;
typedef void   SOMLINK somTP_AWDCase_setPrevious(AWDCase *somSelf, Environment *ev,
		AWDBase* previous);
typedef somTP_AWDCase_setPrevious *somTD_AWDCase_setPrevious;
typedef void   SOMLINK somTP_AWDCase_setChild(AWDCase *somSelf, Environment *ev,
		AWDBase* child);
typedef somTP_AWDCase_setChild *somTD_AWDCase_setChild;
typedef void   SOMLINK somTP_AWDCase_setParent(AWDCase *somSelf, Environment *ev,
		AWDBase* parent);
typedef somTP_AWDCase_setParent *somTD_AWDCase_setParent;
typedef void*   SOMLINK somTP_AWDCase_usageToken(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_usageToken *somTD_AWDCase_usageToken;
typedef void   SOMLINK somTP_AWDCase_setUsageToken(AWDCase *somSelf, Environment *ev,
		void* pv);
typedef somTP_AWDCase_setUsageToken *somTD_AWDCase_setUsageToken;
typedef unsigned long   SOMLINK somTP_AWDCase_getTag(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_getTag *somTD_AWDCase_getTag;
typedef void   SOMLINK somTP_AWDCase_setTag(AWDCase *somSelf, Environment *ev,
		unsigned long ulTag);
typedef somTP_AWDCase_setTag *somTD_AWDCase_setTag;
typedef boolean   SOMLINK somTP_AWDCase_createRelationship(AWDCase *somSelf, Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation);
typedef somTP_AWDCase_createRelationship *somTD_AWDCase_createRelationship;
typedef boolean   SOMLINK somTP_AWDCase_createRelationshipWithNotify(AWDCase *somSelf, Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation);
typedef somTP_AWDCase_createRelationshipWithNotify *somTD_AWDCase_createRelationshipWithNotify;
typedef boolean   SOMLINK somTP_AWDCase_makeChild(AWDCase *somSelf, Environment *ev,
		AWDBase* pChild);
typedef somTP_AWDCase_makeChild *somTD_AWDCase_makeChild;
typedef boolean   SOMLINK somTP_AWDCase_makeParent(AWDCase *somSelf, Environment *ev,
		AWDBase* pParent);
typedef somTP_AWDCase_makeParent *somTD_AWDCase_makeParent;
typedef somf_MLinkable*   SOMLINK somTP_AWDCase_somfMLinkableInit(AWDCase *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_AWDCase_somfMLinkableInit *somTD_AWDCase_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_AWDCase_somfGetNext(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_somfGetNext *somTD_AWDCase_somfGetNext;
typedef void   SOMLINK somTP_AWDCase_somfSetNext(AWDCase *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDCase_somfSetNext *somTD_AWDCase_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_AWDCase_somfGetPrevious(AWDCase *somSelf, Environment *ev);
typedef somTP_AWDCase_somfGetPrevious *somTD_AWDCase_somfGetPrevious;
typedef void   SOMLINK somTP_AWDCase_somfSetPrevious(AWDCase *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDCase_somfSetPrevious *somTD_AWDCase_somfSetPrevious;
typedef void   SOMLINK somTP_AWDCase_somInit(AWDCase *somSelf);
typedef somTP_AWDCase_somInit *somTD_AWDCase_somInit;
typedef void   SOMLINK somTP_AWDCase_somDefaultCopyInit(AWDCase *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDCase_somDefaultCopyInit *somTD_AWDCase_somDefaultCopyInit;
typedef AWDCase*   SOMLINK somTP_AWDCase_somDefaultAssign(AWDCase *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDCase_somDefaultAssign *somTD_AWDCase_somDefaultAssign;
typedef void   SOMLINK somTP_AWDCase_somDefaultConstCopyInit(AWDCase *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDCase_somDefaultConstCopyInit *somTD_AWDCase_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDCase_somDefaultVCopyInit(AWDCase *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDCase_somDefaultVCopyInit *somTD_AWDCase_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDCase_somDefaultConstVCopyInit(AWDCase *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDCase_somDefaultConstVCopyInit *somTD_AWDCase_somDefaultConstVCopyInit;
typedef AWDCase*   SOMLINK somTP_AWDCase_somDefaultConstAssign(AWDCase *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDCase_somDefaultConstAssign *somTD_AWDCase_somDefaultConstAssign;
typedef AWDCase*   SOMLINK somTP_AWDCase_somDefaultVAssign(AWDCase *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDCase_somDefaultVAssign *somTD_AWDCase_somDefaultVAssign;
typedef AWDCase*   SOMLINK somTP_AWDCase_somDefaultConstVAssign(AWDCase *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDCase_somDefaultConstVAssign *somTD_AWDCase_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDCase_somFree(AWDCase *somSelf);
typedef somTP_AWDCase_somFree *somTD_AWDCase_somFree;
typedef void   SOMLINK somTP_AWDCase_somUninit(AWDCase *somSelf);
typedef somTP_AWDCase_somUninit *somTD_AWDCase_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDCase_somGetClass(AWDCase *somSelf);
typedef somTP_AWDCase_somGetClass *somTD_AWDCase_somGetClass;
typedef string   SOMLINK somTP_AWDCase_somGetClassName(AWDCase *somSelf);
typedef somTP_AWDCase_somGetClassName *somTD_AWDCase_somGetClassName;
typedef long   SOMLINK somTP_AWDCase_somGetSize(AWDCase *somSelf);
typedef somTP_AWDCase_somGetSize *somTD_AWDCase_somGetSize;
typedef boolean   SOMLINK somTP_AWDCase_somIsA(AWDCase *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDCase_somIsA *somTD_AWDCase_somIsA;
typedef boolean   SOMLINK somTP_AWDCase_somIsInstanceOf(AWDCase *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDCase_somIsInstanceOf *somTD_AWDCase_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDCase_somRespondsTo(AWDCase *somSelf,
		somId mId);
typedef somTP_AWDCase_somRespondsTo *somTD_AWDCase_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDCase_somDispatch(AWDCase *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDCase_somDispatch *somTD_AWDCase_somDispatch;
typedef boolean   SOMLINK somTP_AWDCase_somClassDispatch(AWDCase *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDCase_somClassDispatch *somTD_AWDCase_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDCase_somCastObj(AWDCase *somSelf,
		SOMClass* cls);
typedef somTP_AWDCase_somCastObj *somTD_AWDCase_somCastObj;
typedef boolean   SOMLINK somTP_AWDCase_somResetObj(AWDCase *somSelf);
typedef somTP_AWDCase_somResetObj *somTD_AWDCase_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDCase_somPrintSelf(AWDCase *somSelf);
typedef somTP_AWDCase_somPrintSelf *somTD_AWDCase_somPrintSelf;
typedef void   SOMLINK somTP_AWDCase_somDumpSelf(AWDCase *somSelf,
		long level);
typedef somTP_AWDCase_somDumpSelf *somTD_AWDCase_somDumpSelf;
typedef void   SOMLINK somTP_AWDCase_somDumpSelfInt(AWDCase *somSelf,
		long level);
typedef somTP_AWDCase_somDumpSelfInt *somTD_AWDCase_somDumpSelfInt;
}

#endif /* AWDCase_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDCase
 */
class AWDCase : public AWDWork
{
public:

// AWDCase::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDCase) AWDCaseNewClass(AWDCase_MajorVersion,AWDCase_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDCase,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDCase));
}

// AWDCase::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDCase()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDCaseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDCase(AWDCase* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDCaseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDCase(const AWDCase* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDCaseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDCase(Environment *ev,AWDEntityKey* pKey) 
{
   AWDCase_withEntityKey(ev,0,pKey);
}

AWDCase(Environment *ev,AWD_PAWDOBJECTKEYSTRCT pKeyStrct) 
{
   AWDCase_withKey(ev,0,pKeyStrct);
}

AWDCase(Environment *ev,AWD_PAWDOBJECTSTRCT pAwdObj) 
{
   AWDCase_withStructure(ev,0,pAwdObj);
}

AWDCase(Environment *ev,AWD_PAWDLOBARRAYSTRCT pAwdLobArray) 
{
   AWDCase_withArray(ev,0,pAwdLobArray);
}

AWDCase(Environment *ev,AWD_PAWDOBJECTSTRCT pAwdObj,AWD_PAWDLOBARRAYSTRCT pAwdLobArray) 
{
   AWDCase_withStructureandArray(ev,0,pAwdObj,pAwdLobArray);
}

AWDCase(Environment *ev,AWDPersist* pPersist) 
{
   AWDCase_withPersist(ev,0,pPersist);
}

AWDCase(Environment *ev,AWDCase* obj) 
{
   AWDCase_withObject(ev,0,obj);
}

AWDCase(Environment *ev,unsigned long hObject) 
{
   AWDCase_withHandle(ev,0,hObject);
}


/* initializer method: AWDCase_withEntityKey */
void   AWDCase_withEntityKey(Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey)
{
   SOM_ResolveD(this,AWDCase,AWDCase,AWDCase_withEntityKey)
	(this, ev,ctrl,pKey);
}


/* initializer method: AWDCase_withKey */
void   AWDCase_withKey(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct)
{
   SOM_ResolveD(this,AWDCase,AWDCase,AWDCase_withKey)
	(this, ev,ctrl,pKeyStrct);
}


/* initializer method: AWDCase_withStructure */
void   AWDCase_withStructure(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj)
{
   SOM_ResolveD(this,AWDCase,AWDCase,AWDCase_withStructure)
	(this, ev,ctrl,pAwdObj);
}


/* initializer method: AWDCase_withArray */
void   AWDCase_withArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDCase,AWDCase,AWDCase_withArray)
	(this, ev,ctrl,pAwdLobArray);
}


/* initializer method: AWDCase_withStructureandArray */
void   AWDCase_withStructureandArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDCase,AWDCase,AWDCase_withStructureandArray)
	(this, ev,ctrl,pAwdObj,pAwdLobArray);
}


/* initializer method: AWDCase_withPersist */
void   AWDCase_withPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDCase,AWDCase,AWDCase_withPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: AWDCase_withObject */
void   AWDCase_withObject(Environment *ev,
		somInitCtrl* ctrl,
		AWDCase* obj)
{
   SOM_ResolveD(this,AWDCase,AWDCase,AWDCase_withObject)
	(this, ev,ctrl,obj);
}


/* initializer method: AWDCase_withHandle */
void   AWDCase_withHandle(Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject)
{
   SOM_ResolveD(this,AWDCase,AWDCase,AWDCase_withHandle)
	(this, ev,ctrl,hObject);
}


/*
 * Reintroduce inherited methods
 */

/* method: activate */
boolean   activate(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,activate)
	(this, ev);
}


/* method: amount */
char*   amount(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,amount)
	(this, ev,str);
}


/* method: amountType */
char*   amountType(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,amountType)
	(this, ev,str);
}


/* method: blankQueueIfKeyFieldsHaveChanged */
boolean   blankQueueIfKeyFieldsHaveChanged(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,blankQueueIfKeyFieldsHaveChanged)
	(this, ev);
}


/* method: changeQueue */
boolean   changeQueue(Environment *ev,
		string pszNewQueue)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,changeQueue)
	(this, ev,pszNewQueue);
}


/* method: displayChangeQueue */
boolean   displayChangeQueue(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,displayChangeQueue)
	(this, ev);
}


/* method: displayClone */
boolean   displayClone(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,displayClone)
	(this, ev);
}


/* method: displayQuality */
boolean   displayQuality(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,displayQuality)
	(this, ev);
}


/* method: displaySuspend */
boolean   displaySuspend(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,displaySuspend)
	(this, ev);
}


/* method: displayTaskManager */
boolean   displayTaskManager(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,displayTaskManager)
	(this, ev);
}


/* method: fail */
boolean   fail(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,fail)
	(this, ev);
}


/* method: isAutoQuality */
boolean   isAutoQuality(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,isAutoQuality)
	(this, ev);
}


/* method: isAutoSuspend */
boolean   isAutoSuspend(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,isAutoSuspend)
	(this, ev);
}


/* method: isSuspended */
boolean   isSuspended(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,isSuspended)
	(this, ev);
}


/* method: pass */
boolean   pass(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,pass)
	(this, ev);
}


/* method: process */
boolean   process(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,process)
	(this, ev);
}


/* method: priority */
unsigned short   priority(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,priority)
	(this, ev);
}


/* method: priorityIncrease */
unsigned short   priorityIncrease(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,priorityIncrease)
	(this, ev);
}


/* method: queue */
char*   queue(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,queue)
	(this, ev,str);
}


/* method: setAmount */
boolean   setAmount(Environment *ev,
		unsigned long ulAmount)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,setAmount)
	(this, ev,ulAmount);
}


/* method: setPriorityIncrease */
boolean   setPriorityIncrease(Environment *ev,
		unsigned short usPriority)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,setPriorityIncrease)
	(this, ev,usPriority);
}


/* method: setQueue */
boolean   setQueue(Environment *ev,
		string pszQueue)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,setQueue)
	(this, ev,pszQueue);
}


/* method: setStatus */
boolean   setStatus(Environment *ev,
		string pszStatus)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,setStatus)
	(this, ev,pszStatus);
}


/* method: setVIFlag */
boolean   setVIFlag(Environment *ev,
		boolean fVI)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,setVIFlag)
	(this, ev,fVI);
}


/* method: setWorkType */
boolean   setWorkType(Environment *ev,
		string pszType)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,setWorkType)
	(this, ev,pszType);
}


/* method: startExternalSystem */
boolean   startExternalSystem(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,startExternalSystem)
	(this, ev);
}


/* method: status */
char*   status(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,status)
	(this, ev,str);
}


/* method: stopChangeQueue */
boolean   stopChangeQueue(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,stopChangeQueue)
	(this, ev);
}


/* method: stopClone */
boolean   stopClone(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,stopClone)
	(this, ev);
}


/* method: stopExternalSystem */
boolean   stopExternalSystem(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,stopExternalSystem)
	(this, ev);
}


/* method: stopQuality */
boolean   stopQuality(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,stopQuality)
	(this, ev);
}


/* method: stopSuspend */
boolean   stopSuspend(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,stopSuspend)
	(this, ev);
}


/* method: stopTaskManager */
boolean   stopTaskManager(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,stopTaskManager)
	(this, ev);
}


/* method: suspend */
boolean   suspend(Environment *ev,
		string activateDate,
		string activateStatus,
		string suspendCode)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,suspend)
	(this, ev,activateDate,activateStatus,suspendCode);
}


/* method: unsuspend */
boolean   unsuspend(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,unsuspend)
	(this, ev);
}


/* method: viFlag */
boolean   viFlag(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,viFlag)
	(this, ev);
}


/* method: workType */
char*   workType(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,workType)
	(this, ev,str);
}


/* initializer method: AWDWork_withEntityKey */
void   AWDWork_withEntityKey(Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey)
{
   SOM_ResolveD(this,AWDCase,AWDWork,AWDWork_withEntityKey)
	(this, ev,ctrl,pKey);
}


/* initializer method: AWDWork_withKey */
void   AWDWork_withKey(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct)
{
   SOM_ResolveD(this,AWDCase,AWDWork,AWDWork_withKey)
	(this, ev,ctrl,pKeyStrct);
}


/* initializer method: AWDWork_withStructure */
void   AWDWork_withStructure(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj)
{
   SOM_ResolveD(this,AWDCase,AWDWork,AWDWork_withStructure)
	(this, ev,ctrl,pAwdObj);
}


/* initializer method: AWDWork_withArray */
void   AWDWork_withArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDCase,AWDWork,AWDWork_withArray)
	(this, ev,ctrl,pAwdLobArray);
}


/* initializer method: AWDWork_withStructureandArray */
void   AWDWork_withStructureandArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDCase,AWDWork,AWDWork_withStructureandArray)
	(this, ev,ctrl,pAwdObj,pAwdLobArray);
}


/* initializer method: AWDWork_withPersist */
void   AWDWork_withPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDCase,AWDWork,AWDWork_withPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: AWDWork_withObject */
void   AWDWork_withObject(Environment *ev,
		somInitCtrl* ctrl,
		AWDWork* obj)
{
   SOM_ResolveD(this,AWDCase,AWDWork,AWDWork_withObject)
	(this, ev,ctrl,obj);
}


/* initializer method: AWDWork_withHandle */
void   AWDWork_withHandle(Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject)
{
   SOM_ResolveD(this,AWDCase,AWDWork,AWDWork_withHandle)
	(this, ev,ctrl,hObject);
}


/* method: functionComplete */
boolean   functionComplete(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,functionComplete)
	(this, ev);
}


/* method: setDefaultNextStatus */
boolean   setDefaultNextStatus(Environment *ev,
		unsigned long lobAction)
{
   return SOM_ResolveD(this,AWDCase,AWDWork,setDefaultNextStatus)
	(this, ev,lobAction);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDCase,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDCase,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: copyFrom */
boolean   copyFrom(Environment *ev,
		AWDBase* awdObj)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,copyFrom)
	(this, ev,awdObj);
}


/* method: create */
void   create(Environment *ev,
		AWDBase_CREATE_MODE mode,
		unsigned long ulBatch)
{
   SOM_ResolveD(this,AWDCase,AWDBase,create)
	(this, ev,mode,ulBatch);
}


/* method: getStructure */
boolean   getStructure(Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,getStructure)
	(this, ev,pAwdObjStrct);
}


/* method: iconText */
char*   iconText(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,iconText)
	(this, ev,str);
}


/* method: initialize */
void   initialize(Environment *ev)
{
   SOM_ResolveD(this,AWDCase,AWDBase,initialize)
	(this, ev);
}


/* method: isFieldValid */
boolean   isFieldValid(Environment *ev,
		string pszField)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isFieldValid)
	(this, ev,pszField);
}


/* method: isLocked */
boolean   isLocked(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isLocked)
	(this, ev);
}


/* method: lock */
AWDBase_LOCKRESULT   lock(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,lock)
	(this, ev);
}


/* method: lockedBy */
char*   lockedBy(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,lockedBy)
	(this, ev,str);
}


/* method: retrieve */
boolean   retrieve(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,retrieve)
	(this, ev);
}


/* method: retrieveSecondaryFields */
boolean   retrieveSecondaryFields(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,retrieveSecondaryFields)
	(this, ev);
}


/* method: update */
boolean   update(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,update)
	(this, ev);
}


/* method: updateFromStructure */
boolean   updateFromStructure(Environment *ev,
		AWD_PAWDOBJECTSTRCT pAwdObjStrct)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,updateFromStructure)
	(this, ev,pAwdObjStrct);
}


/* method: unlock */
boolean   unlock(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,unlock)
	(this, ev);
}


/* method: store */
void   store(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDCase,AWDCommon,store)
	(this, ev,pPersist);
}


/* method: restore */
void   restore(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDCase,AWDCommon,restore)
	(this, ev,pPersist);
}


/* method: csdName */
char*   csdName(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,csdName)
	(this, ev,str);
}


/* method: iOwn */
boolean   iOwn(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,iOwn)
	(this, ev);
}


/* method: iLocked */
boolean   iLocked(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,iLocked)
	(this, ev);
}


/* method: addComments */
boolean   addComments(Environment *ev,
		char* pCommentBuffer,
		AWDBase_COMMENTS dType)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,addComments)
	(this, ev,pCommentBuffer,dType);
}


/* method: autoFlags */
unsigned long   autoFlags(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,autoFlags)
	(this, ev);
}


/* method: autoFlagFocus */
unsigned short   autoFlagFocus(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,autoFlagFocus)
	(this, ev);
}


/* method: businessArea */
char*   businessArea(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,businessArea)
	(this, ev,str);
}


/* method: canContain */
boolean   canContain(Environment *ev,
		AWDBase* awdObj)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,canContain)
	(this, ev,awdObj);
}


/* method: clone */
void   clone(Environment *ev,
		unsigned short usCount,
		boolean fCreateRelationship,
		boolean fLock,
		AWDBase** ppClonedObjs,
		string shareMemName)
{
   SOM_ResolveD(this,AWDCase,AWDBase,clone)
	(this, ev,usCount,fCreateRelationship,fLock,ppClonedObjs,shareMemName);
}


/* method: createNode */
char*   createNode(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,createNode)
	(this, ev,str);
}


/* method: creationDateTime */
char*   creationDateTime(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,creationDateTime)
	(this, ev,str);
}


/* method: displayComments */
boolean   displayComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,displayComments)
	(this, ev);
}


/* method: displayCsd */
boolean   displayCsd(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,displayCsd)
	(this, ev);
}


/* method: displayHistory */
boolean   displayHistory(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,displayHistory)
	(this, ev);
}


/* method: field */
AWDBaseField*   field(Environment *ev,
		string aname,
		unsigned short seqnum)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,field)
	(this, ev,aname,seqnum);
}


/* method: fieldAsLong */
unsigned long   fieldAsLong(Environment *ev,
		string aname,
		unsigned short seqnum)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,fieldAsLong)
	(this, ev,aname,seqnum);
}


/* method: fieldAsString */
char*   fieldAsString(Environment *ev,
		string aname,
		unsigned short seqnum,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,fieldAsString)
	(this, ev,aname,seqnum,str);
}


/* method: fieldCount */
unsigned short   fieldCount(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,fieldCount)
	(this, ev);
}


/* method: getBeginTime */
char*   getBeginTime(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,getBeginTime)
	(this, ev);
}


/* method: getCreateArray */
boolean   getCreateArray(Environment *ev,
		AWD_PAWDCREATELOBARRAY pAwdLobArray)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,getCreateArray)
	(this, ev,pAwdLobArray);
}


/* method: getFieldList */
FieldList*   getFieldList(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,getFieldList)
	(this, ev);
}


/* method: getEndTime */
char*   getEndTime(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,getEndTime)
	(this, ev);
}


/* method: getKeyStrct */
boolean   getKeyStrct(Environment *ev,
		AWD_PAWDOBJECTKEYSTRCT pKey)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,getKeyStrct)
	(this, ev,pKey);
}


/* method: getFieldArray */
boolean   getFieldArray(Environment *ev,
		AWD_AWDLOBARRAYSTRCT* pAwdLobArray)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,getFieldArray)
	(this, ev,pAwdLobArray);
}


/* method: getState */
AWDBase_STATE   getState(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,getState)
	(this, ev);
}


/* method: hasChanged */
boolean   hasChanged(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,hasChanged)
	(this, ev);
}


/* method: hasComments */
boolean   hasComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,hasComments)
	(this, ev);
}


/* method: iconName */
char*   iconName(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,iconName)
	(this, ev,str);
}


/* method: indexField */
AWDBaseField*   indexField(Environment *ev,
		unsigned short indexnumber)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,indexField)
	(this, ev,indexnumber);
}


/* method: isAutoChildSource */
boolean   isAutoChildSource(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isAutoChildSource)
	(this, ev);
}


/* method: isAutoComments */
boolean   isAutoComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isAutoComments)
	(this, ev);
}


/* method: isAutoCsd */
boolean   isAutoCsd(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isAutoCsd)
	(this, ev);
}


/* method: isAutoHistory */
boolean   isAutoHistory(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isAutoHistory)
	(this, ev);
}


/* method: isAutoLob */
boolean   isAutoLob(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isAutoLob)
	(this, ev);
}


/* method: isAutoSiblingSource */
boolean   isAutoSiblingSource(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isAutoSiblingSource)
	(this, ev);
}


/* method: isAutoViewSource */
boolean   isAutoViewSource(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isAutoViewSource)
	(this, ev);
}


/* method: isInUse */
boolean   isInUse(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isInUse)
	(this, ev);
}


/* method: isSelected */
boolean   isSelected(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isSelected)
	(this, ev);
}


/* method: isShowable */
boolean   isShowable(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isShowable)
	(this, ev);
}


/* method: isType */
boolean   isType(Environment *ev,
		unsigned long ulType)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isType)
	(this, ev,ulType);
}


/* method: isUpdateable */
boolean   isUpdateable(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isUpdateable)
	(this, ev);
}


/* method: isViewable */
boolean   isViewable(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isViewable)
	(this, ev);
}


/* method: isSourceObject */
boolean   isSourceObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isSourceObject)
	(this, ev);
}


/* method: isFolderObject */
boolean   isFolderObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isFolderObject)
	(this, ev);
}


/* method: isTransactionObject */
boolean   isTransactionObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isTransactionObject)
	(this, ev);
}


/* method: isCaseObject */
boolean   isCaseObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,isCaseObject)
	(this, ev);
}


/* method: key */
char*   key(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,key)
	(this, ev,str);
}


/* method: unlockRegardless */
boolean   unlockRegardless(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,unlockRegardless)
	(this, ev);
}


/* method: ownerNode */
char*   ownerNode(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,ownerNode)
	(this, ev,str);
}


/* method: recordCode */
char*   recordCode(Environment *ev,
		AWDString* str)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,recordCode)
	(this, ev,str);
}


/* method: removeWorkselect */
boolean   removeWorkselect(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,removeWorkselect)
	(this, ev);
}


/* method: setBeginTime */
void   setBeginTime(Environment *ev)
{
   SOM_ResolveD(this,AWDCase,AWDBase,setBeginTime)
	(this, ev);
}


/* method: setBeginTimeFromTimestamp */
void   setBeginTimeFromTimestamp(Environment *ev,
		string pszTimestamp)
{
   SOM_ResolveD(this,AWDCase,AWDBase,setBeginTimeFromTimestamp)
	(this, ev,pszTimestamp);
}


/* method: setBusinessArea */
boolean   setBusinessArea(Environment *ev,
		string pszba)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,setBusinessArea)
	(this, ev,pszba);
}


/* method: setCsdName */
void   setCsdName(Environment *ev,
		char* pszCsd)
{
   SOM_ResolveD(this,AWDCase,AWDBase,setCsdName)
	(this, ev,pszCsd);
}


/* method: setEndTime */
void   setEndTime(Environment *ev)
{
   SOM_ResolveD(this,AWDCase,AWDBase,setEndTime)
	(this, ev);
}


/* method: setEndTimeFromTimestamp */
void   setEndTimeFromTimestamp(Environment *ev,
		string pszTimestamp)
{
   SOM_ResolveD(this,AWDCase,AWDBase,setEndTimeFromTimestamp)
	(this, ev,pszTimestamp);
}


/* method: setElapsedTime */
void   setElapsedTime(Environment *ev,
		unsigned long ulElapsedTime)
{
   SOM_ResolveD(this,AWDCase,AWDBase,setElapsedTime)
	(this, ev,ulElapsedTime);
}


/* method: setField */
boolean   setField(Environment *ev,
		AWDBaseField* fld)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,setField)
	(this, ev,fld);
}


/* method: setFieldFromLong */
boolean   setFieldFromLong(Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		unsigned long ulvalue)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,setFieldFromLong)
	(this, ev,pszdataname,seqnum,ulvalue);
}


/* method: setFieldFromString */
boolean   setFieldFromString(Environment *ev,
		string pszdataname,
		unsigned short seqnum,
		string pszvalue)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,setFieldFromString)
	(this, ev,pszdataname,seqnum,pszvalue);
}


/* method: setIndexField */
boolean   setIndexField(Environment *ev,
		unsigned short usindex,
		AWDBaseField* fld)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,setIndexField)
	(this, ev,usindex,fld);
}


/* method: setIndexFieldFromString */
boolean   setIndexFieldFromString(Environment *ev,
		unsigned short usindex,
		string pszField)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,setIndexFieldFromString)
	(this, ev,usindex,pszField);
}


/* method: setInUse */
void   setInUse(Environment *ev,
		boolean fUse)
{
   SOM_ResolveD(this,AWDCase,AWDBase,setInUse)
	(this, ev,fUse);
}


/* method: setILockedFlag */
boolean   setILockedFlag(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,setILockedFlag)
	(this, ev);
}


/* method: startService */
boolean   startService(Environment *ev,
		string pszServiceClass)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,startService)
	(this, ev,pszServiceClass);
}


/* method: startServiceByIndex */
boolean   startServiceByIndex(Environment *ev,
		unsigned long ulCategory)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,startServiceByIndex)
	(this, ev,ulCategory);
}


/* method: stopCsd */
boolean   stopCsd(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,stopCsd)
	(this, ev);
}


/* method: stopHistory */
boolean   stopHistory(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,stopHistory)
	(this, ev);
}


/* method: stopComments */
boolean   stopComments(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,stopComments)
	(this, ev);
}


/* method: stopService */
boolean   stopService(Environment *ev,
		string pszServiceClass)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,stopService)
	(this, ev,pszServiceClass);
}


/* method: type */
unsigned long   type(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,type)
	(this, ev);
}


/* method: updateFromArray */
boolean   updateFromArray(Environment *ev,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,updateFromArray)
	(this, ev,pAwdLobArray);
}


/* method: updateFromKey */
void   updateFromKey(Environment *ev,
		AWDEntityKey* pKey)
{
   SOM_ResolveD(this,AWDCase,AWDBase,updateFromKey)
	(this, ev,pKey);
}


/* method: validate */
boolean   validate(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,validate)
	(this, ev);
}


/* initializer method: withEntityKey */
void   withEntityKey(Environment *ev,
		somInitCtrl* ctrl,
		AWDEntityKey* pKey)
{
   SOM_ResolveD(this,AWDCase,AWDBase,withEntityKey)
	(this, ev,ctrl,pKey);
}


/* initializer method: withKey */
void   withKey(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTKEYSTRCT pKeyStrct)
{
   SOM_ResolveD(this,AWDCase,AWDBase,withKey)
	(this, ev,ctrl,pKeyStrct);
}


/* initializer method: withStructure */
void   withStructure(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj)
{
   SOM_ResolveD(this,AWDCase,AWDBase,withStructure)
	(this, ev,ctrl,pAwdObj);
}


/* initializer method: withArray */
void   withArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDCase,AWDBase,withArray)
	(this, ev,ctrl,pAwdLobArray);
}


/* initializer method: withStructureandArray */
void   withStructureandArray(Environment *ev,
		somInitCtrl* ctrl,
		AWD_PAWDOBJECTSTRCT pAwdObj,
		AWD_PAWDLOBARRAYSTRCT pAwdLobArray)
{
   SOM_ResolveD(this,AWDCase,AWDBase,withStructureandArray)
	(this, ev,ctrl,pAwdObj,pAwdLobArray);
}


/* initializer method: withPersist */
void   withPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDCase,AWDBase,withPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: withObject */
void   withObject(Environment *ev,
		somInitCtrl* ctrl,
		AWDBase* obj)
{
   SOM_ResolveD(this,AWDCase,AWDBase,withObject)
	(this, ev,ctrl,obj);
}


/* initializer method: withHandle */
void   withHandle(Environment *ev,
		somInitCtrl* ctrl,
		unsigned long hObject)
{
   SOM_ResolveD(this,AWDCase,AWDBase,withHandle)
	(this, ev,ctrl,hObject);
}


/* method: next */
AWDBase*   next(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,next)
	(this, ev);
}


/* method: previous */
AWDBase*   previous(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,previous)
	(this, ev);
}


/* method: child */
AWDBase*   child(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,child)
	(this, ev);
}


/* method: parent */
AWDBase*   parent(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,parent)
	(this, ev);
}


/* method: relationship */
AWDRelationship*   relationship(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,relationship)
	(this, ev);
}


/* method: setNext */
void   setNext(Environment *ev,
		AWDBase* next)
{
   SOM_ResolveD(this,AWDCase,AWDBase,setNext)
	(this, ev,next);
}


/* method: setPrevious */
void   setPrevious(Environment *ev,
		AWDBase* previous)
{
   SOM_ResolveD(this,AWDCase,AWDBase,setPrevious)
	(this, ev,previous);
}


/* method: setChild */
void   setChild(Environment *ev,
		AWDBase* child)
{
   SOM_ResolveD(this,AWDCase,AWDBase,setChild)
	(this, ev,child);
}


/* method: setParent */
void   setParent(Environment *ev,
		AWDBase* parent)
{
   SOM_ResolveD(this,AWDCase,AWDBase,setParent)
	(this, ev,parent);
}


/* method: usageToken */
void*   usageToken(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,usageToken)
	(this, ev);
}


/* method: setUsageToken */
void   setUsageToken(Environment *ev,
		void* pv)
{
   SOM_ResolveD(this,AWDCase,AWDBase,setUsageToken)
	(this, ev,pv);
}


/* method: getTag */
unsigned long   getTag(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,getTag)
	(this, ev);
}


/* method: setTag */
void   setTag(Environment *ev,
		unsigned long ulTag)
{
   SOM_ResolveD(this,AWDCase,AWDBase,setTag)
	(this, ev,ulTag);
}


/* method: createRelationship */
boolean   createRelationship(Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,createRelationship)
	(this, ev,pRelationObj,relation);
}


/* method: createRelationshipWithNotify */
boolean   createRelationshipWithNotify(Environment *ev,
		AWDBase* pRelationObj,
		AWDBase_RELATION relation)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,createRelationshipWithNotify)
	(this, ev,pRelationObj,relation);
}


/* method: makeChild */
boolean   makeChild(Environment *ev,
		AWDBase* pChild)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,makeChild)
	(this, ev,pChild);
}


/* method: makeParent */
boolean   makeParent(Environment *ev,
		AWDBase* pParent)
{
   return SOM_ResolveD(this,AWDCase,AWDBase,makeParent)
	(this, ev,pParent);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,AWDCase,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDCase,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,AWDCase,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDCase,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDCase,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDCase,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDCase*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDCase,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDCase,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDCase,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDCase,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDCase*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDCase,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDCase*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDCase,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDCase*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDCase,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDCase,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDCase,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDCase,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDCase,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDCase,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDCase,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDCase,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDCase,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDCase_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDCase,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDCase,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDCase_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDCase,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDCase,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDCase,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDCase,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDCase,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDCase,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDCase,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDCase */



#endif       /* SOM_AWDCase_xh */
