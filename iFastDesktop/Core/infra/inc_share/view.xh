
#ifndef SOM_RECORD_xh
#define SOM_RECORD_xh

class RECORD;

#define RECORD_MajorVersion 0
#define RECORD_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_MLinkable_xh
#include <mlink.xh>
#endif

#ifndef RECORD_API
#define RECORD_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class somf_MLinkable;
class AWDConnection;
class AWDException;

/*
 * End of user-defined types.
 */

/* A procedure to create the RECORD Class */
SOMEXTERN
#if (defined(SOM_Module_view_Source) || defined(RECORD_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_RECORD))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK RECORDNewClass(
		integer4,
		integer4 );

/* The API to the RECORD class object, and the methods it introduces. */
SOMEXTERN struct RECORDClassDataStructure {
	SOMClass *classObject;
	somMToken buffer;
	somMToken setBuffer;
	somMToken none;
}
#if !(defined(SOM_Module_view_Source) || defined(RECORD_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_RECORD))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK RECORDClassData;
#define _RECORD RECORDClassData.classObject

/* The API to parentMtabs for RECORD, and the instance data it introduces. */
SOMEXTERN struct RECORDCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_view_Source) || defined(RECORD_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_RECORD))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK RECORDCClassData;

/*
 * -- Typedefs for RECORD Method Procedures
 */
extern "C" {
typedef void*   SOMLINK somTP_RECORD_buffer(RECORD *somSelf, Environment *ev);
typedef somTP_RECORD_buffer *somTD_RECORD_buffer;
typedef void   SOMLINK somTP_RECORD_setBuffer(RECORD *somSelf, Environment *ev,
		void* pv);
typedef somTP_RECORD_setBuffer *somTD_RECORD_setBuffer;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef somf_MLinkable*   SOMLINK somTP_RECORD_somfMLinkableInit(RECORD *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_RECORD_somfMLinkableInit *somTD_RECORD_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_RECORD_somfGetNext(RECORD *somSelf, Environment *ev);
typedef somTP_RECORD_somfGetNext *somTD_RECORD_somfGetNext;
typedef void   SOMLINK somTP_RECORD_somfSetNext(RECORD *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_RECORD_somfSetNext *somTD_RECORD_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_RECORD_somfGetPrevious(RECORD *somSelf, Environment *ev);
typedef somTP_RECORD_somfGetPrevious *somTD_RECORD_somfGetPrevious;
typedef void   SOMLINK somTP_RECORD_somfSetPrevious(RECORD *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_RECORD_somfSetPrevious *somTD_RECORD_somfSetPrevious;
typedef void   SOMLINK somTP_RECORD_somInit(RECORD *somSelf);
typedef somTP_RECORD_somInit *somTD_RECORD_somInit;
typedef void   SOMLINK somTP_RECORD_somDefaultInit(RECORD *somSelf,
		somInitCtrl* ctrl);
typedef somTP_RECORD_somDefaultInit *somTD_RECORD_somDefaultInit;
typedef void   SOMLINK somTP_RECORD_somDestruct(RECORD *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_RECORD_somDestruct *somTD_RECORD_somDestruct;
typedef void   SOMLINK somTP_RECORD_somDefaultCopyInit(RECORD *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_RECORD_somDefaultCopyInit *somTD_RECORD_somDefaultCopyInit;
typedef RECORD*   SOMLINK somTP_RECORD_somDefaultAssign(RECORD *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_RECORD_somDefaultAssign *somTD_RECORD_somDefaultAssign;
typedef void   SOMLINK somTP_RECORD_somDefaultConstCopyInit(RECORD *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_RECORD_somDefaultConstCopyInit *somTD_RECORD_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_RECORD_somDefaultVCopyInit(RECORD *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_RECORD_somDefaultVCopyInit *somTD_RECORD_somDefaultVCopyInit;
typedef void   SOMLINK somTP_RECORD_somDefaultConstVCopyInit(RECORD *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_RECORD_somDefaultConstVCopyInit *somTD_RECORD_somDefaultConstVCopyInit;
typedef RECORD*   SOMLINK somTP_RECORD_somDefaultConstAssign(RECORD *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_RECORD_somDefaultConstAssign *somTD_RECORD_somDefaultConstAssign;
typedef RECORD*   SOMLINK somTP_RECORD_somDefaultVAssign(RECORD *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_RECORD_somDefaultVAssign *somTD_RECORD_somDefaultVAssign;
typedef RECORD*   SOMLINK somTP_RECORD_somDefaultConstVAssign(RECORD *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_RECORD_somDefaultConstVAssign *somTD_RECORD_somDefaultConstVAssign;
typedef void   SOMLINK somTP_RECORD_somFree(RECORD *somSelf);
typedef somTP_RECORD_somFree *somTD_RECORD_somFree;
typedef void   SOMLINK somTP_RECORD_somUninit(RECORD *somSelf);
typedef somTP_RECORD_somUninit *somTD_RECORD_somUninit;
typedef SOMClass*   SOMLINK somTP_RECORD_somGetClass(RECORD *somSelf);
typedef somTP_RECORD_somGetClass *somTD_RECORD_somGetClass;
typedef string   SOMLINK somTP_RECORD_somGetClassName(RECORD *somSelf);
typedef somTP_RECORD_somGetClassName *somTD_RECORD_somGetClassName;
typedef long   SOMLINK somTP_RECORD_somGetSize(RECORD *somSelf);
typedef somTP_RECORD_somGetSize *somTD_RECORD_somGetSize;
typedef boolean   SOMLINK somTP_RECORD_somIsA(RECORD *somSelf,
		SOMClass* aClassObj);
typedef somTP_RECORD_somIsA *somTD_RECORD_somIsA;
typedef boolean   SOMLINK somTP_RECORD_somIsInstanceOf(RECORD *somSelf,
		SOMClass* aClassObj);
typedef somTP_RECORD_somIsInstanceOf *somTD_RECORD_somIsInstanceOf;
typedef boolean   SOMLINK somTP_RECORD_somRespondsTo(RECORD *somSelf,
		somId mId);
typedef somTP_RECORD_somRespondsTo *somTD_RECORD_somRespondsTo;
typedef boolean   SOMLINK somTP_RECORD_somDispatch(RECORD *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_RECORD_somDispatch *somTD_RECORD_somDispatch;
typedef boolean   SOMLINK somTP_RECORD_somClassDispatch(RECORD *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_RECORD_somClassDispatch *somTD_RECORD_somClassDispatch;
typedef boolean   SOMLINK somTP_RECORD_somCastObj(RECORD *somSelf,
		SOMClass* cls);
typedef somTP_RECORD_somCastObj *somTD_RECORD_somCastObj;
typedef boolean   SOMLINK somTP_RECORD_somResetObj(RECORD *somSelf);
typedef somTP_RECORD_somResetObj *somTD_RECORD_somResetObj;
typedef SOMObject*   SOMLINK somTP_RECORD_somPrintSelf(RECORD *somSelf);
typedef somTP_RECORD_somPrintSelf *somTD_RECORD_somPrintSelf;
typedef void   SOMLINK somTP_RECORD_somDumpSelf(RECORD *somSelf,
		long level);
typedef somTP_RECORD_somDumpSelf *somTD_RECORD_somDumpSelf;
typedef void   SOMLINK somTP_RECORD_somDumpSelfInt(RECORD *somSelf,
		long level);
typedef somTP_RECORD_somDumpSelfInt *somTD_RECORD_somDumpSelfInt;
}

#endif /* RECORD_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for RECORD
 */
class RECORD : public somf_MLinkable
{
public:

// RECORD::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_RECORD) RECORDNewClass(RECORD_MajorVersion,RECORD_MinorVersion);
   return (void*)
      SOM_Resolve(_RECORD,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_RECORD));
}

// RECORD::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

RECORD()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (RECORDCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

RECORD(RECORD* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (RECORDCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

RECORD(const RECORD* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (RECORDCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: buffer */
void*   buffer(Environment *ev)
{
   return SOM_ResolveD(this,RECORD,RECORD,buffer)
	(this, ev);
}


/* method: setBuffer */
void   setBuffer(Environment *ev,
		void* pv)
{
   SOM_ResolveD(this,RECORD,RECORD,setBuffer)
	(this, ev,pv);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,RECORD,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,RECORD,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,RECORD,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,RECORD,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,RECORD,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,RECORD,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,RECORD,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,RECORD,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,RECORD,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
RECORD*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,RECORD,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,RECORD,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,RECORD,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,RECORD,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
RECORD*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,RECORD,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
RECORD*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,RECORD,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
RECORD*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,RECORD,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,RECORD,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,RECORD,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,RECORD,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,RECORD,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,RECORD,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,RECORD,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,RECORD,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,RECORD,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   RECORD_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,RECORD,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,RECORD,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   RECORD_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,RECORD,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,RECORD,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,RECORD,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,RECORD,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,RECORD,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,RECORD,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,RECORD,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* RECORD */



#endif       /* SOM_RECORD_xh */

#ifndef SOM_AWDView_xh
#define SOM_AWDView_xh

class AWDView;

#define AWDView_MajorVersion 0
#define AWDView_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_MLinkable_xh
#include <mlink.xh>
#endif

#ifndef AWDView_API
#define AWDView_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
typedef unsigned long AWDView_view_type;
#define AWDView_MODAL 1UL
#define AWDView_WINDOWMSG 2UL
#define AWDView_CALLBACK 3UL
#define AWDView_MSGQUEUE 4UL
#define AWDView_APPLICATION 5UL
#define AWDView_DYNAMIC 6UL
typedef unsigned long AWDView_index_type;
#define AWDView_FIRST 1UL
#define AWDView_NEXT 2UL
#define AWDView_CURRENT 3UL
#define AWDView_INDEX 4UL
typedef
struct AWDView_rcvdata {
long  ulnumrepeats;
void*  prcvdata;
struct AWDView_rcvdata* pnextdata;
} AWDView_rcvdata;
typedef
struct AWDView_DSTVIEWSTRCT {
char  return_code[7];
char  return_message[78];
} AWDView_DSTVIEWSTRCT;
typedef
struct AWDView_DSTVIEWSTRCT* AWDView_PDSTVIEWSTRCT;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_view_type
    #ifdef view_type
        #undef view_type
        #define SOMTGD_view_type 1
    #else
        #define view_type AWDView_view_type
    #endif /* view_type */
#endif /* SOMTGD_view_type */
#ifndef SOMTGD_index_type
    #ifdef index_type
        #undef index_type
        #define SOMTGD_index_type 1
    #else
        #define index_type AWDView_index_type
    #endif /* index_type */
#endif /* SOMTGD_index_type */
#ifndef SOMTGD_rcvdata
    #ifdef rcvdata
        #undef rcvdata
        #define SOMTGD_rcvdata 1
    #else
        #define rcvdata AWDView_rcvdata
    #endif /* rcvdata */
#endif /* SOMTGD_rcvdata */
#ifndef SOMTGD_DSTVIEWSTRCT
    #ifdef DSTVIEWSTRCT
        #undef DSTVIEWSTRCT
        #define SOMTGD_DSTVIEWSTRCT 1
    #else
        #define DSTVIEWSTRCT AWDView_DSTVIEWSTRCT
    #endif /* DSTVIEWSTRCT */
#endif /* SOMTGD_DSTVIEWSTRCT */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PDSTVIEWSTRCT
    #ifdef PDSTVIEWSTRCT
        #undef PDSTVIEWSTRCT
        #define SOMTGD_PDSTVIEWSTRCT 1
    #else
        #define PDSTVIEWSTRCT AWDView_PDSTVIEWSTRCT
    #endif /* PDSTVIEWSTRCT */
#endif /* SOMTGD_PDSTVIEWSTRCT */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */
#include <tpll.xh>

/* A procedure to create the AWDView Class */
SOMEXTERN
#if (defined(SOM_Module_view_Source) || defined(AWDView_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDView))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDViewNewClass(
		integer4,
		integer4 );

/* The API to the AWDView class object, and the methods it introduces. */
SOMEXTERN struct AWDViewClassDataStructure {
	SOMClass *classObject;
	somMToken start;
	somMToken startData;
	somMToken check;
	somMToken app;
	somMToken setApp;
	somMToken targetApp;
	somMToken setTargetApp;
	somMToken name;
	somMToken setName;
	somMToken size;
	somMToken setSize;
	somMToken sendData;
	somMToken setSendData;
	somMToken mode;
	somMToken setMode;
	somMToken hwndNotify;
	somMToken sethwndNotify;
	somMToken returnMsg;
	somMToken setReturnMsg;
	somMToken pfnCallBack;
	somMToken setpfnCallBack;
	somMToken timeOut;
	somMToken setTimeOut;
	somMToken host;
	somMToken setHost;
	somMToken queue;
	somMToken setMessageQueue;
	somMToken receiveData;
	somMToken setReceiveData;
	somMToken numRepeats;
	somMToken setNumRepeats;
	somMToken fixedLength;
	somMToken setFixedLength;
	somMToken repeatLength;
	somMToken setRepeatLength;
	somMToken currentIndex;
	somMToken setCurrentIndex;
	somMToken lastView;
	somMToken setLastView;
	somMToken getRecord;
	somMToken startString;
	somMToken scanArgString;
	somMToken isComplete;
	somMToken restart;
	somMToken addData;
	somMToken resolveIndex;
	somMToken buffer;
	somMToken errMsg;
	somMToken errCode;
	somMToken setConnection;
	somMToken localConnection;
	somMToken withBuffer;
	somMToken setAutoRestart;
	somMToken isAutoRestart;
	somMToken reset;
	somMToken validateInput;
	somMToken setPersistent;
	somMToken isPersistent;
	somMToken setInProcess;
	somMToken isInProcess;
	somMToken checkForException;
	somMToken setException;
	somMToken setViewMessage;
	somMToken setPrimaryRc;
	somMToken primaryRc;
	somMToken setSecondaryRc;
	somMToken secondaryRc;
	somMToken viewMessage;
}
#if !(defined(SOM_Module_view_Source) || defined(AWDView_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDView))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDViewClassData;
#define _AWDView AWDViewClassData.classObject

/* The API to parentMtabs for AWDView, and the instance data it introduces. */
SOMEXTERN struct AWDViewCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_view_Source) || defined(AWDView_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDView))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDViewCClassData;

/*
 * -- Typedefs for AWDView Method Procedures
 */
extern "C" {
typedef string   SOMLINK somTP_AWDView_app(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_app *somTD_AWDView_app;
typedef void   SOMLINK somTP_AWDView_setApp(AWDView *somSelf, Environment *ev,
		string app);
typedef somTP_AWDView_setApp *somTD_AWDView_setApp;
typedef string   SOMLINK somTP_AWDView_targetApp(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_targetApp *somTD_AWDView_targetApp;
typedef void   SOMLINK somTP_AWDView_setTargetApp(AWDView *somSelf, Environment *ev,
		string target);
typedef somTP_AWDView_setTargetApp *somTD_AWDView_setTargetApp;
typedef string   SOMLINK somTP_AWDView_name(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_name *somTD_AWDView_name;
typedef void   SOMLINK somTP_AWDView_setName(AWDView *somSelf, Environment *ev,
		string aName);
typedef somTP_AWDView_setName *somTD_AWDView_setName;
typedef unsigned long   SOMLINK somTP_AWDView_size(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_size *somTD_AWDView_size;
typedef void   SOMLINK somTP_AWDView_setSize(AWDView *somSelf, Environment *ev,
		unsigned long size);
typedef somTP_AWDView_setSize *somTD_AWDView_setSize;
typedef void*   SOMLINK somTP_AWDView_sendData(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_sendData *somTD_AWDView_sendData;
typedef void   SOMLINK somTP_AWDView_setSendData(AWDView *somSelf, Environment *ev,
		void* data);
typedef somTP_AWDView_setSendData *somTD_AWDView_setSendData;
typedef AWDView_view_type   SOMLINK somTP_AWDView_mode(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_mode *somTD_AWDView_mode;
typedef void   SOMLINK somTP_AWDView_setMode(AWDView *somSelf, Environment *ev,
		AWDView_view_type viewtype);
typedef somTP_AWDView_setMode *somTD_AWDView_setMode;
typedef unsigned long   SOMLINK somTP_AWDView_hwndNotify(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_hwndNotify *somTD_AWDView_hwndNotify;
typedef void   SOMLINK somTP_AWDView_sethwndNotify(AWDView *somSelf, Environment *ev,
		unsigned long hwndNotify);
typedef somTP_AWDView_sethwndNotify *somTD_AWDView_sethwndNotify;
typedef unsigned long   SOMLINK somTP_AWDView_returnMsg(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_returnMsg *somTD_AWDView_returnMsg;
typedef void   SOMLINK somTP_AWDView_setReturnMsg(AWDView *somSelf, Environment *ev,
		unsigned long msg);
typedef somTP_AWDView_setReturnMsg *somTD_AWDView_setReturnMsg;
typedef void*   SOMLINK somTP_AWDView_pfnCallBack(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_pfnCallBack *somTD_AWDView_pfnCallBack;
typedef void   SOMLINK somTP_AWDView_setpfnCallBack(AWDView *somSelf, Environment *ev,
		void* pfnCallback);
typedef somTP_AWDView_setpfnCallBack *somTD_AWDView_setpfnCallBack;
typedef unsigned long   SOMLINK somTP_AWDView_timeOut(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_timeOut *somTD_AWDView_timeOut;
typedef void   SOMLINK somTP_AWDView_setTimeOut(AWDView *somSelf, Environment *ev,
		unsigned long timeout);
typedef somTP_AWDView_setTimeOut *somTD_AWDView_setTimeOut;
typedef string   SOMLINK somTP_AWDView_host(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_host *somTD_AWDView_host;
typedef void   SOMLINK somTP_AWDView_setHost(AWDView *somSelf, Environment *ev,
		string host);
typedef somTP_AWDView_setHost *somTD_AWDView_setHost;
typedef long   SOMLINK somTP_AWDView_queue(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_queue *somTD_AWDView_queue;
typedef void   SOMLINK somTP_AWDView_setMessageQueue(AWDView *somSelf, Environment *ev,
		long que);
typedef somTP_AWDView_setMessageQueue *somTD_AWDView_setMessageQueue;
typedef void*   SOMLINK somTP_AWDView_receiveData(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_receiveData *somTD_AWDView_receiveData;
typedef void   SOMLINK somTP_AWDView_setReceiveData(AWDView *somSelf, Environment *ev,
		void* pRData);
typedef somTP_AWDView_setReceiveData *somTD_AWDView_setReceiveData;
typedef unsigned long   SOMLINK somTP_AWDView_numRepeats(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_numRepeats *somTD_AWDView_numRepeats;
typedef void   SOMLINK somTP_AWDView_setNumRepeats(AWDView *somSelf, Environment *ev,
		unsigned long repeats);
typedef somTP_AWDView_setNumRepeats *somTD_AWDView_setNumRepeats;
typedef unsigned long   SOMLINK somTP_AWDView_fixedLength(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_fixedLength *somTD_AWDView_fixedLength;
typedef void   SOMLINK somTP_AWDView_setFixedLength(AWDView *somSelf, Environment *ev,
		unsigned long length);
typedef somTP_AWDView_setFixedLength *somTD_AWDView_setFixedLength;
typedef unsigned long   SOMLINK somTP_AWDView_repeatLength(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_repeatLength *somTD_AWDView_repeatLength;
typedef void   SOMLINK somTP_AWDView_setRepeatLength(AWDView *somSelf, Environment *ev,
		unsigned long length);
typedef somTP_AWDView_setRepeatLength *somTD_AWDView_setRepeatLength;
typedef unsigned long   SOMLINK somTP_AWDView_currentIndex(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_currentIndex *somTD_AWDView_currentIndex;
typedef void   SOMLINK somTP_AWDView_setCurrentIndex(AWDView *somSelf, Environment *ev,
		unsigned long index);
typedef somTP_AWDView_setCurrentIndex *somTD_AWDView_setCurrentIndex;
typedef void*   SOMLINK somTP_AWDView_lastView(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_lastView *somTD_AWDView_lastView;
typedef void   SOMLINK somTP_AWDView_setLastView(AWDView *somSelf, Environment *ev,
		void* pRData);
typedef somTP_AWDView_setLastView *somTD_AWDView_setLastView;
typedef void*   SOMLINK somTP_AWDView_startData(AWDView *somSelf, Environment *ev,
		string app,
		string targetapp,
		string viewname,
		void* senddata,
		unsigned long size,
		AWDView_view_type mode,
		void* pfn,
		unsigned long timeout,
		unsigned long hwndnotify,
		unsigned long returnmsg,
		long queue,
		string host);
typedef somTP_AWDView_startData *somTD_AWDView_startData;
typedef void*   SOMLINK somTP_AWDView_start(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_start *somTD_AWDView_start;
typedef void*   SOMLINK somTP_AWDView_getRecord(AWDView *somSelf, Environment *ev,
		void* pv,
		unsigned long userIndex,
		AWDView_index_type indexvalue);
typedef somTP_AWDView_getRecord *somTD_AWDView_getRecord;
typedef boolean   SOMLINK somTP_AWDView_check(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_check *somTD_AWDView_check;
typedef void   SOMLINK somTP_AWDView_checkForException(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_checkForException *somTD_AWDView_checkForException;
typedef void   SOMLINK somTP_AWDView_setException(AWDView *somSelf, Environment *ev,
		unsigned short excType,
		string pszFile,
		unsigned short usLine,
		string pszMessage,
		unsigned short usReturnCd);
typedef somTP_AWDView_setException *somTD_AWDView_setException;
typedef void   SOMLINK somTP_AWDView_setViewMessage(AWDView *somSelf, Environment *ev,
		string pszMessage);
typedef somTP_AWDView_setViewMessage *somTD_AWDView_setViewMessage;
typedef string   SOMLINK somTP_AWDView_viewMessage(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_viewMessage *somTD_AWDView_viewMessage;
typedef void*   SOMLINK somTP_AWDView_startString(AWDView *somSelf, Environment *ev,
		string pszSetupString);
typedef somTP_AWDView_startString *somTD_AWDView_startString;
typedef boolean   SOMLINK somTP_AWDView_scanArgString(AWDView *somSelf, Environment *ev,
		string pszSetupString,
		string pszKey,
		string pszValue,
		unsigned long* pcbValue);
typedef somTP_AWDView_scanArgString *somTD_AWDView_scanArgString;
typedef boolean   SOMLINK somTP_AWDView_isComplete(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_isComplete *somTD_AWDView_isComplete;
typedef void*   SOMLINK somTP_AWDView_restart(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_restart *somTD_AWDView_restart;
typedef void*   SOMLINK somTP_AWDView_resolveIndex(AWDView *somSelf, Environment *ev,
		unsigned long* ulIndex);
typedef somTP_AWDView_resolveIndex *somTD_AWDView_resolveIndex;
typedef boolean   SOMLINK somTP_AWDView_addData(AWDView *somSelf, Environment *ev,
		void* pRcvData,
		unsigned long ulNumberofRepeats);
typedef somTP_AWDView_addData *somTD_AWDView_addData;
typedef void*   SOMLINK somTP_AWDView_buffer(AWDView *somSelf, Environment *ev,
		AWDView_index_type index,
		unsigned long theindex,
		unsigned long* pulRepeats);
typedef somTP_AWDView_buffer *somTD_AWDView_buffer;
typedef unsigned long   SOMLINK somTP_AWDView_errCode(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_errCode *somTD_AWDView_errCode;
typedef string   SOMLINK somTP_AWDView_errMsg(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_errMsg *somTD_AWDView_errMsg;
typedef AWDConnection*   SOMLINK somTP_AWDView_setConnection(AWDView *somSelf, Environment *ev,
		AWDConnection* con);
typedef somTP_AWDView_setConnection *somTD_AWDView_setConnection;
typedef AWDConnection*   SOMLINK somTP_AWDView_localConnection(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_localConnection *somTD_AWDView_localConnection;
typedef void   SOMLINK somTP_AWDView_setAutoRestart(AWDView *somSelf, Environment *ev,
		boolean flag);
typedef somTP_AWDView_setAutoRestart *somTD_AWDView_setAutoRestart;
typedef boolean   SOMLINK somTP_AWDView_isAutoRestart(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_isAutoRestart *somTD_AWDView_isAutoRestart;
typedef void   SOMLINK somTP_AWDView_reset(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_reset *somTD_AWDView_reset;
typedef boolean   SOMLINK somTP_AWDView_validateInput(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_validateInput *somTD_AWDView_validateInput;
typedef void   SOMLINK somTP_AWDView_setPersistent(AWDView *somSelf, Environment *ev,
		boolean flag);
typedef somTP_AWDView_setPersistent *somTD_AWDView_setPersistent;
typedef boolean   SOMLINK somTP_AWDView_isPersistent(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_isPersistent *somTD_AWDView_isPersistent;
typedef void   SOMLINK somTP_AWDView_setInProcess(AWDView *somSelf, Environment *ev,
		boolean flag);
typedef somTP_AWDView_setInProcess *somTD_AWDView_setInProcess;
typedef boolean   SOMLINK somTP_AWDView_isInProcess(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_isInProcess *somTD_AWDView_isInProcess;
typedef void   SOMLINK somTP_AWDView_setPrimaryRc(AWDView *somSelf, Environment *ev,
		unsigned long rc);
typedef somTP_AWDView_setPrimaryRc *somTD_AWDView_setPrimaryRc;
typedef unsigned long   SOMLINK somTP_AWDView_primaryRc(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_primaryRc *somTD_AWDView_primaryRc;
typedef void   SOMLINK somTP_AWDView_setSecondaryRc(AWDView *somSelf, Environment *ev,
		unsigned long rc);
typedef somTP_AWDView_setSecondaryRc *somTD_AWDView_setSecondaryRc;
typedef unsigned long   SOMLINK somTP_AWDView_secondaryRc(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_secondaryRc *somTD_AWDView_secondaryRc;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef somf_MLinkable*   SOMLINK somTP_AWDView_somfMLinkableInit(AWDView *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_AWDView_somfMLinkableInit *somTD_AWDView_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_AWDView_somfGetNext(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_somfGetNext *somTD_AWDView_somfGetNext;
typedef void   SOMLINK somTP_AWDView_somfSetNext(AWDView *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDView_somfSetNext *somTD_AWDView_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_AWDView_somfGetPrevious(AWDView *somSelf, Environment *ev);
typedef somTP_AWDView_somfGetPrevious *somTD_AWDView_somfGetPrevious;
typedef void   SOMLINK somTP_AWDView_somfSetPrevious(AWDView *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDView_somfSetPrevious *somTD_AWDView_somfSetPrevious;
typedef void   SOMLINK somTP_AWDView_somInit(AWDView *somSelf);
typedef somTP_AWDView_somInit *somTD_AWDView_somInit;
typedef void   SOMLINK somTP_AWDView_somDefaultInit(AWDView *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDView_somDefaultInit *somTD_AWDView_somDefaultInit;
typedef void   SOMLINK somTP_AWDView_somDestruct(AWDView *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDView_somDestruct *somTD_AWDView_somDestruct;
typedef void   SOMLINK somTP_AWDView_somDefaultCopyInit(AWDView *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDView_somDefaultCopyInit *somTD_AWDView_somDefaultCopyInit;
typedef AWDView*   SOMLINK somTP_AWDView_somDefaultAssign(AWDView *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDView_somDefaultAssign *somTD_AWDView_somDefaultAssign;
typedef void   SOMLINK somTP_AWDView_somDefaultConstCopyInit(AWDView *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDView_somDefaultConstCopyInit *somTD_AWDView_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDView_somDefaultVCopyInit(AWDView *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDView_somDefaultVCopyInit *somTD_AWDView_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDView_somDefaultConstVCopyInit(AWDView *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDView_somDefaultConstVCopyInit *somTD_AWDView_somDefaultConstVCopyInit;
typedef AWDView*   SOMLINK somTP_AWDView_somDefaultConstAssign(AWDView *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDView_somDefaultConstAssign *somTD_AWDView_somDefaultConstAssign;
typedef AWDView*   SOMLINK somTP_AWDView_somDefaultVAssign(AWDView *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDView_somDefaultVAssign *somTD_AWDView_somDefaultVAssign;
typedef AWDView*   SOMLINK somTP_AWDView_somDefaultConstVAssign(AWDView *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDView_somDefaultConstVAssign *somTD_AWDView_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDView_somFree(AWDView *somSelf);
typedef somTP_AWDView_somFree *somTD_AWDView_somFree;
typedef void   SOMLINK somTP_AWDView_somUninit(AWDView *somSelf);
typedef somTP_AWDView_somUninit *somTD_AWDView_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDView_somGetClass(AWDView *somSelf);
typedef somTP_AWDView_somGetClass *somTD_AWDView_somGetClass;
typedef string   SOMLINK somTP_AWDView_somGetClassName(AWDView *somSelf);
typedef somTP_AWDView_somGetClassName *somTD_AWDView_somGetClassName;
typedef long   SOMLINK somTP_AWDView_somGetSize(AWDView *somSelf);
typedef somTP_AWDView_somGetSize *somTD_AWDView_somGetSize;
typedef boolean   SOMLINK somTP_AWDView_somIsA(AWDView *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDView_somIsA *somTD_AWDView_somIsA;
typedef boolean   SOMLINK somTP_AWDView_somIsInstanceOf(AWDView *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDView_somIsInstanceOf *somTD_AWDView_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDView_somRespondsTo(AWDView *somSelf,
		somId mId);
typedef somTP_AWDView_somRespondsTo *somTD_AWDView_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDView_somDispatch(AWDView *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDView_somDispatch *somTD_AWDView_somDispatch;
typedef boolean   SOMLINK somTP_AWDView_somClassDispatch(AWDView *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDView_somClassDispatch *somTD_AWDView_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDView_somCastObj(AWDView *somSelf,
		SOMClass* cls);
typedef somTP_AWDView_somCastObj *somTD_AWDView_somCastObj;
typedef boolean   SOMLINK somTP_AWDView_somResetObj(AWDView *somSelf);
typedef somTP_AWDView_somResetObj *somTD_AWDView_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDView_somPrintSelf(AWDView *somSelf);
typedef somTP_AWDView_somPrintSelf *somTD_AWDView_somPrintSelf;
typedef void   SOMLINK somTP_AWDView_somDumpSelf(AWDView *somSelf,
		long level);
typedef somTP_AWDView_somDumpSelf *somTD_AWDView_somDumpSelf;
typedef void   SOMLINK somTP_AWDView_somDumpSelfInt(AWDView *somSelf,
		long level);
typedef somTP_AWDView_somDumpSelfInt *somTD_AWDView_somDumpSelfInt;
}

#endif /* AWDView_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDView
 */
class AWDView : public somf_MLinkable
{
public:

// AWDView::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDView) AWDViewNewClass(AWDView_MajorVersion,AWDView_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDView,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDView));
}

// AWDView::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDView()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDViewCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDView(AWDView* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDViewCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDView(const AWDView* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDViewCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: app */
string   app(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,app)
	(this, ev);
}


/* method: setApp */
void   setApp(Environment *ev,
		string app)
{
   SOM_ResolveD(this,AWDView,AWDView,setApp)
	(this, ev,app);
}


/* method: targetApp */
string   targetApp(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,targetApp)
	(this, ev);
}


/* method: setTargetApp */
void   setTargetApp(Environment *ev,
		string target)
{
   SOM_ResolveD(this,AWDView,AWDView,setTargetApp)
	(this, ev,target);
}


/* method: name */
string   name(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,name)
	(this, ev);
}


/* method: setName */
void   setName(Environment *ev,
		string aName)
{
   SOM_ResolveD(this,AWDView,AWDView,setName)
	(this, ev,aName);
}


/* method: size */
unsigned long   size(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,size)
	(this, ev);
}


/* method: setSize */
void   setSize(Environment *ev,
		unsigned long size)
{
   SOM_ResolveD(this,AWDView,AWDView,setSize)
	(this, ev,size);
}


/* method: sendData */
void*   sendData(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,sendData)
	(this, ev);
}


/* method: setSendData */
void   setSendData(Environment *ev,
		void* data)
{
   SOM_ResolveD(this,AWDView,AWDView,setSendData)
	(this, ev,data);
}


/* method: mode */
AWDView_view_type   mode(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,mode)
	(this, ev);
}


/* method: setMode */
void   setMode(Environment *ev,
		AWDView_view_type viewtype)
{
   SOM_ResolveD(this,AWDView,AWDView,setMode)
	(this, ev,viewtype);
}


/* method: hwndNotify */
unsigned long   hwndNotify(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,hwndNotify)
	(this, ev);
}


/* method: sethwndNotify */
void   sethwndNotify(Environment *ev,
		unsigned long hwndNotify)
{
   SOM_ResolveD(this,AWDView,AWDView,sethwndNotify)
	(this, ev,hwndNotify);
}


/* method: returnMsg */
unsigned long   returnMsg(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,returnMsg)
	(this, ev);
}


/* method: setReturnMsg */
void   setReturnMsg(Environment *ev,
		unsigned long msg)
{
   SOM_ResolveD(this,AWDView,AWDView,setReturnMsg)
	(this, ev,msg);
}


/* method: pfnCallBack */
void*   pfnCallBack(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,pfnCallBack)
	(this, ev);
}


/* method: setpfnCallBack */
void   setpfnCallBack(Environment *ev,
		void* pfnCallback)
{
   SOM_ResolveD(this,AWDView,AWDView,setpfnCallBack)
	(this, ev,pfnCallback);
}


/* method: timeOut */
unsigned long   timeOut(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,timeOut)
	(this, ev);
}


/* method: setTimeOut */
void   setTimeOut(Environment *ev,
		unsigned long timeout)
{
   SOM_ResolveD(this,AWDView,AWDView,setTimeOut)
	(this, ev,timeout);
}


/* method: host */
string   host(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,host)
	(this, ev);
}


/* method: setHost */
void   setHost(Environment *ev,
		string host)
{
   SOM_ResolveD(this,AWDView,AWDView,setHost)
	(this, ev,host);
}


/* method: queue */
long   queue(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,queue)
	(this, ev);
}


/* method: setMessageQueue */
void   setMessageQueue(Environment *ev,
		long que)
{
   SOM_ResolveD(this,AWDView,AWDView,setMessageQueue)
	(this, ev,que);
}


/* method: receiveData */
void*   receiveData(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,receiveData)
	(this, ev);
}


/* method: setReceiveData */
void   setReceiveData(Environment *ev,
		void* pRData)
{
   SOM_ResolveD(this,AWDView,AWDView,setReceiveData)
	(this, ev,pRData);
}


/* method: numRepeats */
unsigned long   numRepeats(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,numRepeats)
	(this, ev);
}


/* method: setNumRepeats */
void   setNumRepeats(Environment *ev,
		unsigned long repeats)
{
   SOM_ResolveD(this,AWDView,AWDView,setNumRepeats)
	(this, ev,repeats);
}


/* method: fixedLength */
unsigned long   fixedLength(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,fixedLength)
	(this, ev);
}


/* method: setFixedLength */
void   setFixedLength(Environment *ev,
		unsigned long length)
{
   SOM_ResolveD(this,AWDView,AWDView,setFixedLength)
	(this, ev,length);
}


/* method: repeatLength */
unsigned long   repeatLength(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,repeatLength)
	(this, ev);
}


/* method: setRepeatLength */
void   setRepeatLength(Environment *ev,
		unsigned long length)
{
   SOM_ResolveD(this,AWDView,AWDView,setRepeatLength)
	(this, ev,length);
}


/* method: currentIndex */
unsigned long   currentIndex(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,currentIndex)
	(this, ev);
}


/* method: setCurrentIndex */
void   setCurrentIndex(Environment *ev,
		unsigned long index)
{
   SOM_ResolveD(this,AWDView,AWDView,setCurrentIndex)
	(this, ev,index);
}


/* method: lastView */
void*   lastView(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,lastView)
	(this, ev);
}


/* method: setLastView */
void   setLastView(Environment *ev,
		void* pRData)
{
   SOM_ResolveD(this,AWDView,AWDView,setLastView)
	(this, ev,pRData);
}


/* method: startData */
void*   startData(Environment *ev,
		string app,
		string targetapp,
		string viewname,
		void* senddata,
		unsigned long size,
		AWDView_view_type mode,
		void* pfn,
		unsigned long timeout,
		unsigned long hwndnotify,
		unsigned long returnmsg,
		long queue,
		string host)
{
   return SOM_ResolveD(this,AWDView,AWDView,startData)
	(this, ev,app,targetapp,viewname,senddata,size,mode,pfn,timeout,hwndnotify,returnmsg,queue,host);
}


/* method: start */
void*   start(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,start)
	(this, ev);
}


/* method: getRecord */
void*   getRecord(Environment *ev,
		void* pv,
		unsigned long userIndex,
		AWDView_index_type indexvalue)
{
   return SOM_ResolveD(this,AWDView,AWDView,getRecord)
	(this, ev,pv,userIndex,indexvalue);
}


/* method: check */
boolean   check(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,check)
	(this, ev);
}


/* method: checkForException */
void   checkForException(Environment *ev)
{
   SOM_ResolveD(this,AWDView,AWDView,checkForException)
	(this, ev);
}


/* method: setException */
void   setException(Environment *ev,
		unsigned short excType,
		string pszFile,
		unsigned short usLine,
		string pszMessage,
		unsigned short usReturnCd)
{
   SOM_ResolveD(this,AWDView,AWDView,setException)
	(this, ev,excType,pszFile,usLine,pszMessage,usReturnCd);
}


/* method: setViewMessage */
void   setViewMessage(Environment *ev,
		string pszMessage)
{
   SOM_ResolveD(this,AWDView,AWDView,setViewMessage)
	(this, ev,pszMessage);
}


/* method: viewMessage */
string   viewMessage(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,viewMessage)
	(this, ev);
}


/* method: startString */
void*   startString(Environment *ev,
		string pszSetupString)
{
   return SOM_ResolveD(this,AWDView,AWDView,startString)
	(this, ev,pszSetupString);
}


/* method: scanArgString */
boolean   scanArgString(Environment *ev,
		string pszSetupString,
		string pszKey,
		string pszValue,
		unsigned long* pcbValue)
{
   return SOM_ResolveD(this,AWDView,AWDView,scanArgString)
	(this, ev,pszSetupString,pszKey,pszValue,pcbValue);
}


/* method: isComplete */
boolean   isComplete(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,isComplete)
	(this, ev);
}


/* method: restart */
void*   restart(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,restart)
	(this, ev);
}


/* method: resolveIndex */
void*   resolveIndex(Environment *ev,
		unsigned long* ulIndex)
{
   return SOM_ResolveD(this,AWDView,AWDView,resolveIndex)
	(this, ev,ulIndex);
}


/* method: addData */
boolean   addData(Environment *ev,
		void* pRcvData,
		unsigned long ulNumberofRepeats)
{
   return SOM_ResolveD(this,AWDView,AWDView,addData)
	(this, ev,pRcvData,ulNumberofRepeats);
}


/* method: buffer */
void*   buffer(Environment *ev,
		AWDView_index_type index,
		unsigned long theindex,
		unsigned long* pulRepeats)
{
   return SOM_ResolveD(this,AWDView,AWDView,buffer)
	(this, ev,index,theindex,pulRepeats);
}


/* method: errCode */
unsigned long   errCode(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,errCode)
	(this, ev);
}


/* method: errMsg */
string   errMsg(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,errMsg)
	(this, ev);
}


/* method: setConnection */
AWDConnection*   setConnection(Environment *ev,
		AWDConnection* con)
{
   return SOM_ResolveD(this,AWDView,AWDView,setConnection)
	(this, ev,con);
}


/* method: localConnection */
AWDConnection*   localConnection(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,localConnection)
	(this, ev);
}


/* method: setAutoRestart */
void   setAutoRestart(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,AWDView,AWDView,setAutoRestart)
	(this, ev,flag);
}


/* method: isAutoRestart */
boolean   isAutoRestart(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,isAutoRestart)
	(this, ev);
}


/* method: reset */
void   reset(Environment *ev)
{
   SOM_ResolveD(this,AWDView,AWDView,reset)
	(this, ev);
}


/* method: validateInput */
boolean   validateInput(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,validateInput)
	(this, ev);
}


/* method: setPersistent */
void   setPersistent(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,AWDView,AWDView,setPersistent)
	(this, ev,flag);
}


/* method: isPersistent */
boolean   isPersistent(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,isPersistent)
	(this, ev);
}


/* method: setInProcess */
void   setInProcess(Environment *ev,
		boolean flag)
{
   SOM_ResolveD(this,AWDView,AWDView,setInProcess)
	(this, ev,flag);
}


/* method: isInProcess */
boolean   isInProcess(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,isInProcess)
	(this, ev);
}


/* method: setPrimaryRc */
void   setPrimaryRc(Environment *ev,
		unsigned long rc)
{
   SOM_ResolveD(this,AWDView,AWDView,setPrimaryRc)
	(this, ev,rc);
}


/* method: primaryRc */
unsigned long   primaryRc(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,primaryRc)
	(this, ev);
}


/* method: setSecondaryRc */
void   setSecondaryRc(Environment *ev,
		unsigned long rc)
{
   SOM_ResolveD(this,AWDView,AWDView,setSecondaryRc)
	(this, ev,rc);
}


/* method: secondaryRc */
unsigned long   secondaryRc(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,AWDView,secondaryRc)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,AWDView,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDView,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,AWDView,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDView,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDView,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDView,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDView,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDView,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDView*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDView,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDView,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDView,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDView,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDView*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDView,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDView*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDView,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDView*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDView,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDView,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDView,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDView,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDView,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDView,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDView,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDView,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDView,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDView_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDView,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDView,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDView_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDView,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDView,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDView,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDView,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDView,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDView,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDView,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDView */



#endif       /* SOM_AWDView_xh */
