
#ifndef SOM_AWDBaseField_xh
#define SOM_AWDBaseField_xh

class AWDBaseField;

#define AWDBaseField_MajorVersion 2
#define AWDBaseField_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include <mlink.xh>
#include "awdmask.xh"

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_AWDCommon_xh
#include <common.xh>
#endif

#ifndef AWDBaseField_API
#define AWDBaseField_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class AWDConnection;
class AWDException;
class AWDApplication;
class AWDPersist;
class AWDBase;
class iostream;
class AWDData;
#define AWDBaseField_SIZEOF_DATAVALUE 75 /* 75 */
typedef unsigned long AWDBaseField_STATUS;
#define AWDBaseField_STATUS_UNDEFINED 1UL
#define AWDBaseField_STATUS_ADD 2UL
#define AWDBaseField_STATUS_UPDATE 3UL
#define AWDBaseField_STATUS_DELETE 4UL
#define AWDBaseField_STATUS_UNCHANGED 5UL
#define AWDBaseField_STATUS_DONTADD 6UL

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_SIZEOF_DATAVALUE
    #ifdef SIZEOF_DATAVALUE
        #undef SIZEOF_DATAVALUE
        #define SOMTGD_SIZEOF_DATAVALUE 1
    #else
        #define SIZEOF_DATAVALUE AWDBaseField_SIZEOF_DATAVALUE
    #endif /* SIZEOF_DATAVALUE */
#endif /* SOMTGD_SIZEOF_DATAVALUE */
#ifndef SOMTGD_STATUS
    #ifdef STATUS
        #undef STATUS
        #define SOMTGD_STATUS 1
    #else
        #define STATUS AWDBaseField_STATUS
    #endif /* STATUS */
#endif /* SOMTGD_STATUS */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the AWDBaseField Class */
SOMEXTERN
#if (defined(SOM_Module_field_Source) || defined(AWDBaseField_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBaseField))
WIN32_DLLEXPORT
#else
WIN32_DLLIMPORT
#endif
SOMClass * SOMLINK AWDBaseFieldNewClass(
		integer4,
		integer4 );

/* The API to the AWDBaseField class object, and the methods it introduces. */
SOMEXTERN struct AWDBaseFieldClassDataStructure {
	SOMClass *classObject;
	somMToken asString;
	somMToken asStringWithMask;
	somMToken blankMask;
	somMToken blankString;
	somMToken compare;
	somMToken determineStatus;
	somMToken displayLength;
	somMToken fetchProperties;
	somMToken getStatus;
	somMToken isBlank;
	somMToken isChanged;
	somMToken isNew;
	somMToken initBaseFieldObject;
	somMToken length;
	somMToken mask;
	somMToken maskObject;
	somMToken name;
	somMToken newMask;
	somMToken padValue;
	somMToken properties;
	somMToken sequenceNumber;
	somMToken setLocalMask;
	somMToken setName;
	somMToken setSequenceNumber;
	somMToken setStatus;
	somMToken setValueFromMaskedString;
	somMToken setValueFromString;
	somMToken storeLength;
	somMToken verify;
	somMToken withName;
	somMToken withNameandNumber;
	somMToken withNameandValue;
	somMToken withNameNumberandStatus;
	somMToken withNameNumberandValue;
	somMToken withNameNumberStatusandValue;
	somMToken withPersist;
	somMToken withField;
	somMToken hasLocalMask;
}
#if !(defined(SOM_Module_field_Source) || defined(AWDBaseField_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBaseField))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDBaseFieldClassData;
#define _AWDBaseField AWDBaseFieldClassData.classObject

/* The API to parentMtabs for AWDBaseField, and the instance data it introduces. */
SOMEXTERN struct AWDBaseFieldCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
}
#if !(defined(SOM_Module_field_Source) || defined(AWDBaseField_Class_Source) || defined (SOM_DONT_IMPORT_CLASS_AWDBaseField))
WIN32_DLLIMPORT
#elif defined(_MSC_VER)||defined(_WIN32_DECL_PROTO)
WIN32_DLLEXPORT
#endif
SOMDLINK AWDBaseFieldCClassData;

/*
 * -- Typedefs for AWDBaseField Method Procedures
 */
extern "C" {
typedef string   SOMLINK somTP_AWDBaseField_asString(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_asString *somTD_AWDBaseField_asString;
typedef string   SOMLINK somTP_AWDBaseField_asStringWithMask(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_asStringWithMask *somTD_AWDBaseField_asStringWithMask;
typedef string   SOMLINK somTP_AWDBaseField_blankMask(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_blankMask *somTD_AWDBaseField_blankMask;
typedef string   SOMLINK somTP_AWDBaseField_blankString(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_blankString *somTD_AWDBaseField_blankString;
typedef short   SOMLINK somTP_AWDBaseField_compare(AWDBaseField *somSelf, Environment *ev,
		AWDBaseField* pField);
typedef somTP_AWDBaseField_compare *somTD_AWDBaseField_compare;
typedef boolean   SOMLINK somTP_AWDBaseField_determineStatus(AWDBaseField *somSelf, Environment *ev,
		string newValue);
typedef somTP_AWDBaseField_determineStatus *somTD_AWDBaseField_determineStatus;
typedef unsigned short   SOMLINK somTP_AWDBaseField_displayLength(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_displayLength *somTD_AWDBaseField_displayLength;
typedef void   SOMLINK somTP_AWDBaseField_fetchProperties(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_fetchProperties *somTD_AWDBaseField_fetchProperties;
typedef AWDBaseField_STATUS   SOMLINK somTP_AWDBaseField_getStatus(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_getStatus *somTD_AWDBaseField_getStatus;
typedef void   SOMLINK somTP_AWDBaseField_initBaseFieldObject(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_initBaseFieldObject *somTD_AWDBaseField_initBaseFieldObject;
typedef boolean   SOMLINK somTP_AWDBaseField_isBlank(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_isBlank *somTD_AWDBaseField_isBlank;
typedef boolean   SOMLINK somTP_AWDBaseField_isChanged(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_isChanged *somTD_AWDBaseField_isChanged;
typedef boolean   SOMLINK somTP_AWDBaseField_isNew(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_isNew *somTD_AWDBaseField_isNew;
typedef string   SOMLINK somTP_AWDBaseField_mask(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_mask *somTD_AWDBaseField_mask;
typedef AWDMask*   SOMLINK somTP_AWDBaseField_maskObject(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_maskObject *somTD_AWDBaseField_maskObject;
typedef string   SOMLINK somTP_AWDBaseField_name(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_name *somTD_AWDBaseField_name;
typedef void   SOMLINK somTP_AWDBaseField_newMask(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_newMask *somTD_AWDBaseField_newMask;
typedef boolean   SOMLINK somTP_AWDBaseField_padValue(AWDBaseField *somSelf, Environment *ev,
		AWDMask_DIRECTION direction);
typedef somTP_AWDBaseField_padValue *somTD_AWDBaseField_padValue;
typedef AWDData*   SOMLINK somTP_AWDBaseField_properties(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_properties *somTD_AWDBaseField_properties;
typedef unsigned short   SOMLINK somTP_AWDBaseField_sequenceNumber(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_sequenceNumber *somTD_AWDBaseField_sequenceNumber;
typedef boolean   SOMLINK somTP_AWDBaseField_setLocalMask(AWDBaseField *somSelf, Environment *ev,
		string localmask);
typedef somTP_AWDBaseField_setLocalMask *somTD_AWDBaseField_setLocalMask;
typedef boolean   SOMLINK somTP_AWDBaseField_setName(AWDBaseField *somSelf, Environment *ev,
		string aName);
typedef somTP_AWDBaseField_setName *somTD_AWDBaseField_setName;
typedef void   SOMLINK somTP_AWDBaseField_setSequenceNumber(AWDBaseField *somSelf, Environment *ev,
		unsigned short seqNumber);
typedef somTP_AWDBaseField_setSequenceNumber *somTD_AWDBaseField_setSequenceNumber;
typedef void   SOMLINK somTP_AWDBaseField_setStatus(AWDBaseField *somSelf, Environment *ev,
		AWDBaseField_STATUS status);
typedef somTP_AWDBaseField_setStatus *somTD_AWDBaseField_setStatus;
typedef boolean   SOMLINK somTP_AWDBaseField_setValueFromMaskedString(AWDBaseField *somSelf, Environment *ev,
		string value);
typedef somTP_AWDBaseField_setValueFromMaskedString *somTD_AWDBaseField_setValueFromMaskedString;
typedef boolean   SOMLINK somTP_AWDBaseField_setValueFromString(AWDBaseField *somSelf, Environment *ev,
		string value);
typedef somTP_AWDBaseField_setValueFromString *somTD_AWDBaseField_setValueFromString;
typedef unsigned short   SOMLINK somTP_AWDBaseField_storeLength(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_storeLength *somTD_AWDBaseField_storeLength;
typedef boolean   SOMLINK somTP_AWDBaseField_verify(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_verify *somTD_AWDBaseField_verify;
typedef void   SOMLINK somTP_AWDBaseField_withName(AWDBaseField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName);
typedef somTP_AWDBaseField_withName *somTD_AWDBaseField_withName;
typedef void   SOMLINK somTP_AWDBaseField_withNameandNumber(AWDBaseField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber);
typedef somTP_AWDBaseField_withNameandNumber *somTD_AWDBaseField_withNameandNumber;
typedef void   SOMLINK somTP_AWDBaseField_withNameandValue(AWDBaseField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		string value);
typedef somTP_AWDBaseField_withNameandValue *somTD_AWDBaseField_withNameandValue;
typedef void   SOMLINK somTP_AWDBaseField_withNameNumberandStatus(AWDBaseField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		AWDBaseField_STATUS status);
typedef somTP_AWDBaseField_withNameNumberandStatus *somTD_AWDBaseField_withNameNumberandStatus;
typedef void   SOMLINK somTP_AWDBaseField_withNameNumberandValue(AWDBaseField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		string value);
typedef somTP_AWDBaseField_withNameNumberandValue *somTD_AWDBaseField_withNameNumberandValue;
typedef void   SOMLINK somTP_AWDBaseField_withNameNumberStatusandValue(AWDBaseField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		AWDBaseField_STATUS status,
		string value);
typedef somTP_AWDBaseField_withNameNumberStatusandValue *somTD_AWDBaseField_withNameNumberStatusandValue;
typedef void   SOMLINK somTP_AWDBaseField_withPersist(AWDBaseField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist);
typedef somTP_AWDBaseField_withPersist *somTD_AWDBaseField_withPersist;
typedef void   SOMLINK somTP_AWDBaseField_withField(AWDBaseField *somSelf, Environment *ev,
		somInitCtrl* ctrl,
		AWDBaseField* pField);
typedef somTP_AWDBaseField_withField *somTD_AWDBaseField_withField;
typedef boolean   SOMLINK somTP_AWDBaseField_hasLocalMask(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_hasLocalMask *somTD_AWDBaseField_hasLocalMask;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_AWDBaseField_store(AWDBaseField *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDBaseField_store *somTD_AWDBaseField_store;
typedef void   SOMLINK somTP_AWDBaseField_restore(AWDBaseField *somSelf, Environment *ev,
		AWDPersist* pPersist);
typedef somTP_AWDBaseField_restore *somTD_AWDBaseField_restore;
typedef void   SOMLINK somTP_AWDBaseField_somDefaultInit(AWDBaseField *somSelf,
		somInitCtrl* ctrl);
typedef somTP_AWDBaseField_somDefaultInit *somTD_AWDBaseField_somDefaultInit;
typedef void   SOMLINK somTP_AWDBaseField_somDestruct(AWDBaseField *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_AWDBaseField_somDestruct *somTD_AWDBaseField_somDestruct;
typedef somf_MLinkable*   SOMLINK somTP_AWDBaseField_somfMLinkableInit(AWDBaseField *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somTP_AWDBaseField_somfMLinkableInit *somTD_AWDBaseField_somfMLinkableInit;
typedef somf_MLinkable*   SOMLINK somTP_AWDBaseField_somfGetNext(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_somfGetNext *somTD_AWDBaseField_somfGetNext;
typedef void   SOMLINK somTP_AWDBaseField_somfSetNext(AWDBaseField *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDBaseField_somfSetNext *somTD_AWDBaseField_somfSetNext;
typedef somf_MLinkable*   SOMLINK somTP_AWDBaseField_somfGetPrevious(AWDBaseField *somSelf, Environment *ev);
typedef somTP_AWDBaseField_somfGetPrevious *somTD_AWDBaseField_somfGetPrevious;
typedef void   SOMLINK somTP_AWDBaseField_somfSetPrevious(AWDBaseField *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somTP_AWDBaseField_somfSetPrevious *somTD_AWDBaseField_somfSetPrevious;
typedef void   SOMLINK somTP_AWDBaseField_somInit(AWDBaseField *somSelf);
typedef somTP_AWDBaseField_somInit *somTD_AWDBaseField_somInit;
typedef void   SOMLINK somTP_AWDBaseField_somDefaultCopyInit(AWDBaseField *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseField_somDefaultCopyInit *somTD_AWDBaseField_somDefaultCopyInit;
typedef AWDBaseField*   SOMLINK somTP_AWDBaseField_somDefaultAssign(AWDBaseField *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseField_somDefaultAssign *somTD_AWDBaseField_somDefaultAssign;
typedef void   SOMLINK somTP_AWDBaseField_somDefaultConstCopyInit(AWDBaseField *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseField_somDefaultConstCopyInit *somTD_AWDBaseField_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AWDBaseField_somDefaultVCopyInit(AWDBaseField *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseField_somDefaultVCopyInit *somTD_AWDBaseField_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AWDBaseField_somDefaultConstVCopyInit(AWDBaseField *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseField_somDefaultConstVCopyInit *somTD_AWDBaseField_somDefaultConstVCopyInit;
typedef AWDBaseField*   SOMLINK somTP_AWDBaseField_somDefaultConstAssign(AWDBaseField *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseField_somDefaultConstAssign *somTD_AWDBaseField_somDefaultConstAssign;
typedef AWDBaseField*   SOMLINK somTP_AWDBaseField_somDefaultVAssign(AWDBaseField *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseField_somDefaultVAssign *somTD_AWDBaseField_somDefaultVAssign;
typedef AWDBaseField*   SOMLINK somTP_AWDBaseField_somDefaultConstVAssign(AWDBaseField *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_AWDBaseField_somDefaultConstVAssign *somTD_AWDBaseField_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AWDBaseField_somFree(AWDBaseField *somSelf);
typedef somTP_AWDBaseField_somFree *somTD_AWDBaseField_somFree;
typedef void   SOMLINK somTP_AWDBaseField_somUninit(AWDBaseField *somSelf);
typedef somTP_AWDBaseField_somUninit *somTD_AWDBaseField_somUninit;
typedef SOMClass*   SOMLINK somTP_AWDBaseField_somGetClass(AWDBaseField *somSelf);
typedef somTP_AWDBaseField_somGetClass *somTD_AWDBaseField_somGetClass;
typedef string   SOMLINK somTP_AWDBaseField_somGetClassName(AWDBaseField *somSelf);
typedef somTP_AWDBaseField_somGetClassName *somTD_AWDBaseField_somGetClassName;
typedef long   SOMLINK somTP_AWDBaseField_somGetSize(AWDBaseField *somSelf);
typedef somTP_AWDBaseField_somGetSize *somTD_AWDBaseField_somGetSize;
typedef boolean   SOMLINK somTP_AWDBaseField_somIsA(AWDBaseField *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDBaseField_somIsA *somTD_AWDBaseField_somIsA;
typedef boolean   SOMLINK somTP_AWDBaseField_somIsInstanceOf(AWDBaseField *somSelf,
		SOMClass* aClassObj);
typedef somTP_AWDBaseField_somIsInstanceOf *somTD_AWDBaseField_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AWDBaseField_somRespondsTo(AWDBaseField *somSelf,
		somId mId);
typedef somTP_AWDBaseField_somRespondsTo *somTD_AWDBaseField_somRespondsTo;
typedef boolean   SOMLINK somTP_AWDBaseField_somDispatch(AWDBaseField *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDBaseField_somDispatch *somTD_AWDBaseField_somDispatch;
typedef boolean   SOMLINK somTP_AWDBaseField_somClassDispatch(AWDBaseField *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_AWDBaseField_somClassDispatch *somTD_AWDBaseField_somClassDispatch;
typedef boolean   SOMLINK somTP_AWDBaseField_somCastObj(AWDBaseField *somSelf,
		SOMClass* cls);
typedef somTP_AWDBaseField_somCastObj *somTD_AWDBaseField_somCastObj;
typedef boolean   SOMLINK somTP_AWDBaseField_somResetObj(AWDBaseField *somSelf);
typedef somTP_AWDBaseField_somResetObj *somTD_AWDBaseField_somResetObj;
typedef SOMObject*   SOMLINK somTP_AWDBaseField_somPrintSelf(AWDBaseField *somSelf);
typedef somTP_AWDBaseField_somPrintSelf *somTD_AWDBaseField_somPrintSelf;
typedef void   SOMLINK somTP_AWDBaseField_somDumpSelf(AWDBaseField *somSelf,
		long level);
typedef somTP_AWDBaseField_somDumpSelf *somTD_AWDBaseField_somDumpSelf;
typedef void   SOMLINK somTP_AWDBaseField_somDumpSelfInt(AWDBaseField *somSelf,
		long level);
typedef somTP_AWDBaseField_somDumpSelfInt *somTD_AWDBaseField_somDumpSelfInt;
}

#endif /* AWDBaseField_API */


/*
 * -- This emitter believes that method thunks are unavailable,
 * -- so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for AWDBaseField
 */
class AWDBaseField : public AWDCommon
{
public:

// AWDBaseField::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AWDBaseField) AWDBaseFieldNewClass(AWDBaseField_MajorVersion,AWDBaseField_MinorVersion);
   return (void*)
      SOM_Resolve(_AWDBaseField,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AWDBaseField));
}

// AWDBaseField::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

AWDBaseField()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBaseFieldCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AWDBaseField(AWDBaseField* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBaseFieldCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDBaseField(const AWDBaseField* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AWDBaseFieldCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

AWDBaseField(Environment *ev,string aName) 
{
   withName(ev,0,aName);
}

AWDBaseField(Environment *ev,string aName,unsigned short seqNumber) 
{
   withNameandNumber(ev,0,aName,seqNumber);
}

AWDBaseField(Environment *ev,string aName,string value) 
{
   withNameandValue(ev,0,aName,value);
}

AWDBaseField(Environment *ev,string aName,unsigned short seqNumber,AWDBaseField_STATUS status) 
{
   withNameNumberandStatus(ev,0,aName,seqNumber,status);
}

AWDBaseField(Environment *ev,string aName,unsigned short seqNumber,string value) 
{
   withNameNumberandValue(ev,0,aName,seqNumber,value);
}

AWDBaseField(Environment *ev,string aName,unsigned short seqNumber,AWDBaseField_STATUS status,string value) 
{
   withNameNumberStatusandValue(ev,0,aName,seqNumber,status,value);
}

AWDBaseField(Environment *ev,AWDPersist* pPersist) 
{
   withPersist(ev,0,pPersist);
}

AWDBaseField(Environment *ev,AWDBaseField* pField) 
{
   withField(ev,0,pField);
}


/* method: asString */
string   asString(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,asString)
	(this, ev);
}


/* method: asStringWithMask */
string   asStringWithMask(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,asStringWithMask)
	(this, ev);
}


/* method: blankMask */
string   blankMask(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,blankMask)
	(this, ev);
}


/* method: blankString */
string   blankString(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,blankString)
	(this, ev);
}


/* method: compare */
short   compare(Environment *ev,
		AWDBaseField* pField)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,compare)
	(this, ev,pField);
}


/* method: determineStatus */
boolean   determineStatus(Environment *ev,
		string newValue)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,determineStatus)
	(this, ev,newValue);
}


/* method: displayLength */
unsigned short   displayLength(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,displayLength)
	(this, ev);
}


/* method: fetchProperties */
void   fetchProperties(Environment *ev)
{
   SOM_ResolveD(this,AWDBaseField,AWDBaseField,fetchProperties)
	(this, ev);
}


/* method: getStatus */
AWDBaseField_STATUS   getStatus(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,getStatus)
	(this, ev);
}


/* method: initBaseFieldObject */
void   initBaseFieldObject(Environment *ev)
{
   SOM_ResolveD(this,AWDBaseField,AWDBaseField,initBaseFieldObject)
	(this, ev);
}


/* method: isBlank */
boolean   isBlank(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,isBlank)
	(this, ev);
}


/* method: isChanged */
boolean   isChanged(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,isChanged)
	(this, ev);
}


/* method: isNew */
boolean   isNew(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,isNew)
	(this, ev);
}


/* method: mask */
string   mask(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,mask)
	(this, ev);
}


/* method: maskObject */
AWDMask*   maskObject(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,maskObject)
	(this, ev);
}


/* method: name */
string   name(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,name)
	(this, ev);
}


/* method: newMask */
void   newMask(Environment *ev)
{
   SOM_ResolveD(this,AWDBaseField,AWDBaseField,newMask)
	(this, ev);
}


/* method: padValue */
boolean   padValue(Environment *ev,
		AWDMask_DIRECTION direction)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,padValue)
	(this, ev,direction);
}


/* method: properties */
AWDData*   properties(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,properties)
	(this, ev);
}


/* method: sequenceNumber */
unsigned short   sequenceNumber(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,sequenceNumber)
	(this, ev);
}


/* method: setLocalMask */
boolean   setLocalMask(Environment *ev,
		string localmask)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,setLocalMask)
	(this, ev,localmask);
}


/* method: setName */
boolean   setName(Environment *ev,
		string aName)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,setName)
	(this, ev,aName);
}


/* method: setSequenceNumber */
void   setSequenceNumber(Environment *ev,
		unsigned short seqNumber)
{
   SOM_ResolveD(this,AWDBaseField,AWDBaseField,setSequenceNumber)
	(this, ev,seqNumber);
}


/* method: setStatus */
void   setStatus(Environment *ev,
		AWDBaseField_STATUS status)
{
   SOM_ResolveD(this,AWDBaseField,AWDBaseField,setStatus)
	(this, ev,status);
}


/* method: setValueFromMaskedString */
boolean   setValueFromMaskedString(Environment *ev,
		string value)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,setValueFromMaskedString)
	(this, ev,value);
}


/* method: setValueFromString */
boolean   setValueFromString(Environment *ev,
		string value)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,setValueFromString)
	(this, ev,value);
}


/* method: storeLength */
unsigned short   storeLength(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,storeLength)
	(this, ev);
}


/* method: verify */
boolean   verify(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,verify)
	(this, ev);
}


/* initializer method: withName */
void   withName(Environment *ev,
		somInitCtrl* ctrl,
		string aName)
{
   SOM_ResolveD(this,AWDBaseField,AWDBaseField,withName)
	(this, ev,ctrl,aName);
}


/* initializer method: withNameandNumber */
void   withNameandNumber(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber)
{
   SOM_ResolveD(this,AWDBaseField,AWDBaseField,withNameandNumber)
	(this, ev,ctrl,aName,seqNumber);
}


/* initializer method: withNameandValue */
void   withNameandValue(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		string value)
{
   SOM_ResolveD(this,AWDBaseField,AWDBaseField,withNameandValue)
	(this, ev,ctrl,aName,value);
}


/* initializer method: withNameNumberandStatus */
void   withNameNumberandStatus(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		AWDBaseField_STATUS status)
{
   SOM_ResolveD(this,AWDBaseField,AWDBaseField,withNameNumberandStatus)
	(this, ev,ctrl,aName,seqNumber,status);
}


/* initializer method: withNameNumberandValue */
void   withNameNumberandValue(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		string value)
{
   SOM_ResolveD(this,AWDBaseField,AWDBaseField,withNameNumberandValue)
	(this, ev,ctrl,aName,seqNumber,value);
}


/* initializer method: withNameNumberStatusandValue */
void   withNameNumberStatusandValue(Environment *ev,
		somInitCtrl* ctrl,
		string aName,
		unsigned short seqNumber,
		AWDBaseField_STATUS status,
		string value)
{
   SOM_ResolveD(this,AWDBaseField,AWDBaseField,withNameNumberStatusandValue)
	(this, ev,ctrl,aName,seqNumber,status,value);
}


/* initializer method: withPersist */
void   withPersist(Environment *ev,
		somInitCtrl* ctrl,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDBaseField,AWDBaseField,withPersist)
	(this, ev,ctrl,pPersist);
}


/* initializer method: withField */
void   withField(Environment *ev,
		somInitCtrl* ctrl,
		AWDBaseField* pField)
{
   SOM_ResolveD(this,AWDBaseField,AWDBaseField,withField)
	(this, ev,ctrl,pField);
}


/* method: hasLocalMask */
boolean   hasLocalMask(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,AWDBaseField,hasLocalMask)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: store */
void   store(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDBaseField,AWDCommon,store)
	(this, ev,pPersist);
}


/* method: restore */
void   restore(Environment *ev,
		AWDPersist* pPersist)
{
   SOM_ResolveD(this,AWDBaseField,AWDCommon,restore)
	(this, ev,pPersist);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,AWDBaseField,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,AWDBaseField,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,AWDBaseField,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDBaseField,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,AWDBaseField,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,AWDBaseField,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,AWDBaseField,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBaseField,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AWDBaseField*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBaseField,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBaseField,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBaseField,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,AWDBaseField,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AWDBaseField*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBaseField,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AWDBaseField*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBaseField,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AWDBaseField*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,AWDBaseField,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AWDBaseField,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,AWDBaseField,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,AWDBaseField,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,AWDBaseField,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,AWDBaseField,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDBaseField,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,AWDBaseField,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,AWDBaseField,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   AWDBaseField_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDBaseField,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDBaseField,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   AWDBaseField_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,AWDBaseField,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AWDBaseField,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,AWDBaseField,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,AWDBaseField,SOMObject,somResetObj)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,AWDBaseField,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AWDBaseField,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AWDBaseField,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* AWDBaseField */



#endif       /* SOM_AWDBaseField_xh */
