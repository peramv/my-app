#ifndef BINFILEHEADER_HPP
#define BINFILEHEADER_HPP

/**
 *    COPYRIGHT:
 *
 *    The computer systems, procedures, data bases and
 *    programs created and maintained by DST Systems, Inc.,
 *    are proprietary in nature and as such are confidential.
 *    Any unauthorized use or disclosure of such information
 *    may result in civil liabilities.
 *
 *    Copyright 2000 by DST Systems, Inc.
 */

#pragma message( "including "__FILE__ )


#ifndef COMMONPORT_H
   #include "commonport.h"
#endif

#ifndef DSTRING_HPP
   #include "dstring.hpp"
#endif

#ifndef COMMONTEMPLATES_H
   #include "commontemplates.h"
#endif

#ifndef SINGLETONREGISTER_HPP
   #include "singletonregister.hpp"
#endif

#ifndef DSTRINGA_HPP
   #include "dstringa.hpp"
#endif

#undef DICORE_LINKAGE
#ifdef DICORE_DLL
   #define DICORE_LINKAGE CLASS_EXPORT
#else
   #define DICORE_LINKAGE CLASS_IMPORT
#endif

void SetGlobalRepositorySourcePath( const DString& path );
DICORE_LINKAGE const DString& GetGlobalRepositorySourcePath ();

/**
 * This class reads in the header information stored in the
 * PropertyRepository .bin file, which includes the Markets and Clients that
 * have been setup using the DataDictionary Tools.
 *
 * This class is a singleton (it supports SingletonRegister calls), and is used
 * by both PropertyRepository and ClientLocale to determine the Clients and
 * Markets available in the .bin file.
 *
 * Due to this class' low-level nature (Condition messages interrogate it to
 * determine the format of Conditions), all Conditions generated by this class
 * are elemental Conditions that are currently displayed using only the enUS
 * locale.
 *
 * @author DST Systems Inc
 */
class DICORE_LINKAGE BinFileHeader
{
public:

   static const I_CHAR s_achNoMarket[];
   static const I_CHAR s_achNoClient[];
   static const unsigned long s_ulNoMarket;
   static const unsigned long s_ulNoClient;

   // Start with 1 (0 reserved)
   enum
   {
      BINFILEHEADER_UNABLE_TO_OPEN = 1,
      BINFILEHEADER_UNABLE_FIND_REPOSITORY_NAME,
      BINFILEHEADER_MISSING_MARKET_FOR_CLIENT,
      BINFILEHEADER_READ_SIZE_FAILED,
      BINFILEHEADER_INVALID_BIN_VERSION,
      BINFILEHEADER_MARKET_NOT_FOUND,
      BINFILEHEADER_CLIENT_NOT_FOUND,
      BINFILEHEADER_DEFAULT_MARKET_NOT_FOUND,
      BINFILEHEADER_DEFAULT_CLIENT_NOT_FOUND
   } ElementalCondition;


   class ClientMarketIndex
   {
   public:

      unsigned long ulClientId;
      unsigned long ulMarketId;

      ClientMarketIndex() :
         ulClientId( BinFileHeader::s_ulNoClient ),
         ulMarketId( BinFileHeader::s_ulNoMarket )
      {
      }

      ClientMarketIndex( unsigned long ulClientIdIn,
                         unsigned long ulMarketIdIn ) :
         ulClientId( ulClientIdIn ),
         ulMarketId( ulMarketIdIn )
      {
      }

      ClientMarketIndex( const ClientMarketIndex& copy ) :
         ulClientId( copy.ulClientId ),
         ulMarketId( copy.ulMarketId )
      {
      }

      ClientMarketIndex& operator=(
         const ClientMarketIndex& copy )
      {
         ulClientId = copy.ulClientId;
         ulMarketId = copy.ulMarketId;

         return *this;
      }

      bool operator<( const ClientMarketIndex& compare ) const
      {
         if ( ulClientId < compare.ulClientId )
         {
            return true;
         }
         else if ( ulClientId > compare.ulClientId )
         {
            return false;
         }

         if ( ulMarketId < compare.ulMarketId )
         {
            return true;
         }

         return false;
      }
   };

   typedef std::vector< ClientMarketIndex > cmi_vector;

   /**
    * Get a pointer to the global singleton instance of this class.  There is
    * no need to delete this pointer, as the singleton will be destructed on a
    * call to SingletonRegister::releaseSingletons();
    *
    * Be sure to put any calls to this method in a try/catch block so as
    * to catch the exception that is thrown if there are any problems
    * retrieving the key/value from the ConfigManager
    *
    * @return a pointer to the singleton instance
    * @exception ConditionException&
    *                   for i/o problems, configuration problems,
    *                   .bin file corruption
    */
   static BinFileHeader * getInstance();

   /**
    * Get a list of all the markets in the PropertyRepository .bin file
    *
    * @param vecMarkets - this will be filled with the indexes (from the
    *                   DataDictionary) for the markets.
    */
   void getMarkets( ul_vector& vecMarkets ) const;

   /**
    * Convert a market's name into its DataDictionary index.
    *
    * @param dstrMarket - the display name of a market
    * @return the index fron the DataDictionary
    * @exception ConditionException&
    *                   if the market's name is not in the .bin file
    */
   unsigned long getMarketIndex( const DString& dstrMarket ) const;

   /**
    * Convert a market's DataDictionary index into its name.
    *
    * @param lMarket    - the DataDictionary index whos name will be returned
    * @param dstrMarket - this will be populated with display name of a market
    * @return the index fron the DataDictionary
    * @exception ConditionException&
    *                   if the market's index is not in the .bin file
    */
   DString& getMarketName( unsigned long ulMarket, DString& dstrMarket ) const;

   /**
    * Get the DataDictionary index of the default market that is specified
    * in the .bin file.
    *
    * Note that this may not be the application's current default market.
    *
    * @return the DataDictionary index
    */
   unsigned long getDefaultMarket() const;

   /**
    * Get the DataDictionary index of the default market that is specified
    * in the .bin file.
    *
    * Note that this may not be the application's current default market.
    *
    * @return the DataDictionary index
    */
   DString getDefaultMarketName() const;

   /**
    * Get a list of all the markets in the PropertyRepository .bin file
    *
    * @param vecClients - this will be filled with the indexes (from the
    *                   DataDictionary) for the clients and the matching
    *                   markets.
    */
   void getClients( cmi_vector& vecClients ) const;

   /**
    * Convert a client's name into its DataDictionary index.
    *
    * @param ulMarket - the index of a market to which the client belongs
    * @param dstrClient - the display name of a client
    * @return the index fron the DataDictionary
    * @exception ConditionException&
    *                   if the client's name is not in the .bin file
    */
   unsigned long getClientIndex( unsigned long ulMarket,
                                 const DString& dstrClient ) const;

   /**
    * Convert a client's DataDictionary index into its name.
    *
    * @param ulMarket - the index of a market to which the client belongs
    * @param lClient    - the DataDictionary index whos name will be returned
    * @param dstrClient - this will be populated with display name of a client
    * @return the index fron the DataDictionary
    * @exception ConditionException&
    *                   if the client's index is not in the .bin file
    */
   DString& getClientName( unsigned long ulMarket,
                           unsigned long lClient,
                           DString& dstrClient ) const;

   /**
    * Get the DataDictionary index of the default client that is specified
    * in the .bin file.
    *
    * Note that this may not be the application's current default client.
    *
    * @return the DataDictionary index
    */
   unsigned long getDefaultClient() const;

   /**
    * Get the DataDictionary index of the default client that is specified
    * in the .bin file.
    *
    * Note that this may not be the application's current default client.
    *
    * @return the DataDictionary index
    */
   DString getDefaultClientName() const;

   /**
    * Get the market that is associated with a given client
    *
    * @param lClient the DataDictionary index of the client
    * @return the DataDictionary index of the associated market
    * @exception ConditionException&
    *                   if the client's index is not in the .bin file
    */
//   unsigned long getMarketForClient( unsigned long ulClient ) const;

   /**
    * Get the size of the header portion (clients and market) in the .bin file
    *
    * @return the number of bytes occupied by the header info
    */
   unsigned long getHeaderSize() const;

   /**
    * Get the filename for the .bin file
    *
    * @return the filename
    */
   const DStringA& getFileName() const;

   /**
    * Get the version number of the .bin file
    *
    * @return the version number
    */
   const DString& getVersionNumber() const;

private:

   static BinFileHeader *s_pInstance;
   SingletonRegister m_register;

   DStringA m_dstraFileName;
   unsigned long m_ulFileOffset;

   // ignored for now
   DString m_dstrByteOrder;

   DString m_dstrVersionNumber;

   // ignored for now
   DString m_dstrCRC;

   // ignored for now
   DString m_dstrReadOnly;

   long m_lNumLanguages;

   ulString_map m_mapMarkets;
   unsigned long m_ulDefaultMarket;

   typedef std::map< ClientMarketIndex,
                     DString,
                     std::less< ClientMarketIndex > > client_market_map;

   client_market_map m_mapClients;
   unsigned long m_ulDefaultClient;

//   ulul_map m_mapClientToMarket;

   BinFileHeader();

   virtual ~BinFileHeader();

   static void _deregister( void *pObj )
   {
      BinFileHeader *pBinFileHeader = ( BinFileHeader * )pObj;
      delete pBinFileHeader;
   }

   long _readNum( FILE* infile, int iSize );
   DString& _readString( FILE* infile, int iSize, DString& dstr );
};



//************************************************************************
//              Revision Control Entries
//************************************************************************
//
// Name:
//    %PM%
//    %PID%
//
// Description:
//    %PD%
//
// Design Parts:
//    %PIRP%
//
// Last Changed:
//    %PO%  -  %PRT%
//
// Changes:
//    %PLA%
//
//
// $Log:   Y:/VCS/iFastAWD/inc/binfileheader.hpp-arc  $
//
//   Rev 1.2   Nov 03 2011 23:06:04   popescu
//Repository object fix - couldn't be created due to path not found. Read the global repository path.
//
//   Rev 1.1   Nov 02 2011 04:44:10   purdyech
//Registry Cleanup
//
//   Rev 1.1   Sep 05 2000 06:05:28   dt17817
//- Remove Certificate/Authenticator
//- Fix threadsafety of client/market
//- Add "null" property value support
//
//
//   Rev 1.0   Aug 09 2000 08:24:34   dtwk
//
//

#endif

