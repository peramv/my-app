// StateCountryCodeICB.h: interface for the CStateCountryCodeICB class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_STATECOUNTRYCODEICB_H__115DE32D_DB0B_11D3_B006_002035315B36__INCLUDED_)
#define AFX_STATECOUNTRYCODEICB_H__115DE32D_DB0B_11D3_B006_002035315B36__INCLUDED_

#pragma message( "including "__FILE__ )

/*
 *    COPYRIGHT:
 *
 *    The computer systems, procedures, data bases and
 *    programs created and maintained by DST Systems, Inc.,
 *    are proprietary in nature and as such are confidential.
 *    Any unauthorized use or disclosure of such information
 *    may result in civil liabilities.
 *
 *    Copyright 2000 by DST Systems, Inc.
 */

/**@pkg DSTGUI */    

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "commonport.h"

#undef DSTGUI_LINKAGE
#ifdef DSTGUI_DLL
   #define DSTGUI_LINKAGE CLASS_EXPORT
#else
   #define DSTGUI_LINKAGE CLASS_IMPORT
#endif

/**@#-*/
//forward declares
class ListBase;
class IIntelComboBox;
/**@#+*/

/**
 * Class to implement a State / Country Code list box.
 *
 * This class wraps an Intelligent Combo Box (ICB) and populates it with the
 * list of states and or countries.  It fills in the list box portion with a
 * concatination of the medium name and the country code.  The state
 * abbreviation and the country code are each used as additional indexes for
 * searching purposes with the state abbreviation being the primary index.<BR>
 *
 * The list of entries is extracted from a ListBase derived object using the
 * tags defined for the VIEW1242 return buffer.  If a pointer to a ListBase
 * object is not given, then a pointer to the StateCountryList singleton will
 * be used.
 */
class DSTGUI_LINKAGE CStateCountryCodeICB
{
public:
   enum ForeignDomestic
   {
      FD_NONE,
      FD_DOMESTIC,
      FD_FOREIGN,
      FD_BOTH
   };

public:
   /**
    * Default contstructor.
    *
    * @param filter - Filter used to determine if the list is exclusively
    *                 foreign or domestic, or contains both.
    */
   CStateCountryCodeICB( const ForeignDomestic filter = FD_DOMESTIC );

   /**
    * Constructor.
    *
    * @param pList  - Pointer to a ListBase derrived object containing a list
    *                 of State & Country codes.
    *
    * @param filter - Filter used to determine if the list is exclusively
    *                 foreign or domestic, or contains both.
    */
   CStateCountryCodeICB( ListBase *pList, const ForeignDomestic filter = FD_DOMESTIC );

   /**
    * Destructor.
    */
   virtual ~CStateCountryCodeICB();

   /**
    * This method is used to attach an ICB to a CStateCountryCodeICB object.
    * The CWnd object is first verified to be an ICB.  It is then populated
    * using the member pointer to a ListBase object as a source for items for
    * the list. Only those items that match the filter are added to the list.
    *
    * @param wndICB - CWnd derrived wrapper class for an ICB generated by the
    *                 class wizard.
    *
    * @return True if successfully attached.
    */
   bool Attach( CWnd &wndICB );

   /**
    * This method is used to attach an ICB to a CStateCountryCodeICB object.
    * The CWnd object is first verified to be an ICB.  It is then populated
    * using the pointer to a ListBase object passed in as a source for items for
    * the list. Only those items that match the filter are added to the list.
    *
    * @param wndICB - CWnd derrived wrapper class for an ICB generated by the
    *                 class wizard.
    *
    * @param pList  - Pointer to a ListBase derrived object containing a list
    *                 of State & Country codes.
    *
    * @return True if successfully attached.
    */
   bool Attach( CWnd &wndICB, ListBase *pList );

   /**
    * Detaches an ICB from a CStateCountryCodeICB object.
    */
   void Detach();

   /**
    * Returns the current selection.  The current selection is returned by
    * assigning it to the CString object passed in.
    *
    * @param strSelection  - CString object to receive the selection.
    *
    * @return True if strSelection has a value.
    */
   bool GetSelection( CString &strSelection );

   /**
    * Returns the state abbreviation for the current selection.  The state
    * abbreviation is returned by assigning it to the CString object passed in.
    *
    * @param strStateAbbr - CString object to receive the state abbreviation.
    *
    * @return True if strStateAbbr has a value.
    */
   bool GetSelectedStateAbbr( CString &strStateAbbr );

   /**
    * Returns the country code for the current selection.  The country code is
    * returned by assigning it to the CString object passed in.  If the code
    * is less than 100, then it will be padded with zeroes on the left so the
    * string length is three.
    *
    * I.E. <b>002</b> for Arizona, <b>015</b> for Kansas
    *
    * @param strCountryCode - CString object to receive the country code.
    *
    * @return True if strCountryCode has a value.
    */
   bool GetSelectedCountryCode( CString &strCountryCode );

   /**
    * Returns whether the current selection is foreign or domestic.  If there
    * is no selection, then FD_NONE is returned.
    *
    * @return FD_FOREIGN, FD_DOMESTIC, or FD_NONE
    */
   ForeignDomestic GetSelectedForeignDomestic();

   /**
    * Selects a list entry by its state abbreviation.
    *
    * @param strStateAbbr - The two letter code representing a state or country.
    *
    * @return True if an item in the list was selected.
    */
   bool SelectByStateAbbr( LPCTSTR strStateAbbr );

   /**
    * Selects a list entry by its country code.
    *
    * @param strCountryCode - The three digit code identifying a state or
    *                         country.
    *
    * @return True if an item in the list was selected.
    */
   bool SelectByCountryCode( LPCTSTR strCountryCode );

   /**
    * Sets the filter to use for popluating the list.  Calling this method will
    * cause the CStateCountryCodeICB object to refresh the ICB.
    *
    * @param filter - FD_FOREIGN, FD_DOMESTIC, or FD_BOTH
    */
   void SetFilter( const ForeignDomestic filter );

   /**
    * Sets the pointer to the ListBase object to use as a source for the list.
    * Calling this method will cause the CStateCountryCodeICB object to refresh
    * the ICB.
    *
    * @param pList  - ListBase pointer
    */
   void UseList( ListBase *pList );

   /**
    * Invokes the CStateCountryCodeICB object to refresh the ICB.
    */
   void Refresh();

private:
   void p_Refresh();
   void p_GetCurrentText( CString &strText, long lSubIndex );
   int p_SelectText( LPCTSTR strText );

   IIntelComboBox *m_pICB;
   ListBase *m_pList;
   ForeignDomestic m_filter;
};

#endif // !defined(AFX_STATECOUNTRYCODEICB_H__115DE32D_DB0B_11D3_B006_002035315B36__INCLUDED_)


//************************************************************************
//              Revision Control Entries
//************************************************************************
//
// Name:
//    %PM%
//    %PID%
//
// Description:
//    %PD%
//
// Design Parts:
//    %PIRP%
//
// Last Changed:
//    %PO%  -  %PRT%
//
// Changes:
//    %PLA%
//
//

