///////////////////////////////////////////////////////////////////////////////
// exprscan.cpp: A lexical scanner generated by GNU flex
//
// Copyright (c) 1997-2012 Rogue Wave Software, Inc.  All Rights Reserved.
//
// This computer software is owned by Rogue Wave Software, Inc. and is protected by
// U.S. copyright laws and other laws and by international treaties. This
// computer software is furnished by Rogue Wave Software, Inc. pursuant to a written
// license agreement and may be used, copied, transmitted, and stored
// only in accordance with the terms of such license agreement and with
// the inclusion of the above copyright notice.  This computer software or
// any other copies thereof may not be provided or otherwise made available
// to any other person.
//
// U.S. Government Restricted Rights.  This computer software:
//      (a) was developed at private expense and is in all respects the
//          proprietary information of Rogue Wave Software, Inc.;
//      (b) was not developed with government funds;
//      (c) is a trade secret of Rogue Wave Software, Inc. for all purposes of the
//          Freedom of Information Act; and
//      (d) is a commercial item and thus, pursuant to Section 12.212
//          of the Federal Acquisition Regulations (FAR) and DFAR
//          Supplement Section 227.7202, Government’s use, duplication or
//          disclosure of the computer software is subject to the restrictions
//          set forth by Rogue Wave Software, Inc.
//
///////////////////////////////////////////////////////////////////////////////
//
// Author: Stefan Hoenig
//
// Portions Copyright (C) 1995-1998 X Engineering Software Systems Corp
//

#define _OG_EXPORT_IMPL
#define _RW_IMPL

#include "stdafx.h"
#include "grid\gxsinc.h"
#include "exprscan.h"


#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#define new DEBUG_NEW
#endif

// SH - don't use stdin/stdout
#define YY_NEVER_INTERACTIVE 1
// #define YY_USER_INIT         if ( ! YY_CURRENT_BUFFER )  YY_CURRENT_BUFFER = yy_create_buffer( 0, YY_BUF_SIZE );
#define YY_USER_INIT
#define YY_NO_UNPUT


#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
// #include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else   /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif  /* __STDC__ */
#endif  /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif                 

#if _MFC_VER < 0x0300
typedef unsigned char TBYTE;
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed TCHAR to an unsigned
 * integer for use as an array index.  If the signed TCHAR is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (TBYTE) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN GXGetParseState()->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((GXGetParseState()->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

// extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *  if ( condition_holds )
 *      yyless( 5 );
 *  else
 *      do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = GXGetParseState()->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		GXGetParseState()->yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	TCHAR *yy_ch_buf;       /* input buffer */
	TCHAR *yy_buf_pos;      /* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use _gettc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

// static YY_BUFFER_STATE YY_CURRENT_BUFFER = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER GXGetParseState()->yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
// static TCHAR yy_hold_char;

// static int yy_n_chars;      /* number of characters read into yy_ch_buf */


// int yyleng;

/* Points to current character in buffer. */
// static TCHAR *yy_c_buf_p = (TCHAR *) 0;
// static int yy_init = 1;     /* whether we need to initialize */
// static int yy_start = 0;    /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
// static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

// SH->
GX_PARSE_STATE::GX_PARSE_STATE()
{
	yy_current_buffer = 0;
	yy_hold_char = 0;
	yy_n_chars = 0;      /* number of characters read into yy_ch_buf */
	yyleng = 0;

	/* Points to current character in buffer. */
	yy_c_buf_p = (TCHAR *) 0;
	yy_init = 1;     /* whether we need to initialize */
	yy_start = 0;    /* start state number */

	/* Flag which is used to allow yywrap()'s to do buffer switches
	 * instead of setting up a fresh yyin.  A bit of a hack ...
	 */
	yy_did_buffer_switch_on_eof = 0;
	yy_last_accepting_state = 0;
	yy_last_accepting_cpos = 0;

	formula_buffer = 0;      /* Text buffer holding formula    */
	position = 0;          /* Current position in buffer     */
	scanner_init_first = 1;
}

GX_PARSE_STATE::~GX_PARSE_STATE()
{
	if (yy_current_buffer) yy_delete_buffer(yy_current_buffer); 
}

GX_PARSE_STATE* GXGetParseState()
{
	CGXAppData* pAppData = GXGetAppData();
	if (pAppData->m_pParseState == NULL)
		pAppData->m_pParseState = new GX_PARSE_STATE;

	return (GX_PARSE_STATE*) pAppData->m_pParseState;
}

/*
struct Ccleanupbuffer
{
	~Ccleanupbuffer() { if (YY_CURRENT_BUFFER) yy_delete_buffer(YY_CURRENT_BUFFER); }
};

static  Ccleanupbuffer cleanup;
*/
// ->END

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( TCHAR *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst TCHAR *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst TCHAR *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ) \
		YY_CURRENT_BUFFER = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	YY_CURRENT_BUFFER->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ) \
		YY_CURRENT_BUFFER = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	YY_CURRENT_BUFFER->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER->yy_at_bol)

typedef int YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
//typedef int yy_state_type;
// extern TCHAR *yytext;
#define yytext_ptr GXGetParseState()->yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst TCHAR msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	GXGetParseState()->yyleng = (int) (yy_cp - yy_bp); \
	GXGetParseState()->yy_hold_char = *yy_cp; \
	*yy_cp = _T('\0'); \
	GXGetParseState()->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 51
#define YY_END_OF_BUFFER 52
static yyconst short int yy_accept[100] =
    {   0,
        0,    0,   52,   50,   49,   51,   24,   50,   15,    2,
       21,   23,   28,   29,   19,   17,   13,   18,   10,   20,
        6,    6,   12,   11,   26,   32,   27,   14,    3,    2,
       16,   33,    2,   30,   22,   31,   25,   49,   41,    0,
        4,    0,    0,    0,    0,    2,    2,   35,   34,   44,
        8,    9,    7,    6,    0,    0,   37,   39,   42,   43,
       40,   38,   45,    3,    2,    1,    2,   36,    4,    0,
        0,    0,    0,    9,    7,    0,    5,    0,    6,    1,
        2,    0,    0,   47,    0,    8,    0,    0,    7,    1,
       46,   48,    0,    7,    1,    1,    1,    1,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   28,   29,   28,   28,
       30,   30,   30,   30,   30,   30,   30,   31,   32,   30,
       30,   33,   30,   34,   30,   30,   30,   35,   30,   30,
        1,   36,    1,   37,   38,    1,   27,   28,   28,   29,

       39,   28,   30,   30,   30,   30,   30,   30,   30,   31,
       32,   30,   30,   33,   30,   34,   30,   30,   30,   35,
       30,   30,   40,   41,   42,   43,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    1,    4,    4,    1,
        1,    1,    1,    1,    1,    5,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1,    1,    4,    4,    1,
        1,    1,    1
    } ;

static yyconst short int yy_base[107] =
    {   0,
        0,    0,  202,  203,  199,  203,  177,   39,   18,   39,
      203,  190,  203,  203,  186,  203,  203,  203,   35,  180,
       43,   47,  203,  203,   45,  173,   24,  165,    0,   65,
      203,  203,    0,  203,  113,  203,  203,  131,  203,   51,
      203,   55,   97,   82,   75,    0,   78,  203,  203,  203,
       61,    0,   70,   74,   83,  102,  203,  203,  203,  203,
      203,  203,  203,    0,   52,   55,   88,  203,   93,   76,
       65,   70,  112,    0,  100,  119,  117,  105,  122,  124,
      140,   58,   46,  203,  130,  132,  142,  134,  144,  146,
      203,  203,  148,  150,  152,  154,  156,    0,  203,  175,

      178,  179,  182,  184,  188,  191
    } ;

static yyconst short int yy_def[107] =
    {   0,
       99,    1,   99,   99,   99,   99,   99,  100,   99,  101,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  102,  103,
       99,   99,  104,   99,   99,   99,   99,   99,   99,  100,
       99,  100,   99,   99,   99,  104,  103,   99,   99,   99,
       99,  105,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,  102,  104,  104,  106,   99,  100,   99,
       99,   99,   99,  105,   99,   99,   99,   99,   99,  104,
      104,   99,   99,   99,   99,   99,   99,   99,   99,  104,
       99,   99,   99,   99,  104,  104,  104,  104,    0,   99,

       99,   99,   99,   99,   99,   99
    } ;

static yyconst short int yy_nxt[247] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   31,   32,   33,   30,   34,
       35,   36,   37,   41,   43,   46,   61,   62,   44,   45,
       50,   92,   51,   51,   46,   41,   46,   46,   53,   69,
       54,   54,   53,   91,   54,   54,   57,   58,   59,   66,
       66,   65,   80,   80,   42,   84,   46,   55,   51,   51,
       46,   56,   66,   66,   65,   56,   42,   75,   75,   53,
       42,   54,   54,   46,   65,   66,   66,   41,   83,   73,

       77,   77,   46,   46,   82,   66,   66,   72,   76,   77,
       77,   77,   56,   71,   78,   46,   78,   75,   75,   79,
       79,   77,   79,   79,   85,   46,   85,   70,   42,   86,
       86,   88,   38,   88,   77,   77,   89,   89,   87,   79,
       79,   90,   90,   77,   77,   77,   65,   86,   86,   86,
       86,   89,   89,   68,   93,   77,   93,   66,   66,   94,
       94,   89,   89,   95,   95,   94,   94,   94,   94,   96,
       96,   97,   97,   98,   98,   40,   40,   40,   40,   40,
       47,   47,   64,   64,   67,   67,   46,   46,   74,   63,
       74,   74,   74,   81,   81,   60,   52,   49,   48,   39,

       38,   99,    3,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99
    } ;

static yyconst short int yy_chk[247] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    8,    9,   10,   27,   27,    9,    9,
       19,   83,   19,   19,   10,   40,   10,   10,   21,   42,
       21,   21,   22,   82,   22,   22,   25,   25,   25,   65,
       65,   30,   66,   66,    8,   72,   10,   21,   51,   51,
       30,   21,   30,   30,   47,   22,   40,   53,   53,   54,
       42,   54,   54,   47,   67,   47,   47,   69,   71,   51,

       55,   55,   30,   67,   70,   67,   67,   45,   53,   55,
       55,   55,   54,   44,   56,   47,   56,   75,   75,   56,
       56,   55,   78,   78,   73,   67,   73,   43,   69,   73,
       73,   76,   38,   76,   77,   77,   76,   76,   75,   79,
       79,   80,   80,   77,   77,   77,   81,   85,   85,   86,
       86,   88,   88,   35,   87,   77,   87,   81,   81,   87,
       87,   89,   89,   90,   90,   93,   93,   94,   94,   95,
       95,   96,   96,   97,   97,  100,  100,  100,  100,  100,
      101,  101,  102,  102,  103,  103,  104,  104,  105,   28,
      105,  105,  105,  106,  106,   26,   20,   15,   12,    7,

        5,    3,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99
    } ;

// static yy_state_type yy_last_accepting_state;
// static TCHAR *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
// TCHAR *yytext;
// #line 1 "exprscan.l"
#define INITIAL 0

// #line 9 "exprscan.l"

// static LPCTSTR formula_buffer;      /* Text buffer holding formula    */
// static gxSToken  token;             /* Token being scanned            */
// static int   position;          /* Current position in buffer     */

static gxSToken  mk_token (int, int, TokType);

static int   my_yyinput (TCHAR*, int);   /* Provides FLEX input from buffer*/
// static int   input_pointer;             /* Points to FLEX's position      */
// static int   input_length;          /* Length of formula text         */

#undef YY_INPUT
#define YY_INPUT(b,r,ms)    (r=my_yyinput(b,ms))

#undef YY_DECL
#define YY_DECL     gxSToken  __cdecl _gx_get_token (int si)

#undef yyterminate
#define yyterminate()   \
	{ \
	gxSToken    token; \
	token.type = GX_T_END_OF_EXPR; \
	token.text = NULL; \
	token.position = GXGetParseState()->position; \
	return token; \
	}
// #line 485 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, TCHAR *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( TCHAR *, yyconst TCHAR *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst TCHAR * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
//static int yy_start_stack_ptr = 0;
//static int yy_start_stack_depth = 0;
//static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an _fputts(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( GXGetParseState()->yytext, GXGetParseState()->yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER->yy_is_interactive ) \
		{ \
		int c = _T('*'), n; \
		for ( n = 0; n < max_size && \
				 (c = _gettc( yyin )) != EOF && c != _T('\n'); ++n ) \
			buf[n] = (TCHAR) c; \
		if ( c == _T('\n') ) \
			buf[n++] = (TCHAR) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( _T("input in flex scanner failed") ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( _T("input in flex scanner failed") );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register TCHAR *yy_cp, *yy_bp;
	register int yy_act;

// #line 41 "exprscan.l"


/*-----------------------------------------------------------------------*/
  /* gxCell names                                                            */


// #line 643 "lex.yy.c"

	if ( GXGetParseState()->yy_init )
		{
		GXGetParseState()->yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! GXGetParseState()->yy_start )
			GXGetParseState()->yy_start = 1;   /* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER )
			YY_CURRENT_BUFFER =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )     /* loops until end-of-file is reached */
		{
		yy_cp = GXGetParseState()->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = GXGetParseState()->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = GXGetParseState()->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				GXGetParseState()->yy_last_accepting_state = yy_current_state;
				GXGetParseState()->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 100 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 203 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = GXGetParseState()->yy_last_accepting_cpos;
			yy_current_state = GXGetParseState()->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:  /* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = GXGetParseState()->yy_hold_char;
			yy_cp = GXGetParseState()->yy_last_accepting_cpos;
			yy_current_state = GXGetParseState()->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
// #line 47 "exprscan.l"
{ if (_gx_text_to_col(GXGetParseState()->yytext +
							  (*GXGetParseState()->yytext == _T('$'))) == -1)
					GXGetParseState()->token.type = GX_T_NAME;
				  else
					GXGetParseState()->token.type = GX_T_CELL;
				  GXGetParseState()->token.text = _gx_xs_strdup(GXGetParseState()->yytext);
				  GXGetParseState()->token.position = GXGetParseState()->position;
				  GXGetParseState()->position += GXGetParseState()->yyleng;
				  return GXGetParseState()->token;
				}
	YY_BREAK
/*-----------------------------------------------------------------------*/
  /* Other names                                                           */

case 2:
YY_RULE_SETUP
// #line 63 "exprscan.l"
{ gxRange range;
				  if (!_gx_text_to_range(GXGetParseState()->yytext, &range))
					GXGetParseState()->token.type = GX_T_NAME;
				  else
					{
					int n = (int)(_tcschr(GXGetParseState()->yytext, _T('.')) - GXGetParseState()->yytext);
					yyless(n);
					GXGetParseState()->token.type = GX_T_CELL;
					}
				  GXGetParseState()->token.text = _gx_xs_strdup(GXGetParseState()->yytext);
				  GXGetParseState()->token.position = GXGetParseState()->position;
				  GXGetParseState()->position += GXGetParseState()->yyleng;
				  return GXGetParseState()->token;
				}
	YY_BREAK
/*-----------------------------------------------------------------------*/
  /* Function names                                                        */

case 3:
YY_RULE_SETUP
// #line 83 "exprscan.l"
{ GXGetParseState()->token.type = GX_T_FUNCTION;
				  GXGetParseState()->token.text = _gx_xs_strdup(GXGetParseState()->yytext+1);
				  GXGetParseState()->token.position = GXGetParseState()->position;
				  GXGetParseState()->position += GXGetParseState()->yyleng;
				  return GXGetParseState()->token;
				}
	YY_BREAK
/*-----------------------------------------------------------------------*/
  /* Strings                                                               */

case 4:
YY_RULE_SETUP
// #line 95 "exprscan.l"
{ GXGetParseState()->token.type = GX_T_STRING;
				  GXGetParseState()->yytext[GXGetParseState()->yyleng-1] = _T('\0');
				  GXGetParseState()->token.text = _gx_xs_strdup(GXGetParseState()->yytext+1);
				  GXGetParseState()->token.position = GXGetParseState()->position;
				  GXGetParseState()->position += GXGetParseState()->yyleng;
				  return GXGetParseState()->token;
				}
	YY_BREAK
/*-----------------------------------------------------------------------*/
  /* Hexadecimal numbers                                                   */

case 5:
YY_RULE_SETUP
// #line 108 "exprscan.l"
{ GXGetParseState()->token.type = GX_T_HEX_NUMBER;
				  GXGetParseState()->token.text = _gx_xs_strdup(GXGetParseState()->yytext+2);
				  GXGetParseState()->token.position = GXGetParseState()->position;
				  GXGetParseState()->position += GXGetParseState()->yyleng;
				  return GXGetParseState()->token;
				}
	YY_BREAK
/*-----------------------------------------------------------------------*/
  /* Generic, floating point numbers                                       */

case 6:
// #line 121 "exprscan.l"
case 7:
// #line 122 "exprscan.l"
case 8:
YY_RULE_SETUP
// #line 122 "exprscan.l"
{ GXGetParseState()->token.type = GX_T_NUMBER;
				  GXGetParseState()->token.text = _gx_xs_strdup(GXGetParseState()->yytext);
				  GXGetParseState()->token.position = GXGetParseState()->position;
				  GXGetParseState()->position += GXGetParseState()->yyleng;
				  return GXGetParseState()->token;
				}
	YY_BREAK
/*-----------------------------------------------------------------------*/
  /* Comments                                                              */

case 9:
YY_RULE_SETUP
// #line 134 "exprscan.l"
{ GXGetParseState()->token.type = GX_T_COMMENT;
				  GXGetParseState()->token.text = _gx_xs_strdup(GXGetParseState()->yytext+2);
				  GXGetParseState()->token.position = GXGetParseState()->position;
				  GXGetParseState()->position += GXGetParseState()->yyleng;
				  return GXGetParseState()->token;
				}
	YY_BREAK
/*-----------------------------------------------------------------------*/
  /* Single character tokens                                               */

case 10:
YY_RULE_SETUP
// #line 146 "exprscan.l"
{ return mk_token(si, 0, GX_T_DOT);       }
	YY_BREAK
case 11:
YY_RULE_SETUP
// #line 147 "exprscan.l"
{ return mk_token(si, 1, GX_T_SEMICOLON); }
	YY_BREAK
case 12:
YY_RULE_SETUP
// #line 148 "exprscan.l"
{ return mk_token(si, 1, GX_T_COLON);     }
	YY_BREAK
case 13:
YY_RULE_SETUP
// #line 149 "exprscan.l"
{ return mk_token(si, 0, GX_T_COMMA);     }
	YY_BREAK
case 14:
YY_RULE_SETUP
// #line 150 "exprscan.l"
{ return mk_token(si, 1, GX_T_QMARK);     }
	YY_BREAK
case 15:
YY_RULE_SETUP
// #line 151 "exprscan.l"
{ return mk_token(si, 1, GX_T_POUND);     }
	YY_BREAK
case 16:
YY_RULE_SETUP
// #line 152 "exprscan.l"
{ return mk_token(si, 1, GX_T_BACKSLASH); }
	YY_BREAK
case 17:
YY_RULE_SETUP
// #line 153 "exprscan.l"
{ return mk_token(si, 0, GX_T_PLUS);      }
	YY_BREAK
case 18:
YY_RULE_SETUP
// #line 154 "exprscan.l"
{ return mk_token(si, 0, GX_T_MINUS);     }
	YY_BREAK
case 19:
YY_RULE_SETUP
// #line 155 "exprscan.l"
{ return mk_token(si, 0, GX_T_STAR);      }
	YY_BREAK
case 20:
YY_RULE_SETUP
// #line 156 "exprscan.l"
{ return mk_token(si, 0, GX_T_SLASH);     }
	YY_BREAK
case 21:
YY_RULE_SETUP
// #line 157 "exprscan.l"
{ return mk_token(si, 0, GX_T_PERCENT);   }
	YY_BREAK
case 22:
YY_RULE_SETUP
// #line 158 "exprscan.l"
{ return mk_token(si, 1, GX_T_BAR);       }
	YY_BREAK
case 23:
YY_RULE_SETUP
// #line 159 "exprscan.l"
{ return mk_token(si, 0, GX_T_AMPERSAND); }
	YY_BREAK
case 24:
YY_RULE_SETUP
// #line 160 "exprscan.l"
{ return mk_token(si, 1, GX_T_BANG);      }
	YY_BREAK
case 25:
YY_RULE_SETUP
// #line 161 "exprscan.l"
{ return mk_token(si, 1, GX_T_TILDE);     }
	YY_BREAK
case 26:
YY_RULE_SETUP
// #line 162 "exprscan.l"
{ return mk_token(si, 0, GX_T_LANGLE);    }
	YY_BREAK
case 27:
YY_RULE_SETUP
// #line 163 "exprscan.l"
{ return mk_token(si, 0, GX_T_RANGLE);    }
	YY_BREAK
case 28:
YY_RULE_SETUP
// #line 164 "exprscan.l"
{ return mk_token(si, 0, GX_T_LPAREN);    }
	YY_BREAK
case 29:
YY_RULE_SETUP
// #line 165 "exprscan.l"
{ return mk_token(si, 0, GX_T_RPAREN);    }
	YY_BREAK
case 30:
YY_RULE_SETUP
// #line 166 "exprscan.l"
{ return mk_token(si, 1, GX_T_LBRACE);    }
	YY_BREAK
case 31:
YY_RULE_SETUP
// #line 167 "exprscan.l"
{ return mk_token(si, 1, GX_T_RBRACE);    }
	YY_BREAK
case 32:
YY_RULE_SETUP
// #line 168 "exprscan.l"
{ return mk_token(si, 0, GX_T_EQUAL);     }
	YY_BREAK
case 33:
YY_RULE_SETUP
// #line 170 "exprscan.l"
{ //if (_gx_get_context_ptr(si)->lotus_mode)
					//token.type = GX_T_D_STAR;
				  //else
					GXGetParseState()->token.type = GX_T_CARET;
				  GXGetParseState()->token.text = NULL;
				  GXGetParseState()->token.position = GXGetParseState()->position;
				  GXGetParseState()->position += GXGetParseState()->yyleng;
				  return GXGetParseState()->token;
				}
	YY_BREAK
/*-----------------------------------------------------------------------*/
  /* Double character tokens                                               */

case 34:
YY_RULE_SETUP
// #line 185 "exprscan.l"
{ return mk_token(si, 1,GX_T_D_STAR);       }
	YY_BREAK
case 35:
YY_RULE_SETUP
// #line 186 "exprscan.l"
{ return mk_token(si, 1,GX_T_D_AMPERSAND);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
// #line 187 "exprscan.l"
{ return mk_token(si, 1,GX_T_D_BAR);        }
	YY_BREAK
case 37:
YY_RULE_SETUP
// #line 188 "exprscan.l"
{ return mk_token(si, 1,GX_T_D_LANGLE);     }
	YY_BREAK
case 38:
YY_RULE_SETUP
// #line 189 "exprscan.l"
{ return mk_token(si, 1,GX_T_D_RANGLE);     }
	YY_BREAK
case 39:
YY_RULE_SETUP
// #line 190 "exprscan.l"
{ return mk_token(si, 0,GX_T_LANGLE_EQUAL); }
	YY_BREAK
case 40:
YY_RULE_SETUP
// #line 191 "exprscan.l"
{ return mk_token(si, 0,GX_T_RANGLE_EQUAL); }
	YY_BREAK
case 41:
YY_RULE_SETUP
// #line 192 "exprscan.l"
{ return mk_token(si, 1,GX_T_BANG_EQUAL);   }
	YY_BREAK
case 42:
YY_RULE_SETUP
// #line 193 "exprscan.l"
{ return mk_token(si, 0,GX_T_BANG_EQUAL);   }
	YY_BREAK
case 43:
YY_RULE_SETUP
// #line 194 "exprscan.l"
{ return mk_token(si, 1,GX_T_EQUAL_EQUAL);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
// #line 195 "exprscan.l"
{ return mk_token(si, 0,GX_T_DOT_DOT);      }
	YY_BREAK
case 45:
YY_RULE_SETUP
// #line 196 "exprscan.l"
{ return mk_token(si, 0,GX_T_D_QMARK);      }
	YY_BREAK
/*-----------------------------------------------------------------------*/
  /* Lotus logical operators                                               */

case 46:
YY_RULE_SETUP
// #line 203 "exprscan.l"
{ return mk_token(si, 0, GX_T_D_AMPERSAND); }
	YY_BREAK
case 47:
YY_RULE_SETUP
// #line 204 "exprscan.l"
{ return mk_token(si, 0, GX_T_D_BAR);       }
	YY_BREAK
case 48:
YY_RULE_SETUP
// #line 205 "exprscan.l"
{ return mk_token(si, 0, GX_T_BANG);        }
	YY_BREAK
/*-----------------------------------------------------------------------*/
  /* Ignore otherwise uncaptured spaces and tabs                           */

case 49:
YY_RULE_SETUP
// #line 212 "exprscan.l"
{ GXGetParseState()->position += GXGetParseState()->yyleng; }
	YY_BREAK
/*-----------------------------------------------------------------------*/
  /* End of input string processing                                        */

case YY_STATE_EOF(INITIAL):
// #line 219 "exprscan.l"
{ yyterminate() }
	YY_BREAK
/*-----------------------------------------------------------------------*/
  /* Everything at this point is an illegal character                      */

case 50:
YY_RULE_SETUP
// #line 226 "exprscan.l"
{ GXGetParseState()->token.type = GX_T_ERROR;
				  GXGetParseState()->token.code = GX_SCAN_ERR_BAD_CHAR;
				  GXGetParseState()->token.position = GXGetParseState()->position;
				  GXGetParseState()->position += GXGetParseState()->yyleng;
				  return GXGetParseState()->token;
				}
	YY_BREAK
case 51:
YY_RULE_SETUP
// #line 233 "exprscan.l"
ECHO;
	YY_BREAK
// #line 1076 "lex.yy.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB TCHAR. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = GXGetParseState()->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			GXGetParseState()->yy_n_chars = YY_CURRENT_BUFFER->yy_n_chars;
			YY_CURRENT_BUFFER->yy_input_file = yyin;
			YY_CURRENT_BUFFER->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for GXGetParseState()->yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since GXGetParseState()->yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( GXGetParseState()->yy_c_buf_p <= &YY_CURRENT_BUFFER->yy_ch_buf[GXGetParseState()->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			GXGetParseState()->yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++GXGetParseState()->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = GXGetParseState()->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				GXGetParseState()->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * GXGetParseState()->yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					GXGetParseState()->yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! GXGetParseState()->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				GXGetParseState()->yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = GXGetParseState()->yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				GXGetParseState()->yy_c_buf_p =
				&YY_CURRENT_BUFFER->yy_ch_buf[GXGetParseState()->yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = GXGetParseState()->yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			_T("fatal flex scanner internal error--no action found") );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *  EOB_ACT_LAST_MATCH -
 *  EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *  EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register TCHAR *dest = YY_CURRENT_BUFFER->yy_ch_buf;
	register TCHAR *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( GXGetParseState()->yy_c_buf_p > &YY_CURRENT_BUFFER->yy_ch_buf[GXGetParseState()->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		_T("fatal flex scanner internal error--end of buffer missed") );

	if ( YY_CURRENT_BUFFER->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( GXGetParseState()->yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (GXGetParseState()->yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER->yy_n_chars = GXGetParseState()->yy_n_chars = 0;

	else
		{
		int num_to_read =
			YY_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
_T("input buffer overflow, can't enlarge buffer because scanner uses REJECT") );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (GXGetParseState()->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (TCHAR *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 (b->yy_buf_size + 2)*sizeof(TCHAR) );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				_T("fatal error - scanner input buffer overflow") );

			GXGetParseState()->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
			GXGetParseState()->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER->yy_n_chars = GXGetParseState()->yy_n_chars;
		}

	if ( GXGetParseState()->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	GXGetParseState()->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER->yy_ch_buf[GXGetParseState()->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER->yy_ch_buf[GXGetParseState()->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &YY_CURRENT_BUFFER->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB TCHAR was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register TCHAR *yy_cp;

	yy_current_state = GXGetParseState()->yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < GXGetParseState()->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			GXGetParseState()->yy_last_accepting_state = yy_current_state;
			GXGetParseState()->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 100 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *  next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register TCHAR *yy_cp = GXGetParseState()->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		GXGetParseState()->yy_last_accepting_state = yy_current_state;
		GXGetParseState()->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 100 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 99);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register TCHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register TCHAR *yy_bp;
#endif
	{
	register TCHAR *yy_cp = GXGetParseState()->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = GXGetParseState()->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = GXGetParseState()->yy_n_chars + 2;
		register TCHAR *dest = &YY_CURRENT_BUFFER->yy_ch_buf[
					YY_CURRENT_BUFFER->yy_buf_size + 2];
		register TCHAR *source =
				&YY_CURRENT_BUFFER->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER->yy_n_chars =
			GXGetParseState()->yy_n_chars = YY_CURRENT_BUFFER->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER->yy_ch_buf + 2 )
			YY_FATAL_ERROR( _T("flex scanner push-back overflow") );
		}

	*--yy_cp = (TCHAR) c;


	yytext_ptr = yy_bp;
	GXGetParseState()->yy_hold_char = *yy_cp;
	GXGetParseState()->yy_c_buf_p = yy_cp;
	}
#endif  /* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*GXGetParseState()->yy_c_buf_p = GXGetParseState()->yy_hold_char;

	if ( *GXGetParseState()->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* GXGetParseState()->yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( GXGetParseState()->yy_c_buf_p < &YY_CURRENT_BUFFER->yy_ch_buf[GXGetParseState()->yy_n_chars] )
			/* This was really a NUL. */
			*GXGetParseState()->yy_c_buf_p = _T('\0');

		else
			{ /* need more input */
			int offset = (int)(GXGetParseState()->yy_c_buf_p - yytext_ptr);
			++GXGetParseState()->yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! GXGetParseState()->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					GXGetParseState()->yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(TBYTE *) GXGetParseState()->yy_c_buf_p;  /* cast for 8-bit TCHAR's */
	*GXGetParseState()->yy_c_buf_p = _T('\0'); /* preserve yytext */
	GXGetParseState()->yy_hold_char = *++GXGetParseState()->yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! YY_CURRENT_BUFFER )
		YY_CURRENT_BUFFER = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*GXGetParseState()->yy_c_buf_p = GXGetParseState()->yy_hold_char;
		YY_CURRENT_BUFFER->yy_buf_pos = GXGetParseState()->yy_c_buf_p;
		YY_CURRENT_BUFFER->yy_n_chars = GXGetParseState()->yy_n_chars;
		}

	YY_CURRENT_BUFFER = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	GXGetParseState()->yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	GXGetParseState()->yy_n_chars = YY_CURRENT_BUFFER->yy_n_chars;
	yytext_ptr = GXGetParseState()->yy_c_buf_p = YY_CURRENT_BUFFER->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER->yy_input_file;
	GXGetParseState()->yy_hold_char = *GXGetParseState()->yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( _T("out of dynamic memory in yy_create_buffer()") );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (TCHAR *) yy_flex_alloc( (b->yy_buf_size + 2)*sizeof(TCHAR) );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( _T("out of dynamic memory in yy_create_buffer()") );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER )
		YY_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( TCHAR *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
TCHAR *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
		 base[size-2] != YY_END_OF_BUFFER_CHAR ||
		 base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( _T("out of dynamic memory in yy_scan_buffer()") );

	b->yy_buf_size = size - 2;  /* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst TCHAR *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst TCHAR *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst TCHAR *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst TCHAR *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	TCHAR *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (TCHAR *) yy_flex_alloc( n * sizeof(TCHAR) );
	if ( ! buf )
		YY_FATAL_ERROR( _T("out of dynamic memory in yy_scan_bytes()") );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( _T("bad buffer in yy_scan_bytes()") );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( GXGetParseState()->yy_start_stack_ptr >= GXGetParseState()->yy_start_stack_depth )
		{
		yy_size_t new_size;

		GXGetParseState()->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = GXGetParseState()->yy_start_stack_depth * sizeof( int );

		if ( ! GXGetParseState()->yy_start_stack )
			GXGetParseState()->yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			GXGetParseState()->yy_start_stack = (int *) yy_flex_realloc(
					(void *) GXGetParseState()->yy_start_stack, new_size );

		if ( ! GXGetParseState()->yy_start_stack )
			YY_FATAL_ERROR(
			_T("out of memory expanding start-condition stack") );
		}

	GXGetParseState()->yy_start_stack[GXGetParseState()->yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --GXGetParseState()->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( _T("start-condition stack underflow") );

	BEGIN(GXGetParseState()->yy_start_stack[GXGetParseState()->yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return GXGetParseState()->yy_start_stack[GXGetParseState()->yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst TCHAR msg[] )
#else
static void yy_fatal_error( msg )
TCHAR msg[];
#endif
	{
	//(void) _ftprintf( stderr, _T("%s\n"), msg );
	msg;
	TRACE(_T("%s\n"), msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		GXGetParseState()->yytext[GXGetParseState()->yyleng] = GXGetParseState()->yy_hold_char; \
		GXGetParseState()->yy_c_buf_p = GXGetParseState()->yytext + n; \
		GXGetParseState()->yy_hold_char = *GXGetParseState()->yy_c_buf_p; \
		*GXGetParseState()->yy_c_buf_p = _T('\0'); \
		GXGetParseState()->yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( TCHAR *s1, yyconst TCHAR *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
TCHAR *s1;
yyconst TCHAR *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst TCHAR *s )
#else
static int yy_flex_strlen( s )
yyconst TCHAR *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (TCHAR *) in the following accommodates both
	 * implementations that use TCHAR* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (TCHAR *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	GX_XSfree( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
// #line 233 "exprscan.l"


/*------------------------------------------------------------------------*/
/*----------------------------------------*/
/*  Dummy wrap up function.               */

#undef yywrap
int yywrap()
{
	return 1;
}


/*----------------------------------------*/
/*  Initialize scanner text buffer        */

void	 __cdecl _gx_scanner_init (LPCTSTR buf)
{
	GXGetParseState()->position = 0;
	GXGetParseState()->input_pointer = 0;
	GXGetParseState()->input_length = (int)_tcslen(buf);
	GXGetParseState()->formula_buffer = buf;
	if (!GXGetParseState()->scanner_init_first)  yyrestart (yyin);
	GXGetParseState()->scanner_init_first = 0;
}


/*----------------------------------------*/
/*  Input from string for FLEX            */

static int  my_yyinput (TCHAR *buf, int max_size)
{
	int n, t;;

	t = GXGetParseState()->input_length - GXGetParseState()->input_pointer;
	n = (max_size <= t) ? max_size : t;
	if (n > 0)
	   {
		// QA: 31989 - #if Secure Code Cleanup.
		_tcsncpy(buf, GXGetParseState()->formula_buffer+GXGetParseState()->input_pointer, n);
	    GXGetParseState()->input_pointer += n;
	   }
	return n;
}


/*----------------------------------------*/
/*  Make character-based tokens.          */

static gxSToken mk_token (int si, int check_lotus_err, TokType type)
{
	// Unused:
	check_lotus_err, si;

	gxSToken    token;

	/*
	if (check_lotus_err && _gx_get_context_ptr(si)->lotus_mode)
	   {
	   token.type = GX_T_ERROR;
	   token.text = _gx_xs_error_msg(GX_SCAN_ERR_INVALID_LOTUS);
	   }
	else
	*/
	   {
	   token.type = type;
	   token.text = NULL;
	   }
	token.position = GXGetParseState()->position;
	GXGetParseState()->position += GXGetParseState()->yyleng;
	return token;
}
